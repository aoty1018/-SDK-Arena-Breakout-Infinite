																/* AB V1.0.0.59.0*/
																/* QQ 1787174068  */
																/* QQ 2278616922*/
// ScriptStruct  AkAudio.AKWaapiJsonObject
// Struct Size::0x0010
struct FAKWaapiJsonObject
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.Default
// Struct Size::0x0000
struct FDefault
{
};


// ScriptStruct  AkAudio.AkWaapiSubscriptionId
// Struct Size::0x0008
struct FAkWaapiSubscriptionId
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.JoinabilitySettings
// Struct Size::0x0014
struct FJoinabilitySettings
{
    FName                                         SessionName;                                                  // 0x0000(0x0008)
    bool                                          bPublicSearchable;                                            // 0x0008(0x0001)
    bool                                          bAllowInvites;                                                // 0x0009(0x0001)
    bool                                          bJoinViaPresence;                                             // 0x000A(0x0001)
    bool                                          bJoinViaPresenceFriendsOnly;                                  // 0x000B(0x0001)
    int32_t                                       MaxPlayers;                                                   // 0x000C(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0010(0x0004)
};


// ScriptStruct  CoreUObject.UniqueNetIdWrapper
// Struct Size::0x0001
struct FUniqueNetIdWrapper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.Guid
// Struct Size::0x0010
struct FGuid
{
    int32_t                                       A;                                                            // 0x0000(0x0004)
    int32_t                                       B;                                                            // 0x0004(0x0004)
    int32_t                                       C;                                                            // 0x0008(0x0004)
    int32_t                                       D;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector
// Struct Size::0x000C
struct FVector
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Vector4
// Struct Size::0x0010
struct FVector4
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector2D
// Struct Size::0x0008
struct FVector2D
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.TwoVectors
// Struct Size::0x0018
struct FTwoVectors
{
    FVector                                       v1;                                                           // 0x0000(0x000C)
    FVector                                       v2;                                                           // 0x000C(0x000C)
};


// ScriptStruct  CoreUObject.Plane
// Struct Size::0x0010
struct FPlane : public FVector
{
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Rotator
// Struct Size::0x000C
struct FRotator
{
    float                                         Pitch;                                                        // 0x0000(0x0004)
    float                                         Yaw;                                                          // 0x0004(0x0004)
    float                                         Roll;                                                         // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Quat
// Struct Size::0x0010
struct FQuat
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.PackedNormal
// Struct Size::0x0004
struct FPackedNormal
{
    char                                          X;                                                            // 0x0000(0x0001)
    char                                          Y;                                                            // 0x0001(0x0001)
    char                                          Z;                                                            // 0x0002(0x0001)
    char                                          W;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.PackedRGB10A2N
// Struct Size::0x0004
struct FPackedRGB10A2N
{
    int32_t                                       Packed;                                                       // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.PackedRGBA16N
// Struct Size::0x0008
struct FPackedRGBA16N
{
    int32_t                                       XY;                                                           // 0x0000(0x0004)
    int32_t                                       ZW;                                                           // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntPoint
// Struct Size::0x0008
struct FIntPoint
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntVector
// Struct Size::0x000C
struct FIntVector
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Color
// Struct Size::0x0004
struct FColor
{
    char                                          B;                                                            // 0x0000(0x0001)
    char                                          G;                                                            // 0x0001(0x0001)
    char                                          R;                                                            // 0x0002(0x0001)
    char                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.LinearColor
// Struct Size::0x0010
struct FLinearColor
{
    float                                         R;                                                            // 0x0000(0x0004)
    float                                         G;                                                            // 0x0004(0x0004)
    float                                         B;                                                            // 0x0008(0x0004)
    float                                         A;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Box
// Struct Size::0x001C
struct FBox
{
    FVector                                       Min;                                                          // 0x0000(0x000C)
    FVector                                       Max;                                                          // 0x000C(0x000C)
    char                                          IsValid;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  CoreUObject.Box2D
// Struct Size::0x0014
struct FBox2D
{
    FVector2D                                     Min;                                                          // 0x0000(0x0008)
    FVector2D                                     Max;                                                          // 0x0008(0x0008)
    char                                          bIsValid;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.BoxSphereBounds
// Struct Size::0x001C
struct FBoxSphereBounds
{
    FVector                                       Origin;                                                       // 0x0000(0x000C)
    FVector                                       BoxExtent;                                                    // 0x000C(0x000C)
    float                                         SphereRadius;                                                 // 0x0018(0x0004)
};


// ScriptStruct  CoreUObject.OrientedBox
// Struct Size::0x003C
struct FOrientedBox
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       AxisX;                                                        // 0x000C(0x000C)
    FVector                                       AxisY;                                                        // 0x0018(0x000C)
    FVector                                       AxisZ;                                                        // 0x0024(0x000C)
    float                                         ExtentX;                                                      // 0x0030(0x0004)
    float                                         ExtentY;                                                      // 0x0034(0x0004)
    float                                         ExtentZ;                                                      // 0x0038(0x0004)
};


// ScriptStruct  CoreUObject.Matrix
// Struct Size::0x0040
struct FMatrix
{
    FPlane                                        XPlane;                                                       // 0x0000(0x0010)
    FPlane                                        YPlane;                                                       // 0x0010(0x0010)
    FPlane                                        ZPlane;                                                       // 0x0020(0x0010)
    FPlane                                        WPlane;                                                       // 0x0030(0x0010)
};


// ScriptStruct  CoreUObject.InterpCurvePointFloat
// Struct Size::0x0014
struct FInterpCurvePointFloat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    float                                         OutVal;                                                       // 0x0004(0x0004)
    float                                         ArriveTangent;                                                // 0x0008(0x0004)
    float                                         LeaveTangent;                                                 // 0x000C(0x0004)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveFloat
// Struct Size::0x0018
struct FInterpCurveFloat
{
    TArray<FInterpCurvePointFloat>                Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector2D
// Struct Size::0x0020
struct FInterpCurvePointVector2D
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector2D                                     OutVal;                                                       // 0x0004(0x0008)
    FVector2D                                     ArriveTangent;                                                // 0x000C(0x0008)
    FVector2D                                     LeaveTangent;                                                 // 0x0014(0x0008)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector2D
// Struct Size::0x0018
struct FInterpCurveVector2D
{
    TArray<FInterpCurvePointVector2D>             Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector
// Struct Size::0x002C
struct FInterpCurvePointVector
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector                                       OutVal;                                                       // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector
// Struct Size::0x0018
struct FInterpCurveVector
{
    TArray<FInterpCurvePointVector>               Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointQuat
// Struct Size::0x0050
struct FInterpCurvePointQuat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FQuat                                         OutVal;                                                       // 0x0010(0x0010)
    FQuat                                         ArriveTangent;                                                // 0x0020(0x0010)
    FQuat                                         LeaveTangent;                                                 // 0x0030(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
};


// ScriptStruct  CoreUObject.InterpCurveQuat
// Struct Size::0x0018
struct FInterpCurveQuat
{
    TArray<FInterpCurvePointQuat>                 Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointTwoVectors
// Struct Size::0x0050
struct FInterpCurvePointTwoVectors
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FTwoVectors                                   OutVal;                                                       // 0x0004(0x0018)
    FTwoVectors                                   ArriveTangent;                                                // 0x001C(0x0018)
    FTwoVectors                                   LeaveTangent;                                                 // 0x0034(0x0018)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveTwoVectors
// Struct Size::0x0018
struct FInterpCurveTwoVectors
{
    TArray<FInterpCurvePointTwoVectors>           Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointLinearColor
// Struct Size::0x0038
struct FInterpCurvePointLinearColor
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FLinearColor                                  OutVal;                                                       // 0x0004(0x0010)
    FLinearColor                                  ArriveTangent;                                                // 0x0014(0x0010)
    FLinearColor                                  LeaveTangent;                                                 // 0x0024(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveLinearColor
// Struct Size::0x0018
struct FInterpCurveLinearColor
{
    TArray<FInterpCurvePointLinearColor>          Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.Transform
// Struct Size::0x0030
struct FTransform
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Translation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       Scale3D;                                                      // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  CoreUObject.RandomStream
// Struct Size::0x0008
struct FRandomStream
{
    int32_t                                       InitialSeed;                                                  // 0x0000(0x0004)
    int32_t                                       Seed;                                                         // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.DateTime
// Struct Size::0x0008
struct FDateTime
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumber
// Struct Size::0x0004
struct FFrameNumber
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.FrameRate
// Struct Size::0x0008
struct FFrameRate
{
    int32_t                                       Numerator;                                                    // 0x0000(0x0004)
    int32_t                                       Denominator;                                                  // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameTime
// Struct Size::0x0008
struct FFrameTime
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    float                                         SubFrame;                                                     // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.QualifiedFrameTime
// Struct Size::0x0010
struct FQualifiedFrameTime
{
    FFrameTime                                    Time;                                                         // 0x0000(0x0008)
    FFrameRate                                    Rate;                                                         // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Timecode
// Struct Size::0x0014
struct FTimecode
{
    int32_t                                       Hours;                                                        // 0x0000(0x0004)
    int32_t                                       Minutes;                                                      // 0x0004(0x0004)
    int32_t                                       Seconds;                                                      // 0x0008(0x0004)
    int32_t                                       Frames;                                                       // 0x000C(0x0004)
    bool                                          bDropFrameFormat;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.Timespan
// Struct Size::0x0008
struct FTimespan
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.SoftObjectPath
// Struct Size::0x0018
struct FSoftObjectPath
{
    FName                                         AssetPathName;                                                // 0x0000(0x0008)
    FString                                       SubPathString;                                                // 0x0008(0x0010)
};


// ScriptStruct  CoreUObject.SoftClassPath
// Struct Size::0x0018
struct FSoftClassPath : public FSoftObjectPath
{
};


// ScriptStruct  CoreUObject.PrimaryAssetType
// Struct Size::0x0008
struct FPrimaryAssetType
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.PrimaryAssetId
// Struct Size::0x0010
struct FPrimaryAssetId
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FName                                         PrimaryAssetName;                                             // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FallbackStruct
// Struct Size::0x0001
struct FFallbackStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.FloatRangeBound
// Struct Size::0x0008
struct FFloatRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FloatRange
// Struct Size::0x0010
struct FFloatRange
{
    FFloatRangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FFloatRangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int32RangeBound
// Struct Size::0x0008
struct FInt32RangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Range
// Struct Size::0x0010
struct FInt32Range
{
    FInt32RangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FInt32RangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumberRangeBound
// Struct Size::0x0008
struct FFrameNumberRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameNumber                                  Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameNumberRange
// Struct Size::0x0010
struct FFrameNumberRange
{
    FFrameNumberRangeBound                        LowerBound;                                                   // 0x0000(0x0008)
    FFrameNumberRangeBound                        UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FloatInterval
// Struct Size::0x0008
struct FFloatInterval
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Interval
// Struct Size::0x0008
struct FInt32Interval
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.PolyglotTextData
// Struct Size::0x00B8
struct FPolyglotTextData
{
    enum class ELocalizedTextSourceCategory       Category;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       NativeCulture;                                                // 0x0008(0x0010)
    FString                                       Namespace;                                                    // 0x0018(0x0010)
    FString                                       Key;                                                          // 0x0028(0x0010)
    FString                                       NativeString;                                                 // 0x0038(0x0010)
    TMap<FString,FString>                         LocalizedStrings;                                             // 0x0048(0x0050)
    bool                                          bIsMinimalPatch;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FText                                         CachedText;                                                   // 0x00A0(0x0018)
};


// ScriptStruct  CoreUObject.AutomationEvent
// Struct Size::0x0038
struct FAutomationEvent
{
    enum class EAutomationEventType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       Context;                                                      // 0x0018(0x0010)
    FGuid                                         Artifact;                                                     // 0x0028(0x0010)
};


// ScriptStruct  CoreUObject.AutomationExecutionEntry
// Struct Size::0x0058
struct FAutomationExecutionEntry
{
    FAutomationEvent                              Event;                                                        // 0x0000(0x0038)
    FString                                       Filename;                                                     // 0x0038(0x0010)
    int32_t                                       LineNumber;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     Timestamp;                                                    // 0x0050(0x0008)
};


// ScriptStruct  CoreUObject.ARFilter
// Struct Size::0x00F0
struct FARFilter
{
    TArray<FName>                                 PackageNames;                                                 // 0x0000(0x0010)
    TArray<FName>                                 PackagePaths;                                                 // 0x0010(0x0010)
    TArray<FName>                                 ObjectPaths;                                                  // 0x0020(0x0010)
    TArray<FName>                                 ClassNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0050]                                               // 0x0040(0x0050)
    TSet<FName>                                   RecursiveClassesExclusionSet;                                 // 0x0090(0x0050)
    bool                                          bRecursivePaths;                                              // 0x00E0(0x0001)
    bool                                          bRecursiveClasses;                                            // 0x00E1(0x0001)
    bool                                          bIncludeOnlyOnDiskAssets;                                     // 0x00E2(0x0001)
    char                                          pa_00E3[0x000D]                                               // 0x00E3(0x000D)
};


// ScriptStruct  CoreUObject.AssetBundleEntry
// Struct Size::0x0028
struct FAssetBundleEntry
{
    FPrimaryAssetId                               BundleScope;                                                  // 0x0000(0x0010)
    FName                                         BundleName;                                                   // 0x0010(0x0008)
    TArray<FSoftObjectPath>                       BundleAssets;                                                 // 0x0018(0x0010)
};


// ScriptStruct  CoreUObject.AssetBundleData
// Struct Size::0x0010
struct FAssetBundleData
{
    TArray<FAssetBundleEntry>                     Bundles;                                                      // 0x0000(0x0010)
};


// ScriptStruct  CoreUObject.AssetData
// Struct Size::0x0050
struct FAssetData
{
    FName                                         ObjectPath;                                                   // 0x0000(0x0008)
    FName                                         PackageName;                                                  // 0x0008(0x0008)
    FName                                         PackagePath;                                                  // 0x0010(0x0008)
    FName                                         AssetName;                                                    // 0x0018(0x0008)
    FName                                         AssetClass;                                                   // 0x0020(0x0008)
    char                                          pa_0028[0x0028]                                               // 0x0028(0x0028)
};


// ScriptStruct  GameplayTags.GameplayTag
// Struct Size::0x0008
struct FGameplayTag
{
    FName                                         TagName;                                                      // 0x0000(0x0008)
};


// ScriptStruct  Engine.DistributionLookupTable
// Struct Size::0x0020
struct FDistributionLookupTable
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    float                                         TimeBias;                                                     // 0x0004(0x0004)
    TArray<float>                                 Values;                                                       // 0x0008(0x0010)
    char                                          Op;                                                           // 0x0018(0x0001)
    char                                          EntryCount;                                                   // 0x0019(0x0001)
    char                                          EntryStride;                                                  // 0x001A(0x0001)
    char                                          SubEntryStride;                                               // 0x001B(0x0001)
    char                                          LockFlag;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.RawDistribution
// Struct Size::0x0020
struct FRawDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatDistribution
// Struct Size::0x0020
struct FFloatDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.VectorDistribution
// Struct Size::0x0020
struct FVectorDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.Vector4Distribution
// Struct Size::0x0020
struct FVector4Distribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatRK4SpringInterpolator
// Struct Size::0x0008
struct FFloatRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.VectorRK4SpringInterpolator
// Struct Size::0x0008
struct FVectorRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.FormatArgumentData
// Struct Size::0x0040
struct FFormatArgumentData
{
    FString                                       ArgumentName;                                                 // 0x0000(0x0010)
    enum class EFormatArgumentType                ArgumentValueType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FText                                         ArgumentValue;                                                // 0x0018(0x0018)
    int32_t                                       ArgumentValueInt;                                             // 0x0030(0x0004)
    float                                         ArgumentValueFloat;                                           // 0x0034(0x0004)
    enum class ETextGender                        ArgumentValueGender;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.ExpressionInput
// Struct Size::0x000C
struct FExpressionInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         ExpressionName;                                               // 0x0004(0x0008)
};


// ScriptStruct  Engine.MaterialAttributesInput
// Struct Size::0x0018
struct FMaterialAttributesInput : public FExpressionInput
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      PropertyConnectedBitmask;                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.ExpressionOutput
// Struct Size::0x0008
struct FExpressionOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
};


// ScriptStruct  Engine.MaterialInput
// Struct Size::0x000C
struct FMaterialInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         ExpressionName;                                               // 0x0004(0x0008)
};


// ScriptStruct  Engine.ColorMaterialInput
// Struct Size::0x000C
struct FColorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ScalarMaterialInput
// Struct Size::0x000C
struct FScalarMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ShadingModelMaterialInput
// Struct Size::0x000C
struct FShadingModelMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.VectorMaterialInput
// Struct Size::0x000C
struct FVectorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.Vector2MaterialInput
// Struct Size::0x000C
struct FVector2MaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.HitResult
// Struct Size::0x0098
struct FHitResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bStartPenetrating;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       FaceIndex;                                                    // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
    float                                         Distance;                                                     // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       ImpactPoint;                                                  // 0x001C(0x000C)
    FVector                                       Normal;                                                       // 0x0028(0x000C)
    FVector                                       ImpactNormal;                                                 // 0x0034(0x000C)
    FVector                                       TraceStart;                                                   // 0x0040(0x000C)
    FVector                                       TraceEnd;                                                     // 0x004C(0x000C)
    float                                         PenetrationDepth;                                             // 0x0058(0x0004)
    int32_t                                       item;                                                         // 0x005C(0x0004)
    char                                          ElementIndex;                                                 // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    TWeakObjectPtr<UPhysicalMaterial>             PhysMaterial;                                                 // 0x0064(0x0008)
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x006C(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0074(0x0008)
    FName                                         BoneName;                                                     // 0x007C(0x0008)
    FName                                         MyBoneName;                                                   // 0x0084(0x0008)
    char                                          pa_008C[0x000C]                                               // 0x008C(0x000C)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  InputCore.Key
// Struct Size::0x0018
struct FKey
{
    FName                                         KeyName;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.BranchingPointNotifyPayload
// Struct Size::0x0020
struct FBranchingPointNotifyPayload
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SimpleMemberReference
// Struct Size::0x0020
struct FSimpleMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FName                                         MemberName;                                                   // 0x0008(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.TickFunction
// Struct Size::0x0038
struct FTickFunction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ETickingGroup                      TickGroup;                                                    // 0x0008(0x0001)
    enum class ETickingGroup                      EndTickGroup;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x000A]                                               // 0x000A(0x000A)
    enum class ESkippableTickMode                 TickMode;                                                     // 0x0014(0x0001)
    char                                          bTickEvenWhenPaused;                                          // 0x0015(0x0001)
    char                                          bCanEverTick;                                                 // 0x0015(0x0001)
    char                                          bEnableTickOpt;                                               // 0x0015(0x0001)
    char                                          bStartWithTickEnabled;                                        // 0x0015(0x0001)
    char                                          bAllowTickOnDedicatedServer;                                  // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         TickInterval;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x001C]                                               // 0x001C(0x001C)
};


// ScriptStruct  Engine.ActorComponentTickFunction
// Struct Size::0x0040
struct FActorComponentTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.SubtitleCue
// Struct Size::0x0020
struct FSubtitleCue
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    float                                         Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpControlPoint
// Struct Size::0x001C
struct FInterpControlPoint
{
    FVector                                       PositionControlPoint;                                         // 0x0000(0x000C)
    bool                                          bPositionIsRelative;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x000F]                                               // 0x000D(0x000F)
};


// ScriptStruct  Engine.PlatformInterfaceDelegateResult
// Struct Size::0x0038
struct FPlatformInterfaceDelegateResult
{
    bool                                          bSuccessful;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPlatformInterfaceData                        Data;                                                         // 0x0008(0x0030)
};


// ScriptStruct  Engine.PlatformInterfaceData
// Struct Size::0x0030
struct FPlatformInterfaceData
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    enum class EPlatformInterfaceDataType         Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       IntValue;                                                     // 0x000C(0x0004)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StringValue;                                                  // 0x0018(0x0010)
    UObject*                                      ObjectValue;                                                  // 0x0028(0x0008)
};


// ScriptStruct  Engine.DebugFloatHistory
// Struct Size::0x0020
struct FDebugFloatHistory
{
    TArray<float>                                 Samples;                                                      // 0x0000(0x0010)
    float                                         MaxSamples;                                                   // 0x0010(0x0004)
    float                                         MinValue;                                                     // 0x0014(0x0004)
    float                                         MaxValue;                                                     // 0x0018(0x0004)
    bool                                          bAutoAdjustMinMax;                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.LatentActionInfo
// Struct Size::0x0018
struct FLatentActionInfo
{
    int32_t                                       Linkage;                                                      // 0x0000(0x0004)
    int32_t                                       UUID;                                                         // 0x0004(0x0004)
    FName                                         ExecutionFunction;                                            // 0x0008(0x0008)
    UObject*                                      CallbackTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.TimerHandle
// Struct Size::0x0008
struct FTimerHandle
{
    uint64_t                                      Handle;                                                       // 0x0000(0x0008)
};


// ScriptStruct  Engine.CollisionProfileName
// Struct Size::0x0008
struct FCollisionProfileName
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.GenericStruct
// Struct Size::0x0004
struct FGenericStruct
{
    int32_t                                       Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Engine.UserActivity
// Struct Size::0x0018
struct FUserActivity
{
    FString                                       ActionName;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.FastArraySerializerItem
// Struct Size::0x000C
struct FFastArraySerializerItem
{
    int32_t                                       ReplicationID;                                                // 0x0000(0x0004)
    int32_t                                       ReplicationKey;                                               // 0x0004(0x0004)
    int32_t                                       MostRecentArrayReplicationKey;                                // 0x0008(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffect
// Struct Size::0x0368
struct FActiveGameplayEffect : public FFastArraySerializerItem
{
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
    FGameplayEffectSpec                           Spec;                                                         // 0x0018(0x0298)
    FPredictionKey                                PredictionKey;                                                // 0x02B0(0x0010)
    float                                         StartServerWorldTime;                                         // 0x02C0(0x0004)
    float                                         CachedStartServerWorldTime;                                   // 0x02C4(0x0004)
    float                                         StartWorldTime;                                               // 0x02C8(0x0004)
    bool                                          bIsInhibited;                                                 // 0x02CC(0x0001)
    char                                          pa_02CD[0x009B]                                               // 0x02CD(0x009B)
};


// ScriptStruct  GameplayAbilities.PredictionKey
// Struct Size::0x0010
struct FPredictionKey
{
    UPackageMap*                                  PredictiveConnection;                                         // 0x0000(0x0008)
    int16_t                                       Current;                                                      // 0x0008(0x0002)
    int16_t                                       Base;                                                         // 0x000A(0x0002)
    bool                                          bIsStale;                                                     // 0x000C(0x0001)
    bool                                          bIsServerInitiated;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpec
// Struct Size::0x0298
struct FGameplayEffectSpec
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectAttributeCaptureSpecContainer  CapturedRelevantAttributes;                                   // 0x0018(0x0028)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Duration;                                                     // 0x0050(0x0004)
    float                                         Period;                                                       // 0x0054(0x0004)
    float                                         ChanceToApplyToTarget;                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FTagContainerAggregator                       CapturedSourceTags;                                           // 0x0060(0x0088)
    FTagContainerAggregator                       CapturedTargetTags;                                           // 0x00E8(0x0088)
    FGameplayTagContainer                         DynamicGrantedTags;                                           // 0x0170(0x0020)
    FGameplayTagContainer                         DynamicAssetTags;                                             // 0x0190(0x0020)
    TArray<FModifierSpec>                         Modifiers;                                                    // 0x01B0(0x0010)
    int32_t                                       StackCount;                                                   // 0x01C0(0x0004)
    char                                          bCompletedSourceAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bCompletedTargetAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bDurationLocked;                                              // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    TArray<FGameplayAbilitySpecDef>               GrantedAbilitySpecs;                                          // 0x01C8(0x0010)
    char                                          pa_01D8[0x00A0]                                               // 0x01D8(0x00A0)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0278(0x0018)
    float                                         Level;                                                        // 0x0290(0x0004)
    char                                          pa_0294[0x0004]                                               // 0x0294(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextHandle
// Struct Size::0x0018
struct FGameplayEffectContextHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecDef
// Struct Size::0x0090
struct FGameplayAbilitySpecDef
{
    UGameplayAbility*                             Ability;                                                      // 0x0000(0x0008)
    FScalableFloat                                LevelScalableFloat;                                           // 0x0008(0x0020)
    int32_t                                       InputID;                                                      // 0x0028(0x0004)
    enum class EGameplayEffectGrantedAbilityRemovePolicyRemovalPolicy;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    UObject*                                      SourceObject;                                                 // 0x0030(0x0008)
    char                                          pa_0038[0x0050]                                               // 0x0038(0x0050)
    FGameplayAbilitySpecHandle                    AssignedHandle;                                               // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandle
// Struct Size::0x0004
struct FGameplayAbilitySpecHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.ScalableFloat
// Struct Size::0x0020
struct FScalableFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCurveTableRowHandle                          Curve;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.CurveTableRowHandle
// Struct Size::0x0010
struct FCurveTableRowHandle
{
    UCurveTable*                                  CurveTable;                                                   // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.ModifierSpec
// Struct Size::0x0008
struct FModifierSpec
{
    float                                         EvaluatedMagnitude;                                           // 0x0000(0x0004)
    char                                          Priority;                                                     // 0x0004(0x0001)
    enum class EGameplayModsSelector              ModsSelector;                                                 // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  GameplayTags.GameplayTagContainer
// Struct Size::0x0020
struct FGameplayTagContainer
{
    TArray<FGameplayTag>                          GameplayTags;                                                 // 0x0000(0x0010)
    TArray<FGameplayTag>                          ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.TagContainerAggregator
// Struct Size::0x0088
struct FTagContainerAggregator
{
    FGameplayTagContainer                         CapturedActorTags;                                            // 0x0000(0x0020)
    FGameplayTagContainer                         CapturedSpecTags;                                             // 0x0020(0x0020)
    FGameplayTagContainer                         ScopedTags;                                                   // 0x0040(0x0020)
    char                                          pa_0060[0x0028]                                               // 0x0060(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpecContainer
// Struct Size::0x0028
struct FGameplayEffectAttributeCaptureSpecContainer
{
    TArray<FGameplayEffectAttributeCaptureSpec>   SourceAttributes;                                             // 0x0000(0x0010)
    TArray<FGameplayEffectAttributeCaptureSpec>   TargetAttributes;                                             // 0x0010(0x0010)
    bool                                          bHasNonSnapshottedAttributes;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpec
// Struct Size::0x0050
struct FGameplayEffectAttributeCaptureSpec
{
    FGameplayEffectAttributeCaptureDefinition     BackingDefinition;                                            // 0x0000(0x0040)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureDefinition
// Struct Size::0x0040
struct FGameplayEffectAttributeCaptureDefinition
{
    FGameplayAttribute                            AttributeToCapture;                                           // 0x0000(0x0038)
    enum class EGameplayEffectAttributeCaptureSourceAttributeSource;                                            // 0x0038(0x0001)
    bool                                          bSnapshot;                                                    // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAttribute
// Struct Size::0x0038
struct FGameplayAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    Attribute                                     Attribute;                                                    // 0x0010(0x0020)
    UStruct*                                      AttributeOwner;                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifiedAttribute
// Struct Size::0x0040
struct FGameplayEffectModifiedAttribute
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         TotalMagnitude;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectHandle
// Struct Size::0x0008
struct FActiveGameplayEffectHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    bool                                          bPassedFiltersAndWasExecuted;                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecHandle
// Struct Size::0x0010
struct FGameplayEffectSpecHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectRemovalInfo
// Struct Size::0x0020
struct FGameplayEffectRemovalInfo
{
    bool                                          bPrematureRemoval;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       StackCount;                                                   // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayEventData
// Struct Size::0x00B0
struct FGameplayEventData
{
    FGameplayTag                                  EventTag;                                                     // 0x0000(0x0008)
    AActor*                                       Instigator;                                                   // 0x0008(0x0008)
    AActor*                                       Target;                                                       // 0x0010(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0018(0x0008)
    UObject*                                      OptionalObject2;                                              // 0x0020(0x0008)
    FGameplayEffectContextHandle                  ContextHandle;                                                // 0x0028(0x0018)
    FGameplayTagContainer                         InstigatorTags;                                               // 0x0040(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0060(0x0020)
    float                                         EventMagnitude;                                               // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0088(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetDataHandle
// Struct Size::0x0028
struct FGameplayAbilityTargetDataHandle
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GameplayTasks.GameplayResourceSet
// Struct Size::0x0002
struct FGameplayResourceSet
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActivationInfo
// Struct Size::0x0018
struct FGameplayAbilityActivationInfo
{
    enum class EGameplayAbilityActivationMode     ActivationMode;                                               // 0x0000(0x0001)
    char                                          bCanBeEndedByOtherInstance;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPredictionKey                                PredictionKeyWhenActivated;                                   // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectQuery
// Struct Size::0x0150
struct FGameplayEffectQuery
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FDelegate                                     CustomMatchDelegate;                                          // 0x0010(0x0010)
    FGameplayTagQuery                             OwningTagQuery;                                               // 0x0020(0x0048)
    FGameplayTagQuery                             EffectTagQuery;                                               // 0x0068(0x0048)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x00B0(0x0048)
    FGameplayAttribute                            ModifyingAttribute;                                           // 0x00F8(0x0038)
    UObject*                                      EffectSource;                                                 // 0x0130(0x0008)
    UGameplayEffect*                              EffectDefinition;                                             // 0x0138(0x0008)
    char                                          pa_0140[0x0010]                                               // 0x0140(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagQuery
// Struct Size::0x0048
struct FGameplayTagQuery
{
    int32_t                                       TokenStreamVersion;                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGameplayTag>                          TagDictionary;                                                // 0x0008(0x0010)
    TArray<char>                                  QueryTokenStream;                                             // 0x0018(0x0010)
    FString                                       UserDescription;                                              // 0x0028(0x0010)
    FString                                       AutoDescription;                                              // 0x0038(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayCueParameters
// Struct Size::0x00B8
struct FGameplayCueParameters
{
    float                                         NormalizedMagnitude;                                          // 0x0000(0x0004)
    float                                         RawMagnitude;                                                 // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
    FGameplayTag                                  MatchedTagName;                                               // 0x0020(0x0008)
    FGameplayTag                                  OriginalTag;                                                  // 0x0028(0x0008)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    FVector                                       Location;                                                     // 0x0070(0x000C)
    FVector                                       Normal;                                                       // 0x007C(0x000C)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0088(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0090(0x0008)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x0098(0x0008)
    TWeakObjectPtr<UPhysicalMaterial>             PhysicalMaterial;                                             // 0x00A0(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x00A8(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x00AC(0x0004)
    TWeakObjectPtr<USceneComponent>               TargetAttachComponent;                                        // 0x00B0(0x0008)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecForRPC
// Struct Size::0x0078
struct FGameplayEffectSpecForRPC
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0018(0x0018)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    float                                         Level;                                                        // 0x0070(0x0004)
    float                                         AbilityLevel;                                                 // 0x0074(0x0004)
};


// ScriptStruct  GameplayAbilities.ServerAbilityRPCBatch
// Struct Size::0x0048
struct FServerAbilityRPCBatch
{
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0008(0x0010)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0018(0x0028)
    bool                                          InputPressed;                                                 // 0x0040(0x0001)
    bool                                          Ended;                                                        // 0x0041(0x0001)
    bool                                          Started;                                                      // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
};


// ScriptStruct  Engine.Vector
// Struct Size::0x000C
struct FVector : public FVector
{
};


// ScriptStruct  Engine.FastArraySerializer
// Struct Size::0x0110
struct FFastArraySerializer
{
    char                                          pa_0000[0x005C]                                               // 0x0000(0x005C)
    int32_t                                       ArrayReplicationKey;                                          // 0x005C(0x0004)
    char                                          pa_0060[0x00A8]                                               // 0x0060(0x00A8)
    enum class EFastArraySerializerDeltaFlags     DeltaFlags;                                                   // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyMap
// Struct Size::0x0128
struct FReplicatedPredictionKeyMap : public FFastArraySerializer
{
    char                                          pa_0110[0x0008]                                               // 0x0110(0x0008)
    TArray<FReplicatedPredictionKeyItem>          PredictionKeys;                                               // 0x0118(0x0010)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyItem
// Struct Size::0x0020
struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.MinimalReplicationTagCountMap
// Struct Size::0x0060
struct FMinimalReplicationTagCountMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0050(0x0008)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCueContainer
// Struct Size::0x0130
struct FActiveGameplayCueContainer : public FFastArraySerializer
{
    TArray<FActiveGameplayCue>                    GameplayCues;                                                 // 0x0110(0x0010)
    char                                          pa_0120[0x0008]                                               // 0x0120(0x0008)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0128(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCue
// Struct Size::0x00E8
struct FActiveGameplayCue : public FFastArraySerializerItem
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0010)
    FGameplayCueParameters                        Parameters;                                                   // 0x0028(0x00B8)
    bool                                          bPredictivelyRemoved;                                         // 0x00E0(0x0001)
    char                                          pa_00E1[0x0007]                                               // 0x00E1(0x0007)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectsContainer
// Struct Size::0x04D0
struct FActiveGameplayEffectsContainer : public FFastArraySerializer
{
    char                                          pa_0110[0x0028]                                               // 0x0110(0x0028)
    TArray<FActiveGameplayEffect>                 GameplayEffects;                                              // 0x0138(0x0010)
    char                                          pa_0148[0x0360]                                               // 0x0148(0x0360)
    TArray<UGameplayEffect*>                      ApplicationImmunityQueryEffects;                              // 0x04A8(0x0010)
    char                                          pa_04B8[0x0018]                                               // 0x04B8(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityLocalAnimMontage
// Struct Size::0x0028
struct FGameplayAbilityLocalAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    bool                                          PlayBit;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0010)
    UGameplayAbility*                             AnimatingAbility;                                             // 0x0020(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityRepAnimMontage
// Struct Size::0x0058
struct FGameplayAbilityRepAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         position;                                                     // 0x000C(0x0004)
    float                                         BlendTime;                                                    // 0x0010(0x0004)
    char                                          NextSectionID;                                                // 0x0014(0x0001)
    char                                          bRepPosition;                                                 // 0x0015(0x0001)
    char                                          IsStopped;                                                    // 0x0015(0x0001)
    char                                          ForcePlayBit;                                                 // 0x0015(0x0001)
    char                                          SkipPositionCorrection;                                       // 0x0015(0x0001)
    char                                          bSkipPlayRate;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0010)
    char                                          SectionIdToPlay;                                              // 0x0028(0x0001)
    char                                          bStopAllMontages;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    TArray<FName>                                 SectionLoopCountKeys;                                         // 0x0030(0x0010)
    TArray<int32_t>                               SectionLoopCountValues;                                       // 0x0040(0x0010)
    char                                          bRepStop;                                                     // 0x0050(0x0001)
    char                                          bRepPendingForWeapon;                                         // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecContainer
// Struct Size::0x0128
struct FGameplayAbilitySpecContainer : public FFastArraySerializer
{
    TArray<FGameplayAbilitySpec>                  Items;                                                        // 0x0110(0x0010)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0120(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpec
// Struct Size::0x00E8
struct FGameplayAbilitySpec : public FFastArraySerializerItem
{
    FGameplayAbilitySpecHandle                    Handle;                                                       // 0x000C(0x0004)
    UGameplayAbility*                             Ability;                                                      // 0x0010(0x0008)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       InputID;                                                      // 0x001C(0x0004)
    UObject*                                      SourceObject;                                                 // 0x0020(0x0008)
    char                                          ActiveCount;                                                  // 0x0028(0x0001)
    char                                          InputPressed;                                                 // 0x0029(0x0001)
    char                                          RemoveAfterActivation;                                        // 0x0029(0x0001)
    char                                          PendingRemove;                                                // 0x0029(0x0001)
    char                                          bActivateOnce;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FGameplayAbilityActivationInfo                ActivationInfo;                                               // 0x0030(0x0018)
    FGameplayTagContainer                         DynamicAbilityTags;                                           // 0x0048(0x0020)
    TArray<UGameplayAbility*>                     NonReplicatedInstances;                                       // 0x0068(0x0010)
    TArray<UGameplayAbility*>                     ReplicatedInstances;                                          // 0x0078(0x0010)
    FActiveGameplayEffectHandle                   GameplayEffectHandle;                                         // 0x0088(0x0008)
    char                                          pa_0090[0x0050]                                               // 0x0090(0x0050)
    char                                          RequestCount;                                                 // 0x00E0(0x0001)
    char                                          MaxRequestCount;                                              // 0x00E1(0x0001)
    char                                          pa_00E2[0x0006]                                               // 0x00E2(0x0006)
};


// ScriptStruct  GameplayAbilities.AttributeDefaults
// Struct Size::0x0010
struct FAttributeDefaults
{
    UAttributeSet*                                Attributes;                                                   // 0x0000(0x0008)
    UDataTable*                                   DefaultStartingTable;                                         // 0x0008(0x0008)
};


// ScriptStruct  OnlineSubsystemUtils.BlueprintSessionResult
// Struct Size::0x0108
struct FBlueprintSessionResult
{
    char                                          pa_0000[0x0108]                                               // 0x0000(0x0108)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductInfo
// Struct Size::0x00A8
struct FInAppPurchaseProductInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.OnlineProxyStoreOffer
// Struct Size::0x0110
struct FOnlineProxyStoreOffer
{
    FString                                       OfferId;                                                      // 0x0000(0x0010)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Description;                                                  // 0x0028(0x0018)
    FText                                         LongDescription;                                              // 0x0040(0x0018)
    FText                                         RegularPriceText;                                             // 0x0058(0x0018)
    int32_t                                       RegularPrice;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         PriceText;                                                    // 0x0078(0x0018)
    int32_t                                       NumericPrice;                                                 // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0098(0x0010)
    FDateTime                                     ReleaseDate;                                                  // 0x00A8(0x0008)
    FDateTime                                     ExpirationDate;                                               // 0x00B0(0x0008)
    enum class EOnlineProxyStoreOfferDiscountType DiscountType;                                                 // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00C0(0x0050)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseRestoreInfo
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       ReceiptData;                                                  // 0x0010(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  SlateCore.Geometry
// Struct Size::0x0038
struct FGeometry
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  SlateCore.SlateBrush
// Struct Size::0x0090
struct FSlateBrush
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FVector2D                                     ImageSize;                                                    // 0x0008(0x0008)
    FMargin                                       Margin;                                                       // 0x0010(0x0010)
    FSlateColor                                   TintColor;                                                    // 0x0020(0x0028)
    UObject*                                      ResourceObject;                                               // 0x0048(0x0008)
    FName                                         ResourceName;                                                 // 0x0050(0x0008)
    FBox2D                                        UVRegion;                                                     // 0x0058(0x0014)
    enum class ESlateBrushDrawType                DrawAs;                                                       // 0x006C(0x0001)
    enum class ESlateBrushTileType                Tiling;                                                       // 0x006D(0x0001)
    enum class ESlateBrushMirrorType              Mirroring;                                                    // 0x006E(0x0001)
    enum class ESlateBrushImageType               ImageType;                                                    // 0x006F(0x0001)
    char                                          UseImageUV;                                                   // 0x0070(0x0001)
    char                                          IsDrawAsCircle;                                               // 0x0070(0x0001)
    char                                          pa_0071[0x0017]                                               // 0x0071(0x0017)
    char                                          bIsDynamicallyLoaded;                                         // 0x0088(0x0001)
    char                                          bHasUObject;                                                  // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SlateCore.SlateColor
// Struct Size::0x0028
struct FSlateColor
{
    FLinearColor                                  SpecifiedColor;                                               // 0x0000(0x0010)
    enum class ESlateColorStylingMode             ColorUseRule;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  SlateCore.Margin
// Struct Size::0x0010
struct FMargin
{
    float                                         Left;                                                         // 0x0000(0x0004)
    float                                         Top;                                                          // 0x0004(0x0004)
    float                                         Right;                                                        // 0x0008(0x0004)
    float                                         Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UMG.EventReply
// Struct Size::0x00B8
struct FEventReply
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
};


// ScriptStruct  SlateCore.InputEvent
// Struct Size::0x0018
struct FInputEvent
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SlateCore.PointerEvent
// Struct Size::0x0070
struct FPointerEvent : public FInputEvent
{
    char                                          pa_0018[0x0058]                                               // 0x0018(0x0058)
};


// ScriptStruct  UMG.WidgetTransform
// Struct Size::0x0024
struct FWidgetTransform
{
    FVector2D                                     Translation;                                                  // 0x0000(0x0008)
    FVector2D                                     Scale;                                                        // 0x0008(0x0008)
    FVector2D                                     Scale;                                                        // 0x0010(0x0008)
    FVector2D                                     Shear;                                                        // 0x0018(0x0008)
    float                                         Angle;                                                        // 0x0020(0x0004)
};


// ScriptStruct  UMG.PaintContext
// Struct Size::0x0030
struct FPaintContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  SlateCore.CharacterEvent
// Struct Size::0x0020
struct FCharacterEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.KeyEvent
// Struct Size::0x0038
struct FKeyEvent : public FInputEvent
{
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
};


// ScriptStruct  SlateCore.NavigationEvent
// Struct Size::0x0020
struct FNavigationEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.AnalogInputEvent
// Struct Size::0x0040
struct FAnalogInputEvent : public FKeyEvent
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  SlateCore.SlateFontInfo
// Struct Size::0x0060
struct FSlateFontInfo
{
    UObject*                                      FontObject;                                                   // 0x0000(0x0008)
    UObject*                                      FontMaterial;                                                 // 0x0008(0x0008)
    FFontOutlineSettings                          OutlineSettings;                                              // 0x0010(0x0020)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FName                                         TypefaceFontName;                                             // 0x0040(0x0008)
    int32_t                                       Size;                                                         // 0x0048(0x0004)
    int32_t                                       Size;                                                         // 0x004C(0x0004)
    int32_t                                       LetterSpacing;                                                // 0x0050(0x0004)
    int32_t                                       LetterSpacing;                                                // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  SlateCore.FontOutlineSettings
// Struct Size::0x0020
struct FFontOutlineSettings
{
    int32_t                                       OutlineSize;                                                  // 0x0000(0x0004)
    bool                                          bSeparateFillAlpha;                                           // 0x0004(0x0001)
    bool                                          bApplyOutlineToDropShadows;                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    UObject*                                      OutlineMaterial;                                              // 0x0008(0x0008)
    FLinearColor                                  OutlineColor;                                                 // 0x0010(0x0010)
};


// ScriptStruct  SlateCore.SlateWidgetStyle
// Struct Size::0x0008
struct FSlateWidgetStyle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.TableRowStyle
// Struct Size::0x0838
struct FTableRowStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   SelectorFocusedBrush;                                         // 0x0008(0x0090)
    FSlateBrush                                   ActiveHoveredBrush;                                           // 0x0098(0x0090)
    FSlateBrush                                   ActiveBrush;                                                  // 0x0128(0x0090)
    FSlateBrush                                   InactiveHoveredBrush;                                         // 0x01B8(0x0090)
    FSlateBrush                                   InactiveBrush;                                                // 0x0248(0x0090)
    FSlateBrush                                   EvenRowBackgroundHoveredBrush;                                // 0x02D8(0x0090)
    FSlateBrush                                   EvenRowBackgroundBrush;                                       // 0x0368(0x0090)
    FSlateBrush                                   OddRowBackgroundHoveredBrush;                                 // 0x03F8(0x0090)
    FSlateBrush                                   OddRowBackgroundBrush;                                        // 0x0488(0x0090)
    FSlateColor                                   TextColor;                                                    // 0x0518(0x0028)
    FSlateColor                                   SelectedTextColor;                                            // 0x0540(0x0028)
    FSlateBrush                                   DropIndicator;                                                // 0x0568(0x0090)
    FSlateBrush                                   DropIndicator;                                                // 0x05F8(0x0090)
    FSlateBrush                                   DropIndicator;                                                // 0x0688(0x0090)
    FSlateBrush                                   ActiveHighlightedBrush;                                       // 0x0718(0x0090)
    FSlateBrush                                   InactiveHighlightedBrush;                                     // 0x07A8(0x0090)
};


// ScriptStruct  SlateCore.ComboBoxStyle
// Struct Size::0x0420
struct FComboBoxStyle : public FSlateWidgetStyle
{
    FComboButtonStyle                             ComboButtonStyle;                                             // 0x0008(0x03E8)
    FSlateSound                                   PressedSlateSound;                                            // 0x03F0(0x0018)
    FSlateSound                                   SelectionChangeSlateSound;                                    // 0x0408(0x0018)
};


// ScriptStruct  SlateCore.SlateSound
// Struct Size::0x0018
struct FSlateSound
{
    UObject*                                      ResourceObject;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  SlateCore.ComboButtonStyle
// Struct Size::0x03E8
struct FComboButtonStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  ButtonStyle;                                                  // 0x0008(0x0298)
    FSlateBrush                                   DownArrowImage;                                               // 0x02A0(0x0090)
    FVector2D                                     ShadowOffset;                                                 // 0x0330(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0338(0x0010)
    FSlateBrush                                   MenuBorderBrush;                                              // 0x0348(0x0090)
    FMargin                                       MenuBorderPadding;                                            // 0x03D8(0x0010)
};


// ScriptStruct  SlateCore.ButtonStyle
// Struct Size::0x0298
struct FButtonStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   Normal;                                                       // 0x0008(0x0090)
    FSlateBrush                                   Hovered;                                                      // 0x0098(0x0090)
    FSlateBrush                                   Pressed;                                                      // 0x0128(0x0090)
    FSlateBrush                                   Disabled;                                                     // 0x01B8(0x0090)
    FMargin                                       NormalPadding;                                                // 0x0248(0x0010)
    FMargin                                       PressedPadding;                                               // 0x0258(0x0010)
    FSlateSound                                   PressedSlateSound;                                            // 0x0268(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x0280(0x0018)
};


// ScriptStruct  UMG.ShapedTextOptions
// Struct Size::0x0003
struct FShapedTextOptions
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    enum class ETextShapingMethod                 TextShapingMethod;                                            // 0x0001(0x0001)
    enum class ETextFlowDirection                 TextFlowDirection;                                            // 0x0002(0x0001)
};


// ScriptStruct  Slate.VirtualKeyboardOptions
// Struct Size::0x0001
struct FVirtualKeyboardOptions
{
    bool                                          bEnableAutocorrect;                                           // 0x0000(0x0001)
};


// ScriptStruct  SlateCore.EditableTextStyle
// Struct Size::0x0240
struct FEditableTextStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FSlateBrush                                   BackgroundImageSelected;                                      // 0x0090(0x0090)
    FSlateBrush                                   BackgroundImageComposing;                                     // 0x0120(0x0090)
    FSlateBrush                                   CaretImage;                                                   // 0x01B0(0x0090)
};


// ScriptStruct  SlateCore.EditableTextBoxStyle
// Struct Size::0x0868
struct FEditableTextBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundImageNormal;                                        // 0x0008(0x0090)
    FSlateBrush                                   BackgroundImageHovered;                                       // 0x0098(0x0090)
    FSlateBrush                                   BackgroundImageFocused;                                       // 0x0128(0x0090)
    FSlateBrush                                   BackgroundImageReadOnly;                                      // 0x01B8(0x0090)
    FMargin                                       Padding;                                                      // 0x0248(0x0010)
    FSlateFontInfo                                Font;                                                         // 0x0258(0x0060)
    FSlateColor                                   ForegroundColor;                                              // 0x02B8(0x0028)
    FSlateColor                                   BackgroundColor;                                              // 0x02E0(0x0028)
    FSlateColor                                   ReadOnlyForegroundColor;                                      // 0x0308(0x0028)
    FMargin                                       HScrollBarPadding;                                            // 0x0330(0x0010)
    FMargin                                       VScrollBarPadding;                                            // 0x0340(0x0010)
    FScrollBarStyle                               ScrollBarStyle;                                               // 0x0350(0x0518)
};


// ScriptStruct  SlateCore.ScrollBarStyle
// Struct Size::0x0518
struct FScrollBarStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   HorizontalBackgroundImage;                                    // 0x0008(0x0090)
    FSlateBrush                                   VerticalBackgroundImage;                                      // 0x0098(0x0090)
    FSlateBrush                                   VerticalTopSlotImage;                                         // 0x0128(0x0090)
    FSlateBrush                                   HorizontalTopSlotImage;                                       // 0x01B8(0x0090)
    FSlateBrush                                   VerticalBottomSlotImage;                                      // 0x0248(0x0090)
    FSlateBrush                                   HorizontalBottomSlotImage;                                    // 0x02D8(0x0090)
    FSlateBrush                                   NormalThumbImage;                                             // 0x0368(0x0090)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x03F8(0x0090)
    FSlateBrush                                   DraggedThumbImage;                                            // 0x0488(0x0090)
};


// ScriptStruct  Slate.InputChord
// Struct Size::0x0020
struct FInputChord
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    char                                          bShift;                                                       // 0x0018(0x0001)
    char                                          bCtrl;                                                        // 0x0018(0x0001)
    char                                          bAlt;                                                         // 0x0018(0x0001)
    char                                          bCmd;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SlateCore.TextBlockStyle
// Struct Size::0x0290
struct FTextBlockStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FVector2D                                     ShadowOffset;                                                 // 0x0090(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0098(0x0010)
    FSlateColor                                   SelectedBackgroundColor;                                      // 0x00A8(0x0028)
    FLinearColor                                  HighlightColor;                                               // 0x00D0(0x0010)
    FSlateBrush                                   HighlightShape;                                               // 0x00E0(0x0090)
    FSlateBrush                                   StrikeBrush;                                                  // 0x0170(0x0090)
    FSlateBrush                                   UnderlineBrush;                                               // 0x0200(0x0090)
};


// ScriptStruct  SlateCore.SpinBoxStyle
// Struct Size::0x0310
struct FSpinBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundBrush;                                              // 0x0008(0x0090)
    FSlateBrush                                   HoveredBackgroundBrush;                                       // 0x0098(0x0090)
    FSlateBrush                                   ActiveFillBrush;                                              // 0x0128(0x0090)
    FSlateBrush                                   InactiveFillBrush;                                            // 0x01B8(0x0090)
    FSlateBrush                                   ArrowsImage;                                                  // 0x0248(0x0090)
    FSlateColor                                   ForegroundColor;                                              // 0x02D8(0x0028)
    FMargin                                       TextPadding;                                                  // 0x0300(0x0010)
};


// ScriptStruct  Slate.Anchors
// Struct Size::0x0010
struct FAnchors
{
    FVector2D                                     Minimum;                                                      // 0x0000(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0008(0x0008)
};


// ScriptStruct  SlateCore.FocusEvent
// Struct Size::0x0008
struct FFocusEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.MotionEvent
// Struct Size::0x0048
struct FMotionEvent : public FInputEvent
{
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
};


// ScriptStruct  UMG.AnimationEventBinding
// Struct Size::0x0028
struct FAnimationEventBinding
{
    UWidgetAnimation*                             Animation;                                                    // 0x0000(0x0008)
    FDelegate                                     Delegate;                                                     // 0x0008(0x0010)
    enum class EWidgetAnimationEvent              AnimationEvent;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         UserTag;                                                      // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UMG.NamedSlotBinding
// Struct Size::0x0010
struct FNamedSlotBinding
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UWidget*                                      Content;                                                      // 0x0008(0x0008)
};


// ScriptStruct  MFPluginWrapper.MSDKNoticeReturnData
// Struct Size::0x0060
struct FMSDKNoticeReturnData
{
    int32_t                                       MethodNameID;                                                 // 0x0000(0x0004)
    int32_t                                       RetCode;                                                      // 0x0004(0x0004)
    FString                                       RetMsg;                                                       // 0x0008(0x0010)
    int32_t                                       ThirdCode;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ThirdMsg;                                                     // 0x0020(0x0010)
    FString                                       extraJson;                                                    // 0x0030(0x0010)
    FString                                       RequestID;                                                    // 0x0040(0x0010)
    TArray<FMSDKNoticeInfo>                       NoticeInfoList;                                               // 0x0050(0x0010)
};


// ScriptStruct  MFPluginWrapper.MSDKNoticeInfo
// Struct Size::0x00A0
struct FMSDKNoticeInfo
{
    int32_t                                       NoticeID;                                                     // 0x0000(0x0004)
    int32_t                                       NoticeType;                                                   // 0x0004(0x0004)
    FString                                       NoticeGroup;                                                  // 0x0008(0x0010)
    int32_t                                       BeginTime;                                                    // 0x0018(0x0004)
    int32_t                                       EndTime;                                                      // 0x001C(0x0004)
    int32_t                                       UpdateTime;                                                   // 0x0020(0x0004)
    int32_t                                       Order;                                                        // 0x0024(0x0004)
    int32_t                                       ContentType;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       Language;                                                     // 0x0030(0x0010)
    FMSDKNoticeTextInfo                           TextInfo;                                                     // 0x0040(0x0030)
    TArray<FMSDKNoticePictureInfo>                PicUrlList;                                                   // 0x0070(0x0010)
    FString                                       WebUrl;                                                       // 0x0080(0x0010)
    FString                                       extraJson;                                                    // 0x0090(0x0010)
};


// ScriptStruct  MFPluginWrapper.MSDKNoticePictureInfo
// Struct Size::0x0048
struct FMSDKNoticePictureInfo
{
    FString                                       NoticePicUrl;                                                 // 0x0000(0x0010)
    FString                                       NoticePicHashcode;                                            // 0x0010(0x0010)
    FString                                       NoticePicTitle;                                               // 0x0020(0x0010)
    FString                                       NoticePicSize;                                                // 0x0030(0x0010)
    int32_t                                       ScreenDir;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MFPluginWrapper.MSDKNoticeTextInfo
// Struct Size::0x0030
struct FMSDKNoticeTextInfo
{
    FString                                       NoticeTitle;                                                  // 0x0000(0x0010)
    FString                                       NoticeContent;                                                // 0x0010(0x0010)
    FString                                       NoticeRedirectUrl;                                            // 0x0020(0x0010)
};


// ScriptStruct  MFClimateRuntime.MFClimateLayerPreset
// Struct Size::0x0028
struct FMFClimateLayerPreset
{
    FString                                       PresetName;                                                   // 0x0000(0x0010)
    TArray<FMFClimateWeatherLayerPresetItem>      Items;                                                        // 0x0010(0x0010)
    float                                         Weight;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateWeatherLayerPresetItem
// Struct Size::0x0010
struct FMFClimateWeatherLayerPresetItem
{
    ULevelSequence*                               Sequence;                                                     // 0x0000(0x0008)
    float                                         Weight;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateLightningEvent
// Struct Size::0x0024
struct FMFClimateLightningEvent
{
    bool                                          bForceRejectPrevious;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       StartPosition;                                                // 0x0004(0x000C)
    FVector                                       EndPosition;                                                  // 0x0010(0x000C)
    float                                         NormalizedReturnStrikeEnergy;                                 // 0x001C(0x0004)
    int32_t                                       ReStrikeCount;                                                // 0x0020(0x0004)
};


// ScriptStruct  MFEnvironment.MFEnvBurnBlockBound
// Struct Size::0x0010
struct FMFEnvBurnBlockBound
{
    FVector                                       CenterPos;                                                    // 0x0000(0x000C)
    int16_t                                       RotYaw;                                                       // 0x000C(0x0002)
    char                                          Extent;                                                       // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
};


// ScriptStruct  SGFramework.ItemGridInfo
// Struct Size::0x0008
struct FItemGridInfo
{
    int32_t                                       Row;                                                          // 0x0000(0x0004)
    int32_t                                       Column;                                                       // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.InventoryAnimPoseInfo
// Struct Size::0x0018
struct FInventoryAnimPoseInfo
{
    bool                                          bHasInitialized;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimMontage*                                 AnimMontage;                                                  // 0x0008(0x0008)
    float                                         PositionToStay;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGSwitchWeaponIntent
// Struct Size::0x0018
struct FSGSwitchWeaponIntent
{
    int32_t                                       PredKey;                                                      // 0x0000(0x0004)
    bool                                          bConfirmedByServer;                                           // 0x0004(0x0001)
    bool                                          bTakeUpWeapon;                                                // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    ASGWeapon*                                    DestWeap;                                                     // 0x0008(0x0008)
    float                                         FinishTimeStamp;                                              // 0x0010(0x0004)
    enum class ESwitchWeaponIntentRejectReason    RejectReason;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.DamageEvent
// Struct Size::0x0010
struct FDamageEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UDamageType*                                  DamageTypeClass;                                              // 0x0008(0x0008)
};


// ScriptStruct  Engine.PointDamageEvent
// Struct Size::0x00B8
struct FPointDamageEvent : public FDamageEvent
{
    float                                         Damage;                                                       // 0x0010(0x0004)
    FVector                                       ShotDirection;                                                // 0x0014(0x000C)
    FHitResult                                    HitInfo;                                                      // 0x0020(0x0098)
};


// ScriptStruct  SGFramework.SGPointDamageEvent
// Struct Size::0x0128
struct FSGPointDamageEvent : public FPointDamageEvent
{
    enum class EDamageTypeEnum                    DamageTypeEnum;                                               // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FSGBulletID                                   BulletID;                                                     // 0x00C0(0x0010)
    float                                         Impulse;                                                      // 0x00D0(0x0004)
    enum class EHitGroupType                      HitGroup;                                                     // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    AActor*                                       AmmoClass;                                                    // 0x00D8(0x0008)
    enum class EHeadHitSubGroupType               HeadHitSubGroup;                                              // 0x00E0(0x0001)
    enum class ESGZoomType                        CaptureWeaponZoomType;                                        // 0x00E1(0x0001)
    char                                          FireModeNum;                                                  // 0x00E2(0x0001)
    char                                          HitFlags;                                                     // 0x00E3(0x0001)
    bool                                          bIsBestHit;                                                   // 0x00E4(0x0001)
    char                                          pa_00E5[0x0003]                                               // 0x00E5(0x0003)
    TArray<FVector>                               ImportantLocations;                                           // 0x00E8(0x0010)
    FBulletInfo                                   BulletInfo;                                                   // 0x00F8(0x0020)
    ASGInventory*                                 HitMovableArmor;                                              // 0x0118(0x0008)
    bool                                          bTakerIsCrouch;                                               // 0x0120(0x0001)
    bool                                          bTakerIsProne;                                                // 0x0121(0x0001)
    char                                          pa_0122[0x0006]                                               // 0x0122(0x0006)
};


// ScriptStruct  SGFramework.BulletInfo
// Struct Size::0x0020
struct FBulletInfo
{
    float                                         CurSpeed;                                                     // 0x0000(0x0004)
    float                                         DropDistance;                                                 // 0x0004(0x0004)
    FVector                                       SpawnLocation;                                                // 0x0008(0x000C)
    float                                         FlyDistance;                                                  // 0x0014(0x0004)
    float                                         FlyTime;                                                      // 0x0018(0x0004)
    float                                         DamageScale;                                                  // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGBulletID
// Struct Size::0x0010
struct FSGBulletID
{
    int64_t                                       FireID;                                                       // 0x0000(0x0008)
    char                                          ShotIndex;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  SGFramework.TakeDamageInfo
// Struct Size::0x0038
struct FTakeDamageInfo
{
    AController*                                  CauserController;                                             // 0x0000(0x0008)
    AController*                                  VictimController;                                             // 0x0008(0x0008)
    APawn*                                        CauserPawn;                                                   // 0x0010(0x0008)
    APawn*                                        VictimPawn;                                                   // 0x0018(0x0008)
    AActor*                                       CauserWeapon;                                                 // 0x0020(0x0008)
    float                                         AttemptedDamage;                                              // 0x0028(0x0004)
    float                                         ActuralDamage;                                                // 0x002C(0x0004)
    UDamageEventObject*                           DamageEventObject;                                            // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.KillOtherStatis
// Struct Size::0x0020
struct FKillOtherStatis
{
    float                                         AllDamage;                                                    // 0x0000(0x0004)
    int32_t                                       HitCount;                                                     // 0x0004(0x0004)
    float                                         AllArmorReduceDamage;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       ArmorId;                                                      // 0x0010(0x0008)
    enum class ECharacterDeathType                DeathType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.KillInfo
// Struct Size::0x0050
struct FKillInfo
{
    AController*                                  KillerController;                                             // 0x0000(0x0008)
    AController*                                  KilledController;                                             // 0x0008(0x0008)
    APawn*                                        KillerPawn;                                                   // 0x0010(0x0008)
    APawn*                                        KilledPawn;                                                   // 0x0018(0x0008)
    AActor*                                       KillerWeapon;                                                 // 0x0020(0x0008)
    UDamageEventObject*                           DamageEventObject;                                            // 0x0028(0x0008)
    int64_t                                       KillerWeaponId;                                               // 0x0030(0x0008)
    int64_t                                       KilledWeaponId;                                               // 0x0038(0x0008)
    int32_t                                       KillerBulletPenetrateFactor;                                  // 0x0040(0x0004)
    int32_t                                       KilledBulletPenetrateFactor;                                  // 0x0044(0x0004)
    int32_t                                       KillDistance;                                                 // 0x0048(0x0004)
    bool                                          bDBNO;                                                        // 0x004C(0x0001)
    bool                                          bHitArmor;                                                    // 0x004D(0x0001)
    bool                                          bPenetrateArmor;                                              // 0x004E(0x0001)
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x004F(0x0001)
};


// ScriptStruct  SGFramework.AssistKillInfo
// Struct Size::0x0020
struct FAssistKillInfo
{
    AController*                                  AssistKillerController;                                       // 0x0000(0x0008)
    AController*                                  KilledController;                                             // 0x0008(0x0008)
    float                                         CauseDamage;                                                  // 0x0010(0x0004)
    float                                         TotalDamage;                                                  // 0x0014(0x0004)
    int32_t                                       bKillFriend;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.CharacterDeathStatics
// Struct Size::0x0168
struct FCharacterDeathStatics
{
    enum class ECharacterDeathType                DeathType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    float                                         Distance;                                                     // 0x0010(0x0004)
    int32_t                                       EnduranceType;                                                // 0x0014(0x0004)
    int32_t                                       SpreadEnduranceType;                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       DeathCauserId;                                                // 0x0020(0x0008)
    float                                         Damage;                                                       // 0x0028(0x0004)
    int32_t                                       bPenetrateArmor;                                              // 0x002C(0x0004)
    float                                         PenetrateArmorProbability;                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       CauserName;                                                   // 0x0038(0x0010)
    int64_t                                       DeathTime;                                                    // 0x0048(0x0008)
    FVector                                       HitLocationDireciton;                                         // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    int64_t                                       HitArmorId;                                                   // 0x0060(0x0008)
    int32_t                                       TeamTypeId;                                                   // 0x0068(0x0004)
    int32_t                                       TeamID;                                                       // 0x006C(0x0004)
    enum class EFactionType                       FactionType;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    int32_t                                       KillerTeamTypeId;                                             // 0x0074(0x0004)
    enum class EFactionType                       KillerFactionType;                                            // 0x0078(0x0001)
    int8_t                                        bHitFace;                                                     // 0x0079(0x0001)
    int8_t                                        bDiedFromDBNO;                                                // 0x007A(0x0001)
    char                                          pa_007B[0x0005]                                               // 0x007B(0x0005)
    uint64_t                                      DBNOGID;                                                      // 0x0080(0x0008)
    int32_t                                       CurrentArmorDurability;                                       // 0x0088(0x0004)
    int32_t                                       CurrentArmorDurabilityMax;                                    // 0x008C(0x0004)
    int32_t                                       DetailBodyPart;                                               // 0x0090(0x0004)
    float                                         LastHitDamage;                                                // 0x0094(0x0004)
    float                                         LastHitArmorDamage;                                           // 0x0098(0x0004)
    float                                         Endurance;                                                    // 0x009C(0x0004)
    int32_t                                       MainWeapon;                                                   // 0x00A0(0x0004)
    int32_t                                       AssistWeapon;                                                 // 0x00A4(0x0004)
    float                                         AliveTime;                                                    // 0x00A8(0x0004)
    FVector                                       DeathPos;                                                     // 0x00AC(0x000C)
    FVector                                       KillerPos;                                                    // 0x00B8(0x000C)
    int32_t                                       KillerLevel;                                                  // 0x00C4(0x0004)
    int32_t                                       KillerRankLevel;                                              // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    uint64_t                                      KillerID;                                                     // 0x00D0(0x0008)
    int32_t                                       KillerTeamId;                                                 // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FString                                       SightName;                                                    // 0x00E0(0x0010)
    ACharacter*                                   Killer;                                                       // 0x00F0(0x0008)
    int32_t                                       HitGroup;                                                     // 0x00F8(0x0004)
    int32_t                                       HitSubHeadPart;                                               // 0x00FC(0x0004)
    int64_t                                       LastAimEnemyGID;                                              // 0x0100(0x0008)
    int32_t                                       LastAimEnemyCauseDamage;                                      // 0x0108(0x0004)
    int32_t                                       LastAimEnemyCauseArmorReduceDamage;                           // 0x010C(0x0004)
    int64_t                                       DeathVestID;                                                  // 0x0110(0x0008)
    int64_t                                       DeathHelmetID;                                                // 0x0118(0x0008)
    int64_t                                       DeathFaceShieldID;                                            // 0x0120(0x0008)
    int64_t                                       KillerVestID;                                                 // 0x0128(0x0008)
    int64_t                                       KillerHelmetID;                                               // 0x0130(0x0008)
    int64_t                                       KillerFaceShieldID;                                           // 0x0138(0x0008)
    int32_t                                       KillerWeaponValue;                                            // 0x0140(0x0004)
    int32_t                                       CauseDBNOWeaponID;                                            // 0x0144(0x0004)
    USGPlayerItemInfoBase*                        KillerWeaponItemInfo;                                         // 0x0148(0x0008)
    int32_t                                       OnFlash;                                                      // 0x0150(0x0004)
    int32_t                                       ByHoldGrenade;                                                // 0x0154(0x0004)
    int32_t                                       KillerNetGUIDForReplay;                                       // 0x0158(0x0004)
    int32_t                                       OnInventoryFlash;                                             // 0x015C(0x0004)
    int32_t                                       OnTinnitus;                                                   // 0x0160(0x0004)
    int32_t                                       KillerNameCardAvatar;                                         // 0x0164(0x0004)
};


// ScriptStruct  Engine.TableRowBase
// Struct Size::0x0008
struct FTableRowBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.ContextMenuSlotType
// Struct Size::0x0010
struct FContextMenuSlotType : public FTableRowBase
{
    enum class ESlotEnum                          SlotType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  SGFramework.InventoryGridInfo
// Struct Size::0x0040
struct FInventoryGridInfo
{
    AActor*                                       OwnerActor;                                                   // 0x0000(0x0008)
    AActor*                                       ParentActor;                                                  // 0x0008(0x0008)
    enum class ESGInventoryParentType             ParentType;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FItemGridInfo                                 GridInfo;                                                     // 0x0014(0x0008)
    FItemGridInfo                                 StartGridPosition;                                            // 0x001C(0x0008)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    int32_t                                       ContainerIndex;                                               // 0x002C(0x0004)
    enum class EAttachPosition                    AttachPosition;                                               // 0x0030(0x0001)
    bool                                          IsRotated;                                                    // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    uint64_t                                      ServerFrameCounter;                                           // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.WearableMesh
// Struct Size::0x0448
struct FWearableMesh
{
    bool                                          bForceTickMeshComponent;                                      // 0x0000(0x0001)
    bool                                          bSwitchPrefab;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FWearableMeshPrefab                           PrefabForMale;                                                // 0x0008(0x01A8)
    FWearableMeshPrefab                           PrefabForFemale;                                              // 0x01B0(0x01A8)
    FName                                         Tag;                                                          // 0x0358(0x0008)
    TSoftObjectPtr<USkeletalMesh>                 TargetSkeletalMeshAsset;                                      // 0x0360(0x0028)
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh1P;                                               // 0x0388(0x0028)
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh3P;                                               // 0x03B0(0x0028)
    char                                          pa_03D8[0x0008]                                               // 0x03D8(0x0008)
    TSoftObjectPtr<UStaticMesh>                   TargetStaticMeshAsset;                                        // 0x03E0(0x0028)
    UMeshComponent*                               MeshComponent;                                                // 0x0408(0x0008)
    UAnimInstance*                                AnimInstance;                                                 // 0x0410(0x0008)
    UAnimInstance*                                AnimInstanceInGame;                                           // 0x0418(0x0008)
    UAnimInstance*                                AnimInstanceInLobby;                                          // 0x0420(0x0008)
    enum class EAnimInstanceUseType               AnimInstanceUseType;                                          // 0x0428(0x0001)
    char                                          pa_0429[0x0003]                                               // 0x0429(0x0003)
    FName                                         AttachSocket;                                                 // 0x042C(0x0008)
    FName                                         SkeletalMeshAttachSocket;                                     // 0x0434(0x0008)
    bool                                          bUseLegacyPrefab;                                             // 0x043C(0x0001)
    bool                                          bCastShadowInLobby;                                           // 0x043D(0x0001)
    char                                          HiddenFlag;                                                   // 0x043E(0x0001)
    char                                          DisableTickFlag;                                              // 0x043F(0x0001)
    char                                          pa_0440[0x0008]                                               // 0x0440(0x0008)
};


// ScriptStruct  SGFramework.WearableMeshPrefab
// Struct Size::0x01A8
struct FWearableMeshPrefab
{
    enum class EWearableEnablePolicy              EnablePolicy;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FWearableMeshResource                         MeshResource;                                                 // 0x0008(0x00F0)
    TArray<FWearableMorphTarget>                  UnderMorphTargets;                                            // 0x00F8(0x0010)
    TArray<FWearableMorphTarget>                  UnderMorphTargetsSharing;                                     // 0x0108(0x0010)
    TArray<FName>                                 UnderHiddenTags;                                              // 0x0118(0x0010)
    TArray<FWearableMaterialSection>              UnderHiddenMaterialSectionTags;                               // 0x0128(0x0010)
    TArray<FBackAttachSocketOffset>               BackAttachingSocketOffsets;                                   // 0x0138(0x0010)
    TMap<enum class ESGBadgeAttach,FTransform>    BadgeAttachingSocketOffsets;                                  // 0x0148(0x0050)
    TArray<enum class ESGWeaponType>              HiddenOnBackWeapons;                                          // 0x0198(0x0010)
};


// ScriptStruct  SGFramework.BackAttachSocketOffset
// Struct Size::0x0040
struct FBackAttachSocketOffset
{
    FString                                       AttachSocketName;                                             // 0x0000(0x0010)
    FTransform                                    AttachSocketOffset;                                           // 0x0010(0x0030)
};


// ScriptStruct  SGFramework.WearableMaterialSection
// Struct Size::0x0010
struct FWearableMaterialSection
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    int32_t                                       MaterialID;                                                   // 0x0008(0x0004)
    int32_t                                       SectionIndex;                                                 // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.WearableMorphTarget
// Struct Size::0x000C
struct FWearableMorphTarget
{
    FName                                         MorphTargetName;                                              // 0x0000(0x0008)
    float                                         MorphTargetValue;                                             // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.WearableMeshResource
// Struct Size::0x00F0
struct FWearableMeshResource
{
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMeshInGame;                                           // 0x0000(0x0028)
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMeshInGame1P;                                         // 0x0028(0x0028)
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMeshInLobby;                                          // 0x0050(0x0028)
    TSoftObjectPtr<UStaticMesh>                   StaticMesh;                                                   // 0x0078(0x0028)
    TMap<int64_t,TSoftObjectPtr<USkeletalMesh>>   AISkeletalMeshMap;                                            // 0x00A0(0x0050)
};


// ScriptStruct  SGFramework.AutoAimAntiHackStatis
// Struct Size::0x0008
struct FAutoAimAntiHackStatis
{
    float                                         MaxRange;                                                     // 0x0000(0x0004)
    float                                         MaxAngularSpeed;                                              // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.SGAvatarTemplateData
// Struct Size::0x04A8
struct FSGAvatarTemplateData : public FTableRowBase
{
    int64_t                                       ItemId;                                                       // 0x0008(0x0008)
    enum class ESGAvatarType                      AvatarType;                                                   // 0x0010(0x0001)
    bool                                          bIsMergedAvatar3P;                                            // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    FSGAvatarInventoryEquipMeshComponentTemplateDataAvatarInventoryEquipMeshComponentTemplateData;              // 0x0018(0x0490)
};


// ScriptStruct  SGFramework.SGAvatarComponentTemplateData
// Struct Size::0x0001
struct FSGAvatarComponentTemplateData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SGFramework.SGAvatarInventoryEquipMeshComponentTemplateData
// Struct Size::0x0490
struct FSGAvatarInventoryEquipMeshComponentTemplateData : public FSGAvatarComponentTemplateData
{
    FWearableMesh                                 WearableMesh;                                                 // 0x0000(0x0448)
    TArray<int64_t>                               AdditionalWearableInventories;                                // 0x0448(0x0010)
    int32_t                                       LayerIndex;                                                   // 0x0458(0x0004)
    bool                                          bDefaultPutOnOrTakeOffState;                                  // 0x045C(0x0001)
    char                                          pa_045D[0x0003]                                               // 0x045D(0x0003)
    int32_t                                       ItemLevel;                                                    // 0x0460(0x0004)
    int32_t                                       TranslucencySortPriority;                                     // 0x0464(0x0004)
    TArray<FBoneModifyInfo>                       BoneModifyInfoList;                                           // 0x0468(0x0010)
    bool                                          ForceUseLobbyMesh;                                            // 0x0478(0x0001)
    bool                                          HideBackPistol;                                               // 0x0479(0x0001)
    char                                          pa_047A[0x0002]                                               // 0x047A(0x0002)
    FVector                                       BadgeAttachOffset;                                            // 0x047C(0x000C)
    bool                                          bIsAdapter;                                                   // 0x0488(0x0001)
    bool                                          bCanPlayAnimation;                                            // 0x0489(0x0001)
    char                                          pa_048A[0x0006]                                               // 0x048A(0x0006)
};


// ScriptStruct  SGFramework.BoneModifyInfo
// Struct Size::0x000C
struct FBoneModifyInfo
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    float                                         BoneScale;                                                    // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.SGFireRepInfo
// Struct Size::0x0060
struct FSGFireRepInfo
{
    int64_t                                       FireID;                                                       // 0x0000(0x0008)
    float                                         Timestamp;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSGFireShots                                  Shots;                                                        // 0x0010(0x0028)
    AActor*                                       AmmoClass;                                                    // 0x0038(0x0008)
    char                                          FireMode;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FVector                                       AttackerPos;                                                  // 0x0044(0x000C)
    float                                         ExpiredTimeOnServer;                                          // 0x0050(0x0004)
    char                                          CurFOV;                                                       // 0x0054(0x0001)
    char                                          FireIntervalShotNum;                                          // 0x0055(0x0001)
    bool                                          bIsReadyForNextFire;                                          // 0x0056(0x0001)
    bool                                          bIsWeaponCollapsed;                                           // 0x0057(0x0001)
    ASGThrowableProjectile*                       ProjcetileClass;                                              // 0x0058(0x0008)
};


// ScriptStruct  SGFramework.SGFireShots
// Struct Size::0x0028
struct FSGFireShots
{
    FVector                                       LaunchLocation;                                               // 0x0000(0x000C)
    FVector                                       ShotLocation;                                                 // 0x000C(0x000C)
    TArray<FSGBulletPath>                         BulletPaths;                                                  // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGBulletPath
// Struct Size::0x0020
struct FSGBulletPath
{
    FVector                                       InitDirection;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSGPointDamageEvent>                   PathPoints;                                                   // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.NavSkeletonGraphFindResult
// Struct Size::0x0038
struct FNavSkeletonGraphFindResult
{
    enum class EGraphAStarResult                  status;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FNavSkeletonGraphResultNode>           Nodes;                                                        // 0x0008(0x0010)
    TArray<int32_t>                               DesiredNodeIndices;                                           // 0x0018(0x0010)
    TArray<int32_t>                               DesiredPointIDs;                                              // 0x0028(0x0010)
};


// ScriptStruct  MFNPCAI.NavSkeletonGraphResultNode
// Struct Size::0x000C
struct FNavSkeletonGraphResultNode
{
    int32_t                                       PointID;                                                      // 0x0000(0x0004)
    int32_t                                       ParentID;                                                     // 0x0004(0x0004)
    float                                         PathLength;                                                   // 0x0008(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAIQueryRoundEnvironmentResult
// Struct Size::0x005C
struct FNPCAIQueryRoundEnvironmentResult
{
    FVector                                       AILocation;                                                   // 0x0000(0x000C)
    FVector                                       EnemyLocation;                                                // 0x000C(0x000C)
    bool                                          LCanMove;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FVector                                       LMovePoint;                                                   // 0x001C(0x000C)
    bool                                          RCanMove;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       RMovePoint;                                                   // 0x002C(0x000C)
    bool                                          FCanMove;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FVector                                       FMovePoint;                                                   // 0x003C(0x000C)
    bool                                          BCanMove;                                                     // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    FVector                                       BMovePoint;                                                   // 0x004C(0x000C)
    bool                                          LCanDefense;                                                  // 0x0058(0x0001)
    bool                                          RCanDefense;                                                  // 0x0059(0x0001)
    bool                                          LCanAttack;                                                   // 0x005A(0x0001)
    bool                                          RCanAttack;                                                   // 0x005B(0x0001)
};


// ScriptStruct  MFNPCAI.NPCAIFindAmbushAgainstPointResult
// Struct Size::0x0010
struct FNPCAIFindAmbushAgainstPointResult
{
    FVector                                       AgainstPoint;                                                 // 0x0000(0x000C)
    bool                                          bCanFind;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  MFNPCAI.NPCAIFindPathByKeyRouteResult
// Struct Size::0x0010
struct FNPCAIFindPathByKeyRouteResult
{
    TArray<FKeyRoutePointData>                    Path;                                                         // 0x0000(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.ActionPointData
// Struct Size::0x0010
struct FActionPointData
{
    int32_t                                       UniqueIndex;                                                  // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
};


// ScriptStruct  AIActionPointGeneratorRuntime.KeyRoutePointData
// Struct Size::0x0060
struct FKeyRoutePointData : public FActionPointData
{
    int32_t                                       PointID;                                                      // 0x0010(0x0004)
    float                                         Radius;                                                       // 0x0014(0x0004)
    float                                         MaxNavPathForMultipleOfRadius;                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FKeyRoutePointLink>                    LinkPoints;                                                   // 0x0020(0x0010)
    TArray<FActionPointRadianSafe>                OrientSafetys;                                                // 0x0030(0x0010)
    float                                         DangerValue;                                                  // 0x0040(0x0004)
    float                                         CalculateDangerTime;                                          // 0x0044(0x0004)
    int64_t                                       PolyRef;                                                      // 0x0048(0x0008)
    TArray<int64_t>                               NeighborPolyRefs;                                             // 0x0050(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.ActionPointRadianSafe
// Struct Size::0x0008
struct FActionPointRadianSafe
{
    float                                         Radian;                                                       // 0x0000(0x0004)
    float                                         CoverDistance;                                                // 0x0004(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.KeyRoutePointLink
// Struct Size::0x0008
struct FKeyRoutePointLink
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    float                                         NavPathLength;                                                // 0x0004(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAIPeekPointResult
// Struct Size::0x0010
struct FNPCAIPeekPointResult
{
    FVector                                       PeekPoint;                                                    // 0x0000(0x000C)
    bool                                          bWillExpose;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  SGFramework.CompetitionOBGlobalDataInfo
// Struct Size::0x0018
struct FCompetitionOBGlobalDataInfo
{
    uint32_t                                      LeftPMCNumber;                                                // 0x0000(0x0004)
    uint32_t                                      LeftScavNumber;                                               // 0x0004(0x0004)
    TArray<FCompetitionTeamDataInfo>              AllTeamInfoList;                                              // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.CompetitionTeamDataInfo
// Struct Size::0x0030
struct FCompetitionTeamDataInfo
{
    uint32_t                                      TeamID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         TeamName;                                                     // 0x0008(0x0018)
    TArray<FCompetitionGamePlayerDataInfo>        AllPlayerList;                                                // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.CompetitionGamePlayerDataInfo
// Struct Size::0x0060
struct FCompetitionGamePlayerDataInfo
{
    ASGPlayerController*                          PC;                                                           // 0x0000(0x0008)
    APlayerState*                                 PS;                                                           // 0x0008(0x0008)
    uint64_t                                      GID;                                                          // 0x0010(0x0008)
    FString                                       PlayerName;                                                   // 0x0018(0x0010)
    uint32_t                                      PlayerKillNum;                                                // 0x0028(0x0004)
    float                                         PlayerCurAllEndurance;                                        // 0x002C(0x0004)
    float                                         PlayerCurAllEnduranceMax;                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    int64_t                                       PlayerTakeOutAllValue;                                        // 0x0038(0x0008)
    enum class ESGPlayerCondition                 PlayerResult;                                                 // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FVector                                       PlayerPosition;                                               // 0x0044(0x000C)
    uint32_t                                      KillPlayerNum;                                                // 0x0050(0x0004)
    uint32_t                                      KillScavNum;                                                  // 0x0054(0x0004)
    uint32_t                                      KillBossNum;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  SGFramework.CompetitionPlayerFallReportData
// Struct Size::0x0040
struct FCompetitionPlayerFallReportData
{
    int32_t                                       KillerTeamId;                                                 // 0x0000(0x0004)
    int32_t                                       KillerTeamIndex;                                              // 0x0004(0x0004)
    FString                                       KillerPlayerName;                                             // 0x0008(0x0010)
    uint64_t                                      KillerPlayerWeaponID;                                         // 0x0018(0x0008)
    int32_t                                       KilledTeamId;                                                 // 0x0020(0x0004)
    int32_t                                       KilledTeamIndex;                                              // 0x0024(0x0004)
    FString                                       KilledPlayerName;                                             // 0x0028(0x0010)
    bool                                          BTeamAce;                                                     // 0x0038(0x0001)
    enum class ECharacterType                     KilledCharacterType;                                          // 0x0039(0x0001)
    enum class ESGPlayerFailCondition             FallResult;                                                   // 0x003A(0x0001)
    char                                          pa_003B[0x0005]                                               // 0x003B(0x0005)
};


// ScriptStruct  SGFramework.CompetitionEscapeReportData
// Struct Size::0x0020
struct FCompetitionEscapeReportData
{
    uint32_t                                      EscapePlayerTeamId;                                           // 0x0000(0x0004)
    uint32_t                                      EscapePlayerTeamIndex;                                        // 0x0004(0x0004)
    FString                                       EscapePlayerName;                                             // 0x0008(0x0010)
    int32_t                                       EscapePointID;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.APIPlayerStaticInfo
// Struct Size::0x0020
struct FAPIPlayerStaticInfo
{
    uint64_t                                      GID;                                                          // 0x0000(0x0008)
    uint32_t                                      TeamID;                                                       // 0x0008(0x0004)
    uint32_t                                      TeamIndex;                                                    // 0x000C(0x0004)
    FString                                       TeamName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.APIReportInfo
// Struct Size::0x0070
struct FAPIReportInfo
{
    uint64_t                                      GID;                                                          // 0x0000(0x0008)
    enum class EAPIReportTypes                    ReportType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FCompetitionKillInfo                          KillInfo;                                                     // 0x0010(0x0058)
    uint32_t                                      ItemId;                                                       // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  SGFramework.CompetitionKillInfo
// Struct Size::0x0058
struct FCompetitionKillInfo
{
    uint64_t                                      KilledGid;                                                    // 0x0000(0x0008)
    FString                                       KilledName;                                                   // 0x0008(0x0010)
    enum class EPlayerTeamType                    KilledPlayerType;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    uint32_t                                      RankedLevel;                                                  // 0x001C(0x0004)
    uint32_t                                      Score;                                                        // 0x0020(0x0004)
    uint32_t                                      Level;                                                        // 0x0024(0x0004)
    uint32_t                                      KilledTime;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    uint64_t                                      KillWeaponId;                                                 // 0x0030(0x0008)
    enum class ECharacterEnduranceType            KillPart;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       KillAllDamage;                                                // 0x003C(0x0004)
    int32_t                                       KillAllArmorDamage;                                           // 0x0040(0x0004)
    int32_t                                       HitNum;                                                       // 0x0044(0x0004)
    int64_t                                       ArmorId;                                                      // 0x0048(0x0008)
    enum class ECharacterType                     PlayerTypeDetail;                                             // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  SGFramework.InventoryContainerBase
// Struct Size::0x0048
struct FInventoryContainerBase
{
    int32_t                                       RowNum;                                                       // 0x0000(0x0004)
    int32_t                                       ColumnNum;                                                    // 0x0004(0x0004)
    int32_t                                       RuleID;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSGBagGridInfo>                        GridList;                                                     // 0x0010(0x0010)
    int32_t                                       ContainerIndex;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<AActor*>                               ChildActorList;                                               // 0x0028(0x0010)
    ASGInventory*                                 Inventory;                                                    // 0x0038(0x0008)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  SGFramework.SGBagGridInfo
// Struct Size::0x0010
struct FSGBagGridInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    AActor*                                       Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  MFMission.MFMissionReplicateData
// Struct Size::0x0058
struct FMFMissionReplicateData
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    FString                                       MissionName;                                                  // 0x0008(0x0010)
    FString                                       MissionFlowName;                                              // 0x0018(0x0010)
    enum class EMissionStatus                     MissionStatus;                                                // 0x0028(0x0001)
    enum class EMissionStatus                     OldMissionStatus;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       OldProgress;                                                  // 0x002C(0x0004)
    int32_t                                       CurProgress;                                                  // 0x0030(0x0004)
    float                                         RemainTime;                                                   // 0x0034(0x0004)
    float                                         RemainTimeUpdateServerTime;                                   // 0x0038(0x0004)
    bool                                          bFailWhenAchieved;                                            // 0x003C(0x0001)
    bool                                          bNeedReport;                                                  // 0x003D(0x0001)
    bool                                          bNeedReportProgress;                                          // 0x003E(0x0001)
    char                                          pa_003F[0x0001]                                               // 0x003F(0x0001)
    TArray<FString>                               AffiliateMissionList;                                         // 0x0040(0x0010)
    bool                                          bValid;                                                       // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  SGFramework.MobileInputData
// Struct Size::0x0048
struct FMobileInputData
{
    enum class ETouchIndex                        FingerIndex;                                                  // 0x0000(0x0001)
    enum class EMobileInputPhase                  Phase;                                                        // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FVector2D                                     BeginLocation;                                                // 0x0004(0x0008)
    FVector2D                                     Location;                                                     // 0x000C(0x0008)
    FVector2D                                     LastLocation;                                                 // 0x0014(0x0008)
    FVector2D                                     LastFrameLocation;                                            // 0x001C(0x0008)
    float                                         BeginTime;                                                    // 0x0024(0x0004)
    float                                         UpdateTime;                                                   // 0x0028(0x0004)
    float                                         ForceValue;                                                   // 0x002C(0x0004)
    FVector2D                                     DeltaLocation;                                                // 0x0030(0x0008)
    float                                         DeltaLocationX;                                               // 0x0038(0x0004)
    float                                         DeltaLocationY;                                               // 0x003C(0x0004)
    int32_t                                       SampleCount;                                                  // 0x0040(0x0004)
    bool                                          bIgnore;                                                      // 0x0044(0x0001)
    bool                                          bPendingDelete;                                               // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
};


// ScriptStruct  SGFramework.FootStepMakerTriggerEventTlog
// Struct Size::0x0028
struct FFootStepMakerTriggerEventTlog
{
    float                                         PosX;                                                         // 0x0000(0x0004)
    float                                         PosY;                                                         // 0x0004(0x0004)
    float                                         PosZ;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      GID;                                                          // 0x0010(0x0008)
    uint32_t                                      RoleType;                                                     // 0x0018(0x0004)
    int32_t                                       VestLv;                                                       // 0x001C(0x0004)
    int32_t                                       HelmetLv;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.ForceScoreInfo
// Struct Size::0x0038
struct FForceScoreInfo
{
    int32_t                                       ForceIndex;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ForceName;                                                    // 0x0008(0x0010)
    enum class EFactionType                       FactionType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       Score;                                                        // 0x001C(0x0004)
    FForceProgressInfo                            ProgressInfo;                                                 // 0x0020(0x0018)
};


// ScriptStruct  SGFramework.ForceProgressInfo
// Struct Size::0x0018
struct FForceProgressInfo
{
    FDateTime                                     ServerStartTimeStamp;                                         // 0x0000(0x0008)
    float                                         InitProgress;                                                 // 0x0008(0x0004)
    float                                         MaxProgress;                                                  // 0x000C(0x0004)
    float                                         ProgressTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGLoadingInfo
// Struct Size::0x0040
struct FSGLoadingInfo
{
    FString                                       MapTag;                                                       // 0x0000(0x0010)
    FString                                       PreMapTag;                                                    // 0x0010(0x0010)
    bool                                          bUsePostLoading;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FString>                               LoadingPathArray;                                             // 0x0028(0x0010)
    int32_t                                       CurrentMovieIndex;                                            // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Engine.URL
// Struct Size::0x0068
struct FURL
{
    FString                                       Protocol;                                                     // 0x0000(0x0010)
    FString                                       Host;                                                         // 0x0010(0x0010)
    int32_t                                       Port;                                                         // 0x0020(0x0004)
    int32_t                                       Valid;                                                        // 0x0024(0x0004)
    FString                                       Map;                                                          // 0x0028(0x0010)
    FString                                       RedirectURL;                                                  // 0x0038(0x0010)
    TArray<FString>                               Op;                                                           // 0x0048(0x0010)
    FString                                       Portal;                                                       // 0x0058(0x0010)
};


// ScriptStruct  SGFramework.VehicleHitInfo
// Struct Size::0x0018
struct FVehicleHitInfo
{
    FString                                       HitTypeName;                                                  // 0x0000(0x0010)
    float                                         HitVelocity;                                                  // 0x0010(0x0004)
    float                                         DamageValue;                                                  // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.CachedDeadCharacterInfo
// Struct Size::0x0048
struct FCachedDeadCharacterInfo
{
    int64_t                                       DeadCharacterGID;                                             // 0x0000(0x0008)
    int32_t                                       channelType;                                                  // 0x0008(0x0004)
    int32_t                                       PlatId;                                                       // 0x000C(0x0004)
    int32_t                                       PlayerLevel;                                                  // 0x0010(0x0004)
    int32_t                                       RankLevel;                                                    // 0x0014(0x0004)
    int32_t                                       CurSeason;                                                    // 0x0018(0x0004)
    enum class ECharacterType                     DeadCharacterType;                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    int32_t                                       DeadCharacterTeamID;                                          // 0x0020(0x0004)
    uint32_t                                      Area;                                                         // 0x0024(0x0004)
    int32_t                                       TeamType;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       KillerCharacterGID;                                           // 0x0030(0x0008)
    enum class ECharacterType                     KillerCharacterType;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       EnterDsZone;                                                  // 0x003C(0x0004)
    int32_t                                       IdealDsZone;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.StackableItemSourceInfo
// Struct Size::0x0018
struct FStackableItemSourceInfo
{
    int64_t                                       FromPlayerGID;                                                // 0x0000(0x0008)
    int32_t                                       FromTeamIndex;                                                // 0x0008(0x0004)
    int32_t                                       Count;                                                        // 0x000C(0x0004)
    enum class ECharacterType                     FromCharacterType;                                            // 0x0010(0x0001)
    enum class ESGInventorySpawnSourceType        FromSpawnSourceType;                                          // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  SGFramework.ProgressAbilitySimulationInfo
// Struct Size::0x0028
struct FProgressAbilitySimulationInfo
{
    enum class ESGSimulatedProgressAbilityType    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    ASGInventory*                                 TargetInv;                                                    // 0x0008(0x0008)
    AActor*                                       OptionalActor1;                                               // 0x0010(0x0008)
    float                                         ProgressStartServerTimeStamp;                                 // 0x0018(0x0004)
    float                                         Duration;                                                     // 0x001C(0x0004)
    float                                         Magnitude;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.CharacterLootBoxExternalData
// Struct Size::0x0004
struct FCharacterLootBoxExternalData
{
    int32_t                                       LootPointID;                                                  // 0x0000(0x0004)
};


// ScriptStruct  SGFramework.CharacterLootBoxItemExternalData
// Struct Size::0x0008
struct FCharacterLootBoxItemExternalData
{
    int32_t                                       LootPointID;                                                  // 0x0000(0x0004)
    int32_t                                       LootItemID;                                                   // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.KillerStaticData
// Struct Size::0x0140
struct FKillerStaticData
{
    ACharacter*                                   Killer;                                                       // 0x0000(0x0008)
    FString                                       KillerName;                                                   // 0x0008(0x0010)
    int64_t                                       KillerWeaponId;                                               // 0x0018(0x0008)
    FSGPlayerIconInfo                             KillerIconInfo;                                               // 0x0020(0x0048)
    uint32_t                                      KillerRankrd;                                                 // 0x0068(0x0004)
    uint32_t                                      KillerRankScore;                                              // 0x006C(0x0004)
    uint32_t                                      KillerRank;                                                   // 0x0070(0x0004)
    uint32_t                                      KillerRanking;                                                // 0x0074(0x0004)
    uint32_t                                      KillerPranking;                                               // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    uint64_t                                      KillerGID;                                                    // 0x0080(0x0008)
    int32_t                                       KillerTeamTypeId;                                             // 0x0088(0x0004)
    int32_t                                       KillerTeamId;                                                 // 0x008C(0x0004)
    enum class EFactionType                       KillerFaction;                                                // 0x0090(0x0001)
    enum class ECharacterType                     KillerCharacterType;                                          // 0x0091(0x0001)
    char                                          pa_0092[0x0002]                                               // 0x0092(0x0002)
    FVector                                       KillerPos;                                                    // 0x0094(0x000C)
    FString                                       SightName;                                                    // 0x00A0(0x0010)
    int64_t                                       KillerVestID;                                                 // 0x00B0(0x0008)
    int64_t                                       KillerHelmetID;                                               // 0x00B8(0x0008)
    int64_t                                       KillerFaceShieldID;                                           // 0x00C0(0x0008)
    int32_t                                       KillerWeaponValue;                                            // 0x00C8(0x0004)
    bool                                          bIsAICharacter;                                               // 0x00CC(0x0001)
    char                                          pa_00CD[0x0003]                                               // 0x00CD(0x0003)
    TArray<FCharacterHealthStaticsWhenDead>       AllHealthStatics;                                             // 0x00D0(0x0010)
    USGPlayerItemInfoBase*                        PlayerItemInfo;                                               // 0x00E0(0x0008)
    TArray<FSGClientShowItemInfo>                 KillerWeapon;                                                 // 0x00E8(0x0010)
    FSGPlayerShowInfo                             PlayerShowInfo;                                               // 0x00F8(0x0040)
    int32_t                                       KillerNetGUIDForReplay;                                       // 0x0138(0x0004)
    uint32_t                                      KillerNationalFlagIso;                                        // 0x013C(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerShowInfo
// Struct Size::0x0040
struct FSGPlayerShowInfo
{
    TArray<FSGClientShowItemInfo>                 ClientShowItems;                                              // 0x0000(0x0010)
    enum class ECharacterSex                      AvatarGender;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FSGAvatarInfo>                         AvatarItems;                                                  // 0x0018(0x0010)
    uint32_t                                      bBodyStatus;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FSGBadgeInfo>                          BadgeItems;                                                   // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.SGBadgeInfo
// Struct Size::0x0010
struct FSGBadgeInfo
{
    uint64_t                                      ItemId;                                                       // 0x0000(0x0008)
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGAvatarInfo
// Struct Size::0x0010
struct FSGAvatarInfo
{
    uint64_t                                      ItemId;                                                       // 0x0000(0x0008)
    bool                                          EnableState;                                                  // 0x0008(0x0001)
    bool                                          bIsHeadAvatar;                                                // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  SGFramework.SGClientShowItemInfo
// Struct Size::0x0040
struct FSGClientShowItemInfo
{
    uint64_t                                      GID;                                                          // 0x0000(0x0008)
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
    uint32_t                                      ItemNum;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    uint64_t                                      ParentID;                                                     // 0x0018(0x0008)
    uint32_t                                      Index;                                                        // 0x0020(0x0004)
    uint32_t                                      PosX;                                                         // 0x0024(0x0004)
    uint32_t                                      PosY;                                                         // 0x0028(0x0004)
    bool                                          bRollUp;                                                      // 0x002C(0x0001)
    bool                                          bDisable;                                                     // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    uint32_t                                      PendantID;                                                    // 0x0030(0x0004)
    uint32_t                                      SprayID;                                                      // 0x0034(0x0004)
    uint32_t                                      Durability;                                                   // 0x0038(0x0004)
    uint32_t                                      MaxDurability;                                                // 0x003C(0x0004)
};


// ScriptStruct  SGFramework.CharacterHealthStaticsWhenDead
// Struct Size::0x0028
struct FCharacterHealthStaticsWhenDead
{
    int64_t                                       PlayerId;                                                     // 0x0000(0x0008)
    int32_t                                       EnduranceType;                                                // 0x0008(0x0004)
    float                                         Health;                                                       // 0x000C(0x0004)
    float                                         MaxHealth;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               BuffList;                                                     // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGPlayerIconInfo
// Struct Size::0x0048
struct FSGPlayerIconInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       Level;                                                        // 0x0010(0x0004)
    int32_t                                       Rank;                                                         // 0x0014(0x0004)
    FSGPlayerTitleInfo                            TitleInfo;                                                    // 0x0018(0x0018)
    FString                                       AvatarUrl;                                                    // 0x0030(0x0010)
    int32_t                                       HeadBoxID;                                                    // 0x0040(0x0004)
    int32_t                                       NameCard;                                                     // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerTitleInfo
// Struct Size::0x0018
struct FSGPlayerTitleInfo
{
    uint32_t                                      ItemId;                                                       // 0x0000(0x0004)
    bool                                          HasTitle;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    uint32_t                                      StarNum;                                                      // 0x0008(0x0004)
    uint32_t                                      Rank;                                                         // 0x000C(0x0004)
    uint32_t                                      ADCode;                                                       // 0x0010(0x0004)
    uint32_t                                      LBSRankLevel;                                                 // 0x0014(0x0004)
};


// ScriptStruct  MFMission.MFMissionFlowNodeInstanceData
// Struct Size::0x0058
struct FMFMissionFlowNodeInstanceData
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    UMFMissionFlowNode*                           MissionFlowNode;                                              // 0x0008(0x0008)
    enum class EMissionFlowNodeStatus             NodeStatus;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UMFMissionObjective*                          Objective;                                                    // 0x0018(0x0008)
    enum class EMissionStatus                     MissionStatus;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       InitialProgress;                                              // 0x0024(0x0004)
    int32_t                                       OldProgress;                                                  // 0x0028(0x0004)
    int32_t                                       CurProgress;                                                  // 0x002C(0x0004)
    int32_t                                       BeginProgress;                                                // 0x0030(0x0004)
    int32_t                                       EndProgress;                                                  // 0x0034(0x0004)
    int32_t                                       CachedProgress;                                               // 0x0038(0x0004)
    int32_t                                       OneBattleAddedProgress;                                       // 0x003C(0x0004)
    float                                         ActivationTime;                                               // 0x0040(0x0004)
    float                                         FinishTime;                                                   // 0x0044(0x0004)
    float                                         RemainTime;                                                   // 0x0048(0x0004)
    float                                         RemainTimeUpdateServerTime;                                   // 0x004C(0x0004)
    bool                                          bHasTryInteract;                                              // 0x0050(0x0001)
    enum class EMissionFailedType                 FailedType;                                                   // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
};


// ScriptStruct  MFMission.MFMissionFlowReplicateData
// Struct Size::0x0020
struct FMFMissionFlowReplicateData
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    FString                                       MissionFlowName;                                              // 0x0008(0x0010)
    enum class EMissionStatus                     MissionFlowStatus;                                            // 0x0018(0x0001)
    enum class EMissionStatus                     OldMissionFlowStatus;                                         // 0x0019(0x0001)
    bool                                          bBeforeState;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    float                                         StatusChangeTime;                                             // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.ChaseActivityStateChangeInfo
// Struct Size::0x0008
struct FChaseActivityStateChangeInfo
{
    enum class EChaseActivityState                PreviousState;                                                // 0x0000(0x0001)
    enum class EChaseActivityState                CurrentState;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ServerTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.RepAttachment
// Struct Size::0x0040
struct FRepAttachment
{
    AActor*                                       AttachParent;                                                 // 0x0000(0x0008)
    FVector                                       LocationOffset;                                               // 0x0008(0x000C)
    FVector                                       RelativeScale3D;                                              // 0x0014(0x000C)
    FRotator                                      RotationOffset;                                               // 0x0020(0x000C)
    FName                                         AttachSocket;                                                 // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    USceneComponent*                              AttachComponent;                                              // 0x0038(0x0008)
};


// ScriptStruct  Engine.RepMovement
// Struct Size::0x0034
struct FRepMovement
{
    FVector                                       LinearVelocity;                                               // 0x0000(0x000C)
    FVector                                       AngularVelocity;                                              // 0x000C(0x000C)
    FVector                                       Location;                                                     // 0x0018(0x000C)
    FRotator                                      Rotation;                                                     // 0x0024(0x000C)
    char                                          bSimulatedPhysicSleep;                                        // 0x0030(0x0001)
    char                                          bRepPhysics;                                                  // 0x0030(0x0001)
    enum class EVectorQuantization                LocationQuantizationLevel;                                    // 0x0031(0x0001)
    enum class EVectorQuantization                VelocityQuantizationLevel;                                    // 0x0032(0x0001)
    enum class ERotatorQuantization               RotationQuantizationLevel;                                    // 0x0033(0x0001)
};


// ScriptStruct  Engine.ActorTickFunction
// Struct Size::0x0040
struct FActorTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.UniqueNetIdRepl
// Struct Size::0x0028
struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
{
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
    TArray<char>                                  ReplicationBytes;                                             // 0x0018(0x0010)
};


// ScriptStruct  Engine.ForceFeedbackParameters
// Struct Size::0x000C
struct FForceFeedbackParameters
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    bool                                          bLooping;                                                     // 0x0008(0x0001)
    bool                                          bIgnoreTimeDilation;                                          // 0x0009(0x0001)
    bool                                          bPlayWhilePaused;                                             // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  Engine.ViewTargetTransitionParams
// Struct Size::0x0010
struct FViewTargetTransitionParams
{
    float                                         BlendTime;                                                    // 0x0000(0x0004)
    enum class EViewTargetBlendFunction           BlendFunction;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BlendExp;                                                     // 0x0008(0x0004)
    char                                          bLockOutgoing;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.UpdateLevelStreamingLevelStatus
// Struct Size::0x0010
struct FUpdateLevelStreamingLevelStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    char                                          bNewShouldBeLoaded;                                           // 0x000C(0x0001)
    char                                          bNewShouldBeVisible;                                          // 0x000C(0x0001)
    char                                          bNewShouldBlockOnLoad;                                        // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.UpdateLevelVisibilityLevelInfo
// Struct Size::0x0014
struct FUpdateLevelVisibilityLevelInfo
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    FName                                         Filename;                                                     // 0x0008(0x0008)
    char                                          bIsVisible;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.ActiveForceFeedbackEffect
// Struct Size::0x0018
struct FActiveForceFeedbackEffect
{
    UForceFeedbackEffect*                         ForceFeedbackEffect;                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  AIModule.AIRequestID
// Struct Size::0x0004
struct FAIRequestID
{
    uint32_t                                      RequestID;                                                    // 0x0000(0x0004)
};


// ScriptStruct  AIModule.AIStimulus
// Struct Size::0x003C
struct FAIStimulus
{
    float                                         Age;                                                          // 0x0000(0x0004)
    float                                         ExpirationAge;                                                // 0x0004(0x0004)
    float                                         Strength;                                                     // 0x0008(0x0004)
    FVector                                       StimulusLocation;                                             // 0x000C(0x000C)
    FVector                                       ReceiverLocation;                                             // 0x0018(0x000C)
    FName                                         Tag;                                                          // 0x0024(0x0008)
    char                                          pa_002C[0x000C]                                               // 0x002C(0x000C)
    char                                          bSuccessfullySensed;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  AIModule.ActorPerceptionUpdateInfo
// Struct Size::0x0048
struct FActorPerceptionUpdateInfo
{
    int32_t                                       TargetId;                                                     // 0x0000(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0004(0x0008)
    FAIStimulus                                   Stimulus;                                                     // 0x000C(0x003C)
};


// ScriptStruct  SGFramework.ShootInputFlowData
// Struct Size::0x0018
struct FShootInputFlowData
{
    FString                                       InputFlowDataSlice;                                           // 0x0000(0x0010)
    bool                                          bComplete;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       SequenceNum;                                                  // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.DSSwitchConfig
// Struct Size::0x000C
struct FDSSwitchConfig
{
    int32_t                                       nGetAttachLoopMaxNum;                                         // 0x0000(0x0004)
    float                                         CheckLimitTime;                                               // 0x0004(0x0004)
    bool                                          bTouchCheckSwitcher;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MFQuestSystem.QuestContextPair
// Struct Size::0x0010
struct FQuestContextPair
{
    UMFQuestContextSourceBase*                    ContextSource;                                                // 0x0000(0x0008)
    UMFQuestContextBase*                          Context;                                                      // 0x0008(0x0008)
};


// ScriptStruct  MagicLeapARPin.MagicLeapARPinState
// Struct Size::0x0014
struct FMagicLeapARPinState
{
    float                                         Confidence;                                                   // 0x0000(0x0004)
    float                                         ValidRadius;                                                  // 0x0004(0x0004)
    float                                         RotationError;                                                // 0x0008(0x0004)
    float                                         TranslationError;                                             // 0x000C(0x0004)
    enum class EMagicLeapARPinType                PinType;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  UAGame.AreaDataInfo
// Struct Size::0x0030
struct FAreaDataInfo
{
    int32_t                                       Triggertype;                                                  // 0x0000(0x0004)
    int32_t                                       AreaID;                                                       // 0x0004(0x0004)
    FName                                         AreaName;                                                     // 0x0008(0x0008)
    int64_t                                       EnterTimeStamp;                                               // 0x0010(0x0008)
    float                                         EnterInventoryValue;                                          // 0x0018(0x0004)
    int32_t                                       EnterMainWeaponValue;                                         // 0x001C(0x0004)
    int32_t                                       EnterSecondWeaponValue;                                       // 0x0020(0x0004)
    int32_t                                       EnterSafeBoxValue;                                            // 0x0024(0x0004)
    int32_t                                       EnterArmorValue;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UAGame.NewTraceableActorInfo
// Struct Size::0x0060
struct FNewTraceableActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<enum class ENewTraceDisplayPlatform>   NeedDisplayPlatforms;                                         // 0x0008(0x0010)
    TWeakObjectPtr<AActor>                        TraceActor;                                                   // 0x0018(0x0008)
    bool                                          bActorDestroyed;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       WorldLocation;                                                // 0x0024(0x000C)
    int32_t                                       Handle;                                                       // 0x0030(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0034(0x0004)
    bool                                          bNeedTrace;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    int64_t                                       CreateTimeStamp;                                              // 0x0040(0x0008)
    int32_t                                       TaskId;                                                       // 0x0048(0x0004)
    int32_t                                       TargetId;                                                     // 0x004C(0x0004)
    FVector                                       Extend;                                                       // 0x0050(0x000C)
    int32_t                                       ConditionEscapeId;                                            // 0x005C(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosPhysicsCollisionInfo
// Struct Size::0x0070
struct FChaosPhysicsCollisionInfo
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    UPrimitiveComponent*                          OtherComponent;                                               // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       Normal;                                                       // 0x001C(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x0028(0x000C)
    FVector                                       Velocity;                                                     // 0x0034(0x000C)
    FVector                                       OtherVelocity;                                                // 0x0040(0x000C)
    FVector                                       AngularVelocity;                                              // 0x004C(0x000C)
    FVector                                       OtherAngularVelocity;                                         // 0x0058(0x000C)
    float                                         Mass;                                                         // 0x0064(0x0004)
    float                                         OtherMass;                                                    // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventData
// Struct Size::0x0058
struct FChaosCollisionEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FVector                                       Velocity1;                                                    // 0x0018(0x000C)
    FVector                                       Velocity2;                                                    // 0x0024(0x000C)
    float                                         Mass1;                                                        // 0x0030(0x0004)
    float                                         Mass2;                                                        // 0x0034(0x0004)
    FVector                                       Impulse;                                                      // 0x0038(0x000C)
    char                                          pa_0044[0x0014]                                               // 0x0044(0x0014)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventData
// Struct Size::0x001C
struct FChaosBreakingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Mass;                                                         // 0x0018(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventData
// Struct Size::0x002C
struct FChaosTrailingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosBreakEvent
// Struct Size::0x0030
struct FChaosBreakEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Velocity;                                                     // 0x0014(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0020(0x000C)
    float                                         Mass;                                                         // 0x002C(0x0004)
};


// ScriptStruct  Engine.WalkableSlopeOverride
// Struct Size::0x0010
struct FWalkableSlopeOverride
{
    enum class EWalkableSlopeBehavior             WalkableSlopeBehavior;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         WalkableSlopeAngle;                                           // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  PhysicsCore.BodyInstanceCore
// Struct Size::0x0018
struct FBodyInstanceCore
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    char                                          bSimulatePhysics;                                             // 0x0010(0x0001)
    char                                          bOverrideMass;                                                // 0x0010(0x0001)
    char                                          bEnableGravity;                                               // 0x0010(0x0001)
    char                                          bAutoWeld;                                                    // 0x0010(0x0001)
    char                                          bStartAwake;                                                  // 0x0010(0x0001)
    char                                          bGenerateWakeEvents;                                          // 0x0010(0x0001)
    char                                          bUpdateMassWhenScaleChanges;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.BodyInstance
// Struct Size::0x0158
struct FBodyInstance : public FBodyInstanceCore
{
    char                                          pa_0018[0x0006]                                               // 0x0018(0x0006)
    enum class ECollisionChannel                  ObjectType;                                                   // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0038]                                               // 0x0021(0x0038)
    enum class ESleepFamily                       SleepFamily;                                                  // 0x0059(0x0001)
    enum class EDOFMode                           DOFMode;                                                      // 0x005A(0x0001)
    char                                          bUseCCD;                                                      // 0x005B(0x0001)
    char                                          bIgnoreAnalyticCollisions;                                    // 0x005B(0x0001)
    char                                          bNotifyRigidBodyCollision;                                    // 0x005B(0x0001)
    char                                          bLockTranslation;                                             // 0x005B(0x0001)
    char                                          bLockRotation;                                                // 0x005B(0x0001)
    char                                          bLockXTranslation;                                            // 0x005B(0x0001)
    char                                          bLockYTranslation;                                            // 0x005B(0x0001)
    char                                          bLockZTranslation;                                            // 0x005C(0x0001)
    char                                          bLockXRotation;                                               // 0x005C(0x0001)
    char                                          bLockYRotation;                                               // 0x005C(0x0001)
    char                                          bLockZRotation;                                               // 0x005C(0x0001)
    char                                          bOverrideMaxAngularVelocity;                                  // 0x005C(0x0001)
    char                                          bOverrideMaxDepenetrationVelocity;                            // 0x005C(0x0001)
    char                                          bOverrideWalkableSlopeOnInstance;                             // 0x005D(0x0001)
    char                                          bInterpolateWhenSubStepping;                                  // 0x005D(0x0001)
    char                                          pa_005E[0x000E]                                               // 0x005E(0x000E)
    FName                                         CollisionProfileName;                                         // 0x006C(0x0008)
    char                                          PositionSolverIterationCount;                                 // 0x0074(0x0001)
    char                                          VelocitySolverIterationCount;                                 // 0x0075(0x0001)
    char                                          pa_0076[0x0002]                                               // 0x0076(0x0002)
    FCollisionResponse                            CollisionResponses;                                           // 0x0078(0x0030)
    float                                         MaxDepenetrationVelocity;                                     // 0x00A8(0x0004)
    float                                         MassInKgOverride;                                             // 0x00AC(0x0004)
    char                                          pa_00B0[0x0008]                                               // 0x00B0(0x0008)
    float                                         LinearDamping;                                                // 0x00B8(0x0004)
    float                                         AngularDamping;                                               // 0x00BC(0x0004)
    FVector                                       CustomDOFPlaneNormal;                                         // 0x00C0(0x000C)
    FVector                                       COMNudge;                                                     // 0x00CC(0x000C)
    float                                         MassScale;                                                    // 0x00D8(0x0004)
    FVector                                       InertiaTensorScale;                                           // 0x00DC(0x000C)
    char                                          pa_00E8[0x0010]                                               // 0x00E8(0x0010)
    FWalkableSlopeOverride                        WalkableSlopeOverride;                                        // 0x00F8(0x0010)
    UPhysicalMaterial*                            PhysMaterialOverride;                                         // 0x0108(0x0008)
    float                                         MaxAngularVelocity;                                           // 0x0110(0x0004)
    float                                         CustomSleepThresholdMultiplier;                               // 0x0114(0x0004)
    float                                         StabilizationThresholdMultiplier;                             // 0x0118(0x0004)
    float                                         PhysicsBlendWeight;                                           // 0x011C(0x0004)
    char                                          pa_0120[0x0038]                                               // 0x0120(0x0038)
};


// ScriptStruct  Engine.CollisionResponse
// Struct Size::0x0030
struct FCollisionResponse
{
    FCollisionResponseContainer                   ResponseToChannels;                                           // 0x0000(0x0020)
    TArray<FResponseChannel>                      ResponseArray;                                                // 0x0020(0x0010)
};


// ScriptStruct  Engine.ResponseChannel
// Struct Size::0x000C
struct FResponseChannel
{
    FName                                         Channel;                                                      // 0x0000(0x0008)
    enum class ECollisionResponse                 Response;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.CollisionResponseContainer
// Struct Size::0x0020
struct FCollisionResponseContainer
{
    enum class ECollisionResponse                 WorldStatic;                                                  // 0x0000(0x0001)
    enum class ECollisionResponse                 WorldDynamic;                                                 // 0x0001(0x0001)
    enum class ECollisionResponse                 Pawn;                                                         // 0x0002(0x0001)
    enum class ECollisionResponse                 Visibility;                                                   // 0x0003(0x0001)
    enum class ECollisionResponse                 Camera;                                                       // 0x0004(0x0001)
    enum class ECollisionResponse                 PhysicsBody;                                                  // 0x0005(0x0001)
    enum class ECollisionResponse                 Vehicle;                                                      // 0x0006(0x0001)
    enum class ECollisionResponse                 Destructible;                                                 // 0x0007(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel1;                                          // 0x0008(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel2;                                          // 0x0009(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel3;                                          // 0x000A(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel4;                                          // 0x000B(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel5;                                          // 0x000C(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel6;                                          // 0x000D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel1;                                            // 0x000E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel2;                                            // 0x000F(0x0001)
    enum class ECollisionResponse                 GameTraceChannel3;                                            // 0x0010(0x0001)
    enum class ECollisionResponse                 GameTraceChannel4;                                            // 0x0011(0x0001)
    enum class ECollisionResponse                 GameTraceChannel5;                                            // 0x0012(0x0001)
    enum class ECollisionResponse                 GameTraceChannel6;                                            // 0x0013(0x0001)
    enum class ECollisionResponse                 GameTraceChannel7;                                            // 0x0014(0x0001)
    enum class ECollisionResponse                 GameTraceChannel8;                                            // 0x0015(0x0001)
    enum class ECollisionResponse                 GameTraceChannel9;                                            // 0x0016(0x0001)
    enum class ECollisionResponse                 GameTraceChannel10;                                           // 0x0017(0x0001)
    enum class ECollisionResponse                 GameTraceChannel11;                                           // 0x0018(0x0001)
    enum class ECollisionResponse                 GameTraceChannel12;                                           // 0x0019(0x0001)
    enum class ECollisionResponse                 GameTraceChannel13;                                           // 0x001A(0x0001)
    enum class ECollisionResponse                 GameTraceChannel14;                                           // 0x001B(0x0001)
    enum class ECollisionResponse                 GameTraceChannel15;                                           // 0x001C(0x0001)
    enum class ECollisionResponse                 GameTraceChannel16;                                           // 0x001D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel17;                                           // 0x001E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel18;                                           // 0x001F(0x0001)
};


// ScriptStruct  Engine.CustomPrimitiveData
// Struct Size::0x0010
struct FCustomPrimitiveData
{
    TArray<float>                                 Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.LightingChannels
// Struct Size::0x0001
struct FLightingChannels
{
    char                                          bChannel0;                                                    // 0x0000(0x0001)
    char                                          bChannel1;                                                    // 0x0000(0x0001)
    char                                          bChannel2;                                                    // 0x0000(0x0001)
};


// ScriptStruct  Engine.PrimitivePhysicsShapes
// Struct Size::0x00B0
struct FPrimitivePhysicsShapes
{
    TMap<UPrimitiveComponent*,FBodyInstancePhysicsShapes>BlockShapes;                                           // 0x0000(0x0050)
    TMap<UPrimitiveComponent*,FBodyInstancePhysicsShapes>TouchShapes;                                           // 0x0050(0x0050)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  Engine.BodyInstancePhysicsShapes
// Struct Size::0x0050
struct FBodyInstancePhysicsShapes
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionRepData
// Struct Size::0x0018
struct FGeometryCollectionRepData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GeometryCollectionEngine.GeomComponentCacheParameters
// Struct Size::0x0050
struct FGeomComponentCacheParameters
{
    enum class EGeometryCollectionCacheType       CacheMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGeometryCollectionCache*                     TargetCache;                                                  // 0x0008(0x0008)
    float                                         ReverseCacheBeginTime;                                        // 0x0010(0x0004)
    bool                                          SaveCollisionData;                                            // 0x0014(0x0001)
    bool                                          DoGenerateCollisionData;                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    int32_t                                       CollisionDataSizeMax;                                         // 0x0018(0x0004)
    bool                                          DoCollisionDataSpatialHash;                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         CollisionDataSpatialHashRadius;                               // 0x0020(0x0004)
    int32_t                                       MaxCollisionPerCell;                                          // 0x0024(0x0004)
    bool                                          SaveBreakingData;                                             // 0x0028(0x0001)
    bool                                          DoGenerateBreakingData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       BreakingDataSizeMax;                                          // 0x002C(0x0004)
    bool                                          DoBreakingDataSpatialHash;                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         BreakingDataSpatialHashRadius;                                // 0x0034(0x0004)
    int32_t                                       MaxBreakingPerCell;                                           // 0x0038(0x0004)
    bool                                          SaveTrailingData;                                             // 0x003C(0x0001)
    bool                                          DoGenerateTrailingData;                                       // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    int32_t                                       TrailingDataSizeMax;                                          // 0x0040(0x0004)
    float                                         TrailingMinSpeedThreshold;                                    // 0x0044(0x0004)
    float                                         TrailingMinVolumeThreshold;                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettings
// Struct Size::0x002C
struct FAkAdvancedInitializationSettings
{
    uint32_t                                      IO;                                                           // 0x0000(0x0004)
    uint32_t                                      IO;                                                           // 0x0004(0x0004)
    float                                         TargetAutoStreamBufferLength;                                 // 0x0008(0x0004)
    bool                                          UseStreamCache;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    uint32_t                                      MaximumPinnedBytesInCache;                                    // 0x0010(0x0004)
    bool                                          EnableGameSyncPreparation;                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    uint32_t                                      ContinuousPlaybackLookAhead;                                  // 0x0018(0x0004)
    uint32_t                                      MonitorQueuePoolSize;                                         // 0x001C(0x0004)
    uint32_t                                      MaximumHardwareTimeoutMs;                                     // 0x0020(0x0004)
    bool                                          DebugOutOfRangeCheckEnabled;                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         DebugOutOfRangeLimit;                                         // 0x0028(0x0004)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettingsWithMultiCoreRendering
// Struct Size::0x0030
struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
{
    bool                                          EnableMultiCoreRendering;                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AkAudio.AkAndroidAdvancedInitializationSettings
// Struct Size::0x0038
struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      AudioAPI;                                                     // 0x0030(0x0004)
    bool                                          RoundFrameSizeToHardwareSize;                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  AkAudio.AkAudioSession
// Struct Size::0x000C
struct FAkAudioSession
{
    enum class EAkAudioSessionCategory            AudioSessionCategory;                                         // 0x0000(0x0004)
    uint32_t                                      AudioSessionCategoryOptions;                                  // 0x0004(0x0004)
    enum class EAkAudioSessionMode                AudioSessionMode;                                             // 0x0008(0x0004)
};


// ScriptStruct  AkAudio.VoicePlayingData
// Struct Size::0x0028
struct FVoicePlayingData
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkExternalSourceInfo
// Struct Size::0x0038
struct FAkExternalSourceInfo
{
    FString                                       ExternalSrcName;                                              // 0x0000(0x0010)
    enum class AkCodecId                          CodecID;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Filename;                                                     // 0x0018(0x0010)
    UAkExternalMediaAsset*                        ExternalSourceAsset;                                          // 0x0028(0x0008)
    bool                                          IsStreamed;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AkAudio.AkSegmentInfo
// Struct Size::0x0024
struct FAkSegmentInfo
{
    int32_t                                       CurrentPosition;                                              // 0x0000(0x0004)
    int32_t                                       PreEntryDuration;                                             // 0x0004(0x0004)
    int32_t                                       ActiveDuration;                                               // 0x0008(0x0004)
    int32_t                                       PostExitDuration;                                             // 0x000C(0x0004)
    int32_t                                       RemainingLookAheadTime;                                       // 0x0010(0x0004)
    float                                         BeatDuration;                                                 // 0x0014(0x0004)
    float                                         BarDuration;                                                  // 0x0018(0x0004)
    float                                         GridDuration;                                                 // 0x001C(0x0004)
    float                                         GridOffset;                                                   // 0x0020(0x0004)
};


// ScriptStruct  AkAudio.AkMidiEventBase
// Struct Size::0x0002
struct FAkMidiEventBase
{
    enum class EAkMidiEventType                   Type;                                                         // 0x0000(0x0001)
    char                                          Chan;                                                         // 0x0001(0x0001)
};


// ScriptStruct  AkAudio.AkMidiProgramChange
// Struct Size::0x0003
struct FAkMidiProgramChange : public FAkMidiEventBase
{
    char                                          ProgramNum;                                                   // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiChannelAftertouch
// Struct Size::0x0003
struct FAkMidiChannelAftertouch : public FAkMidiEventBase
{
    char                                          Value;                                                        // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteAftertouch
// Struct Size::0x0004
struct FAkMidiNoteAftertouch : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiPitchBend
// Struct Size::0x0008
struct FAkMidiPitchBend : public FAkMidiEventBase
{
    char                                          ValueLsb;                                                     // 0x0002(0x0001)
    char                                          ValueMsb;                                                     // 0x0003(0x0001)
    int32_t                                       FullValue;                                                    // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkMidiCc
// Struct Size::0x0004
struct FAkMidiCc : public FAkMidiEventBase
{
    enum class EAkMidiCcValues                    Cc;                                                           // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteOnOff
// Struct Size::0x0004
struct FAkMidiNoteOnOff : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Velocity;                                                     // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiGeneric
// Struct Size::0x0004
struct FAkMidiGeneric : public FAkMidiEventBase
{
    char                                          Param1;                                                       // 0x0002(0x0001)
    char                                          Param2;                                                       // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkOutputSettings
// Struct Size::0x0018
struct FAkOutputSettings
{
    FString                                       AudioDeviceSharesetName;                                      // 0x0000(0x0010)
    int32_t                                       IdDevice;                                                     // 0x0010(0x0004)
    enum class PanningRule                        PanRule;                                                      // 0x0014(0x0001)
    enum class AkChannelConfiguration             ChannelConfig;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  AkAudio.AkChannelMask
// Struct Size::0x0004
struct FAkChannelMask
{
    int32_t                                       ChannelMask;                                                  // 0x0000(0x0004)
};


// ScriptStruct  AkAudio.AkGeometrySurfaceOverride
// Struct Size::0x0018
struct FAkGeometrySurfaceOverride
{
    UAkAcousticTexture*                           AcousticTexture;                                              // 0x0000(0x0008)
    bool                                          bEnableOcclusionOverride;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OcclusionValue;                                               // 0x000C(0x0004)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkGeometryData
// Struct Size::0x0050
struct FAkGeometryData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FAkAcousticSurface>                    Surfaces;                                                     // 0x0010(0x0010)
    TArray<FAkTriangle>                           Triangles;                                                    // 0x0020(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideAcousticTexture;                                    // 0x0030(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideOcclusion;                                          // 0x0040(0x0010)
};


// ScriptStruct  AkAudio.AkTriangle
// Struct Size::0x0008
struct FAkTriangle
{
    uint16_t                                      Point0;                                                       // 0x0000(0x0002)
    uint16_t                                      Point1;                                                       // 0x0002(0x0002)
    uint16_t                                      Point2;                                                       // 0x0004(0x0002)
    uint16_t                                      Surface;                                                      // 0x0006(0x0002)
};


// ScriptStruct  AkAudio.AkAcousticSurface
// Struct Size::0x0018
struct FAkAcousticSurface
{
    uint32_t                                      Texture;                                                      // 0x0000(0x0004)
    float                                         Occlusion;                                                    // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkPluginInfo
// Struct Size::0x0028
struct FAkPluginInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    uint32_t                                      PluginID;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       dll;                                                          // 0x0018(0x0010)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettings
// Struct Size::0x0060
struct FAkCommonInitializationSettings
{
    uint32_t                                      MaximumNumberOfMemoryPools;                                   // 0x0000(0x0004)
    uint32_t                                      MaximumNumberOfPositioningPaths;                              // 0x0004(0x0004)
    uint32_t                                      CommandQueueSize;                                             // 0x0008(0x0004)
    uint32_t                                      SamplesPerFrame;                                              // 0x000C(0x0004)
    FAkMainOutputSettings                         MainOutputSettings;                                           // 0x0010(0x0028)
    float                                         StreamingLookAheadRatio;                                      // 0x0038(0x0004)
    uint16_t                                      NumberOfRefillsInVoice;                                       // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    FAkSpatialAudioSettings                       SpatialAudioSettings;                                         // 0x0040(0x0020)
};


// ScriptStruct  AkAudio.AkSpatialAudioSettings
// Struct Size::0x0020
struct FAkSpatialAudioSettings
{
    uint32_t                                      MaxSoundPropagationDepth;                                     // 0x0000(0x0004)
    float                                         MovementThreshold;                                            // 0x0004(0x0004)
    uint32_t                                      NumberOfPrimaryRays;                                          // 0x0008(0x0004)
    uint32_t                                      ReflectionOrder;                                              // 0x000C(0x0004)
    float                                         MaximumPathLength;                                            // 0x0010(0x0004)
    float                                         CPULimitPercentage;                                           // 0x0014(0x0004)
    bool                                          EnableDiffractionOnReflections;                               // 0x0018(0x0001)
    bool                                          EnableGeometricDiffractionAndTransmission;                    // 0x0019(0x0001)
    bool                                          CalcEmitterVirtualPosition;                                   // 0x001A(0x0001)
    bool                                          UseObstruction;                                               // 0x001B(0x0001)
    bool                                          UseOcclusion;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AkAudio.AkMainOutputSettings
// Struct Size::0x0028
struct FAkMainOutputSettings
{
    FString                                       AudioDeviceShareset;                                          // 0x0000(0x0010)
    uint32_t                                      DeviceID;                                                     // 0x0010(0x0004)
    enum class EAkPanningRule                     PanningRule;                                                  // 0x0014(0x0004)
    enum class EAkChannelConfigType               ChannelConfigType;                                            // 0x0018(0x0004)
    uint32_t                                      ChannelMask;                                                  // 0x001C(0x0004)
    uint32_t                                      NumberOfChannels;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettingsWithSampleRate
// Struct Size::0x0068
struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
{
    uint32_t                                      SampleRate;                                                   // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettings
// Struct Size::0x0020
struct FAkCommunicationSettings
{
    uint32_t                                      PoolSize;                                                     // 0x0000(0x0004)
    uint16_t                                      DiscoveryBroadcastPort;                                       // 0x0004(0x0002)
    uint16_t                                      CommandPort;                                                  // 0x0006(0x0002)
    uint16_t                                      NotificationPort;                                             // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       NetworkName;                                                  // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithCommSelection
// Struct Size::0x0028
struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
{
    enum class EAkCommSystem                      CommunicationSystem;                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithSystemInitialization
// Struct Size::0x0028
struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
{
    bool                                          InitializeSystemComms;                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  AkAudio.AkBoolPropertyToControl
// Struct Size::0x0010
struct FAkBoolPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPropertyToControl
// Struct Size::0x0010
struct FAkPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkReverbDescriptor
// Struct Size::0x0028
struct FAkReverbDescriptor
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkAcousticTextureParams
// Struct Size::0x0020
struct FAkAcousticTextureParams
{
    FVector4                                      AbsorptionValues;                                             // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AkGeometrySurfacePropertiesToMap
// Struct Size::0x0030
struct FAkGeometrySurfacePropertiesToMap
{
    TSoftObjectPtr<UAkAcousticTexture>            AcousticTexture;                                              // 0x0000(0x0028)
    float                                         OcclusionValue;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  AkAudio.AkWwiseItemToControl
// Struct Size::0x0040
struct FAkWwiseItemToControl
{
    FAkWwiseObjectDetails                         ItemPicked;                                                   // 0x0000(0x0030)
    FString                                       ItemPath;                                                     // 0x0030(0x0010)
};


// ScriptStruct  AkAudio.AkWwiseObjectDetails
// Struct Size::0x0030
struct FAkWwiseObjectDetails
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemPath;                                                     // 0x0010(0x0010)
    FString                                       ItemId;                                                       // 0x0020(0x0010)
};


// ScriptStruct  AkAudio.AkSurfacePoly
// Struct Size::0x0018
struct FAkSurfacePoly
{
    UAkAcousticTexture*                           Texture;                                                      // 0x0000(0x0008)
    float                                         Occlusion;                                                    // 0x0008(0x0004)
    bool                                          EnableSurface;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeInfo
// Struct Size::0x0028
struct FAkSurfaceEdgeInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkSurfaceEdgeVerts
// Struct Size::0x0018
struct FAkSurfaceEdgeVerts
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  AkAudio.AkWaapiFieldNames
// Struct Size::0x0010
struct FAkWaapiFieldNames
{
    FString                                       FieldName;                                                    // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiUri
// Struct Size::0x0010
struct FAkWaapiUri
{
    FString                                       Uri;                                                          // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWindowsAdvancedInitializationSettings
// Struct Size::0x0038
struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    uint32_t                                      MaxSystemAudioObjects;                                        // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AudioConsoleMessage
// Struct Size::0x0040
struct FAudioConsoleMessage
{
    float                                         TimeSeconds;                                                  // 0x0000(0x0004)
    enum class AudioLogVerbosity                  Verbosity;                                                    // 0x0004(0x0001)
    enum class AudioAction                        Action;                                                       // 0x0005(0x0001)
    enum class AudioObjectType                    ObjectType;                                                   // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    FString                                       ObjectName;                                                   // 0x0008(0x0010)
    FString                                       GameObject;                                                   // 0x0018(0x0010)
    float                                         Value;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       Source;                                                       // 0x0030(0x0010)
};


// ScriptStruct  AkAudio.AudioStudioProfileData
// Struct Size::0x0060
struct FAudioStudioProfileData
{
    double                                        ak;                                                           // 0x0000(0x0008)
    double                                        ak;                                                           // 0x0008(0x0008)
    double                                        ak;                                                           // 0x0010(0x0008)
    uint32_t                                      ak;                                                           // 0x0018(0x0004)
    uint32_t                                      ak;                                                           // 0x001C(0x0004)
    uint32_t                                      ak;                                                           // 0x0020(0x0004)
    uint32_t                                      ak;                                                           // 0x0024(0x0004)
    float                                         ak;                                                           // 0x0028(0x0004)
    float                                         gameCPU;                                                      // 0x002C(0x0004)
    float                                         FrameTime;                                                    // 0x0030(0x0004)
    float                                         gameThreadTime;                                               // 0x0034(0x0004)
    float                                         gameMemory;                                                   // 0x0038(0x0004)
    uint32_t                                      ak;                                                           // 0x003C(0x0004)
    uint32_t                                      ak;                                                           // 0x0040(0x0004)
    uint32_t                                      ak;                                                           // 0x0044(0x0004)
    uint32_t                                      ak;                                                           // 0x0048(0x0004)
    float                                         ak;                                                           // 0x004C(0x0004)
    float                                         ak;                                                           // 0x0050(0x0004)
    float                                         ak;                                                           // 0x0054(0x0004)
    float                                         ak;                                                           // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  AkAudio.LevelAudioData
// Struct Size::0x0058
struct FLevelAudioData
{
    FString                                       InheritedConfigName;                                          // 0x0000(0x0010)
    TArray<FString>                               Levels;                                                       // 0x0010(0x0010)
    TArray<FString>                               Banks;                                                        // 0x0020(0x0010)
    TArray<FString>                               States;                                                       // 0x0030(0x0010)
    TArray<FString>                               Events;                                                       // 0x0040(0x0010)
    bool                                          UnloadBanksOnLevelUnload;                                     // 0x0050(0x0001)
    bool                                          StopEventsOnLevelUnload;                                      // 0x0051(0x0001)
    bool                                          StopAll2DSoundsOnLevelUnload;                                 // 0x0052(0x0001)
    bool                                          LevelNameExactMatch;                                          // 0x0053(0x0001)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  AkAudio.AudioEventExtendData
// Struct Size::0x0010
struct FAudioEventExtendData : public FTableRowBase
{
    FName                                         Category;                                                     // 0x0008(0x0008)
};


// ScriptStruct  AkAudio.TArrUMultiSourceSoundComponent
// Struct Size::0x0010
struct FTArrUMultiSourceSoundComponent
{
    TArray<UMultiSourceSoundComponent*>           TArrUMultiSourceSoundComponent;                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplateBase
// Struct Size::0x0010
struct FMovieSceneEvalTemplateBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplate
// Struct Size::0x0020
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    TWeakObjectPtr<UMovieSceneSection>            SourceSectionPtr;                                             // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioEventTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioEventSection*               Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioRTPCTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioRTPCSection*                Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneFloatChannelSerializationHelper
// Struct Size::0x0030
struct FMovieSceneFloatChannelSerializationHelper
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0000(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<int32_t>                               Times;                                                        // 0x0008(0x0010)
    TArray<FMovieSceneFloatValueSerializationHelper>Values;                                                     // 0x0018(0x0010)
    float                                         DefaultValue;                                                 // 0x0028(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AkAudio.MovieSceneFloatValueSerializationHelper
// Struct Size::0x001C
struct FMovieSceneFloatValueSerializationHelper
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0004(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FMovieSceneTangentDataSerializationHelper     Tangent;                                                      // 0x0008(0x0014)
};


// ScriptStruct  AkAudio.MovieSceneTangentDataSerializationHelper
// Struct Size::0x0014
struct FMovieSceneTangentDataSerializationHelper
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ArriveTangentWeight;                                          // 0x000C(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0010(0x0004)
};


// ScriptStruct  AkAudio.ParticleSoundData
// Struct Size::0x0018
struct FParticleSoundData
{
    enum class EParticleEventType                 ParticleEventType;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParticleEventName;                                            // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UAkAudioEvent*                                AudioEvent;                                                   // 0x0010(0x0008)
};


// ScriptStruct  AudioCapture.AudioCaptureDeviceInfo
// Struct Size::0x0010
struct FAudioCaptureDeviceInfo
{
    FName                                         DeviceName;                                                   // 0x0000(0x0008)
    int32_t                                       NumInputChannels;                                             // 0x0008(0x0004)
    int32_t                                       SampleRate;                                                   // 0x000C(0x0004)
};


// ScriptStruct  MFGridLevelsRuntime.MFFoliageBillboardInstanceInfo
// Struct Size::0x0008
struct FMFFoliageBillboardInstanceInfo
{
    int32_t                                       SectionIndex;                                                 // 0x0000(0x0004)
    char                                          bVisibile;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  MFGridLevelsRuntime.MFFoliageBillboardSection
// Struct Size::0x0030
struct FMFFoliageBillboardSection
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    UMaterialInterface*                           MaterialInterface;                                            // 0x0008(0x0008)
    TArray<FTransform>                            PerInstanceTransform;                                         // 0x0010(0x0010)
    TArray<float>                                 PerInstanceCustomData;                                        // 0x0020(0x0010)
};


// ScriptStruct  MFGridLevelsRuntime.MFStaticMeshComponentGroupForCombine
// Struct Size::0x0010
struct FMFStaticMeshComponentGroupForCombine
{
    TArray<FMFStaticMeshComponentForCombine>      StaticMeshComponents;                                         // 0x0000(0x0010)
};


// ScriptStruct  MFGridLevelsRuntime.MFStaticMeshComponentForCombine
// Struct Size::0x0030
struct FMFStaticMeshComponentForCombine
{
    UStaticMeshComponent*                         Component;                                                    // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    uint32_t                                      HashCode;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x001C]                                               // 0x0014(0x001C)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshSection
// Struct Size::0x0040
struct FProcMeshSection
{
    TArray<FProcMeshVertex>                       ProcVertexBuffer;                                             // 0x0000(0x0010)
    TArray<uint32_t>                              ProcIndexBuffer;                                              // 0x0010(0x0010)
    FBox                                          SectionLocalBox;                                              // 0x0020(0x001C)
    bool                                          bEnableCollision;                                             // 0x003C(0x0001)
    bool                                          bSectionVisible;                                              // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshVertex
// Struct Size::0x004C
struct FProcMeshVertex
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FProcMeshTangent                              Tangent;                                                      // 0x0018(0x0010)
    FColor                                        Color;                                                        // 0x0028(0x0004)
    FVector2D                                     UV0;                                                          // 0x002C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0034(0x0008)
    FVector2D                                     UV2;                                                          // 0x003C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0044(0x0008)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshTangent
// Struct Size::0x0010
struct FProcMeshTangent
{
    FVector                                       TangentX;                                                     // 0x0000(0x000C)
    bool                                          bFlipTangentY;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  ReplicationGraph.ConnectionAlwaysRelevantNodePair
// Struct Size::0x0010
struct FConnectionAlwaysRelevantNodePair
{
    UNetConnection*                               NetConnection;                                                // 0x0000(0x0008)
    UReplicationGraphNode*                        Node;                                                         // 0x0008(0x0008)
};


// ScriptStruct  ReplicationGraph.DynamicCharacterRepInfo
// Struct Size::0x0028
struct FDynamicCharacterRepInfo
{
    AActor*                                       Actor;                                                        // 0x0000(0x0008)
    uint32_t                                      ReplicationPeriodFrame;                                       // 0x0008(0x0004)
    uint32_t                                      FastPath;                                                     // 0x000C(0x0004)
    uint32_t                                      FastShare;                                                    // 0x0010(0x0004)
    uint32_t                                      Default;                                                      // 0x0014(0x0004)
    float                                         NetPriority;                                                  // 0x0018(0x0004)
    float                                         ExtraNetPriority;                                             // 0x001C(0x0004)
    bool                                          bReplicate;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ReplicationGraph.LastLocationGatherInfo
// Struct Size::0x0020
struct FLastLocationGatherInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    FVector                                       LastLocation;                                                 // 0x0008(0x000C)
    FVector                                       LastOutOfRangeLocationCheck;                                  // 0x0014(0x000C)
};


// ScriptStruct  ReplicationGraph.TearOffActorInfo
// Struct Size::0x0018
struct FTearOffActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       Actor;                                                        // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.AlwaysRelevantActorInfo
// Struct Size::0x0018
struct FAlwaysRelevantActorInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       LastViewer;                                                   // 0x0008(0x0008)
    AActor*                                       LastViewTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.ClassReplicationInfo
// Struct Size::0x0070
struct FClassReplicationInfo
{
    float                                         DistancePriorityScale;                                        // 0x0000(0x0004)
    float                                         StarvationPriorityScale;                                      // 0x0004(0x0004)
    float                                         AccumulatedNetPriorityBias;                                   // 0x0008(0x0004)
    uint16_t                                      ReplicationPeriodFrame;                                       // 0x000C(0x0002)
    uint16_t                                      FastPath;                                                     // 0x000E(0x0002)
    uint16_t                                      ActorChannelFrameTimeout;                                     // 0x0010(0x0002)
    char                                          pa_0012[0x0056]                                               // 0x0012(0x0056)
    float                                         CullDistance;                                                 // 0x0068(0x0004)
    float                                         CullDistanceSquared;                                          // 0x006C(0x0004)
};


// ScriptStruct  GameplayAbilities.NetSerializeScriptStructCache
// Struct Size::0x0010
struct FNetSerializeScriptStructCache
{
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.AttributeMetaData
// Struct Size::0x0030
struct FAttributeMetaData : public FTableRowBase
{
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         MinValue;                                                     // 0x000C(0x0004)
    float                                         MaxValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DerivedAttributeInfo;                                         // 0x0018(0x0010)
    bool                                          bCanStack;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAttributeData
// Struct Size::0x0010
struct FGameplayAttributeData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         CurrentValue;                                                 // 0x000C(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTriggerData
// Struct Size::0x000C
struct FAbilityTriggerData
{
    FGameplayTag                                  TriggerTag;                                                   // 0x0000(0x0008)
    enum class EGameplayAbilityTriggerSource      TriggerSource;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityBindInfo
// Struct Size::0x0010
struct FGameplayAbilityBindInfo
{
    enum class EGameplayAbilityInputBinds         Command;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGameplayAbility*                             GameplayAbilityClass;                                         // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilterHandle
// Struct Size::0x0010
struct FGameplayTargetDataFilterHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilter
// Struct Size::0x0020
struct FGameplayTargetDataFilter
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SelfActor;                                                    // 0x0008(0x0008)
    AActor*                                       RequiredActorClass;                                           // 0x0010(0x0008)
    enum class ETargetDataFilterSelf              SelfFilter;                                                   // 0x0018(0x0001)
    bool                                          bReverseFilter;                                               // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0008
struct FGameplayAbilityTargetData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00A8
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FHitResult                                    HitResult;                                                    // 0x0008(0x0098)
    bool                                          bHitReplaced;                                                 // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0090
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0070)
    TArray<TWeakObjectPtr<AActor>>                TargetActorArray;                                             // 0x0080(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetingLocationInfo
// Struct Size::0x0070
struct FGameplayAbilityTargetingLocationInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EGameplayAbilityTargetingLocationTypeLocationType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    LiteralTransform;                                             // 0x0020(0x0030)
    AActor*                                       SourceActor;                                                  // 0x0050(0x0008)
    UMeshComponent*                               SourceComponent;                                              // 0x0058(0x0008)
    UGameplayAbility*                             SourceAbility;                                                // 0x0060(0x0008)
    FName                                         SourceSocketName;                                             // 0x0068(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x00F0
struct FGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0070)
    FGameplayAbilityTargetingLocationInfo         TargetLocation;                                               // 0x0080(0x0070)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandleAndPredictionKey
// Struct Size::0x0008
struct FGameplayAbilitySpecHandleAndPredictionKey
{
    FGameplayAbilitySpecHandle                    AbilityHandle;                                                // 0x0000(0x0004)
    int32_t                                       PredictionKeyAtCreation;                                      // 0x0004(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTaskDebugMessage
// Struct Size::0x0018
struct FAbilityTaskDebugMessage
{
    UGameplayTask*                                FromTask;                                                     // 0x0000(0x0008)
    FString                                       Message;                                                      // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.AbilityEndedData
// Struct Size::0x0010
struct FAbilityEndedData
{
    UGameplayAbility*                             AbilityThatEnded;                                             // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0008(0x0004)
    bool                                          bReplicateEndAbility;                                         // 0x000C(0x0001)
    bool                                          bWasCancelled;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActorInfo
// Struct Size::0x0048
struct FGameplayAbilityActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        OwnerActor;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        AvatarActor;                                                  // 0x0010(0x0008)
    TWeakObjectPtr<APlayerController>             PlayerController;                                             // 0x0018(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       AbilitySystemComponent;                                       // 0x0020(0x0008)
    TWeakObjectPtr<USkeletalMeshComponent>        SkeletalMeshComponent;                                        // 0x0028(0x0008)
    TWeakObjectPtr<UAnimInstance>                 AnimInstance;                                                 // 0x0030(0x0008)
    TWeakObjectPtr<UMovementComponent>            MovementComponent;                                            // 0x0038(0x0008)
    FName                                         AffectedAnimInstanceTag;                                      // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.WorldReticleParameters
// Struct Size::0x000C
struct FWorldReticleParameters
{
    FVector                                       AOEScale;                                                     // 0x0000(0x000C)
};


// ScriptStruct  GameplayAbilities.PreallocationInfo
// Struct Size::0x0068
struct FPreallocationInfo
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    TArray<AGameplayCueNotify*>                   ClassesNeedingPreallocation;                                  // 0x0050(0x0010)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCuePendingExecute
// Struct Size::0x0168
struct FGameplayCuePendingExecute
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0010)
    enum class EGameplayCuePayloadType            PayloadType;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    UAbilitySystemComponent*                      OwningComponent;                                              // 0x0030(0x0008)
    FGameplayEffectSpecForRPC                     FromSpec;                                                     // 0x0038(0x0078)
    FGameplayCueParameters                        CueParameters;                                                // 0x00B0(0x00B8)
};


// ScriptStruct  GameplayAbilities.MinimalGameplayCueReplicationProxy
// Struct Size::0x01C0
struct FMinimalGameplayCueReplicationProxy
{
    char                                          pa_0000[0x01B0]                                               // 0x0000(0x01B0)
    UAbilitySystemComponent*                      Owner;                                                        // 0x01B0(0x0008)
    char                                          pa_01B8[0x0008]                                               // 0x01B8(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTag
// Struct Size::0x0008
struct FGameplayCueTag
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueObjectLibrary
// Struct Size::0x0050
struct FGameplayCueObjectLibrary
{
    TArray<FString>                               Paths;                                                        // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
    UObjectLibrary*                               ActorObjectLibrary;                                           // 0x0030(0x0008)
    UObjectLibrary*                               StaticObjectLibrary;                                          // 0x0038(0x0008)
    UGameplayCueSet*                              CueSet;                                                       // 0x0040(0x0008)
    char                                          pa_0048[0x0004]                                               // 0x0048(0x0004)
    bool                                          bShouldSyncScan;                                              // 0x004C(0x0001)
    bool                                          bShouldAsyncLoad;                                             // 0x004D(0x0001)
    bool                                          bShouldSyncLoad;                                              // 0x004E(0x0001)
    bool                                          bHasBeenInitialized;                                          // 0x004F(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotifyData
// Struct Size::0x0030
struct FGameplayCueNotifyData
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
    FSoftObjectPath                               GameplayCueNotifyObj;                                         // 0x0008(0x0018)
    UObject*                                      LoadedGameplayCueClass;                                       // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationManager
// Struct Size::0x0080
struct FGameplayCueTranslationManager
{
    TArray<FGameplayCueTranslatorNode>            TranslationLUT;                                               // 0x0000(0x0010)
    TMap<FName,FGameplayCueTranslatorNodeIndex>   TranslationNameToIndexMap;                                    // 0x0010(0x0050)
    UGameplayTagsManager*                         TagManager;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNodeIndex
// Struct Size::0x0004
struct FGameplayCueTranslatorNodeIndex
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNode
// Struct Size::0x0078
struct FGameplayCueTranslatorNode
{
    TArray<FGameplayCueTranslationLink>           Links;                                                        // 0x0000(0x0010)
    FGameplayCueTranslatorNodeIndex               CachedIndex;                                                  // 0x0010(0x0004)
    FGameplayTag                                  CachedGameplayTag;                                            // 0x0014(0x0008)
    FName                                         CachedGameplayTagName;                                        // 0x001C(0x0008)
    char                                          pa_0024[0x0054]                                               // 0x0024(0x0054)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationLink
// Struct Size::0x0018
struct FGameplayCueTranslationLink
{
    UGameplayCueTranslator*                       RulesCDO;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectQuery
// Struct Size::0x0088
struct FActiveGameplayEffectQuery
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  GameplayAbilities.InheritedTagContainer
// Struct Size::0x0060
struct FInheritedTagContainer
{
    FGameplayTagContainer                         CombinedTags;                                                 // 0x0000(0x0020)
    FGameplayTagContainer                         Added;                                                        // 0x0020(0x0020)
    FGameplayTagContainer                         Removed;                                                      // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCue
// Struct Size::0x0060
struct FGameplayEffectCue
{
    FGameplayAttribute                            MagnitudeAttribute;                                           // 0x0000(0x0038)
    float                                         MinLevel;                                                     // 0x0038(0x0004)
    float                                         MaxLevel;                                                     // 0x003C(0x0004)
    FGameplayTagContainer                         GameplayCueTags;                                              // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayModifierInfo
// Struct Size::0x0290
struct FGameplayModifierInfo
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    enum class EGameplayModsSelector              ModifiersSelector;                                            // 0x0039(0x0001)
    char                                          Priority;                                                     // 0x003A(0x0001)
    char                                          pa_003B[0x0005]                                               // 0x003B(0x0005)
    FScalableFloat                                Magnitude;                                                    // 0x0040(0x0020)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0060(0x01A8)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0210(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0250(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayTagRequirements
// Struct Size::0x0040
struct FGameplayTagRequirements
{
    FGameplayTagContainer                         RequireTags;                                                  // 0x0000(0x0020)
    FGameplayTagContainer                         IgnoreTags;                                                   // 0x0020(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayModEvaluationChannelSettings
// Struct Size::0x0001
struct FGameplayModEvaluationChannelSettings
{
    enum class EGameplayModEvaluationChannel      Channel;                                                      // 0x0000(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifierMagnitude
// Struct Size::0x01A8
struct FGameplayEffectModifierMagnitude
{
    enum class EGameplayEffectMagnitudeCalculationMagnitudeCalculationType;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FScalableFloat                                ScalableFloatMagnitude;                                       // 0x0008(0x0020)
    FAttributeBasedFloat                          AttributeBasedMagnitude;                                      // 0x0028(0x00F8)
    FCustomCalculationBasedFloat                  CustomMagnitude;                                              // 0x0120(0x0078)
    FSetByCallerFloat                             SetByCallerMagnitude;                                         // 0x0198(0x0010)
};


// ScriptStruct  GameplayAbilities.SetByCallerFloat
// Struct Size::0x0010
struct FSetByCallerFloat
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    FGameplayTag                                  DataTag;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.CustomCalculationBasedFloat
// Struct Size::0x0078
struct FCustomCalculationBasedFloat
{
    UGameplayModMagnitudeCalculation*             CalculationClassMagnitude;                                    // 0x0000(0x0008)
    FScalableFloat                                Coefficient;                                                  // 0x0008(0x0020)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0028(0x0020)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0048(0x0020)
    FCurveTableRowHandle                          FinalLookupCurve;                                             // 0x0068(0x0010)
};


// ScriptStruct  GameplayAbilities.AttributeBasedFloat
// Struct Size::0x00F8
struct FAttributeBasedFloat
{
    FScalableFloat                                Coefficient;                                                  // 0x0000(0x0020)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0020(0x0020)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0040(0x0020)
    FGameplayEffectAttributeCaptureDefinition     BackingAttribute;                                             // 0x0060(0x0040)
    FCurveTableRowHandle                          AttributeCurve;                                               // 0x00A0(0x0010)
    enum class EAttributeBasedFloatCalculationTypeAttributeCalculationType;                                     // 0x00B0(0x0001)
    enum class EGameplayModEvaluationChannel      FinalChannel;                                                 // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    FGameplayTagContainer                         SourceTagFilter;                                              // 0x00B8(0x0020)
    FGameplayTagContainer                         TargetTagFilter;                                              // 0x00D8(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionDefinition
// Struct Size::0x0058
struct FGameplayEffectExecutionDefinition
{
    UGameplayEffectExecutionCalculation*          CalculationClass;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         PassedInTags;                                                 // 0x0008(0x0020)
    TArray<FGameplayEffectExecutionScopedModifierInfo>CalculationModifiers;                                     // 0x0028(0x0010)
    TArray<UGameplayEffect*>                      ConditionalGameplayEffectClasses;                             // 0x0038(0x0010)
    TArray<FConditionalGameplayEffect>            ConditionalGameplayEffects;                                   // 0x0048(0x0010)
};


// ScriptStruct  GameplayAbilities.ConditionalGameplayEffect
// Struct Size::0x0028
struct FConditionalGameplayEffect
{
    UGameplayEffect*                              EffectClass;                                                  // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredSourceTags;                                           // 0x0008(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionScopedModifierInfo
// Struct Size::0x0280
struct FGameplayEffectExecutionScopedModifierInfo
{
    FGameplayEffectAttributeCaptureDefinition     CapturedAttribute;                                            // 0x0000(0x0040)
    FGameplayTag                                  TransientAggregatorIdentifier;                                // 0x0040(0x0008)
    enum class EGameplayEffectScopedModifierAggregatorTypeAggregatorType;                                       // 0x0048(0x0001)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0049(0x0001)
    enum class EGameplayModsSelector              ModifiersSelector;                                            // 0x004A(0x0001)
    char                                          Priority;                                                     // 0x004B(0x0001)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0050(0x01A8)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x01F8(0x0001)
    char                                          pa_01F9[0x0007]                                               // 0x01F9(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0200(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0240(0x0040)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionOutput
// Struct Size::0x0018
struct FGameplayEffectCustomExecutionOutput
{
    TArray<FGameplayModifierEvaluatedData>        OutputModifiers;                                              // 0x0000(0x0010)
    char                                          bTriggerConditionalGameplayEffects;                           // 0x0010(0x0001)
    char                                          bHandledStackCountManually;                                   // 0x0010(0x0001)
    char                                          bHandledGameplayCuesManually;                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayModifierEvaluatedData
// Struct Size::0x0068
struct FGameplayModifierEvaluatedData
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Magnitude;                                                    // 0x003C(0x0004)
    char                                          Priority;                                                     // 0x0040(0x0001)
    enum class EGameplayModsSelector              ModsSelector;                                                 // 0x0041(0x0001)
    enum class EGameplayModEvaluationChannel      ModsChannel;                                                  // 0x0042(0x0001)
    char                                          pa_0043[0x0015]                                               // 0x0043(0x0015)
    FActiveGameplayEffectHandle                   Handle;                                                       // 0x0058(0x0008)
    bool                                          IsValid;                                                      // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionParameters
// Struct Size::0x00F0
struct FGameplayEffectCustomExecutionParameters
{
    char                                          pa_0000[0x00F0]                                               // 0x0000(0x00F0)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMap
// Struct Size::0x0020
struct FGameplayTagBlueprintPropertyMap
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FGameplayTagBlueprintPropertyMapping>  PropertyMappings;                                             // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMapping
// Struct Size::0x0048
struct FGameplayTagBlueprintPropertyMapping
{
    FGameplayTag                                  TagToMap;                                                     // 0x0000(0x0008)
    PropertyToEdit                                PropertyToEdit;                                               // 0x0008(0x0020)
    FName                                         PropertyName;                                                 // 0x0028(0x0008)
    FGuid                                         PropertyGuid;                                                 // 0x0030(0x0010)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContext
// Struct Size::0x0070
struct FGameplayEffectContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0010(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityCDO;                                                   // 0x0018(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityInstanceNotReplicated;                                 // 0x0020(0x0008)
    int32_t                                       AbilityLevel;                                                 // 0x0028(0x0004)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x002C(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       InstigatorAbilitySystemComponent;                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<TWeakObjectPtr<AActor>>                Actors;                                                       // 0x0040(0x0010)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
    FVector                                       WorldOrigin;                                                  // 0x0060(0x000C)
    char                                          bHasWorldOrigin;                                              // 0x006C(0x0001)
    char                                          bReplicateSourceObject;                                       // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayTagResponseTableEntry
// Struct Size::0x0050
struct FGameplayTagResponseTableEntry
{
    FGameplayTagReponsePair                       Positive;                                                     // 0x0000(0x0028)
    FGameplayTagReponsePair                       Negative;                                                     // 0x0028(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayTagReponsePair
// Struct Size::0x0028
struct FGameplayTagReponsePair
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x0008)
    UGameplayEffect*                              ResponseGameplayEffect;                                       // 0x0008(0x0008)
    TArray<UGameplayEffect*>                      ResponseGameplayEffects;                                      // 0x0010(0x0010)
    int32_t                                       SoftCountCap;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  EditableMesh.AdaptorPolygon2Group
// Struct Size::0x0048
struct FAdaptorPolygon2Group
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.AdaptorPolygon
// Struct Size::0x0018
struct FAdaptorPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAdaptorTriangleID>                    TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.ElementID
// Struct Size::0x0004
struct FElementID
{
    int32_t                                       IDValue;                                                      // 0x0000(0x0004)
};


// ScriptStruct  EditableMesh.AdaptorTriangleID
// Struct Size::0x0004
struct FAdaptorTriangleID : public FElementID
{
};


// ScriptStruct  MeshDescription.PolygonGroupID
// Struct Size::0x0004
struct FPolygonGroupID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupForPolygon
// Struct Size::0x0008
struct FPolygonGroupForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.PolygonID
// Struct Size::0x0004
struct FPolygonID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupToCreate
// Struct Size::0x0018
struct FPolygonGroupToCreate
{
    FMeshElementAttributeList                     PolygonGroupAttributes;                                       // 0x0000(0x0010)
    FPolygonGroupID                               OriginalPolygonGroupID;                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.MeshElementAttributeList
// Struct Size::0x0010
struct FMeshElementAttributeList
{
    TArray<FMeshElementAttributeData>             Attributes;                                                   // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.MeshElementAttributeData
// Struct Size::0x0060
struct FMeshElementAttributeData
{
    FName                                         AttributeName;                                                // 0x0000(0x0008)
    int32_t                                       AttributeIndex;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMeshElementAttributeValue                    AttributeValue;                                               // 0x0010(0x0050)
};


// ScriptStruct  EditableMesh.MeshElementAttributeValue
// Struct Size::0x0050
struct FMeshElementAttributeValue
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  EditableMesh.VertexToMove
// Struct Size::0x0010
struct FVertexToMove
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    FVector                                       NewVertexPosition;                                            // 0x0004(0x000C)
};


// ScriptStruct  MeshDescription.VertexID
// Struct Size::0x0004
struct FVertexID : public FElementID
{
};


// ScriptStruct  EditableMesh.ChangeVertexInstancesForPolygon
// Struct Size::0x0028
struct FChangeVertexInstancesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexIndexAndInstanceID>             PerimeterVertexIndicesAndInstanceIDs;                         // 0x0008(0x0010)
    TArray<FVertexInstancesForPolygonHole>        VertexIndicesAndInstanceIDsForEachHole;                       // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexInstancesForPolygonHole
// Struct Size::0x0010
struct FVertexInstancesForPolygonHole
{
    TArray<FVertexIndexAndInstanceID>             VertexIndicesAndInstanceIDs;                                  // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.VertexIndexAndInstanceID
// Struct Size::0x0008
struct FVertexIndexAndInstanceID
{
    int32_t                                       ContourIndex;                                                 // 0x0000(0x0004)
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.VertexInstanceID
// Struct Size::0x0004
struct FVertexInstanceID : public FElementID
{
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygon
// Struct Size::0x0028
struct FVertexAttributesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMeshElementAttributeList>             PerimeterVertexAttributeLists;                                // 0x0008(0x0010)
    TArray<FVertexAttributesForPolygonHole>       VertexAttributeListsForEachHole;                              // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygonHole
// Struct Size::0x0010
struct FVertexAttributesForPolygonHole
{
    TArray<FMeshElementAttributeList>             VertexAttributeList;                                          // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForEdge
// Struct Size::0x0018
struct FAttributesForEdge
{
    FEdgeID                                       EdgeID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.EdgeID
// Struct Size::0x0004
struct FEdgeID : public FElementID
{
};


// ScriptStruct  EditableMesh.AttributesForVertexInstance
// Struct Size::0x0018
struct FAttributesForVertexInstance
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForVertex
// Struct Size::0x0018
struct FAttributesForVertex
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.PolygonToSplit
// Struct Size::0x0018
struct FPolygonToSplit
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexPair>                           VertexPairsToSplitAt;                                         // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.VertexPair
// Struct Size::0x0008
struct FVertexPair
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
};


// ScriptStruct  EditableMesh.PolygonToCreate
// Struct Size::0x0020
struct FPolygonToCreate
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexAndAttributes>                  PerimeterVertices;                                            // 0x0008(0x0010)
    FPolygonID                                    OriginalPolygonID;                                            // 0x0018(0x0004)
    enum class EPolygonEdgeHardness               PolygonEdgeHardness;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  EditableMesh.VertexAndAttributes
// Struct Size::0x0018
struct FVertexAndAttributes
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    FVertexID                                     VertexID;                                                     // 0x0004(0x0004)
    FMeshElementAttributeList                     PolygonVertexAttributes;                                      // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.EdgeToCreate
// Struct Size::0x0020
struct FEdgeToCreate
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
    FEdgeID                                       OriginalEdgeID;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexInstanceToCreate
// Struct Size::0x0020
struct FVertexInstanceToCreate
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
    FVertexInstanceID                             OriginalVertexInstanceID;                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexToCreate
// Struct Size::0x0018
struct FVertexToCreate
{
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0000(0x0010)
    FVertexID                                     OriginalVertexID;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitData
// Struct Size::0x0030
struct FSubdivisionLimitData
{
    TArray<FVector>                               VertexPositions;                                              // 0x0000(0x0010)
    TArray<FSubdivisionLimitSection>              Sections;                                                     // 0x0010(0x0010)
    TArray<FSubdividedWireEdge>                   SubdividedWireEdges;                                          // 0x0020(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedWireEdge
// Struct Size::0x000C
struct FSubdividedWireEdge
{
    int32_t                                       EdgeVertex0PositionIndex;                                     // 0x0000(0x0004)
    int32_t                                       EdgeVertex1PositionIndex;                                     // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitSection
// Struct Size::0x0010
struct FSubdivisionLimitSection
{
    TArray<FSubdividedQuad>                       SubdividedQuads;                                              // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedQuad
// Struct Size::0x00D0
struct FSubdividedQuad
{
    FSubdividedQuadVertex                         QuadVertex0;                                                  // 0x0000(0x0034)
    FSubdividedQuadVertex                         QuadVertex1;                                                  // 0x0034(0x0034)
    FSubdividedQuadVertex                         QuadVertex2;                                                  // 0x0068(0x0034)
    FSubdividedQuadVertex                         QuadVertex3;                                                  // 0x009C(0x0034)
};


// ScriptStruct  EditableMesh.SubdividedQuadVertex
// Struct Size::0x0034
struct FSubdividedQuadVertex
{
    int32_t                                       VertexPositionIndex;                                          // 0x0000(0x0004)
    FVector2D                                     TextureCoordinate0;                                           // 0x0004(0x0008)
    FVector2D                                     TextureCoordinate1;                                           // 0x000C(0x0008)
    FColor                                        VertexColor;                                                  // 0x0014(0x0004)
    FVector                                       VertexNormal;                                                 // 0x0018(0x000C)
    FVector                                       VertexTangent;                                                // 0x0024(0x000C)
    float                                         VertexBinormalSign;                                           // 0x0030(0x0004)
};


// ScriptStruct  EditableMesh.RenderingPolygonGroup
// Struct Size::0x0048
struct FRenderingPolygonGroup
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.RenderingPolygon
// Struct Size::0x0018
struct FRenderingPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriangleID>                           TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.TriangleID
// Struct Size::0x0004
struct FTriangleID : public FElementID
{
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionParams
// Struct Size::0x0030
struct FMovieSceneGeometryCollectionParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FSoftObjectPath                               GeometryCollectionCache;                                      // 0x0008(0x0018)
    FFrameNumber                                  StartFrameOffset;                                             // 0x0020(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0024(0x0004)
    float                                         PlayRate;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
// Struct Size::0x0058
struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCollectionSectionTemplateParametersParams;                                               // 0x0020(0x0038)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
// Struct Size::0x0038
struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0030(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0034(0x0004)
};


// ScriptStruct  UdpMessaging.UdpMockMessage
// Struct Size::0x0010
struct FUdpMockMessage
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.NodeHierarchyWithUserData
// Struct Size::0x0078
struct FNodeHierarchyWithUserData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FNodeHierarchyData                            Hierarchy;                                                    // 0x0008(0x0070)
};


// ScriptStruct  AnimationCore.NodeHierarchyData
// Struct Size::0x0070
struct FNodeHierarchyData
{
    TArray<FNodeObject>                           Nodes;                                                        // 0x0000(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0010(0x0010)
    TMap<FName,int32_t>                           NodeNameToIndexMapping;                                       // 0x0020(0x0050)
};


// ScriptStruct  AnimationCore.NodeObject
// Struct Size::0x0010
struct FNodeObject
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.AnimationHierarchy
// Struct Size::0x0088
struct FAnimationHierarchy : public FNodeHierarchyWithUserData
{
    TArray<FConstraintNodeData>                   UserData;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.ConstraintNodeData
// Struct Size::0x00B0
struct FConstraintNodeData
{
    FTransform                                    RelativeParent;                                               // 0x0000(0x0030)
    FConstraintOffset                             ConstraintOffset;                                             // 0x0030(0x0060)
    FName                                         LinkedNode;                                                   // 0x0090(0x0008)
    TArray<FTransformConstraint>                  Constraints;                                                  // 0x0098(0x0010)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  AnimationCore.TransformConstraint
// Struct Size::0x0028
struct FTransformConstraint
{
    FConstraintDescription                        Operator;                                                     // 0x0000(0x000D)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         SourceNode;                                                   // 0x0010(0x0008)
    FName                                         TargetNode;                                                   // 0x0018(0x0008)
    float                                         Weight;                                                       // 0x0020(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescription
// Struct Size::0x000D
struct FConstraintDescription
{
    bool                                          bTranslation;                                                 // 0x0000(0x0001)
    bool                                          bRotation;                                                    // 0x0001(0x0001)
    bool                                          bScale;                                                       // 0x0002(0x0001)
    bool                                          bParent;                                                      // 0x0003(0x0001)
    FFilterOptionPerAxis                          TranslationAxes;                                              // 0x0004(0x0003)
    FFilterOptionPerAxis                          RotationAxes;                                                 // 0x0007(0x0003)
    FFilterOptionPerAxis                          ScaleAxes;                                                    // 0x000A(0x0003)
};


// ScriptStruct  AnimationCore.FilterOptionPerAxis
// Struct Size::0x0003
struct FFilterOptionPerAxis
{
    bool                                          bX;                                                           // 0x0000(0x0001)
    bool                                          bY;                                                           // 0x0001(0x0001)
    bool                                          bZ;                                                           // 0x0002(0x0001)
};


// ScriptStruct  AnimationCore.ConstraintOffset
// Struct Size::0x0060
struct FConstraintOffset
{
    FVector                                       Translation;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Parent;                                                       // 0x0030(0x0030)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0010
struct FAnimNode
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0058
struct FAnimNode : public FAnimNode
{
    TArray<FName>                                 SourcePropertyNames;                                          // 0x0010(0x0010)
    TArray<FName>                                 DestPropertyNames;                                            // 0x0020(0x0010)
    UObject*                                      TargetInstance;                                               // 0x0030(0x0008)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0170
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0058(0x0010)
    TMap<FName,uint16_t>                          ControlRigBoneMapping;                                        // 0x0068(0x0050)
    TMap<FName,uint16_t>                          ControlRigCurveMapping;                                       // 0x00B8(0x0050)
    TMap<FName,uint16_t>                          InputToCurveMappingUIDs;                                      // 0x0108(0x0050)
    TWeakObjectPtr<UNodeMappingContainer>         NodeMappingContainer;                                         // 0x0158(0x0008)
    FControlRigIOSettings                         InputSettings;                                                // 0x0160(0x0002)
    FControlRigIOSettings                         OutputSettings;                                               // 0x0162(0x0002)
    bool                                          bExecute;                                                     // 0x0164(0x0001)
    char                                          pa_0165[0x000B]                                               // 0x0165(0x000B)
};


// ScriptStruct  ControlRig.ControlRigIOSettings
// Struct Size::0x0002
struct FControlRigIOSettings
{
    bool                                          bUpdatePose;                                                  // 0x0000(0x0001)
    bool                                          bUpdateCurves;                                                // 0x0001(0x0001)
};


// ScriptStruct  Engine.PoseLinkBase
// Struct Size::0x0010
struct FPoseLinkBase
{
    int32_t                                       LinkID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
};


// ScriptStruct  Engine.PoseLink
// Struct Size::0x0010
struct FPoseLink : public FPoseLinkBase
{
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0368
struct FAnimNode : public FAnimNode
{
    UControlRig*                                  ControlRigClass;                                              // 0x0170(0x0008)
    UControlRig*                                  ControlRig;                                                   // 0x0178(0x0008)
    float                                         Alpha;                                                        // 0x0180(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0184(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0185(0x0001)
    char                                          bSetRefPoseFromSkeleton;                                      // 0x0185(0x0001)
    char                                          pa_0186[0x0002]                                               // 0x0186(0x0002)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0188(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0190(0x0048)
    FName                                         AlphaCurveName;                                               // 0x01D8(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x01E0(0x0030)
    TMap<FName,FName>                             InputMapping;                                                 // 0x0210(0x0050)
    TMap<FName,FName>                             OutputMapping;                                                // 0x0260(0x0050)
    char                                          pa_02B0[0x00B0]                                               // 0x02B0(0x00B0)
    int32_t                                       LODThreshold;                                                 // 0x0360(0x0004)
    char                                          pa_0364[0x0004]                                               // 0x0364(0x0004)
};


// ScriptStruct  Engine.InputScaleBiasClamp
// Struct Size::0x0030
struct FInputScaleBiasClamp
{
    bool                                          bMapRange;                                                    // 0x0000(0x0001)
    bool                                          bClampResult;                                                 // 0x0001(0x0001)
    bool                                          bInterpResult;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FInputRange                                   InRange;                                                      // 0x0004(0x0008)
    FInputRange                                   OutRange;                                                     // 0x000C(0x0008)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    float                                         ClampMin;                                                     // 0x001C(0x0004)
    float                                         ClampMax;                                                     // 0x0020(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x0024(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.InputRange
// Struct Size::0x0008
struct FInputRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.InputAlphaBoolBlend
// Struct Size::0x0048
struct FInputAlphaBoolBlend
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0008(0x0001)
    bool                                          bInitialized;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0010(0x0008)
    FAlphaBlend                                   AlphaBlend;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.AlphaBlend
// Struct Size::0x0030
struct FAlphaBlend
{
    UCurveFloat*                                  CustomCurve;                                                  // 0x0000(0x0008)
    float                                         BlendTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0018]                                               // 0x000C(0x0018)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
};


// ScriptStruct  Engine.InputScaleBias
// Struct Size::0x0008
struct FInputScaleBias
{
    float                                         Scale;                                                        // 0x0000(0x0004)
    float                                         Bias;                                                         // 0x0004(0x0004)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0178
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<UControlRig>                   ControlRig;                                                   // 0x0170(0x0008)
};


// ScriptStruct  Engine.AnimInstanceProxy
// Struct Size::0x0860
struct FAnimInstanceProxy
{
    char                                          pa_0000[0x0860]                                               // 0x0000(0x0860)
};


// ScriptStruct  ControlRig.ControlRigAnimInstanceProxy
// Struct Size::0x0900
struct FControlRigAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x00A0]                                               // 0x0860(0x00A0)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedCurve
// Struct Size::0x0010
struct FControlRigComponentMappedCurve
{
    FName                                         Source;                                                       // 0x0000(0x0008)
    FName                                         Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedBone
// Struct Size::0x0010
struct FControlRigComponentMappedBone
{
    FName                                         Source;                                                       // 0x0000(0x0008)
    FName                                         Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedComponent
// Struct Size::0x0018
struct FControlRigComponentMappedComponent
{
    USceneComponent*                              Component;                                                    // 0x0000(0x0008)
    FName                                         ElementName;                                                  // 0x0008(0x0008)
    enum class ERigElementType                    ElementType;                                                  // 0x0010(0x0001)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  ControlRig.ControlRigComponentMappedElement
// Struct Size::0x00A0
struct FControlRigComponentMappedElement
{
    FComponentReference                           ComponentReference;                                           // 0x0000(0x0028)
    int32_t                                       TransformIndex;                                               // 0x0028(0x0004)
    FName                                         TransformName;                                                // 0x002C(0x0008)
    enum class ERigElementType                    ElementType;                                                  // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FName                                         ElementName;                                                  // 0x0038(0x0008)
    enum class EControlRigComponentMapDirection   Direction;                                                    // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
    FTransform                                    Offset;                                                       // 0x0050(0x0030)
    float                                         Weight;                                                       // 0x0080(0x0004)
    enum class EControlRigComponentSpace          Space;                                                        // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    USceneComponent*                              SceneComponent;                                               // 0x0088(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x0090(0x0004)
    int32_t                                       SubIndex;                                                     // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  Engine.ComponentReference
// Struct Size::0x0028
struct FComponentReference
{
    AActor*                                       OtherActor;                                                   // 0x0000(0x0008)
    FName                                         ComponentProperty;                                            // 0x0008(0x0008)
    FString                                       PathToComponent;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  RigVM.RigVMExecuteContext
// Struct Size::0x0058
struct FRigVMExecuteContext
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  ControlRig.ControlRigExecuteContext
// Struct Size::0x0060
struct FControlRigExecuteContext : public FRigVMExecuteContext
{
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.ControlRigDrawContainer
// Struct Size::0x0018
struct FControlRigDrawContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FControlRigDrawInstruction>            Instructions;                                                 // 0x0008(0x0010)
};


// ScriptStruct  ControlRig.ControlRigDrawInstruction
// Struct Size::0x00A0
struct FControlRigDrawInstruction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EControlRigDrawSettings            PrimitiveType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FVector>                               Positions;                                                    // 0x0010(0x0010)
    FLinearColor                                  Color;                                                        // 0x0020(0x0010)
    float                                         Thickness;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FTransform                                    Transform;                                                    // 0x0040(0x0030)
    char                                          pa_0070[0x0030]                                               // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.ControlRigDrawInterface
// Struct Size::0x0018
struct FControlRigDrawInterface : public FControlRigDrawContainer
{
};


// ScriptStruct  ControlRig.GizmoActorCreationParam
// Struct Size::0x0120
struct FGizmoActorCreationParam
{
    char                                          pa_0000[0x0120]                                               // 0x0000(0x0120)
};


// ScriptStruct  ControlRig.ControlRigGizmoDefinition
// Struct Size::0x0060
struct FControlRigGizmoDefinition
{
    FName                                         GizmoName;                                                    // 0x0000(0x0008)
    TSoftObjectPtr<UStaticMesh>                   StaticMesh;                                                   // 0x0008(0x0028)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.ControlRigLayerInstanceProxy
// Struct Size::0x0900
struct FControlRigLayerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x00A0]                                               // 0x0860(0x00A0)
};


// ScriptStruct  ControlRig.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.CRFourPointBezier
// Struct Size::0x0030
struct FCRFourPointBezier
{
    FVector                                       A;                                                            // 0x0000(0x000C)
    FVector                                       B;                                                            // 0x000C(0x000C)
    FVector                                       C;                                                            // 0x0018(0x000C)
    FVector                                       D;                                                            // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferenceMap
// Struct Size::0x0020
struct FControlRigSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FControlRigSequenceObjectReferences>   References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferences
// Struct Size::0x0010
struct FControlRigSequenceObjectReferences
{
    TArray<FControlRigSequenceObjectReference>    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReference
// Struct Size::0x0008
struct FControlRigSequenceObjectReference
{
    UControlRig*                                  ControlRigClass;                                              // 0x0000(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimSequencerInstanceProxy
// Struct Size::0x0B00
struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x02A0]                                               // 0x0860(0x02A0)
};


// ScriptStruct  ControlRig.ControlRigSequencerAnimInstanceProxy
// Struct Size::0x0EA0
struct FControlRigSequencerAnimInstanceProxy : public FAnimSequencerInstanceProxy
{
    char                                          pa_0B00[0x03A0]                                               // 0x0B00(0x03A0)
};


// ScriptStruct  ControlRig.ControlRigSettingsPerPinBool
// Struct Size::0x0050
struct FControlRigSettingsPerPinBool
{
    TMap<FString,bool>                            Values;                                                       // 0x0000(0x0050)
};


// ScriptStruct  ControlRig.ControlRigValidationContext
// Struct Size::0x0028
struct FControlRigValidationContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ControlRig.CRSimContainer
// Struct Size::0x0018
struct FCRSimContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         TimeStep;                                                     // 0x0008(0x0004)
    float                                         AccumulatedTime;                                              // 0x000C(0x0004)
    float                                         TimeLeftForStep;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.CRSimLinearSpring
// Struct Size::0x0010
struct FCRSimLinearSpring
{
    int32_t                                       SubjectA;                                                     // 0x0000(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0004(0x0004)
    float                                         Coefficient;                                                  // 0x0008(0x0004)
    float                                         Equilibrium;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.CRSimPoint
// Struct Size::0x0028
struct FCRSimPoint
{
    float                                         Mass;                                                         // 0x0000(0x0004)
    float                                         Size;                                                         // 0x0004(0x0004)
    float                                         LinearDamping;                                                // 0x0008(0x0004)
    float                                         InheritMotion;                                                // 0x000C(0x0004)
    FVector                                       position;                                                     // 0x0010(0x000C)
    FVector                                       LinearVelocity;                                               // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointConstraint
// Struct Size::0x0024
struct FCRSimPointConstraint
{
    enum class ECRSimConstraintType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SubjectA;                                                     // 0x0004(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0008(0x0004)
    FVector                                       DataA;                                                        // 0x000C(0x000C)
    FVector                                       DataB;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointContainer
// Struct Size::0x0078
struct FCRSimPointContainer : public FCRSimContainer
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0018(0x0010)
    TArray<FCRSimLinearSpring>                    Springs;                                                      // 0x0028(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0038(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0048(0x0010)
    TArray<FCRSimPointConstraint>                 Constraints;                                                  // 0x0058(0x0010)
    TArray<FCRSimPoint>                           PreviousStep;                                                 // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.CRSimSoftCollision
// Struct Size::0x0050
struct FCRSimSoftCollision
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    enum class ECRSimSoftCollisionType            ShapeType;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MinimumDistance;                                              // 0x0034(0x0004)
    float                                         MaximumDistance;                                              // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          FalloffType;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         Coefficient;                                                  // 0x0040(0x0004)
    bool                                          bInverted;                                                    // 0x0044(0x0001)
    char                                          pa_0045[0x000B]                                               // 0x0045(0x000B)
};


// ScriptStruct  ControlRig.CRSimPointForce
// Struct Size::0x0018
struct FCRSimPointForce
{
    enum class ECRSimPointForceType               ForceType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Vector;                                                       // 0x0004(0x000C)
    float                                         Coefficient;                                                  // 0x0010(0x0004)
    bool                                          bNormalize;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceData
// Struct Size::0x0008
struct FMovieSceneSequenceInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.MovieSceneControlRigInstanceData
// Struct Size::0x00D8
struct FMovieSceneControlRigInstanceData : public FMovieSceneSequenceInstanceData
{
    bool                                          bAdditive;                                                    // 0x0008(0x0001)
    bool                                          bApplyBoneFilter;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FInputBlendPose                               BoneFilter;                                                   // 0x0010(0x0010)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0020(0x00A0)
    FMovieSceneEvaluationOperand                  Operand;                                                      // 0x00C0(0x0014)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationOperand
// Struct Size::0x0014
struct FMovieSceneEvaluationOperand
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0010(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceID
// Struct Size::0x0004
struct FMovieSceneSequenceID
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneChannel
// Struct Size::0x0008
struct FMovieSceneChannel
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneFloatChannel
// Struct Size::0x00A0
struct FMovieSceneFloatChannel : public FMovieSceneChannel
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0008(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneFloatValue>                 Values;                                                       // 0x0020(0x0010)
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FMovieSceneKeyHandleMap                       KeyHandles;                                                   // 0x0038(0x0060)
    FFrameRate                                    TickResolution;                                               // 0x0098(0x0008)
};


// ScriptStruct  Engine.KeyHandleLookupTable
// Struct Size::0x0060
struct FKeyHandleLookupTable
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneKeyHandleMap
// Struct Size::0x0060
struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
{
};


// ScriptStruct  MovieScene.MovieSceneFloatValue
// Struct Size::0x001C
struct FMovieSceneFloatValue
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FMovieSceneTangentData                        Tangent;                                                      // 0x0004(0x0014)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0018(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0019(0x0001)
    char                                          PaddingByte;                                                  // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneTangentData
// Struct Size::0x0014
struct FMovieSceneTangentData
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0008(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x000C(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.InputBlendPose
// Struct Size::0x0010
struct FInputBlendPose
{
    TArray<FBranchFilter>                         BranchFilters;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.BranchFilter
// Struct Size::0x000C
struct FBranchFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    int32_t                                       BlendDepth;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.ChannelMapInfo
// Struct Size::0x0018
struct FChannelMapInfo
{
    int32_t                                       ControlIndex;                                                 // 0x0000(0x0004)
    int32_t                                       TotalChannelIndex;                                            // 0x0004(0x0004)
    int32_t                                       ChannelIndex;                                                 // 0x0008(0x0004)
    int32_t                                       ParentControlIndex;                                           // 0x000C(0x0004)
    FName                                         ChannelTypeName;                                              // 0x0010(0x0008)
};


// ScriptStruct  ControlRig.IntegerParameterNameAndCurve
// Struct Size::0x0098
struct FIntegerParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneIntegerChannel                     ParameterCurve;                                               // 0x0008(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneIntegerChannel
// Struct Size::0x0090
struct FMovieSceneIntegerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0018(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<int32_t>                               Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  ControlRig.EnumParameterNameAndCurve
// Struct Size::0x00A0
struct FEnumParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneByteChannel                        ParameterCurve;                                               // 0x0008(0x0098)
};


// ScriptStruct  MovieScene.MovieSceneByteChannel
// Struct Size::0x0098
struct FMovieSceneByteChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    char                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<char>                                  Values;                                                       // 0x0020(0x0010)
    UEnum*                                        Enum;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0060]                                               // 0x0038(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FScalarParameterNameAndCurve>          Scalars;                                                      // 0x0020(0x0010)
    TArray<FBoolParameterNameAndCurve>            Bools;                                                        // 0x0030(0x0010)
    TArray<FVector2DParameterNameAndCurves>       Vector2Ds;                                                    // 0x0040(0x0010)
    TArray<FVectorParameterNameAndCurves>         Vectors;                                                      // 0x0050(0x0010)
    TArray<FColorParameterNameAndCurves>          Colors;                                                       // 0x0060(0x0010)
    TArray<FTransformParameterNameAndCurves>      Transforms;                                                   // 0x0070(0x0010)
};


// ScriptStruct  MovieSceneTracks.TransformParameterNameAndCurves
// Struct Size::0x05A8
struct FTransformParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       Translation;                                                  // 0x0008(0x00A0)
    char                                          pa_00A8[0x0140]                                               // 0x00A8(0x0140)
    FMovieSceneFloatChannel                       Rotation;                                                     // 0x01E8(0x00A0)
    char                                          pa_0288[0x0140]                                               // 0x0288(0x0140)
    FMovieSceneFloatChannel                       Scale;                                                        // 0x03C8(0x00A0)
    char                                          pa_0468[0x0140]                                               // 0x0468(0x0140)
};


// ScriptStruct  MovieSceneTracks.ColorParameterNameAndCurves
// Struct Size::0x0288
struct FColorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       RedCurve;                                                     // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       GreenCurve;                                                   // 0x00A8(0x00A0)
    FMovieSceneFloatChannel                       BlueCurve;                                                    // 0x0148(0x00A0)
    FMovieSceneFloatChannel                       AlphaCurve;                                                   // 0x01E8(0x00A0)
};


// ScriptStruct  MovieSceneTracks.VectorParameterNameAndCurves
// Struct Size::0x01E8
struct FVectorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00A8(0x00A0)
    FMovieSceneFloatChannel                       ZCurve;                                                       // 0x0148(0x00A0)
};


// ScriptStruct  MovieSceneTracks.Vector2DParameterNameAndCurves
// Struct Size::0x0148
struct FVector2DParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00A8(0x00A0)
};


// ScriptStruct  MovieSceneTracks.BoolParameterNameAndCurve
// Struct Size::0x0098
struct FBoolParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneBoolChannel                        ParameterCurve;                                               // 0x0008(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneBoolChannel
// Struct Size::0x0090
struct FMovieSceneBoolChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    bool                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<bool>                                  Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  MovieSceneTracks.ScalarParameterNameAndCurve
// Struct Size::0x00A8
struct FScalarParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       ParameterCurve;                                               // 0x0008(0x00A0)
};


// ScriptStruct  ControlRig.MovieSceneControlRigParameterTemplate
// Struct Size::0x00A0
struct FMovieSceneControlRigParameterTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FEnumParameterNameAndCurve>            Enums;                                                        // 0x0080(0x0010)
    TArray<FIntegerParameterNameAndCurve>         Integers;                                                     // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigBoneHierarchy
// Struct Size::0x0098
struct FRigBoneHierarchy
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigBone>                              Bones;                                                        // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
    char                                          pa_0090[0x0008]                                               // 0x0090(0x0008)
};


// ScriptStruct  ControlRig.RigElement
// Struct Size::0x0018
struct FRigElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       Index;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigBone
// Struct Size::0x00E0
struct FRigBone : public FRigElement
{
    FName                                         ParentName;                                                   // 0x0018(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    GlobalTransform;                                              // 0x0060(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0090(0x0030)
    TArray<int32_t>                               Dependents;                                                   // 0x00C0(0x0010)
    enum class ERigBoneType                       Type;                                                         // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigControlHierarchy
// Struct Size::0x0108
struct FRigControlHierarchy
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
    TArray<FRigControl>                           Controls;                                                     // 0x0098(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x00A8(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x00F8(0x0010)
};


// ScriptStruct  ControlRig.RigControl
// Struct Size::0x02F0
struct FRigControl : public FRigElement
{
    enum class ERigControlType                    ControlType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         DisplayName;                                                  // 0x001C(0x0008)
    FName                                         ParentName;                                                   // 0x0024(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x002C(0x0004)
    FName                                         SpaceName;                                                    // 0x0030(0x0008)
    int32_t                                       SpaceIndex;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FTransform                                    OffsetTransform;                                              // 0x0040(0x0030)
    FRigControlValue                              InitialValue;                                                 // 0x0070(0x0080)
    FRigControlValue                              Value;                                                        // 0x00F0(0x0080)
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x0170(0x0001)
    bool                                          bIsCurve;                                                     // 0x0171(0x0001)
    bool                                          bAnimatable;                                                  // 0x0172(0x0001)
    bool                                          bLimitTranslation;                                            // 0x0173(0x0001)
    bool                                          bLimitRotation;                                               // 0x0174(0x0001)
    bool                                          bLimitScale;                                                  // 0x0175(0x0001)
    bool                                          bDrawLimits;                                                  // 0x0176(0x0001)
    char                                          pa_0177[0x0009]                                               // 0x0177(0x0009)
    FRigControlValue                              MinimumValue;                                                 // 0x0180(0x0080)
    FRigControlValue                              MaximumValue;                                                 // 0x0200(0x0080)
    bool                                          bGizmoEnabled;                                                // 0x0280(0x0001)
    bool                                          bGizmoVisible;                                                // 0x0281(0x0001)
    char                                          pa_0282[0x0002]                                               // 0x0282(0x0002)
    FName                                         GizmoName;                                                    // 0x0284(0x0008)
    char                                          pa_028C[0x0004]                                               // 0x028C(0x0004)
    FTransform                                    GizmoTransform;                                               // 0x0290(0x0030)
    FLinearColor                                  GizmoColor;                                                   // 0x02C0(0x0010)
    TArray<int32_t>                               Dependents;                                                   // 0x02D0(0x0010)
    bool                                          bIsTransientControl;                                          // 0x02E0(0x0001)
    char                                          pa_02E1[0x0007]                                               // 0x02E1(0x0007)
    UEnum*                                        ControlEnum;                                                  // 0x02E8(0x0008)
};


// ScriptStruct  ControlRig.RigControlValue
// Struct Size::0x0080
struct FRigControlValue
{
    FRigControlValueStorage                       FloatStorage;                                                 // 0x0000(0x0044)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    Storage;                                                      // 0x0050(0x0030)
};


// ScriptStruct  ControlRig.RigControlValueStorage
// Struct Size::0x0044
struct FRigControlValueStorage
{
    float                                         Float00;                                                      // 0x0000(0x0004)
    float                                         Float01;                                                      // 0x0004(0x0004)
    float                                         Float02;                                                      // 0x0008(0x0004)
    float                                         Float03;                                                      // 0x000C(0x0004)
    float                                         Float10;                                                      // 0x0010(0x0004)
    float                                         Float11;                                                      // 0x0014(0x0004)
    float                                         Float12;                                                      // 0x0018(0x0004)
    float                                         Float13;                                                      // 0x001C(0x0004)
    float                                         Float20;                                                      // 0x0020(0x0004)
    float                                         Float21;                                                      // 0x0024(0x0004)
    float                                         Float22;                                                      // 0x0028(0x0004)
    float                                         Float23;                                                      // 0x002C(0x0004)
    float                                         Float30;                                                      // 0x0030(0x0004)
    float                                         Float31;                                                      // 0x0034(0x0004)
    float                                         Float32;                                                      // 0x0038(0x0004)
    float                                         Float33;                                                      // 0x003C(0x0004)
    bool                                          bValid;                                                       // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  ControlRig.RigCurveContainer
// Struct Size::0x0098
struct FRigCurveContainer
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigCurve>                             Curves;                                                       // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
    char                                          pa_0090[0x0008]                                               // 0x0090(0x0008)
};


// ScriptStruct  ControlRig.RigCurve
// Struct Size::0x0020
struct FRigCurve : public FRigElement
{
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.CachedRigElement
// Struct Size::0x0014
struct FCachedRigElement
{
    FRigElementKey                                Key;                                                          // 0x0000(0x000C)
    uint16_t                                      Index;                                                        // 0x000C(0x0002)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    int32_t                                       ContainerVersion;                                             // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigElementKey
// Struct Size::0x000C
struct FRigElementKey
{
    enum class ERigElementType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  ControlRig.RigHierarchyRef
// Struct Size::0x0001
struct FRigHierarchyRef
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ControlRig.RigHierarchyContainer
// Struct Size::0x0368
struct FRigHierarchyContainer
{
    FRigBoneHierarchy                             BoneHierarchy;                                                // 0x0000(0x0098)
    FRigSpaceHierarchy                            SpaceHierarchy;                                               // 0x0098(0x0090)
    FRigControlHierarchy                          ControlHierarchy;                                             // 0x0128(0x0108)
    FRigCurveContainer                            CurveContainer;                                               // 0x0230(0x0098)
    int32_t                                       Version;                                                      // 0x02C8(0x0004)
    char                                          pa_02CC[0x009C]                                               // 0x02CC(0x009C)
};


// ScriptStruct  ControlRig.RigSpaceHierarchy
// Struct Size::0x0090
struct FRigSpaceHierarchy
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<FRigSpace>                             Spaces;                                                       // 0x0020(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0030(0x0050)
    TArray<FName>                                 Selection;                                                    // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigSpace
// Struct Size::0x0090
struct FRigSpace : public FRigElement
{
    enum class ERigSpaceType                      SpaceType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         ParentName;                                                   // 0x001C(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0060(0x0030)
};


// ScriptStruct  ControlRig.RigMirrorSettings
// Struct Size::0x0028
struct FRigMirrorSettings
{
    enum class EAxis                              MirrorAxis;                                                   // 0x0000(0x0001)
    enum class EAxis                              AxisToFlip;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       OldName;                                                      // 0x0008(0x0010)
    FString                                       NewName;                                                      // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigHierarchyCopyPasteContent
// Struct Size::0x0040
struct FRigHierarchyCopyPasteContent
{
    TArray<enum class ERigElementType>            Types;                                                        // 0x0000(0x0010)
    TArray<FString>                               Contents;                                                     // 0x0010(0x0010)
    TArray<FTransform>                            LocalTransforms;                                              // 0x0020(0x0010)
    TArray<FTransform>                            GlobalTransforms;                                             // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigEventContext
// Struct Size::0x0028
struct FRigEventContext
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  ControlRig.RigElementKeyCollection
// Struct Size::0x0010
struct FRigElementKeyCollection
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigControlModifiedContext
// Struct Size::0x0010
struct FRigControlModifiedContext
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigPose
// Struct Size::0x0010
struct FRigPose
{
    TArray<FRigPoseElement>                       Elements;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigPoseElement
// Struct Size::0x0090
struct FRigPoseElement
{
    FCachedRigElement                             Index;                                                        // 0x0000(0x0014)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FTransform                                    GlobalTransform;                                              // 0x0020(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0050(0x0030)
    float                                         CurveValue;                                                   // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigInfluenceMapPerEvent
// Struct Size::0x0060
struct FRigInfluenceMapPerEvent
{
    TArray<FRigInfluenceMap>                      Maps;                                                         // 0x0000(0x0010)
    TMap<FName,int32_t>                           EventToIndex;                                                 // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceMap
// Struct Size::0x0068
struct FRigInfluenceMap
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
    TArray<FRigInfluenceEntry>                    Entries;                                                      // 0x0008(0x0010)
    TMap<FRigElementKey,int32_t>                  KeyToIndex;                                                   // 0x0018(0x0050)
};


// ScriptStruct  ControlRig.RigInfluenceEntry
// Struct Size::0x0020
struct FRigInfluenceEntry
{
    FRigElementKey                                Source;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigInfluenceEntryModifier
// Struct Size::0x0010
struct FRigInfluenceEntryModifier
{
    TArray<FRigElementKey>                        AffectedList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMStruct
// Struct Size::0x0008
struct FRigVMStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigVMStruct
{
};


// ScriptStruct  ControlRig.RigUnitMutable
// Struct Size::0x0068
struct FRigUnitMutable : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       AccumulatedMinimum;                                           // 0x002C(0x000C)
    FVector                                       AccumulatedMaximum;                                           // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         AccumulatedMinimum;                                           // 0x0014(0x0004)
    float                                         AccumulatedMaximum;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    TargetValue;                                                  // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    float                                         Blend;                                                        // 0x0070(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         TargetValue;                                                  // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    float                                         Blend;                                                        // 0x0030(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x000B]                                               // 0x0035(0x000B)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       TargetValue;                                                  // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    float                                         Blend;                                                        // 0x0020(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Result;                                                       // 0x0028(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         TargetValue;                                                  // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    float                                         Blend;                                                        // 0x0010(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         AccumulatedValue;                                             // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Multiplier;                                                   // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    bool                                          bFlipOrder;                                                   // 0x0070(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Multiplier;                                                   // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    bool                                          bFlipOrder;                                                   // 0x0030(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0031(0x0001)
    char                                          pa_0032[0x000E]                                               // 0x0032(0x000E)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Multiplier;                                                   // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Multiplier;                                                   // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Increment;                                                    // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Increment;                                                    // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    float                                         Weight;                                                       // 0x00A0(0x0004)
    bool                                          bPostMultiply;                                                // 0x00A4(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00A5(0x0001)
    char                                          pa_00A6[0x0002]                                               // 0x00A6(0x0002)
    FCachedRigElement                             CachedBone;                                                   // 0x00A8(0x0014)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0150
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    FRigUnit                                      Primary;                                                      // 0x0074(0x002C)
    FRigUnit                                      Secondary;                                                    // 0x00A0(0x002C)
    float                                         Weight;                                                       // 0x00CC(0x0004)
    FRigUnit                                      DebugSettings;                                                // 0x00D0(0x0040)
    FCachedRigElement                             CachedItem;                                                   // 0x0110(0x0014)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0124(0x0014)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0138(0x0014)
    char                                          pa_014C[0x0004]                                               // 0x014C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x002C
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    FVector                                       Axis;                                                         // 0x0004(0x000C)
    FVector                                       Target;                                                       // 0x0010(0x000C)
    enum class EControlRigVectorKind              Kind;                                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FRigElementKey                                Space;                                                        // 0x0020(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0150
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FRigUnit                                      Primary;                                                      // 0x0070(0x0028)
    FRigUnit                                      Secondary;                                                    // 0x0098(0x0028)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C4(0x0001)
    char                                          pa_00C5[0x000B]                                               // 0x00C5(0x000B)
    FRigUnit                                      DebugSettings;                                                // 0x00D0(0x0040)
    FCachedRigElement                             CachedBoneIndex;                                              // 0x0110(0x0014)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0124(0x0014)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0138(0x0014)
    char                                          pa_014C[0x0004]                                               // 0x014C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    FVector                                       Axis;                                                         // 0x0004(0x000C)
    FVector                                       Target;                                                       // 0x0010(0x000C)
    enum class EControlRigVectorKind              Kind;                                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         Space;                                                        // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    InputTransform;                                               // 0x0010(0x0030)
    FRigUnit                                      Primary;                                                      // 0x0040(0x002C)
    FRigUnit                                      Secondary;                                                    // 0x006C(0x002C)
    float                                         Weight;                                                       // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
    FRigUnit                                      DebugSettings;                                                // 0x00D0(0x0040)
    FCachedRigElement                             PrimaryCachedSpace;                                           // 0x0110(0x0014)
    FCachedRigElement                             SecondaryCachedSpace;                                         // 0x0124(0x0014)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0068(0x0008)
    enum class EAimMode                           AimMode;                                                      // 0x0070(0x0001)
    enum class EAimMode                           UpMode;                                                       // 0x0071(0x0001)
    char                                          pa_0072[0x0002]                                               // 0x0072(0x0002)
    FVector                                       AimVector;                                                    // 0x0074(0x000C)
    FVector                                       UpVector;                                                     // 0x0080(0x000C)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    TArray<FAimTarget>                            AimTargets;                                                   // 0x0090(0x0010)
    TArray<FAimTarget>                            UpTargets;                                                    // 0x00A0(0x0010)
    FRigUnit                                      WorkData;                                                     // 0x00B0(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.ConstraintData
// Struct Size::0x0080
struct FConstraintData
{
    FConstraintDescriptor                         Constraint;                                                   // 0x0000(0x0010)
    float                                         Weight;                                                       // 0x0010(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Offset;                                                       // 0x0020(0x0030)
    FTransform                                    CurrentTransform;                                             // 0x0050(0x0030)
};


// ScriptStruct  AnimationCore.ConstraintDescriptor
// Struct Size::0x0010
struct FConstraintDescriptor
{
    enum class EConstraintType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
};


// ScriptStruct  ControlRig.AimTarget
// Struct Size::0x0050
struct FAimTarget
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       AlignVector;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    bool                                          bMapRange;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FInputRange                                   InRange;                                                      // 0x0020(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0028(0x0008)
    bool                                          bClampResult;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ClampMin;                                                     // 0x0034(0x0004)
    float                                         ClampMax;                                                     // 0x0038(0x0004)
    bool                                          bInterpResult;                                                // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0040(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0044(0x0004)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0054(0x0030)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Scale;                                                        // 0x000C(0x0004)
    float                                         Bias;                                                         // 0x0010(0x0004)
    bool                                          bMapRange;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FInputRange                                   InRange;                                                      // 0x0018(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0020(0x0008)
    bool                                          bClampResult;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ClampMin;                                                     // 0x002C(0x0004)
    float                                         ClampMax;                                                     // 0x0030(0x0004)
    bool                                          bInterpResult;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0038(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x003C(0x0004)
    float                                         Result;                                                       // 0x0040(0x0004)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0044(0x0030)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    enum class EControlRigAnimEasingType          Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SourceMinimum;                                                // 0x0010(0x0004)
    float                                         SourceMaximum;                                                // 0x0014(0x0004)
    float                                         TargetMinimum;                                                // 0x0018(0x0004)
    float                                         TargetMaximum;                                                // 0x001C(0x0004)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EControlRigAnimEasingType          Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0010(0x0088)
    float                                         SourceMinimum;                                                // 0x0098(0x0004)
    float                                         SourceMaximum;                                                // 0x009C(0x0004)
    float                                         TargetMinimum;                                                // 0x00A0(0x0004)
    float                                         TargetMaximum;                                                // 0x00A4(0x0004)
    float                                         Result;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.RuntimeFloatCurve
// Struct Size::0x0088
struct FRuntimeFloatCurve
{
    FRichCurve                                    EditorCurveData;                                              // 0x0000(0x0080)
    UCurveFloat*                                  ExternalCurve;                                                // 0x0080(0x0008)
};


// ScriptStruct  Engine.IndexedCurve
// Struct Size::0x0068
struct FIndexedCurve
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FKeyHandleMap                                 KeyHandlesToIndices;                                          // 0x0008(0x0060)
};


// ScriptStruct  Engine.KeyHandleMap
// Struct Size::0x0060
struct FKeyHandleMap
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.RealCurve
// Struct Size::0x0070
struct FRealCurve : public FIndexedCurve
{
    float                                         DefaultValue;                                                 // 0x0068(0x0004)
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x006C(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  Engine.RichCurve
// Struct Size::0x0080
struct FRichCurve : public FRealCurve
{
    TArray<FRichCurveKey>                         Keys;                                                         // 0x0070(0x0010)
};


// ScriptStruct  Engine.RichCurveKey
// Struct Size::0x001C
struct FRichCurveKey
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0000(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0001(0x0001)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         ArriveTangent;                                                // 0x000C(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0010(0x0004)
    float                                         LeaveTangent;                                                 // 0x0014(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0018(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FTransformFilter                              Filter;                                                       // 0x00A0(0x0009)
    enum class EApplyTransformMode                ApplyTransformMode;                                           // 0x00A9(0x0001)
    enum class ETransformSpaceMode                ApplyTransformSpace;                                          // 0x00AA(0x0001)
    char                                          pa_00AB[0x0005]                                               // 0x00AB(0x0005)
    FTransform                                    BaseTransform;                                                // 0x00B0(0x0030)
    FName                                         BaseJoint;                                                    // 0x00E0(0x0008)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  AnimationCore.TransformFilter
// Struct Size::0x0009
struct FTransformFilter
{
    FFilterOptionPerAxis                          TranslationFilter;                                            // 0x0000(0x0003)
    FFilterOptionPerAxis                          RotationFilter;                                               // 0x0003(0x0003)
    FFilterOptionPerAxis                          ScaleFilter;                                                  // 0x0006(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    TArray<FBlendTarget>                          Targets;                                                      // 0x0040(0x0010)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
};


// ScriptStruct  ControlRig.BlendTarget
// Struct Size::0x0040
struct FBlendTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Targets;                                                      // 0x0068(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0078(0x000C)
    FVector                                       WaveFrequency;                                                // 0x0084(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0090(0x000C)
    FVector                                       WaveOffset;                                                   // 0x009C(0x000C)
    FVector                                       WaveNoise;                                                    // 0x00A8(0x000C)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    float                                         WaveMinimum;                                                  // 0x00B8(0x0004)
    float                                         WaveMaximum;                                                  // 0x00BC(0x0004)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00C8(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    FVector                                       WaveTime;                                                     // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0000(0x000C)
    float                                         Ratio;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              Bones;                                                        // 0x0068(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0078(0x000C)
    FVector                                       WaveFrequency;                                                // 0x0084(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0090(0x000C)
    FVector                                       WaveOffset;                                                   // 0x009C(0x000C)
    FVector                                       WaveNoise;                                                    // 0x00A8(0x000C)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    float                                         WaveMinimum;                                                  // 0x00B8(0x0004)
    float                                         WaveMaximum;                                                  // 0x00BC(0x0004)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x00C0(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00C1(0x0001)
    char                                          pa_00C2[0x0006]                                               // 0x00C2(0x0006)
    FRigUnit                                      WorkData;                                                     // 0x00C8(0x0020)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    float                                         Ratio;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0058)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit
{
    TArray<FCCDIKChainLink>                       Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    TArray<int32_t>                               RotationLimitIndex;                                           // 0x0020(0x0010)
    TArray<float>                                 RotationLimitsPerItem;                                        // 0x0030(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0040(0x0014)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  AnimationCore.CCDIKChainLink
// Struct Size::0x0080
struct FCCDIKChainLink
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0000(0x000C)
    float                                         Limit;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EffectorBone;                                                 // 0x0070(0x0008)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00B8(0x0004)
    bool                                          bStartFromTail;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         BaseRotationLimit;                                            // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<FRigUnit>                              RotationLimits;                                               // 0x00C8(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00E0(0x0058)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    float                                         Limit;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0270
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ChainRoot;                                                    // 0x0068(0x000C)
    FVector                                       Speed;                                                        // 0x0074(0x000C)
    FRigUnit                                      Reach;                                                        // 0x0080(0x0028)
    FRigUnit                                      Wave;                                                         // 0x00A8(0x0040)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x00E8(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x0170(0x003C)
    bool                                          bDrawDebug;                                                   // 0x01AC(0x0001)
    char                                          pa_01AD[0x0003]                                               // 0x01AD(0x0003)
    FTransform                                    DrawWorldOffset;                                              // 0x01B0(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x01E0(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    FVector                                       Time;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FCachedRigElement>                     Items;                                                        // 0x0010(0x0010)
    TArray<float>                                 Ratio;                                                        // 0x0020(0x0010)
    TArray<FVector>                               LocalTip;                                                     // 0x0030(0x0010)
    TArray<FVector>                               PendulumTip;                                                  // 0x0040(0x0010)
    TArray<FVector>                               PendulumPosition;                                             // 0x0050(0x0010)
    TArray<FVector>                               PendulumVelocity;                                             // 0x0060(0x0010)
    TArray<FVector>                               HierarchyLine;                                                // 0x0070(0x0010)
    TArray<FVector>                               VelocityLines;                                                // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x003C
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         PendulumStiffness;                                            // 0x0004(0x0004)
    FVector                                       PendulumGravity;                                              // 0x0008(0x000C)
    float                                         PendulumBlend;                                                // 0x0014(0x0004)
    float                                         PendulumDrag;                                                 // 0x0018(0x0004)
    float                                         PendulumMinimum;                                              // 0x001C(0x0004)
    float                                         PendulumMaximum;                                              // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          PendulumEase;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       UnwindAxis;                                                   // 0x0028(0x000C)
    float                                         UnwindMinimum;                                                // 0x0034(0x0004)
    float                                         UnwindMaximum;                                                // 0x0038(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       WaveFrequency;                                                // 0x0004(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0010(0x000C)
    FVector                                       WaveOffset;                                                   // 0x001C(0x000C)
    FVector                                       WaveNoise;                                                    // 0x0028(0x000C)
    float                                         WaveMinimum;                                                  // 0x0034(0x0004)
    float                                         WaveMaximum;                                                  // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       ReachTarget;                                                  // 0x0004(0x000C)
    FVector                                       ReachAxis;                                                    // 0x0010(0x000C)
    float                                         ReachMinimum;                                                 // 0x001C(0x0004)
    float                                         ReachMaximum;                                                 // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          ReachEase;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0270
struct FRigUnit : public FRigUnit
{
    FName                                         ChainRoot;                                                    // 0x0068(0x0008)
    FVector                                       Speed;                                                        // 0x0070(0x000C)
    FRigUnit                                      Reach;                                                        // 0x007C(0x0028)
    FRigUnit                                      Wave;                                                         // 0x00A4(0x0040)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x00E8(0x0088)
    FRigUnit                                      Pendulum;                                                     // 0x0170(0x003C)
    bool                                          bDrawDebug;                                                   // 0x01AC(0x0001)
    char                                          pa_01AD[0x0003]                                               // 0x01AD(0x0003)
    FTransform                                    DrawWorldOffset;                                              // 0x01B0(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x01E0(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0068(0x0010)
    FRigElementKey                                item;                                                         // 0x0078(0x000C)
    int32_t                                       Index;                                                        // 0x0084(0x0004)
    int32_t                                       Count;                                                        // 0x0088(0x0004)
    float                                         Ratio;                                                        // 0x008C(0x0004)
    bool                                          Continue;                                                     // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FControlRigExecuteContext                     Completed;                                                    // 0x0098(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Index;                                                        // 0x0018(0x0004)
    FRigElementKey                                item;                                                         // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Collection;                                                   // 0x0008(0x0010)
    FRigElementKeyCollection                      Reversed;                                                     // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      A;                                                            // 0x0008(0x0010)
    FRigElementKeyCollection                      B;                                                            // 0x0018(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    TArray<FRigElementKey>                        Items;                                                        // 0x0008(0x0010)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0008(0x0010)
    FName                                         Old;                                                          // 0x0018(0x0008)
    FName                                         New;                                                          // 0x0020(0x0008)
    bool                                          RemoveInvalidItems;                                           // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0030(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0040(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x000C)
    bool                                          bIncludeParent;                                               // 0x0014(0x0001)
    bool                                          bRecursive;                                                   // 0x0015(0x0001)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0028(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         PartialName;                                                  // 0x0008(0x0008)
    enum class ERigElementType                    TypeToSearch;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0018(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0028(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                FirstItem;                                                    // 0x0008(0x000C)
    FRigElementKey                                LastItem;                                                     // 0x0014(0x000C)
    bool                                          Reverse;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FRigElementKeyCollection                      Collection;                                                   // 0x0028(0x0010)
    FRigElementKeyCollection                      CachedCollection;                                             // 0x0038(0x0010)
    int32_t                                       CachedHierarchyHash;                                          // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Transform;                                                    // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Base;                                                         // 0x0030(0x0030)
    FTransform                                    InitTransform;                                                // 0x0060(0x0030)
    FTransform                                    Result;                                                       // 0x0090(0x0030)
    FTransformFilter                              Filter;                                                       // 0x00C0(0x0009)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  AnimationCore.EulerTransform
// Struct Size::0x0024
struct FEulerTransform
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Scale;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FTransform                                    MeshTransform;                                                // 0x00D0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    FRotator                                      Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               Input;                                                        // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Input;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0068(0x0030)
    float                                         MinimumU;                                                     // 0x0098(0x0004)
    float                                         MaximumU;                                                     // 0x009C(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Thickness;                                                    // 0x00B0(0x0004)
    int32_t                                       Detail;                                                       // 0x00B4(0x0004)
    FRigElementKey                                Space;                                                        // 0x00B8(0x000C)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0068(0x0030)
    float                                         MinimumU;                                                     // 0x0098(0x0004)
    float                                         MaximumU;                                                     // 0x009C(0x0004)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Thickness;                                                    // 0x00B0(0x0004)
    int32_t                                       Detail;                                                       // 0x00B4(0x0004)
    FName                                         Space;                                                        // 0x00B8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00C0(0x0030)
    bool                                          bEnabled;                                                     // 0x00F0(0x0001)
    char                                          pa_00F1[0x000F]                                               // 0x00F1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnit
{
    float                                         Scale;                                                        // 0x0068(0x0004)
    FLinearColor                                  Color;                                                        // 0x006C(0x0010)
    float                                         Thickness;                                                    // 0x007C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0030)
    bool                                          bEnabled;                                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0068(0x000C)
    FVector                                       B;                                                            // 0x0074(0x000C)
    FLinearColor                                  Color;                                                        // 0x0080(0x0010)
    float                                         Thickness;                                                    // 0x0090(0x0004)
    FRigElementKey                                Space;                                                        // 0x0094(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0068(0x000C)
    FVector                                       B;                                                            // 0x0074(0x000C)
    FLinearColor                                  Color;                                                        // 0x0080(0x0010)
    float                                         Thickness;                                                    // 0x0090(0x0004)
    FName                                         Space;                                                        // 0x0094(0x0008)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0068(0x0010)
    FLinearColor                                  Color;                                                        // 0x0078(0x0010)
    float                                         Thickness;                                                    // 0x0088(0x0004)
    FRigElementKey                                Space;                                                        // 0x008C(0x000C)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    TArray<FVector>                               Points;                                                       // 0x0068(0x0010)
    FLinearColor                                  Color;                                                        // 0x0078(0x0010)
    float                                         Thickness;                                                    // 0x0088(0x0004)
    FName                                         Space;                                                        // 0x008C(0x0008)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0068(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    FLinearColor                                  Color;                                                        // 0x0078(0x0010)
    float                                         Scale;                                                        // 0x0088(0x0004)
    float                                         Thickness;                                                    // 0x008C(0x0004)
    FName                                         Space;                                                        // 0x0090(0x0008)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Vector;                                                       // 0x0008(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Scale;                                                        // 0x0028(0x0004)
    float                                         Thickness;                                                    // 0x002C(0x0004)
    FName                                         Space;                                                        // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0040(0x0030)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FRigElementKey                                Space;                                                        // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         MinimumDegrees;                                               // 0x00B4(0x0004)
    float                                         MaximumDegrees;                                               // 0x00B8(0x0004)
    float                                         Thickness;                                                    // 0x00BC(0x0004)
    int32_t                                       Detail;                                                       // 0x00C0(0x0004)
    FName                                         Space;                                                        // 0x00C4(0x0008)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FRigElementKey                                Space;                                                        // 0x00B8(0x000C)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FLinearColor                                  Color;                                                        // 0x00A0(0x0010)
    float                                         Scale;                                                        // 0x00B0(0x0004)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    FName                                         Space;                                                        // 0x00B8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00C0(0x0030)
    bool                                          bEnabled;                                                     // 0x00F0(0x0001)
    char                                          pa_00F1[0x000F]                                               // 0x00F1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FTransform>                            Transforms;                                                   // 0x0068(0x0010)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    FLinearColor                                  Color;                                                        // 0x007C(0x0010)
    float                                         Thickness;                                                    // 0x008C(0x0004)
    float                                         Scale;                                                        // 0x0090(0x0004)
    FName                                         Space;                                                        // 0x0094(0x0008)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x00A0(0x0030)
    bool                                          bEnabled;                                                     // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0010)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FTransform>                            DrawTransforms;                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FRigElementKey                                Space;                                                        // 0x00BC(0x000C)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FLinearColor                                  Color;                                                        // 0x00A4(0x0010)
    float                                         Thickness;                                                    // 0x00B4(0x0004)
    float                                         Scale;                                                        // 0x00B8(0x0004)
    FName                                         Space;                                                        // 0x00BC(0x0008)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x00D0(0x0030)
    bool                                          bEnabled;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x000F]                                               // 0x0101(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FLinearColor                                  Color;                                                        // 0x0044(0x0010)
    float                                         Thickness;                                                    // 0x0054(0x0004)
    float                                         Scale;                                                        // 0x0058(0x0004)
    FName                                         Space;                                                        // 0x005C(0x0008)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0030)
    bool                                          bEnabled;                                                     // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Delta;                                                        // 0x0040(0x0030)
    FTransform                                    PreviousValue;                                                // 0x0070(0x0030)
    FTransform                                    Cache;                                                        // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Delta;                                                        // 0x0020(0x0010)
    FQuat                                         PreviousValue;                                                // 0x0030(0x0010)
    FQuat                                         Cache;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Delta;                                                        // 0x0014(0x000C)
    FVector                                       PreviousValue;                                                // 0x0020(0x000C)
    FVector                                       Cache;                                                        // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Delta;                                                        // 0x000C(0x0004)
    float                                         PreviousValue;                                                // 0x0010(0x0004)
    float                                         Cache;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0078(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    float                                         Weight;                                                       // 0x008C(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0010(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0020(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0030(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EndBone;                                                      // 0x0070(0x0008)
    TArray<FRigUnit>                              Rotations;                                                    // 0x0078(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    float                                         Weight;                                                       // 0x008C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x0098(0x0050)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0078
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0068(0x0008)
    float                                         Thickness;                                                    // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0068(0x0008)
    FLinearColor                                  Color;                                                        // 0x0070(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FName                                         InstructionName;                                              // 0x0008(0x0008)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0038)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit
{
    TArray<FFABRIKChainLink>                      Chain;                                                        // 0x0000(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0010(0x0010)
    FCachedRigElement                             CachedEffector;                                               // 0x0020(0x0014)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AnimationCore.FABRIKChainLink
// Struct Size::0x0038
struct FFABRIKChainLink
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0100
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EffectorBone;                                                 // 0x0070(0x0008)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0080(0x0030)
    float                                         Precision;                                                    // 0x00B0(0x0004)
    float                                         Weight;                                                       // 0x00B4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       MaxIterations;                                                // 0x00BC(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x00C0(0x0038)
    char                                          pa_00F8[0x0008]                                               // 0x00F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0200
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    FCRFourPointBezier                            Bezier;                                                       // 0x0078(0x0030)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    float                                         Minimum;                                                      // 0x00AC(0x0004)
    float                                         Maximum;                                                      // 0x00B0(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00B4(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00B8(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00C4(0x000C)
    FVector                                       PoleVectorPosition;                                           // 0x00D0(0x000C)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00E0(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00F0(0x0001)
    char                                          pa_00F1[0x0003]                                               // 0x00F1(0x0003)
    float                                         Weight;                                                       // 0x00F4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x0100(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0160(0x0098)
    char                                          pa_01F8[0x0008]                                               // 0x01F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               ItemPositions;                                                // 0x0008(0x0010)
    TArray<float>                                 ItemSegments;                                                 // 0x0018(0x0010)
    TArray<FVector>                               CurvePositions;                                               // 0x0028(0x0010)
    TArray<float>                                 CurveSegments;                                                // 0x0038(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0048(0x0010)
    TArray<int32_t>                               ItemRotationA;                                                // 0x0058(0x0010)
    TArray<int32_t>                               ItemRotationB;                                                // 0x0068(0x0010)
    TArray<float>                                 ItemRotationT;                                                // 0x0078(0x0010)
    TArray<FTransform>                            ItemLocalTransforms;                                          // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  CurveColor;                                                   // 0x0008(0x0010)
    FLinearColor                                  SegmentsColor;                                                // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0200
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EndBone;                                                      // 0x0070(0x0008)
    FCRFourPointBezier                            Bezier;                                                       // 0x0078(0x0030)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    float                                         Minimum;                                                      // 0x00AC(0x0004)
    float                                         Maximum;                                                      // 0x00B0(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x00B4(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x00B8(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00C4(0x000C)
    FVector                                       PoleVectorPosition;                                           // 0x00D0(0x000C)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    TArray<FRigUnit>                              Rotations;                                                    // 0x00E0(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00F0(0x0001)
    char                                          pa_00F1[0x0003]                                               // 0x00F1(0x0003)
    float                                         Weight;                                                       // 0x00F4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
    FRigUnit                                      DebugSettings;                                                // 0x0100(0x0060)
    FRigUnit                                      WorkData;                                                     // 0x0160(0x0098)
    char                                          pa_01F8[0x0008]                                               // 0x01F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         MinIn;                                                        // 0x000C(0x0004)
    float                                         MaxIn;                                                        // 0x0010(0x0004)
    float                                         MinOut;                                                       // 0x0014(0x0004)
    float                                         MaxOut;                                                       // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Min;                                                          // 0x000C(0x0004)
    float                                         Max;                                                          // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Argument0;                                                    // 0x0008(0x0004)
    float                                         Argument1;                                                    // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D8
struct FRigUnit : public FRigUnitMutable
{
    int32_t                                       Count;                                                        // 0x0068(0x0004)
    int32_t                                       Index;                                                        // 0x006C(0x0004)
    float                                         Ratio;                                                        // 0x0070(0x0004)
    bool                                          Continue;                                                     // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    FControlRigExecuteContext                     Completed;                                                    // 0x0078(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0014)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0050(0x0014)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FTransform                                    Minimum;                                                      // 0x0050(0x0030)
    FTransform                                    Maximum;                                                      // 0x0080(0x0030)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B0(0x0014)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FRotator                                      Rotator;                                                      // 0x0014(0x000C)
    FRotator                                      Minimum;                                                      // 0x0020(0x000C)
    FRotator                                      Maximum;                                                      // 0x002C(0x000C)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0038(0x0014)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       Vector;                                                       // 0x0014(0x000C)
    FVector                                       Minimum;                                                      // 0x0020(0x000C)
    FVector                                       Maximum;                                                      // 0x002C(0x000C)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0038(0x0014)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FVector2D                                     Vector;                                                       // 0x0010(0x0008)
    FVector2D                                     Minimum;                                                      // 0x0018(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0020(0x0008)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0028(0x0014)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    int32_t                                       IntegerValue;                                                 // 0x0010(0x0004)
    int32_t                                       Minimum;                                                      // 0x0014(0x0004)
    int32_t                                       Maximum;                                                      // 0x0018(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x001C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x001C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    bool                                          BoolValue;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0014(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Curve;                                                        // 0x0008(0x0008)
    float                                         Value;                                                        // 0x0010(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0014(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Result;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0014)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0068(0x0008)
    enum class ETransformGetterType               Type;                                                         // 0x0070(0x0001)
    enum class ETransformSpaceMode                TransformSpace;                                               // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
    FTransform                                    BaseTransform;                                                // 0x0080(0x0030)
    FName                                         BaseJoint;                                                    // 0x00B0(0x0008)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    Output;                                                       // 0x00C0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    FName                                         Space;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedBone;                                                   // 0x0050(0x0014)
    FCachedRigElement                             CachedSpace;                                                  // 0x0064(0x0014)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bChildInitial;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKey                                Parent;                                                       // 0x0018(0x000C)
    bool                                          bParentInitial;                                               // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    FCachedRigElement                             CachedChild;                                                  // 0x0060(0x0014)
    FCachedRigElement                             CachedParent;                                                 // 0x0074(0x0014)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x0050(0x0014)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    bool                                          bInitial;                                                     // 0x0015(0x0001)
    char                                          pa_0016[0x000A]                                               // 0x0016(0x000A)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FCachedRigElement                             CachedIndex;                                                  // 0x0050(0x0014)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Year;                                                         // 0x0008(0x0004)
    float                                         Month;                                                        // 0x000C(0x0004)
    float                                         Day;                                                          // 0x0010(0x0004)
    float                                         WeekDay;                                                      // 0x0014(0x0004)
    float                                         Hours;                                                        // 0x0018(0x0004)
    float                                         Minutes;                                                      // 0x001C(0x0004)
    float                                         Seconds;                                                      // 0x0020(0x0004)
    float                                         OverallSeconds;                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0008(0x000C)
    bool                                          bIncludeItem;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKeyCollection                      Siblings;                                                     // 0x0018(0x0010)
    FCachedRigElement                             CachedItem;                                                   // 0x0028(0x0014)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FRigElementKeyCollection                      CachedSiblings;                                               // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Parent;                                                       // 0x0008(0x000C)
    bool                                          bIncludeParent;                                               // 0x0014(0x0001)
    bool                                          bRecursive;                                                   // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FRigElementKeyCollection                      Children;                                                     // 0x0018(0x0010)
    FCachedRigElement                             CachedParent;                                                 // 0x0028(0x0014)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FRigElementKeyCollection                      CachedChildren;                                               // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bIncludeChild;                                                // 0x0014(0x0001)
    bool                                          bReverse;                                                     // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FRigElementKeyCollection                      Parents;                                                      // 0x0018(0x0010)
    FCachedRigElement                             CachedChild;                                                  // 0x0028(0x0014)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FRigElementKeyCollection                      CachedParents;                                                // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    FRigElementKey                                Parent;                                                       // 0x0014(0x000C)
    FCachedRigElement                             CachedChild;                                                  // 0x0020(0x0014)
    FCachedRigElement                             CachedParent;                                                 // 0x0034(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          bIsInteracting;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0008(0x000C)
    FName                                         Old;                                                          // 0x0014(0x0008)
    FName                                         New;                                                          // 0x001C(0x0008)
    FRigElementKey                                Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0008(0x000C)
    bool                                          Exists;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    int32_t                                       BufferSize;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    int32_t                                       BufferSize;                                                   // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0028(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       BufferSize;                                                   // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0018(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    bool                                          Result;                                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    float                                         T;                                                            // 0x0028(0x0004)
    FLinearColor                                  Result;                                                       // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    FLinearColor                                  Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FLinearColor                                  Result;                                                       // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         C;                                                            // 0x0010(0x0004)
    float                                         AlphaAngle;                                                   // 0x0014(0x0004)
    float                                         BetaAngle;                                                    // 0x0018(0x0004)
    float                                         GammaAngle;                                                   // 0x001C(0x0004)
    bool                                          bValid;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         IfTrue;                                                       // 0x000C(0x0004)
    float                                         IfFalse;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Tolerance;                                                    // 0x0010(0x0004)
    bool                                          Result;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Tolerance;                                                    // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SourceMinimum;                                                // 0x000C(0x0004)
    float                                         SourceMaximum;                                                // 0x0010(0x0004)
    float                                         TargetMinimum;                                                // 0x0014(0x0004)
    float                                         TargetMaximum;                                                // 0x0018(0x0004)
    bool                                          bClamp;                                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         T;                                                            // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
    int32_t                                       Int;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Minimum;                                                      // 0x000C(0x0004)
    int32_t                                       Maximum;                                                      // 0x0010(0x0004)
    int32_t                                       Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    int32_t                                       Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    int32_t                                       Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    int32_t                                       A;                                                            // 0x0008(0x0004)
    int32_t                                       B;                                                            // 0x000C(0x0004)
    int32_t                                       Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    enum class EAxis                              Axis;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector                                       Vector;                                                       // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         Result;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FQuat                                         IfTrue;                                                       // 0x0010(0x0010)
    FQuat                                         IfFalse;                                                      // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         T;                                                            // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    float                                         Scale;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FRotator                                      Rotator;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Euler;                                                        // 0x0008(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    enum class ERBFVectorDistanceType             DistanceFunction;                                             // 0x0014(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         SmoothingRadius;                                              // 0x0018(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0020(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorXform>        Targets;                                                      // 0x00B0(0x0010)
    FTransform                                    Output;                                                       // 0x00C0(0x0030)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorXform
// Struct Size::0x0040
struct FMathRBFInterpolateVectorXform
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorQuat>         Targets;                                                      // 0x00B0(0x0010)
    FQuat                                         Output;                                                       // 0x00C0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorQuat
// Struct Size::0x0020
struct FMathRBFInterpolateVectorQuat
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorColor>        Targets;                                                      // 0x00B0(0x0010)
    FLinearColor                                  Output;                                                       // 0x00C0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorColor
// Struct Size::0x001C
struct FMathRBFInterpolateVectorColor
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    FLinearColor                                  Value;                                                        // 0x000C(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorVector>       Targets;                                                      // 0x00B0(0x0010)
    FVector                                       Output;                                                       // 0x00C0(0x000C)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorVector
// Struct Size::0x0018
struct FMathRBFInterpolateVectorVector
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    FVector                                       Value;                                                        // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateVectorFloat>        Targets;                                                      // 0x00B0(0x0010)
    float                                         Output;                                                       // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateVectorFloat
// Struct Size::0x0010
struct FMathRBFInterpolateVectorFloat
{
    FVector                                       Target;                                                       // 0x0000(0x000C)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    enum class ERBFQuatDistanceType               DistanceFunction;                                             // 0x0020(0x0001)
    enum class ERBFKernelType                     SmoothingFunction;                                            // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         SmoothingAngle;                                               // 0x0024(0x0004)
    bool                                          bNormalizeOutput;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       TwistAxis;                                                    // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FRigUnit                                      WorkData;                                                     // 0x0040(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0110
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatXform>          Targets;                                                      // 0x00D0(0x0010)
    FTransform                                    Output;                                                       // 0x00E0(0x0030)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatXform
// Struct Size::0x0040
struct FMathRBFInterpolateQuatXform
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatQuat>           Targets;                                                      // 0x00D0(0x0010)
    FQuat                                         Output;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatQuat
// Struct Size::0x0020
struct FMathRBFInterpolateQuatQuat
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatColor>          Targets;                                                      // 0x00D0(0x0010)
    FLinearColor                                  Output;                                                       // 0x00E0(0x0010)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatColor
// Struct Size::0x0020
struct FMathRBFInterpolateQuatColor
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FLinearColor                                  Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatVector>         Targets;                                                      // 0x00D0(0x0010)
    FVector                                       Output;                                                       // 0x00E0(0x000C)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatVector
// Struct Size::0x0020
struct FMathRBFInterpolateQuatVector
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    FVector                                       Value;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    TArray<FMathRBFInterpolateQuatFloat>          Targets;                                                      // 0x00D0(0x0010)
    float                                         Output;                                                       // 0x00E0(0x0004)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
};


// ScriptStruct  ControlRig.MathRBFInterpolateQuatFloat
// Struct Size::0x0020
struct FMathRBFInterpolateQuatFloat
{
    FQuat                                         Target;                                                       // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    enum class EAxis                              Axis;                                                         // 0x0040(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    float                                         Minimum;                                                      // 0x0044(0x0004)
    float                                         Maximum;                                                      // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Space;                                                        // 0x0050(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0084(0x0010)
    float                                         DebugThickness;                                               // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Rotation;                                                     // 0x0014(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Scale;                                                        // 0x0024(0x000C)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    FEulerTransform                               EulerTransform;                                               // 0x0060(0x0024)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Location;                                                     // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Direction;                                                    // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTransform                                    IfTrue;                                                       // 0x0010(0x0030)
    FTransform                                    IfFalse;                                                      // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    float                                         T;                                                            // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Result;                                                       // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Local;                                                        // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Global;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Global;                                                       // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Local;                                                        // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    FEulerTransform                               EulerTransform;                                               // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x000C)
    FVector                                       Direction;                                                    // 0x0014(0x000C)
    FVector                                       PlanePoint;                                                   // 0x0020(0x000C)
    FVector                                       PlaneNormal;                                                  // 0x002C(0x000C)
    FVector                                       Result;                                                       // 0x0038(0x000C)
    float                                         Distance;                                                     // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    enum class EAxis                              Axis;                                                         // 0x0014(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         Minimum;                                                      // 0x0018(0x0004)
    float                                         Maximum;                                                      // 0x001C(0x0004)
    FTransform                                    Space;                                                        // 0x0020(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0054(0x0010)
    float                                         DebugThickness;                                               // 0x0064(0x0004)
    FVector                                       Result;                                                       // 0x0068(0x000C)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
    float                                         T;                                                            // 0x0038(0x0004)
    FVector                                       Result;                                                       // 0x003C(0x000C)
    FVector                                       Tangent;                                                      // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         MinimumLength;                                                // 0x0014(0x0004)
    float                                         MaximumLength;                                                // 0x0018(0x0004)
    FVector                                       Result;                                                       // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Length;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector                                       IfTrue;                                                       // 0x000C(0x000C)
    FVector                                       IfFalse;                                                      // 0x0018(0x000C)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Tolerance;                                                    // 0x0020(0x0004)
    bool                                          Result;                                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Tolerance;                                                    // 0x0014(0x0004)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       SourceMinimum;                                                // 0x0014(0x000C)
    FVector                                       SourceMaximum;                                                // 0x0020(0x000C)
    FVector                                       TargetMinimum;                                                // 0x002C(0x000C)
    FVector                                       TargetMaximum;                                                // 0x0038(0x000C)
    bool                                          bClamp;                                                       // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         T;                                                            // 0x0020(0x0004)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Factor;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FVector                                       Result;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              BoneToModify;                                                 // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    float                                         WeightMinimum;                                                // 0x007C(0x0004)
    float                                         WeightMaximum;                                                // 0x0080(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnit
{
    TArray<FRigUnit>                              ItemToModify;                                                 // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    float                                         WeightMinimum;                                                // 0x007C(0x0004)
    float                                         WeightMaximum;                                                // 0x0080(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnit
{
    FName                                         RootBone;                                                     // 0x0068(0x0008)
    TArray<FRigUnit>                              Effectors;                                                    // 0x0070(0x0010)
    float                                         Precision;                                                    // 0x0080(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    int32_t                                       MaxIterations;                                                // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FRigUnit                                      WorkData;                                                     // 0x0090(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Search;                                                       // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Start;                                                        // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Ending;                                                       // 0x0010(0x0008)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    FName                                         Old;                                                          // 0x0010(0x0008)
    FName                                         New;                                                          // 0x0018(0x0008)
    FName                                         Result;                                                       // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    bool                                          FromEnd;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         Remainder;                                                    // 0x0018(0x0008)
    FName                                         Chopped;                                                      // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FName                                         A;                                                            // 0x0008(0x0008)
    FName                                         B;                                                            // 0x0010(0x0008)
    FName                                         Result;                                                       // 0x0018(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       position;                                                     // 0x0008(0x000C)
    FVector                                       Speed;                                                        // 0x0014(0x000C)
    FVector                                       Frequency;                                                    // 0x0020(0x000C)
    float                                         Minimum;                                                      // 0x002C(0x0004)
    float                                         Maximum;                                                      // 0x0030(0x0004)
    FVector                                       Result;                                                       // 0x0034(0x000C)
    FVector                                       Time;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Speed;                                                        // 0x000C(0x0004)
    float                                         Frequency;                                                    // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
    float                                         Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    OffsetTransform;                                              // 0x0080(0x0030)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00B8(0x0014)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0160
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Subject;                                                      // 0x0068(0x000C)
    int32_t                                       ParentIndex;                                                  // 0x0074(0x0004)
    FRigElementKeyCollection                      Parents;                                                      // 0x0078(0x0010)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    InitialGlobalTransform;                                       // 0x0090(0x0030)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    Transform;                                                    // 0x00D0(0x0030)
    bool                                          Switched;                                                     // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
    FCachedRigElement                             CachedSubject;                                                // 0x0104(0x0014)
    FCachedRigElement                             CachedParent;                                                 // 0x0118(0x0014)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    FTransform                                    RelativeOffset;                                               // 0x0130(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0200
struct FRigUnit : public FRigUnit
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0068(0x0010)
    TArray<FCRSimLinearSpring>                    Links;                                                        // 0x0078(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0088(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0098(0x0010)
    float                                         SimulatedStepsPerSecond;                                      // 0x00A8(0x0004)
    enum class ECRSimPointIntegrateType           IntegratorType;                                               // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    float                                         VerletBlend;                                                  // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    TArray<FRigUnit>                              BoneTargets;                                                  // 0x00B8(0x0010)
    bool                                          bLimitLocalPosition;                                          // 0x00C8(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00C9(0x0001)
    char                                          pa_00CA[0x0002]                                               // 0x00CA(0x0002)
    FVector                                       PrimaryAimAxis;                                               // 0x00CC(0x000C)
    FVector                                       SecondaryAimAxis;                                             // 0x00D8(0x000C)
    char                                          pa_00E4[0x000C]                                               // 0x00E4(0x000C)
    FRigUnit                                      DebugSettings;                                                // 0x00F0(0x0050)
    FCRFourPointBezier                            Bezier;                                                       // 0x0140(0x0030)
    FRigUnit                                      WorkData;                                                     // 0x0170(0x0088)
    char                                          pa_01F8[0x0008]                                               // 0x01F8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit
{
    FCRSimPointContainer                          Simulation;                                                   // 0x0000(0x0078)
    TArray<FCachedRigElement>                     BoneIndices;                                                  // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    float                                         CollisionScale;                                               // 0x0008(0x0004)
    bool                                          bDrawPointsAsSpheres;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0014
struct FRigUnit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    int32_t                                       TranslationPoint;                                             // 0x0008(0x0004)
    int32_t                                       PrimaryAimPoint;                                              // 0x000C(0x0004)
    int32_t                                       SecondaryAimPoint;                                            // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnit
{
    int32_t                                       NumberOfMeasurements;                                         // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FString                                       Prefix;                                                       // 0x0070(0x0010)
    float                                         AccumulatedTime;                                              // 0x0080(0x0004)
    int32_t                                       MeasurementsLeft;                                             // 0x0084(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0068
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                Child;                                                        // 0x0008(0x000C)
    bool                                          bChildInitial;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRigElementKey                                OldParent;                                                    // 0x0018(0x000C)
    bool                                          bOldParentInitial;                                            // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FRigElementKey                                NewParent;                                                    // 0x0028(0x000C)
    bool                                          bNewParentInitial;                                            // 0x0034(0x0001)
    char                                          pa_0035[0x000B]                                               // 0x0035(0x000B)
    FTransform                                    Transform;                                                    // 0x0040(0x0030)
    FCachedRigElement                             CachedChild;                                                  // 0x0070(0x0014)
    FCachedRigElement                             CachedOldParent;                                              // 0x0084(0x0014)
    FCachedRigElement                             CachedNewParent;                                              // 0x0098(0x0014)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    bool                                          bRecomputeGlobal;                                             // 0x0074(0x0001)
    bool                                          bApplyToChildren;                                             // 0x0075(0x0001)
    bool                                          bRecursive;                                                   // 0x0076(0x0001)
    char                                          pa_0077[0x0001]                                               // 0x0077(0x0001)
    FCachedRigElement                             CachedIndex;                                                  // 0x0078(0x0014)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Argument;                                                     // 0x0020(0x0010)
    float                                         Angle;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument0;                                                    // 0x0010(0x0010)
    FQuat                                         Argument1;                                                    // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    FVector                                       LastResult;                                                   // 0x0024(0x000C)
    int32_t                                       LastSeed;                                                     // 0x0030(0x0004)
    float                                         TimeLeft;                                                     // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         LastResult;                                                   // 0x001C(0x0004)
    int32_t                                       LastSeed;                                                     // 0x0020(0x0004)
    float                                         TimeLeft;                                                     // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0080
struct FRigUnit : public FRigUnitMutable
{
    enum class ERigEvent                          Event;                                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    FRigElementKey                                item;                                                         // 0x006C(0x000C)
    float                                         OffsetInSeconds;                                              // 0x0078(0x0004)
    bool                                          bEnable;                                                      // 0x007C(0x0001)
    bool                                          bOnlyDuringInteraction;                                       // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01E8
struct FRigUnit : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0060)
    FControlRigExecuteContext                     A;                                                            // 0x0068(0x0060)
    FControlRigExecuteContext                     B;                                                            // 0x00C8(0x0060)
    FControlRigExecuteContext                     C;                                                            // 0x0128(0x0060)
    FControlRigExecuteContext                     D;                                                            // 0x0188(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00D0(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00D1(0x0001)
    char                                          pa_00D2[0x0002]                                               // 0x00D2(0x0002)
    FCachedRigElement                             CachedBone;                                                   // 0x00D4(0x0014)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FQuat                                         Rotation;                                                     // 0x0070(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         Weight;                                                       // 0x0084(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x008C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    float                                         Weight;                                                       // 0x00D4(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00D8(0x0001)
    char                                          pa_00D9[0x0003]                                               // 0x00D9(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x00DC(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FVector                                       Translation;                                                  // 0x0070(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    float                                         Weight;                                                       // 0x0080(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x0088(0x0014)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    FLinearColor                                  Color;                                                        // 0x0070(0x0010)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0080(0x0014)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    FTransform                                    Offset;                                                       // 0x0070(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00A4(0x0014)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x00B4(0x0014)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    FRotator                                      Rotator;                                                      // 0x0008(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    FRotator                                      Rotator;                                                      // 0x0074(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0084(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0098
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    FVector                                       Vector;                                                       // 0x0074(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0084(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    FVector2D                                     Vector;                                                       // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    FVector2D                                     Vector;                                                       // 0x0074(0x0008)
    FCachedRigElement                             CachedControlIndex;                                           // 0x007C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    int32_t                                       IntegerValue;                                                 // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    int32_t                                       Weight;                                                       // 0x0070(0x0004)
    int32_t                                       IntegerValue;                                                 // 0x0074(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0078(0x0014)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0068(0x0010)
    float                                         Weight;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    float                                         FloatValue;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0090
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    float                                         FloatValue;                                                   // 0x0074(0x0004)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0078(0x0014)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnitMutable
{
    TArray<FRigUnit>                              Entries;                                                      // 0x0068(0x0010)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x000C
struct FRigUnit
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    bool                                          BoolValue;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0068(0x0008)
    bool                                          BoolValue;                                                    // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FCachedRigElement                             CachedControlIndex;                                           // 0x0074(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       Pattern;                                                      // 0x0078(0x0010)
    bool                                          bVisible;                                                     // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    TArray<FCachedRigElement>                     CachedControlIndices;                                         // 0x0090(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0088
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Curve;                                                        // 0x0068(0x0008)
    float                                         Value;                                                        // 0x0070(0x0004)
    FCachedRigElement                             CachedCurveIndex;                                             // 0x0074(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    FName                                         Space;                                                        // 0x0070(0x0008)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedBone;                                                   // 0x00B8(0x0014)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00CC(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                Child;                                                        // 0x0068(0x000C)
    FRigElementKey                                Parent;                                                       // 0x0074(0x000C)
    bool                                          bParentInitial;                                               // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
    FTransform                                    RelativeTransform;                                            // 0x0090(0x0030)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    FCachedRigElement                             CachedChild;                                                  // 0x00C8(0x0014)
    FCachedRigElement                             CachedParent;                                                 // 0x00DC(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00F0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         SpaceName;                                                    // 0x0068(0x0008)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00D4(0x0014)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FName                                         Space;                                                        // 0x0068(0x0008)
    float                                         Weight;                                                       // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    FCachedRigElement                             CachedSpaceIndex;                                             // 0x00B4(0x0014)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    FVector                                       Scale;                                                        // 0x0078(0x000C)
    float                                         Weight;                                                       // 0x0084(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x008C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
    FQuat                                         Rotation;                                                     // 0x0080(0x0010)
    float                                         Weight;                                                       // 0x0090(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x0098(0x0014)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    FVector                                       Translation;                                                  // 0x0078(0x000C)
    float                                         Weight;                                                       // 0x0084(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x008C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnitMutable
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0074(0x0001)
    bool                                          bInitial;                                                     // 0x0075(0x0001)
    char                                          pa_0076[0x000A]                                               // 0x0076(0x000A)
    FTransform                                    Transform;                                                    // 0x0080(0x0030)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00B4(0x0001)
    char                                          pa_00B5[0x0003]                                               // 0x00B5(0x0003)
    FCachedRigElement                             CachedIndex;                                                  // 0x00B8(0x0014)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C8
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    float                                         SlideAmount;                                                  // 0x0078(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0080(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 ItemSegments;                                                 // 0x0008(0x0010)
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0018(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    TArray<FTransform>                            BlendedTransforms;                                            // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00C8
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EndBone;                                                      // 0x0070(0x0008)
    float                                         SlideAmount;                                                  // 0x0078(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FRigUnit                                      WorkData;                                                     // 0x0080(0x0048)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01D0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EndBone;                                                      // 0x0070(0x0008)
    float                                         HierarchyStrength;                                            // 0x0078(0x0004)
    float                                         EffectorStrength;                                             // 0x007C(0x0004)
    float                                         EffectorRatio;                                                // 0x0080(0x0004)
    float                                         RootStrength;                                                 // 0x0084(0x0004)
    float                                         RootRatio;                                                    // 0x0088(0x0004)
    float                                         Damping;                                                      // 0x008C(0x0004)
    FVector                                       PoleVector;                                                   // 0x0090(0x000C)
    bool                                          bFlipPolePlane;                                               // 0x009C(0x0001)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x009D(0x0001)
    char                                          pa_009E[0x0002]                                               // 0x009E(0x0002)
    FName                                         PoleVectorSpace;                                              // 0x00A0(0x0008)
    FVector                                       PrimaryAxis;                                                  // 0x00A8(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00B4(0x000C)
    bool                                          bLiveSimulation;                                              // 0x00C0(0x0001)
    char                                          pa_00C1[0x0003]                                               // 0x00C1(0x0003)
    int32_t                                       Iterations;                                                   // 0x00C4(0x0004)
    bool                                          bLimitLocalPosition;                                          // 0x00C8(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00C9(0x0001)
    char                                          pa_00CA[0x0006]                                               // 0x00CA(0x0006)
    FRigUnit                                      DebugSettings;                                                // 0x00D0(0x0050)
    FRigUnit                                      WorkData;                                                     // 0x0120(0x00B0)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit
{
    TArray<FCachedRigElement>                     BoneIndices;                                                  // 0x0000(0x0010)
    FCachedRigElement                             CachedPoleVector;                                             // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    FCRSimPointContainer                          Simulation;                                                   // 0x0038(0x0078)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Seconds;                                                      // 0x0008(0x0004)
    float                                         Frames;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0010
struct FRigUnit : public FRigUnit
{
    float                                         Frames;                                                       // 0x0008(0x0004)
    float                                         Seconds;                                                      // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0018
struct FRigUnit : public FRigUnit
{
    float                                         Speed;                                                        // 0x0008(0x0004)
    float                                         Time;                                                         // 0x000C(0x0004)
    float                                         AccumulatedValue;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00B0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    float                                         SecondsAgo;                                                   // 0x0040(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0044(0x0004)
    float                                         TimeRange;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0090(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x00A0(0x0004)
    int32_t                                       UpperBound;                                                   // 0x00A4(0x0004)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0058
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         SecondsAgo;                                                   // 0x0014(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0018(0x0004)
    float                                         TimeRange;                                                    // 0x001C(0x0004)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0030(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0040(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0050(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SecondsAgo;                                                   // 0x000C(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0010(0x0004)
    float                                         TimeRange;                                                    // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0020(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0030(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0040(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Argument0;                                                    // 0x0010(0x0030)
    FTransform                                    Argument1;                                                    // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00A0
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0140
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                item;                                                         // 0x0068(0x000C)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
    FTransform                                    BaseTransform;                                                // 0x0080(0x0030)
    FRigElementKey                                BaseItem;                                                     // 0x00B0(0x000C)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00C0(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D8(0x0060)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         ConstraintDataToTargets;                                      // 0x0010(0x0050)
};


// ScriptStruct  ControlRig.ConstraintTarget
// Struct Size::0x0040
struct FConstraintTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0034(0x0001)
    FTransformFilter                              Filter;                                                       // 0x0035(0x0009)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0130
struct FRigUnit : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0068(0x0008)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
    FTransform                                    BaseTransform;                                                // 0x0080(0x0030)
    FName                                         BaseBone;                                                     // 0x00B0(0x0008)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x00B8(0x0010)
    bool                                          bUseInitialTransforms;                                        // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00D0(0x0060)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FRigElementKeyCollection                      Items;                                                        // 0x0068(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0078(0x000C)
    FVector                                       PoleAxis;                                                     // 0x0084(0x000C)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    float                                         Weight;                                                       // 0x0094(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit
{
    TArray<FCachedRigElement>                     CachedItems;                                                  // 0x0000(0x0010)
    TArray<float>                                 ItemRatios;                                                   // 0x0010(0x0010)
    TArray<FTransform>                            ItemTransforms;                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00D0
struct FRigUnit : public FRigUnit
{
    FName                                         StartBone;                                                    // 0x0068(0x0008)
    FName                                         EndBone;                                                      // 0x0070(0x0008)
    FVector                                       TwistAxis;                                                    // 0x0078(0x000C)
    FVector                                       PoleAxis;                                                     // 0x0084(0x000C)
    enum class EControlRigAnimEasingType          TwistEaseType;                                                // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    float                                         Weight;                                                       // 0x0094(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FRigUnit                                      WorkData;                                                     // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0220
struct FRigUnit : public FRigUnitMutable
{
    FName                                         StartJoint;                                                   // 0x0068(0x0008)
    FName                                         EndJoint;                                                     // 0x0070(0x0008)
    FVector                                       PoleTarget;                                                   // 0x0078(0x000C)
    float                                         Spin;                                                         // 0x0084(0x0004)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
    FTransform                                    EndEffector;                                                  // 0x0090(0x0030)
    float                                         IKBlend;                                                      // 0x00C0(0x0004)
    char                                          pa_00C4[0x000C]                                               // 0x00C4(0x000C)
    FTransform                                    StartJointFKTransform;                                        // 0x00D0(0x0030)
    FTransform                                    MidJointFKTransform;                                          // 0x0100(0x0030)
    FTransform                                    EndJointFKTransform;                                          // 0x0130(0x0030)
    float                                         PreviousFKIKBlend;                                            // 0x0160(0x0004)
    char                                          pa_0164[0x000C]                                               // 0x0164(0x000C)
    FTransform                                    StartJointIKTransform;                                        // 0x0170(0x0030)
    FTransform                                    MidJointIKTransform;                                          // 0x01A0(0x0030)
    FTransform                                    EndJointIKTransform;                                          // 0x01D0(0x0030)
    int32_t                                       StartJointIndex;                                              // 0x0200(0x0004)
    int32_t                                       MidJointIndex;                                                // 0x0204(0x0004)
    int32_t                                       EndJointIndex;                                                // 0x0208(0x0004)
    float                                         UpperLimbLength;                                              // 0x020C(0x0004)
    float                                         LowerLimbLength;                                              // 0x0210(0x0004)
    char                                          pa_0214[0x000C]                                               // 0x0214(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x00E0
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Root;                                                         // 0x0010(0x0030)
    FVector                                       PoleVector;                                                   // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Effector;                                                     // 0x0050(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x0080(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x008C(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x0098(0x0004)
    bool                                          bEnableStretch;                                               // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    float                                         StretchStartRatio;                                            // 0x00A0(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x00A4(0x0004)
    float                                         BoneALength;                                                  // 0x00A8(0x0004)
    float                                         BoneBLength;                                                  // 0x00AC(0x0004)
    FTransform                                    Elbow;                                                        // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0050
struct FRigUnit : public FRigUnit
{
    FVector                                       Root;                                                         // 0x0008(0x000C)
    FVector                                       PoleVector;                                                   // 0x0014(0x000C)
    FVector                                       Effector;                                                     // 0x0020(0x000C)
    bool                                          bEnableStretch;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         StretchStartRatio;                                            // 0x0030(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0034(0x0004)
    float                                         BoneALength;                                                  // 0x0038(0x0004)
    float                                         BoneBLength;                                                  // 0x003C(0x0004)
    FVector                                       Elbow;                                                        // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x01B0
struct FRigUnit : public FRigUnit
{
    FRigElementKey                                ItemA;                                                        // 0x0068(0x000C)
    FRigElementKey                                ItemB;                                                        // 0x0074(0x000C)
    FRigElementKey                                EffectorItem;                                                 // 0x0080(0x000C)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FTransform                                    Effector;                                                     // 0x0090(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x00C0(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00CC(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x00D8(0x0004)
    FVector                                       PoleVector;                                                   // 0x00DC(0x000C)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x00E8(0x0001)
    char                                          pa_00E9[0x0003]                                               // 0x00E9(0x0003)
    FRigElementKey                                PoleVectorSpace;                                              // 0x00EC(0x000C)
    bool                                          bEnableStretch;                                               // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    float                                         StretchStartRatio;                                            // 0x00FC(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0100(0x0004)
    float                                         Weight;                                                       // 0x0104(0x0004)
    float                                         ItemALength;                                                  // 0x0108(0x0004)
    float                                         ItemBLength;                                                  // 0x010C(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0110(0x0001)
    char                                          pa_0111[0x000F]                                               // 0x0111(0x000F)
    FRigUnit                                      DebugSettings;                                                // 0x0120(0x0040)
    FCachedRigElement                             CachedItemAIndex;                                             // 0x0160(0x0014)
    FCachedRigElement                             CachedItemBIndex;                                             // 0x0174(0x0014)
    FCachedRigElement                             CachedEffectorItemIndex;                                      // 0x0188(0x0014)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x019C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0190
struct FRigUnit : public FRigUnit
{
    FName                                         BoneA;                                                        // 0x0068(0x0008)
    FName                                         BoneB;                                                        // 0x0070(0x0008)
    FName                                         EffectorBone;                                                 // 0x0078(0x0008)
    FTransform                                    Effector;                                                     // 0x0080(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x00B0(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x00BC(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x00C8(0x0004)
    FVector                                       PoleVector;                                                   // 0x00CC(0x000C)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x00D8(0x0001)
    char                                          pa_00D9[0x0003]                                               // 0x00D9(0x0003)
    FName                                         PoleVectorSpace;                                              // 0x00DC(0x0008)
    bool                                          bEnableStretch;                                               // 0x00E4(0x0001)
    char                                          pa_00E5[0x0003]                                               // 0x00E5(0x0003)
    float                                         StretchStartRatio;                                            // 0x00E8(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x00EC(0x0004)
    float                                         Weight;                                                       // 0x00F0(0x0004)
    float                                         BoneALength;                                                  // 0x00F4(0x0004)
    float                                         BoneBLength;                                                  // 0x00F8(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00FC(0x0001)
    char                                          pa_00FD[0x0003]                                               // 0x00FD(0x0003)
    FRigUnit                                      DebugSettings;                                                // 0x0100(0x0040)
    FCachedRigElement                             CachedBoneAIndex;                                             // 0x0140(0x0014)
    FCachedRigElement                             CachedBoneBIndex;                                             // 0x0154(0x0014)
    FCachedRigElement                             CachedEffectorBoneIndex;                                      // 0x0168(0x0014)
    FCachedRigElement                             CachedPoleVectorSpaceIndex;                                   // 0x017C(0x0014)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0028
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    FVector                                       Target;                                                       // 0x0008(0x000C)
    float                                         Strength;                                                     // 0x0014(0x0004)
    float                                         Damp;                                                         // 0x0018(0x0004)
    float                                         Blend;                                                        // 0x001C(0x0004)
    FVector                                       position;                                                     // 0x0020(0x000C)
    FVector                                       Velocity;                                                     // 0x002C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0038(0x000C)
    FCRSimPoint                                   Point;                                                        // 0x0044(0x0028)
    bool                                          bInitialized;                                                 // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    bool                                          bEnabled;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FRigElementKey                                Space;                                                        // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0060
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    bool                                          bEnabled;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FName                                         BoneSpace;                                                    // 0x004C(0x0008)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Thickness;                                                    // 0x0024(0x0004)
    float                                         Scale;                                                        // 0x0028(0x0004)
    FRigElementKey                                Space;                                                        // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Thickness;                                                    // 0x0024(0x0004)
    float                                         Scale;                                                        // 0x0028(0x0004)
    FName                                         BoneSpace;                                                    // 0x002C(0x0008)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0040
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    bool                                          bEnabled;                                                     // 0x0014(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FRigElementKey                                Space;                                                        // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0038
struct FRigUnit : public FRigUnit
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    bool                                          bEnabled;                                                     // 0x0014(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FName                                         BoneSpace;                                                    // 0x0030(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0048
struct FRigUnit : public FRigUnit
{
    FVector                                       Start;                                                        // 0x0008(0x000C)
    FVector                                       End;                                                          // 0x0014(0x000C)
    enum class ECollisionChannel                  Channel;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Radius;                                                       // 0x0024(0x0004)
    bool                                          bHit;                                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       HitLocation;                                                  // 0x002C(0x000C)
    FVector                                       HitNormal;                                                    // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FQuat                                         Global;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0030
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FQuat                                         World;                                                        // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Global;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0020
struct FRigUnit : public FRigUnit
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       World;                                                        // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FTransform                                    Global;                                                       // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0070
struct FRigUnit : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FTransform                                    World;                                                        // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.StructReference
// Struct Size::0x0008
struct FStructReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  OBJPool.PoolSpawnOptions
// Struct Size::0x0004
struct FPoolSpawnOptions
{
    enum class EPoolCollisionType                 CollisionType;                                                // 0x0000(0x0001)
    bool                                          EnableCollision;                                              // 0x0001(0x0001)
    bool                                          SimulatePhysics;                                              // 0x0002(0x0001)
    bool                                          ActorTickEnabled;                                             // 0x0003(0x0001)
};


// ScriptStruct  NiagaraCore.NiagaraCompileHash
// Struct Size::0x0010
struct FNiagaraCompileHash
{
    TArray<char>                                  DataHash;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.MovieSceneNiagaraParameterSectionTemplate
// Struct Size::0x0040
struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    FNiagaraVariable                              Parameter;                                                    // 0x0020(0x0020)
};


// ScriptStruct  Niagara.NiagaraVariableBase
// Struct Size::0x000C
struct FNiagaraVariableBase
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FNiagaraTypeDefinitionHandle                  TypeDefHandle;                                                // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraTypeDefinitionHandle
// Struct Size::0x0004
struct FNiagaraTypeDefinitionHandle
{
    int32_t                                       RegisteredTypeIndex;                                          // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraVariable
// Struct Size::0x0020
struct FNiagaraVariable : public FNiagaraVariableBase
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<char>                                  VarData;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Niagara.MovieSceneNiagaraBoolParameterSectionTemplate
// Struct Size::0x00D0
struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneBoolChannel                        BoolChannel;                                                  // 0x0040(0x0090)
};


// ScriptStruct  Niagara.MovieSceneNiagaraColorParameterSectionTemplate
// Struct Size::0x02C0
struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       RedChannel;                                                   // 0x0040(0x00A0)
    FMovieSceneFloatChannel                       GreenChannel;                                                 // 0x00E0(0x00A0)
    FMovieSceneFloatChannel                       BlueChannel;                                                  // 0x0180(0x00A0)
    FMovieSceneFloatChannel                       AlphaChannel;                                                 // 0x0220(0x00A0)
};


// ScriptStruct  Niagara.MovieSceneNiagaraFloatParameterSectionTemplate
// Struct Size::0x00E0
struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       FloatChannel;                                                 // 0x0040(0x00A0)
};


// ScriptStruct  Niagara.MovieSceneNiagaraIntegerParameterSectionTemplate
// Struct Size::0x00D0
struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneIntegerChannel                     IntegerChannel;                                               // 0x0040(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementation
// Struct Size::0x0010
struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackImplementation
// Struct Size::0x0028
struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
{
    FFrameNumber                                  SpawnSectionStartFrame;                                       // 0x0010(0x0004)
    FFrameNumber                                  SpawnSectionEndFrame;                                         // 0x0014(0x0004)
    enum class ENiagaraSystemSpawnSectionStartBehaviorSpawnSectionStartBehavior;                                // 0x0018(0x0004)
    enum class ENiagaraSystemSpawnSectionEvaluateBehaviorSpawnSectionEvaluateBehavior;                          // 0x001C(0x0004)
    enum class ENiagaraSystemSpawnSectionEndBehaviorSpawnSectionEndBehavior;                                    // 0x0020(0x0004)
    enum class ENiagaraAgeUpdateMode              AgeUpdateMode;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Niagara.MovieSceneNiagaraSystemTrackTemplate
// Struct Size::0x0020
struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  Niagara.MovieSceneNiagaraVectorParameterSectionTemplate
// Struct Size::0x02C8
struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
{
    FMovieSceneFloatChannel                       VectorChannels;                                               // 0x0040(0x00A0)
    char                                          pa_00E0[0x01E0]                                               // 0x00E0(0x01E0)
    int32_t                                       ChannelsUsed;                                                 // 0x02C0(0x0004)
    char                                          pa_02C4[0x0004]                                               // 0x02C4(0x0004)
};


// ScriptStruct  Niagara.NiagaraRandInfo
// Struct Size::0x000C
struct FNiagaraRandInfo
{
    int32_t                                       Seed1;                                                        // 0x0000(0x0004)
    int32_t                                       Seed2;                                                        // 0x0004(0x0004)
    int32_t                                       Seed3;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraUserParameterBinding
// Struct Size::0x0020
struct FNiagaraUserParameterBinding
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraScriptVariableBinding
// Struct Size::0x0008
struct FNiagaraScriptVariableBinding
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Niagara.NiagaraVariableDataInterfaceBinding
// Struct Size::0x0020
struct FNiagaraVariableDataInterfaceBinding
{
    FNiagaraVariable                              BoundVariable;                                                // 0x0000(0x0020)
};


// ScriptStruct  Niagara.NiagaraMaterialAttributeBinding
// Struct Size::0x002C
struct FNiagaraMaterialAttributeBinding
{
    FName                                         MaterialParameterName;                                        // 0x0000(0x0008)
    FNiagaraVariableBase                          NiagaraVariable;                                              // 0x0008(0x000C)
    FNiagaraVariableBase                          ResolvedNiagaraVariable;                                      // 0x0014(0x000C)
    FNiagaraVariableBase                          NiagaraChildVariable;                                         // 0x0020(0x000C)
};


// ScriptStruct  Niagara.NiagaraVariableAttributeBinding
// Struct Size::0x0058
struct FNiagaraVariableAttributeBinding
{
    FNiagaraVariableBase                          ParamMapVariable;                                             // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraVariable                              DataSetVariable;                                              // 0x0010(0x0020)
    FNiagaraVariable                              RootVariable;                                                 // 0x0030(0x0020)
    enum class ENiagaraBindingSource              BindingSourceMode;                                            // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    char                                          bBindingExistsOnSource;                                       // 0x0054(0x0001)
    char                                          bIsCachedParticleValue;                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Niagara.NiagaraVariableInfo
// Struct Size::0x0040
struct FNiagaraVariableInfo
{
    FNiagaraVariable                              Variable;                                                     // 0x0000(0x0020)
    FText                                         Definition;                                                   // 0x0020(0x0018)
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0038(0x0008)
};


// ScriptStruct  Niagara.NiagaraSystemUpdateContext
// Struct Size::0x0048
struct FNiagaraSystemUpdateContext
{
    TArray<UNiagaraComponent*>                    ComponentsToReset;                                            // 0x0000(0x0010)
    TArray<UNiagaraComponent*>                    ComponentsToReInit;                                           // 0x0010(0x0010)
    TArray<UNiagaraComponent*>                    ComponentsToNotifySimDestroy;                                 // 0x0020(0x0010)
    TArray<UNiagaraSystem*>                       SystemSimsToDestroy;                                          // 0x0030(0x0010)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  Niagara.VMExternalFunctionBindingInfo
// Struct Size::0x0038
struct FVMExternalFunctionBindingInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         OwnerName;                                                    // 0x0008(0x0008)
    TArray<bool>                                  InputParamLocations;                                          // 0x0010(0x0010)
    int32_t                                       NumOutputs;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FVMFunctionSpecifier>                  FunctionSpecifiers;                                           // 0x0028(0x0010)
};


// ScriptStruct  Niagara.VMFunctionSpecifier
// Struct Size::0x0010
struct FVMFunctionSpecifier
{
    FName                                         Key;                                                          // 0x0000(0x0008)
    FName                                         Value;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraStatScope
// Struct Size::0x0010
struct FNiagaraStatScope
{
    FName                                         FullName;                                                     // 0x0000(0x0008)
    FName                                         FriendlyName;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceCompileInfo
// Struct Size::0x0038
struct FNiagaraScriptDataInterfaceCompileInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       UserPtrIdx;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0010(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0020(0x0008)
    FName                                         RegisteredParameterMapWrite;                                  // 0x0028(0x0008)
    bool                                          bIsPlaceholder;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Niagara.NiagaraTypeDefinition
// Struct Size::0x0010
struct FNiagaraTypeDefinition
{
    UObject*                                      ClassStructOrEnum;                                            // 0x0000(0x0008)
    uint16_t                                      UnderlyingType;                                               // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Niagara.NiagaraScriptDataInterfaceInfo
// Struct Size::0x0038
struct FNiagaraScriptDataInterfaceInfo
{
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       UserPtrIdx;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FNiagaraTypeDefinition                        Type;                                                         // 0x0018(0x0010)
    FName                                         RegisteredParameterMapRead;                                   // 0x0028(0x0008)
    FName                                         RegisteredParameterMapWrite;                                  // 0x0030(0x0008)
};


// ScriptStruct  Niagara.NiagaraFunctionSignature
// Struct Size::0x0090
struct FNiagaraFunctionSignature
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TArray<FNiagaraVariable>                      Inputs;                                                       // 0x0008(0x0010)
    TArray<FNiagaraVariable>                      Outputs;                                                      // 0x0018(0x0010)
    FName                                         OwnerName;                                                    // 0x0028(0x0008)
    char                                          bRequiresContext;                                             // 0x0030(0x0001)
    char                                          bRequiresExecPin;                                             // 0x0030(0x0001)
    char                                          bMemberFunction;                                              // 0x0030(0x0001)
    char                                          bExperimental;                                                // 0x0030(0x0001)
    char                                          bSupportsCPU;                                                 // 0x0030(0x0001)
    char                                          bSupportsGPU;                                                 // 0x0030(0x0001)
    char                                          bWriteFunction;                                               // 0x0030(0x0001)
    char                                          bSoftDeprecatedFunction;                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       ModuleUsageBitmask;                                           // 0x0034(0x0004)
    int32_t                                       ContextStageMinIndex;                                         // 0x0038(0x0004)
    int32_t                                       ContextStageMaxIndex;                                         // 0x003C(0x0004)
    TMap<FName,FName>                             FunctionSpecifiers;                                           // 0x0040(0x0050)
};


// ScriptStruct  Niagara.NiagaraScriptDataUsageInfo
// Struct Size::0x0001
struct FNiagaraScriptDataUsageInfo
{
    bool                                          bReadsAttributeData;                                          // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraDataSetProperties
// Struct Size::0x0020
struct FNiagaraDataSetProperties
{
    FNiagaraDataSetID                             ID;                                                           // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetID
// Struct Size::0x000C
struct FNiagaraDataSetID
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ENiagaraDataSetType                Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Niagara.NiagaraMaterialOverride
// Struct Size::0x0018
struct FNiagaraMaterialOverride
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    uint32_t                                      MaterialSubIndex;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UNiagaraRendererProperties*                   EmitterRendererProperty;                                      // 0x0010(0x0008)
};


// ScriptStruct  Niagara.NCPool
// Struct Size::0x0038
struct FNCPool
{
    TArray<FNCPoolElement>                        FreeElements;                                                 // 0x0000(0x0010)
    TArray<UNiagaraComponent*>                    InUseComponents;                                              // 0x0010(0x0010)
    TArray<UNiagaraComponent*>                    InUseComponents;                                              // 0x0020(0x0010)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Niagara.NCPoolElement
// Struct Size::0x0010
struct FNCPoolElement
{
    UNiagaraComponent*                            Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Niagara.NiagaraComponentPropertyBinding
// Struct Size::0x00A0
struct FNiagaraComponentPropertyBinding
{
    FNiagaraVariableAttributeBinding              AttributeBinding;                                             // 0x0000(0x0058)
    FName                                         PropertyName;                                                 // 0x0058(0x0008)
    FNiagaraTypeDefinition                        PropertyType;                                                 // 0x0060(0x0010)
    FName                                         MetadataSetterName;                                           // 0x0070(0x0008)
    FNiagaraVariable                              WritableValue;                                                // 0x0078(0x0020)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  Niagara.NiagaraEmitterNameSettingsRef
// Struct Size::0x0018
struct FNiagaraEmitterNameSettingsRef
{
    FName                                         SystemName;                                                   // 0x0000(0x0008)
    FString                                       EmitterName;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Niagara.BasicParticleData
// Struct Size::0x001C
struct FBasicParticleData
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    float                                         Size;                                                         // 0x000C(0x0004)
    FVector                                       Velocity;                                                     // 0x0010(0x000C)
};


// ScriptStruct  Niagara.MeshTriCoordinate
// Struct Size::0x0010
struct FMeshTriCoordinate
{
    int32_t                                       Tri;                                                          // 0x0000(0x0004)
    FVector                                       BaryCoord;                                                    // 0x0004(0x000C)
};


// ScriptStruct  Niagara.NDIStaticMeshSectionFilter
// Struct Size::0x0010
struct FNDIStaticMeshSectionFilter
{
    TArray<int32_t>                               AllowedMaterialSlots;                                         // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraDataSetCompiledData
// Struct Size::0x0040
struct FNiagaraDataSetCompiledData
{
    TArray<FNiagaraVariable>                      Variables;                                                    // 0x0000(0x0010)
    TArray<FNiagaraVariableLayoutInfo>            VariableLayouts;                                              // 0x0010(0x0010)
    FNiagaraDataSetID                             ID;                                                           // 0x0020(0x000C)
    uint32_t                                      TotalFloatComponents;                                         // 0x002C(0x0004)
    uint32_t                                      TotalInt32Components;                                         // 0x0030(0x0004)
    uint32_t                                      TotalHalfComponents;                                          // 0x0034(0x0004)
    char                                          bRequiresPersistentIDs;                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    enum class ENiagaraSimTarget                  SimTarget;                                                    // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Niagara.NiagaraVariableLayoutInfo
// Struct Size::0x0070
struct FNiagaraVariableLayoutInfo
{
    uint32_t                                      FloatComponentStart;                                          // 0x0000(0x0004)
    uint32_t                                      Int32ComponentStart;                                          // 0x0004(0x0004)
    uint32_t                                      HalfComponentStart;                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraTypeLayoutInfo                        LayoutInfo;                                                   // 0x0010(0x0060)
};


// ScriptStruct  Niagara.NiagaraTypeLayoutInfo
// Struct Size::0x0060
struct FNiagaraTypeLayoutInfo
{
    TArray<uint32_t>                              FloatComponentByteOffsets;                                    // 0x0000(0x0010)
    TArray<uint32_t>                              FloatComponentRegisterOffsets;                                // 0x0010(0x0010)
    TArray<uint32_t>                              Int32ComponentByteOffsets;                                    // 0x0020(0x0010)
    TArray<uint32_t>                              Int32ComponentRegisterOffsets;                                // 0x0030(0x0010)
    TArray<uint32_t>                              HalfComponentByteOffsets;                                     // 0x0040(0x0010)
    TArray<uint32_t>                              HalfComponentRegisterOffsets;                                 // 0x0050(0x0010)
};


// ScriptStruct  Niagara.NiagaraGraphViewSettings
// Struct Size::0x0010
struct FNiagaraGraphViewSettings
{
    FVector2D                                     Location;                                                     // 0x0000(0x0008)
    float                                         Zoom;                                                         // 0x0008(0x0004)
    bool                                          bIsValid;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraEmitterScalabilityOverrides
{
    TArray<FNiagaraEmitterScalabilityOverride>    Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettings
// Struct Size::0x0038
struct FNiagaraEmitterScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bScaleSpawnCount;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         SpawnCountScale;                                              // 0x0034(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSet
// Struct Size::0x0030
struct FNiagaraPlatformSet
{
    int32_t                                       QualityLevelMask;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FNiagaraDeviceProfileStateEntry>       DeviceProfileStates;                                          // 0x0008(0x0010)
    TArray<FNiagaraPlatformSetCVarCondition>      CVarConditions;                                               // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraPlatformSetCVarCondition
// Struct Size::0x0028
struct FNiagaraPlatformSetCVarCondition
{
    FName                                         CVarName;                                                     // 0x0000(0x0008)
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       MinInt;                                                       // 0x000C(0x0004)
    int32_t                                       MaxInt;                                                       // 0x0010(0x0004)
    float                                         MinFloat;                                                     // 0x0014(0x0004)
    float                                         MaxFloat;                                                     // 0x0018(0x0004)
    char                                          bUseMinInt;                                                   // 0x001C(0x0001)
    char                                          bUseMaxInt;                                                   // 0x001C(0x0001)
    char                                          bUseMinFloat;                                                 // 0x001C(0x0001)
    char                                          bUseMaxFloat;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x000B]                                               // 0x001D(0x000B)
};


// ScriptStruct  Niagara.NiagaraDeviceProfileStateEntry
// Struct Size::0x0010
struct FNiagaraDeviceProfileStateEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    uint32_t                                      QualityLevelMask;                                             // 0x0008(0x0004)
    uint32_t                                      SetQualityLevelMask;                                          // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilityOverride
// Struct Size::0x0040
struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
{
    char                                          bOverrideSpawnCountScale;                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Niagara.NiagaraEmitterScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraEmitterScalabilitySettingsArray
{
    TArray<FNiagaraEmitterScalabilitySettings>    Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverrides
// Struct Size::0x0010
struct FNiagaraSystemScalabilityOverrides
{
    TArray<FNiagaraSystemScalabilityOverride>     Overrides;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettings
// Struct Size::0x0048
struct FNiagaraSystemScalabilitySettings
{
    FNiagaraPlatformSet                           Platforms;                                                    // 0x0000(0x0030)
    char                                          bCullByDistance;                                              // 0x0030(0x0001)
    char                                          bCullMaxInstanceCount;                                        // 0x0030(0x0001)
    char                                          bCullPerSystemMaxInstanceCount;                               // 0x0030(0x0001)
    char                                          bCullByMaxTimeWithoutRender;                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MaxDistance;                                                  // 0x0034(0x0004)
    int32_t                                       MaxInstances;                                                 // 0x0038(0x0004)
    int32_t                                       MaxSystemInstances;                                           // 0x003C(0x0004)
    float                                         MaxTimeWithoutRender;                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilityOverride
// Struct Size::0x0050
struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
{
    char                                          bOverrideDistanceSettings;                                    // 0x0048(0x0001)
    char                                          bOverrideInstanceCountSettings;                               // 0x0048(0x0001)
    char                                          bOverridePerSystemInstanceCountSettings;                      // 0x0048(0x0001)
    char                                          bOverrideTimeSinceRendererSettings;                           // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Niagara.NiagaraSystemScalabilitySettingsArray
// Struct Size::0x0010
struct FNiagaraSystemScalabilitySettingsArray
{
    TArray<FNiagaraSystemScalabilitySettings>     Settings;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraDetailsLevelScaleOverrides
// Struct Size::0x0014
struct FNiagaraDetailsLevelScaleOverrides
{
    float                                         Low;                                                          // 0x0000(0x0004)
    float                                         Medium;                                                       // 0x0004(0x0004)
    float                                         High;                                                         // 0x0008(0x0004)
    float                                         Epic;                                                         // 0x000C(0x0004)
    float                                         Cine;                                                         // 0x0010(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterScriptProperties
// Struct Size::0x0028
struct FNiagaraEmitterScriptProperties
{
    UNiagaraScript*                               Script;                                                       // 0x0000(0x0008)
    TArray<FNiagaraEventReceiverProperties>       EventReceivers;                                               // 0x0008(0x0010)
    TArray<FNiagaraEventGeneratorProperties>      EventGenerators;                                              // 0x0018(0x0010)
};


// ScriptStruct  Niagara.NiagaraEventGeneratorProperties
// Struct Size::0x0050
struct FNiagaraEventGeneratorProperties
{
    int32_t                                       MaxEventsPerFrame;                                            // 0x0000(0x0004)
    FName                                         ID;                                                           // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0010(0x0040)
};


// ScriptStruct  Niagara.NiagaraEventReceiverProperties
// Struct Size::0x0018
struct FNiagaraEventReceiverProperties
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         SourceEventGenerator;                                         // 0x0008(0x0008)
    FName                                         SourceEmitter;                                                // 0x0010(0x0008)
};


// ScriptStruct  Niagara.NiagaraEventScriptProperties
// Struct Size::0x0058
struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
{
    enum class EScriptExecutionMode               ExecutionMode;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    uint32_t                                      SpawnNumber;                                                  // 0x002C(0x0004)
    uint32_t                                      MaxEventsPerFrame;                                            // 0x0030(0x0004)
    FGuid                                         SourceEmitterID;                                              // 0x0034(0x0010)
    FName                                         SourceEventName;                                              // 0x0044(0x0008)
    bool                                          bRandomSpawnNumber;                                           // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    uint32_t                                      MinSpawnNumber;                                               // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterHandle
// Struct Size::0x0030
struct FNiagaraEmitterHandle
{
    FGuid                                         ID;                                                           // 0x0000(0x0010)
    FName                                         IdName;                                                       // 0x0010(0x0008)
    bool                                          bIsEnabled;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         Name;                                                         // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UNiagaraEmitter*                              Instance;                                                     // 0x0028(0x0008)
};


// ScriptStruct  Niagara.NiagaraCollisionEventPayload
// Struct Size::0x002C
struct FNiagaraCollisionEventPayload
{
    FVector                                       CollisionPos;                                                 // 0x0000(0x000C)
    FVector                                       CollisionNormal;                                              // 0x000C(0x000C)
    FVector                                       CollisionVelocity;                                            // 0x0018(0x000C)
    int32_t                                       ParticleIndex;                                                // 0x0024(0x0004)
    int32_t                                       PhysicalMaterialIndex;                                        // 0x0028(0x0004)
};


// ScriptStruct  Niagara.NiagaraMeshMaterialOverride
// Struct Size::0x0028
struct FNiagaraMeshMaterialOverride
{
    UMaterialInterface*                           ExplicitMat;                                                  // 0x0000(0x0008)
    FNiagaraUserParameterBinding                  UserParamBinding;                                             // 0x0008(0x0020)
};


// ScriptStruct  Niagara.NiagaraParameters
// Struct Size::0x0010
struct FNiagaraParameters
{
    TArray<FNiagaraVariable>                      Parameters;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterStore
// Struct Size::0x0078
struct FNiagaraParameterStore
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    TArray<FNiagaraVariableWithOffset>            SortedParameterOffsets;                                       // 0x0010(0x0010)
    TArray<char>                                  ParameterData;                                                // 0x0020(0x0010)
    TArray<UNiagaraDataInterface*>                DataInterfaces;                                               // 0x0030(0x0010)
    TArray<UObject*>                              UObjects;                                                     // 0x0040(0x0010)
    char                                          pa_0050[0x0028]                                               // 0x0050(0x0028)
};


// ScriptStruct  Niagara.NiagaraVariableWithOffset
// Struct Size::0x0010
struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
{
    int32_t                                       Offset;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraBoundParameter
// Struct Size::0x0028
struct FNiagaraBoundParameter
{
    FNiagaraVariable                              Parameter;                                                    // 0x0000(0x0020)
    int32_t                                       SrcOffset;                                                    // 0x0020(0x0004)
    int32_t                                       DestOffset;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictInfo
// Struct Size::0x0018
struct FNiagaraPlatformSetConflictInfo
{
    int32_t                                       SetAIndex;                                                    // 0x0000(0x0004)
    int32_t                                       SetBIndex;                                                    // 0x0004(0x0004)
    TArray<FNiagaraPlatformSetConflictEntry>      Conflicts;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraPlatformSetConflictEntry
// Struct Size::0x000C
struct FNiagaraPlatformSetConflictEntry
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    int32_t                                       QualityLevelMask;                                             // 0x0008(0x0004)
};


// ScriptStruct  Niagara.NiagaraRibbonUVSettings
// Struct Size::0x0024
struct FNiagaraRibbonUVSettings
{
    enum class ENiagaraRibbonUVEdgeMode           LeadingEdgeMode;                                              // 0x0000(0x0004)
    enum class ENiagaraRibbonUVEdgeMode           TrailingEdgeMode;                                             // 0x0004(0x0004)
    enum class ENiagaraRibbonUVDistributionMode   DistributionMode;                                             // 0x0008(0x0004)
    float                                         TilingLength;                                                 // 0x000C(0x0004)
    FVector2D                                     Offset;                                                       // 0x0010(0x0008)
    FVector2D                                     Scale;                                                        // 0x0018(0x0008)
    bool                                          bEnablePerParticleUOverride;                                  // 0x0020(0x0001)
    bool                                          bEnablePerParticleVRangeOverride;                             // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  Niagara.NiagaraScalabilityManager
// Struct Size::0x0040
struct FNiagaraScalabilityManager
{
    UNiagaraEffectType*                           EffectType;                                                   // 0x0000(0x0008)
    TArray<UNiagaraComponent*>                    ManagedComponents;                                            // 0x0008(0x0010)
    char                                          pa_0018[0x0028]                                               // 0x0018(0x0028)
};


// ScriptStruct  Niagara.NiagaraVMExecutableData
// Struct Size::0x00E0
struct FNiagaraVMExecutableData
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
    TArray<char>                                  OptimizedByteCode;                                            // 0x0010(0x0010)
    int32_t                                       NumTempRegisters;                                             // 0x0020(0x0004)
    int32_t                                       NumUserPtrs;                                                  // 0x0024(0x0004)
    TArray<char>                                  ScriptLiterals;                                               // 0x0028(0x0010)
    TArray<FNiagaraVariable>                      Attributes;                                                   // 0x0038(0x0010)
    FNiagaraScriptDataUsageInfo                   DataUsage;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FNiagaraScriptDataInterfaceCompileInfo>DataInterfaceInfo;                                            // 0x0050(0x0010)
    TArray<FVMExternalFunctionBindingInfo>        CalledVMExternalFunctions;                                    // 0x0060(0x0010)
    char                                          pa_0070[0x0010]                                               // 0x0070(0x0010)
    TArray<FNiagaraDataSetID>                     ReadDataSets;                                                 // 0x0080(0x0010)
    TArray<FNiagaraDataSetProperties>             WriteDataSets;                                                // 0x0090(0x0010)
    TArray<FNiagaraStatScope>                     StatScopes;                                                   // 0x00A0(0x0010)
    TArray<FNiagaraDataInterfaceGPUParamInfo>     DIParamInfo;                                                  // 0x00B0(0x0010)
    enum class ENiagaraScriptCompileStatus        LastCompileStatus;                                            // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
    TArray<FSimulationStageMetaData>              SimulationStageMetaData;                                      // 0x00C8(0x0010)
    char                                          bReadsSignificanceIndex;                                      // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
};


// ScriptStruct  NiagaraShader.SimulationStageMetaData
// Struct Size::0x0030
struct FSimulationStageMetaData
{
    FName                                         SimulationStageName;                                          // 0x0000(0x0008)
    FName                                         IterationSource;                                              // 0x0008(0x0008)
    char                                          bSpawnOnly;                                                   // 0x0010(0x0001)
    char                                          bWritesParticles;                                             // 0x0010(0x0001)
    char                                          bPartialParticleUpdate;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FName>                                 OutputDestinations;                                           // 0x0018(0x0010)
    int32_t                                       MinStage;                                                     // 0x0028(0x0004)
    int32_t                                       MaxStage;                                                     // 0x002C(0x0004)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGPUParamInfo
// Struct Size::0x0030
struct FNiagaraDataInterfaceGPUParamInfo
{
    FString                                       DataInterfaceHLSLSymbol;                                      // 0x0000(0x0010)
    FString                                       DIClassName;                                                  // 0x0010(0x0010)
    TArray<FNiagaraDataInterfaceGeneratedFunction>GeneratedFunctions;                                           // 0x0020(0x0010)
};


// ScriptStruct  NiagaraShader.NiagaraDataInterfaceGeneratedFunction
// Struct Size::0x0028
struct FNiagaraDataInterfaceGeneratedFunction
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Niagara.NiagaraVMExecutableDataId
// Struct Size::0x0048
struct FNiagaraVMExecutableDataId
{
    FGuid                                         CompilerVersionID;                                            // 0x0000(0x0010)
    enum class ENiagaraScriptUsage                ScriptUsageType;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ScriptUsageTypeID;                                            // 0x0014(0x0010)
    char                                          bUsesRapidIterationParams;                                    // 0x0024(0x0001)
    char                                          bInterpolatedSpawn;                                           // 0x0024(0x0001)
    char                                          bRequiresPersistentIDs;                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FGuid                                         BaseScriptID;                                                 // 0x0028(0x0010)
    FNiagaraCompileHash                           BaseScriptCompileHash;                                        // 0x0038(0x0010)
};


// ScriptStruct  Niagara.NiagaraModuleDependency
// Struct Size::0x0028
struct FNiagaraModuleDependency
{
    FName                                         ID;                                                           // 0x0000(0x0008)
    enum class ENiagaraModuleDependencyType       Type;                                                         // 0x0008(0x0001)
    enum class ENiagaraModuleDependencyScriptConstraintScriptConstraint;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FText                                         Description;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Niagara.NiagaraScriptInstanceParameterStore
// Struct Size::0x0088
struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
{
    char                                          pa_0078[0x0010]                                               // 0x0078(0x0010)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionParameterStore
// Struct Size::0x0098
struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
{
    int32_t                                       ParameterSize;                                                // 0x0078(0x0004)
    uint32_t                                      PaddedParameterSize;                                          // 0x007C(0x0004)
    TArray<FNiagaraScriptExecutionPaddingInfo>    PaddingInfo;                                                  // 0x0080(0x0010)
    char                                          bInitialized;                                                 // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  Niagara.NiagaraScriptExecutionPaddingInfo
// Struct Size::0x0008
struct FNiagaraScriptExecutionPaddingInfo
{
    uint16_t                                      SrcOffset;                                                    // 0x0000(0x0002)
    uint16_t                                      DestOffset;                                                   // 0x0002(0x0002)
    uint16_t                                      SrcSize;                                                      // 0x0004(0x0002)
    uint16_t                                      DestSize;                                                     // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraScriptHighlight
// Struct Size::0x0028
struct FNiagaraScriptHighlight
{
    FLinearColor                                  Color;                                                        // 0x0000(0x0010)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Niagara.NiagaraSystemCompileRequest
// Struct Size::0x0080
struct FNiagaraSystemCompileRequest
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UObject*>                              RootObjects;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0068]                                               // 0x0018(0x0068)
};


// ScriptStruct  Niagara.EmitterCompiledScriptPair
// Struct Size::0x0078
struct FEmitterCompiledScriptPair
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Niagara.NiagaraSystemCompiledData
// Struct Size::0x0218
struct FNiagaraSystemCompiledData
{
    FNiagaraParameterStore                        InstanceParamStore;                                           // 0x0000(0x0078)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x0078(0x0040)
    FNiagaraDataSetCompiledData                   SpawnInstanceParamsDataSetCompiledData;                       // 0x00B8(0x0040)
    FNiagaraDataSetCompiledData                   UpdateInstanceParamsDataSetCompiledData;                      // 0x00F8(0x0040)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceGlobalBinding;                                   // 0x0138(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceSystemBinding;                                   // 0x0158(0x0020)
    FNiagaraParameterDataSetBindingCollection     SpawnInstanceOwnerBinding;                                    // 0x0178(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>SpawnInstanceEmitterBindings;                              // 0x0198(0x0010)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceGlobalBinding;                                  // 0x01A8(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceSystemBinding;                                  // 0x01C8(0x0020)
    FNiagaraParameterDataSetBindingCollection     UpdateInstanceOwnerBinding;                                   // 0x01E8(0x0020)
    TArray<FNiagaraParameterDataSetBindingCollection>UpdateInstanceEmitterBindings;                             // 0x0208(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBindingCollection
// Struct Size::0x0020
struct FNiagaraParameterDataSetBindingCollection
{
    TArray<FNiagaraParameterDataSetBinding>       FloatOffsets;                                                 // 0x0000(0x0010)
    TArray<FNiagaraParameterDataSetBinding>       Int32Offsets;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterDataSetBinding
// Struct Size::0x0008
struct FNiagaraParameterDataSetBinding
{
    int32_t                                       ParameterOffset;                                              // 0x0000(0x0004)
    int32_t                                       DataSetComponentOffset;                                       // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraEmitterCompiledData
// Struct Size::0x0130
struct FNiagaraEmitterCompiledData
{
    TArray<FName>                                 SpawnAttributes;                                              // 0x0000(0x0010)
    FNiagaraVariable                              EmitterSpawnIntervalVar;                                      // 0x0010(0x0020)
    FNiagaraVariable                              EmitterInterpSpawnStartDTVar;                                 // 0x0030(0x0020)
    FNiagaraVariable                              EmitterSpawnGroupVar;                                         // 0x0050(0x0020)
    FNiagaraVariable                              EmitterAgeVar;                                                // 0x0070(0x0020)
    FNiagaraVariable                              EmitterRandomSeedVar;                                         // 0x0090(0x0020)
    FNiagaraVariable                              EmitterInstanceSeedVar;                                       // 0x00B0(0x0020)
    FNiagaraVariable                              EmitterTotalSpawnedParticlesVar;                              // 0x00D0(0x0020)
    FNiagaraDataSetCompiledData                   DataSetCompiledData;                                          // 0x00F0(0x0040)
};


// ScriptStruct  Niagara.NiagaraVariableMetaData
// Struct Size::0x00F0
struct FNiagaraVariableMetaData
{
    FText                                         Description;                                                  // 0x0000(0x0018)
    FText                                         CategoryName;                                                 // 0x0018(0x0018)
    bool                                          bAdvancedDisplay;                                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       EditorSortPriority;                                           // 0x0034(0x0004)
    bool                                          bInlineEditConditionToggle;                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FNiagaraInputConditionMetadata                EditCondition;                                                // 0x0040(0x0018)
    FNiagaraInputConditionMetadata                VisibleCondition;                                             // 0x0058(0x0018)
    TMap<FName,FString>                           PropertyMetaData;                                             // 0x0070(0x0050)
    FName                                         ParentAttribute;                                              // 0x00C0(0x0008)
    FName                                         ScopeName;                                                    // 0x00C8(0x0008)
    enum class ENiagaraScriptParameterUsage       Usage;                                                        // 0x00D0(0x0004)
    bool                                          bIsStaticSwitch;                                              // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    int32_t                                       StaticSwitchDefaultValue;                                     // 0x00D8(0x0004)
    bool                                          bAddedToNodeGraphDeepCopy;                                    // 0x00DC(0x0001)
    bool                                          bOutputIsPersistent;                                          // 0x00DD(0x0001)
    char                                          pa_00DE[0x0002]                                               // 0x00DE(0x0002)
    FName                                         CachedNamespacelessVariableName;                              // 0x00E0(0x0008)
    bool                                          bCreatedInSystemEditor;                                       // 0x00E8(0x0001)
    bool                                          bUseLegacyNameString;                                         // 0x00E9(0x0001)
    char                                          pa_00EA[0x0006]                                               // 0x00EA(0x0006)
};


// ScriptStruct  Niagara.NiagaraInputConditionMetadata
// Struct Size::0x0018
struct FNiagaraInputConditionMetadata
{
    FName                                         InputName;                                                    // 0x0000(0x0008)
    TArray<FString>                               TargetValues;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterScopeInfo
// Struct Size::0x0018
struct FNiagaraParameterScopeInfo
{
    enum class ENiagaraParameterScope             Scope;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       NamespaceString;                                              // 0x0008(0x0010)
};


// ScriptStruct  Niagara.NiagaraCompileHashVisitorDebugInfo
// Struct Size::0x0030
struct FNiagaraCompileHashVisitorDebugInfo
{
    FString                                       Object;                                                       // 0x0000(0x0010)
    TArray<FString>                               PropertyKeys;                                                 // 0x0010(0x0010)
    TArray<FString>                               PropertyValues;                                               // 0x0020(0x0010)
};


// ScriptStruct  Niagara.NiagaraID
// Struct Size::0x0008
struct FNiagaraID
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    int32_t                                       AcquireTag;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Niagara.NiagaraSpawnInfo
// Struct Size::0x0010
struct FNiagaraSpawnInfo
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    float                                         InterpStartDt;                                                // 0x0004(0x0004)
    float                                         IntervalDt;                                                   // 0x0008(0x0004)
    int32_t                                       SpawnGroup;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Niagara.NiagaraMatrix
// Struct Size::0x0040
struct FNiagaraMatrix
{
    FVector4                                      Row0;                                                         // 0x0000(0x0010)
    FVector4                                      Row1;                                                         // 0x0010(0x0010)
    FVector4                                      Row2;                                                         // 0x0020(0x0010)
    FVector4                                      Row3;                                                         // 0x0030(0x0010)
};


// ScriptStruct  Niagara.NiagaraParameterMap
// Struct Size::0x0001
struct FNiagaraParameterMap
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraNumeric
// Struct Size::0x0001
struct FNiagaraNumeric
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Niagara.NiagaraHalfVector4
// Struct Size::0x0008
struct FNiagaraHalfVector4
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
    uint16_t                                      Z;                                                            // 0x0004(0x0002)
    uint16_t                                      W;                                                            // 0x0006(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector3
// Struct Size::0x0006
struct FNiagaraHalfVector3
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
    uint16_t                                      Z;                                                            // 0x0004(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalfVector2
// Struct Size::0x0004
struct FNiagaraHalfVector2
{
    uint16_t                                      X;                                                            // 0x0000(0x0002)
    uint16_t                                      Y;                                                            // 0x0002(0x0002)
};


// ScriptStruct  Niagara.NiagaraHalf
// Struct Size::0x0002
struct FNiagaraHalf
{
    uint16_t                                      Value;                                                        // 0x0000(0x0002)
};


// ScriptStruct  Niagara.NiagaraBool
// Struct Size::0x0004
struct FNiagaraBool
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraInt32
// Struct Size::0x0004
struct FNiagaraInt32
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraFloat
// Struct Size::0x0004
struct FNiagaraFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Niagara.NiagaraUserRedirectionParameterStore
// Struct Size::0x00C8
struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
{
    TMap<FNiagaraVariable,FNiagaraVariable>       UserParameterRedirects;                                       // 0x0078(0x0050)
};


// ScriptStruct  Niagara.NiagaraVariant
// Struct Size::0x0028
struct FNiagaraVariant
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    UNiagaraDataInterface*                        DataInterface;                                                // 0x0008(0x0008)
    TArray<char>                                  Bytes;                                                        // 0x0010(0x0010)
    enum class ENiagaraVariantMode                CurrentMode;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Niagara.NiagaraWorldManagerTickFunction
// Struct Size::0x0040
struct FNiagaraWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  NiagaraShader.NiagaraCompileEvent
// Struct Size::0x0048
struct FNiagaraCompileEvent
{
    enum class FNiagaraCompileEventSeverity       Severity;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FGuid                                         NodeGuid;                                                     // 0x0018(0x0010)
    FGuid                                         PinGuid;                                                      // 0x0028(0x0010)
    TArray<FGuid>                                 StackGuids;                                                   // 0x0038(0x0010)
};


// ScriptStruct  SubstanceCore.SubstanceInstanceDesc
// Struct Size::0x0020
struct FSubstanceInstanceDesc
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TArray<FSubstanceInputDesc>                   Inputs;                                                       // 0x0010(0x0010)
};


// ScriptStruct  SubstanceCore.SubstanceInputDesc
// Struct Size::0x0018
struct FSubstanceInputDesc
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESubstanceInputType                Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SubstanceCore.SubstanceFloatInputDesc
// Struct Size::0x0048
struct FSubstanceFloatInputDesc : public FSubstanceInputDesc
{
    TArray<float>                                 Min;                                                          // 0x0018(0x0010)
    TArray<float>                                 Max;                                                          // 0x0028(0x0010)
    TArray<float>                                 Default;                                                      // 0x0038(0x0010)
};


// ScriptStruct  SubstanceCore.SubstanceIntInputDesc
// Struct Size::0x0048
struct FSubstanceIntInputDesc : public FSubstanceInputDesc
{
    TArray<int32_t>                               Min;                                                          // 0x0018(0x0010)
    TArray<int32_t>                               Max;                                                          // 0x0028(0x0010)
    TArray<int32_t>                               Default;                                                      // 0x0038(0x0010)
};


// ScriptStruct  SubstanceCore.SubstanceConnection
// Struct Size::0x0020
struct FSubstanceConnection
{
    FString                                       OutputIdentifier;                                             // 0x0000(0x0010)
    FString                                       InputImageIdentifier;                                         // 0x0010(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00D0
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0020(0x0004)
    float                                         ActualAlpha;                                                  // 0x0024(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0028(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         Alpha;                                                        // 0x002C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0030(0x0008)
    float                                         AlphaScaleMultiplier;                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0010]                                               // 0x00C0(0x0010)
};


// ScriptStruct  Engine.ComponentSpacePoseLink
// Struct Size::0x0010
struct FComponentSpacePoseLink : public FPoseLinkBase
{
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0128
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    FBoneReference                                EndBone;                                                      // 0x00E0(0x0010)
    FBoneReference                                IKHandBone;                                                   // 0x00F0(0x0010)
    FVector                                       ExtraOffset;                                                  // 0x0100(0x000C)
    float                                         ExpectAngleBetweenBones;                                      // 0x010C(0x0004)
    enum class ECalcStretchAlgorithm              CalcStretchAlgorithm;                                         // 0x0110(0x0001)
    char                                          pa_0111[0x0017]                                               // 0x0111(0x0017)
};


// ScriptStruct  Engine.BoneReference
// Struct Size::0x0010
struct FBoneReference
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x01A0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    FBoneSocketTarget                             AlignTarget;                                                  // 0x00E0(0x0060)
    FTransform                                    AlignTransform;                                               // 0x0140(0x0030)
    FVector                                       Pivot;                                                        // 0x0170(0x000C)
    float                                         InterpSpeed;                                                  // 0x017C(0x0004)
    char                                          AxisMask;                                                     // 0x0180(0x0001)
    char                                          pa_0181[0x001F]                                               // 0x0181(0x001F)
};


// ScriptStruct  AnimGraphRuntime.BoneSocketTarget
// Struct Size::0x0060
struct FBoneSocketTarget
{
    bool                                          bUseSocket;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FBoneReference                                BoneReference;                                                // 0x0004(0x0010)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FSocketReference                              SocketReference;                                              // 0x0020(0x0040)
};


// ScriptStruct  AnimGraphRuntime.SocketReference
// Struct Size::0x0040
struct FSocketReference
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourceBase;                                                   // 0x0010(0x0010)
    FPoseLink                                     Base;                                                         // 0x0020(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0030(0x0010)
    TArray<FBoneReference>                        TargetBoneList;                                               // 0x0040(0x0010)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0088
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Input;                                                        // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    FPoseLink                                     Target;                                                       // 0x0030(0x0010)
    UAnimSequenceBase*                            Sequence;                                                     // 0x0040(0x0008)
    FBoneReference                                ScaledBone;                                                   // 0x0048(0x0010)
    bool                                          bEvaluateSequenceEndFrame;                                    // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    TArray<FADSSetting>                           ADSSettings;                                                  // 0x0060(0x0010)
    UAnimSequenceBase*                            LastAnimSequence;                                             // 0x0070(0x0008)
    char                                          pa_0078[0x0010]                                               // 0x0078(0x0010)
};


// ScriptStruct  MFAnimationRuntime.ADSSetting
// Struct Size::0x000C
struct FADSSetting
{
    enum class EAxis                              Axis;                                                         // 0x0000(0x0001)
    enum class EAdjustType                        AdjustType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FName                                         CurveName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0240
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0110]                                               // 0x00D0(0x0110)
    FBoneReference                                MotionBone;                                                   // 0x01E0(0x0010)
    FBoneReference                                MotionParentBone;                                             // 0x01F0(0x0010)
    bool                                          bAccelChange;                                                 // 0x0200(0x0001)
    char                                          pa_0201[0x0003]                                               // 0x0201(0x0003)
    FVector                                       MotionLinearAccScale;                                         // 0x0204(0x000C)
    FVector                                       MotionLinearVelScale;                                         // 0x0210(0x000C)
    FVector                                       LocalMotionAppliedLinearAccClamp;                             // 0x021C(0x000C)
    USkeletalMeshComponent*                       MotionReciever;                                               // 0x0228(0x0008)
    FName                                         MotionRecieverBone;                                           // 0x0230(0x0008)
    char                                          pa_0238[0x0008]                                               // 0x0238(0x0008)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0188
struct FAnimNode : public FAnimNode
{
    FBoneReference                                IkFootRootBone;                                               // 0x00D0(0x0010)
    TArray<FIKBones>                              FeetDefinitions;                                              // 0x00E0(0x0010)
    FBoneReference                                PelvisBone;                                                   // 0x00F0(0x0010)
    float                                         SpeedScaling;                                                 // 0x0100(0x0004)
    float                                         ActualSpeedScaling;                                           // 0x0104(0x0004)
    FInputScaleBiasClamp                          SpeedScalingBiasClamp;                                        // 0x0108(0x0030)
    bool                                          ClampIKUsingFKLeg;                                            // 0x0138(0x0001)
    char                                          pa_0139[0x004F]                                               // 0x0139(0x004F)
};


// ScriptStruct  MFAnimationRuntime.IKBones
// Struct Size::0x0028
struct FIKBones
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInUpperLimb;                                          // 0x0020(0x0004)
    int32_t                                       NumBonesInLowerLimb;                                          // 0x0024(0x0004)
};


// ScriptStruct  MFAnimationRuntime.PelvisAdjustmentInterp
// Struct Size::0x0008
struct FPelvisAdjustmentInterp
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Dampen;                                                       // 0x0004(0x0004)
};


// ScriptStruct  MFAnimationRuntime.IKFootLocation
// Struct Size::0x0030
struct FIKFootLocation
{
    FVector                                       LimbRootLocation;                                             // 0x0000(0x000C)
    FVector                                       OriginLocation;                                               // 0x000C(0x000C)
    FVector                                       ActualLocation;                                               // 0x0018(0x000C)
    FVector                                       NewLocation;                                                  // 0x0024(0x000C)
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  MFAnimationRuntime.AnimNode
// Struct Size::0x0160
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    FBoneSocketTarget                             VirtualParent;                                                // 0x00E0(0x0060)
    FVector                                       PivotOffset;                                                  // 0x0140(0x000C)
    FRotator                                      Rotation;                                                     // 0x014C(0x000C)
    enum class EBoneControlSpace                  PivotSpace;                                                   // 0x0158(0x0001)
    char                                          pa_0159[0x0007]                                               // 0x0159(0x0007)
};


// ScriptStruct  MFAnimationRuntime.MontageBlendTimePair
// Struct Size::0x0008
struct FMontageBlendTimePair
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
};


// ScriptStruct  MFAnimationRuntime.AnimationFloatCurvesMap
// Struct Size::0x0050
struct FAnimationFloatCurvesMap
{
    TMap<FString,UCurveFloat*>                    NameToCurveMap;                                               // 0x0000(0x0050)
};


// ScriptStruct  MFAnimationRuntime.AnimationCurvesMap
// Struct Size::0x0050
struct FAnimationCurvesMap
{
    TMap<FString,float>                           CurveToValueMap;                                              // 0x0000(0x0050)
};


// ScriptStruct  ModelingComponents.RenderableTriangle
// Struct Size::0x0078
struct FRenderableTriangle
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FRenderableTriangleVertex                     Vertex0;                                                      // 0x0008(0x0024)
    FRenderableTriangleVertex                     Vertex1;                                                      // 0x002C(0x0024)
    FRenderableTriangleVertex                     Vertex2;                                                      // 0x0050(0x0024)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ModelingComponents.RenderableTriangleVertex
// Struct Size::0x0024
struct FRenderableTriangleVertex
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FVector2D                                     UV;                                                           // 0x000C(0x0008)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
    FColor                                        Color;                                                        // 0x0020(0x0004)
};


// ScriptStruct  MeshModelingTools.PhysicsConvexData
// Struct Size::0x0038
struct FPhysicsConvexData
{
    int32_t                                       NumVertices;                                                  // 0x0000(0x0004)
    int32_t                                       NumFaces;                                                     // 0x0004(0x0004)
    FKShapeElem                                   Element;                                                      // 0x0008(0x0030)
};


// ScriptStruct  Engine.KShapeElem
// Struct Size::0x0030
struct FKShapeElem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         RestOffset;                                                   // 0x0008(0x0004)
    FName                                         Name;                                                         // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    char                                          bContributeToMass;                                            // 0x0018(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0016]                                               // 0x001A(0x0016)
};


// ScriptStruct  MeshModelingTools.PhysicsCapsuleData
// Struct Size::0x0070
struct FPhysicsCapsuleData
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    float                                         Length;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FKShapeElem                                   Element;                                                      // 0x0040(0x0030)
};


// ScriptStruct  MeshModelingTools.PhysicsBoxData
// Struct Size::0x0070
struct FPhysicsBoxData
{
    FVector                                       Dimensions;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FKShapeElem                                   Element;                                                      // 0x0040(0x0030)
};


// ScriptStruct  MeshModelingTools.PhysicsSphereData
// Struct Size::0x0070
struct FPhysicsSphereData
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FKShapeElem                                   Element;                                                      // 0x0040(0x0030)
};


// ScriptStruct  MeshModelingTools.PerlinLayerProperties
// Struct Size::0x0008
struct FPerlinLayerProperties
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Intensity;                                                    // 0x0004(0x0004)
};


// ScriptStruct  MeshModelingTools.EditPivotTarget
// Struct Size::0x0010
struct FEditPivotTarget
{
    UTransformProxy*                              TransformProxy;                                               // 0x0000(0x0008)
    UTransformGizmo*                              TransformGizmo;                                               // 0x0008(0x0008)
};


// ScriptStruct  MeshModelingTools.TransformMeshesTarget
// Struct Size::0x0010
struct FTransformMeshesTarget
{
    UTransformProxy*                              TransformProxy;                                               // 0x0000(0x0008)
    UTransformGizmo*                              TransformGizmo;                                               // 0x0008(0x0008)
};


// ScriptStruct  HairStrandsCore.HairGroupInfo
// Struct Size::0x0014
struct FHairGroupInfo
{
    int32_t                                       GroupID;                                                      // 0x0000(0x0004)
    int32_t                                       NumCurves;                                                    // 0x0004(0x0004)
    int32_t                                       NumGuides;                                                    // 0x0008(0x0004)
    int32_t                                       NumCurveVertices;                                             // 0x000C(0x0004)
    int32_t                                       NumGuideVertices;                                             // 0x0010(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupInfoWithVisibility
// Struct Size::0x0018
struct FHairGroupInfoWithVisibility : public FHairGroupInfo
{
    bool                                          bIsVisible;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  HairStrandsCore.HairGroupsMaterial
// Struct Size::0x0010
struct FHairGroupsMaterial
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         SlotName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  HairStrandsCore.HairGroupsCardsSourceDescription
// Struct Size::0x00C0
struct FHairGroupsCardsSourceDescription
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    enum class EHairCardsSourceType               SourceType;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UStaticMesh*                                  ProceduralMesh;                                               // 0x0018(0x0008)
    FString                                       ProceduralMeshKey;                                            // 0x0020(0x0010)
    UStaticMesh*                                  ImportedMesh;                                                 // 0x0030(0x0008)
    FHairGroupsProceduralCards                    ProceduralSettings;                                           // 0x0038(0x0038)
    FHairGroupCardsTextures                       Textures;                                                     // 0x0070(0x0030)
    int32_t                                       GroupIndex;                                                   // 0x00A0(0x0004)
    int32_t                                       LODIndex;                                                     // 0x00A4(0x0004)
    FHairGroupCardsInfo                           CardsInfo;                                                    // 0x00A8(0x0008)
    FString                                       ImportedMeshKey;                                              // 0x00B0(0x0010)
};


// ScriptStruct  HairStrandsCore.HairGroupCardsInfo
// Struct Size::0x0008
struct FHairGroupCardsInfo
{
    int32_t                                       NumCards;                                                     // 0x0000(0x0004)
    int32_t                                       NumCardVertices;                                              // 0x0004(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupCardsTextures
// Struct Size::0x0030
struct FHairGroupCardsTextures
{
    UTexture2D*                                   DepthTexture;                                                 // 0x0000(0x0008)
    UTexture2D*                                   CoverageTexture;                                              // 0x0008(0x0008)
    UTexture2D*                                   TangentTexture;                                               // 0x0010(0x0008)
    UTexture2D*                                   AttributeTexture;                                             // 0x0018(0x0008)
    UTexture2D*                                   AuxilaryDataTexture;                                          // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  HairStrandsCore.HairGroupsProceduralCards
// Struct Size::0x0038
struct FHairGroupsProceduralCards
{
    FHairCardsClusterSettings                     ClusterSettings;                                              // 0x0000(0x0008)
    FHairCardsGeometrySettings                    GeometrySettings;                                             // 0x0008(0x001C)
    FHairCardsTextureSettings                     TextureSettings;                                              // 0x0024(0x0010)
    int32_t                                       Version;                                                      // 0x0034(0x0004)
};


// ScriptStruct  HairStrandsCore.HairCardsTextureSettings
// Struct Size::0x0010
struct FHairCardsTextureSettings
{
    int32_t                                       AtlasMaxResolution;                                           // 0x0000(0x0004)
    int32_t                                       PixelPerCentimeters;                                          // 0x0004(0x0004)
    int32_t                                       LengthTextureCount;                                           // 0x0008(0x0004)
    int32_t                                       DensityTextureCount;                                          // 0x000C(0x0004)
};


// ScriptStruct  HairStrandsCore.HairCardsGeometrySettings
// Struct Size::0x001C
struct FHairCardsGeometrySettings
{
    enum class EHairCardsGenerationType           GenerationType;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CardsCount;                                                   // 0x0004(0x0004)
    enum class EHairCardsClusterType              ClusterType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MinSegmentLength;                                             // 0x000C(0x0004)
    float                                         AngularThreshold;                                             // 0x0010(0x0004)
    float                                         MinCardsLength;                                               // 0x0014(0x0004)
    float                                         MaxCardsLength;                                               // 0x0018(0x0004)
};


// ScriptStruct  HairStrandsCore.HairCardsClusterSettings
// Struct Size::0x0008
struct FHairCardsClusterSettings
{
    float                                         ClusterDecimation;                                            // 0x0000(0x0004)
    enum class EHairCardsClusterType              Type;                                                         // 0x0004(0x0001)
    bool                                          bUseGuide;                                                    // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  HairStrandsCore.HairGroupsLOD
// Struct Size::0x0018
struct FHairGroupsLOD
{
    TArray<FHairLODSettings>                      LODs;                                                         // 0x0000(0x0010)
    float                                         ClusterWorldSize;                                             // 0x0010(0x0004)
    float                                         ClusterScreenSizeScale;                                       // 0x0014(0x0004)
};


// ScriptStruct  HairStrandsCore.HairLODSettings
// Struct Size::0x0018
struct FHairLODSettings
{
    float                                         CurveDecimation;                                              // 0x0000(0x0004)
    float                                         VertexDecimation;                                             // 0x0004(0x0004)
    float                                         AngularThreshold;                                             // 0x0008(0x0004)
    float                                         ScreenSize;                                                   // 0x000C(0x0004)
    float                                         ThicknessScale;                                               // 0x0010(0x0004)
    bool                                          bVisible;                                                     // 0x0014(0x0001)
    enum class EGroomGeometryType                 GeometryType;                                                 // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  HairStrandsCore.HairGroupsInterpolation
// Struct Size::0x0014
struct FHairGroupsInterpolation
{
    FHairDecimationSettings                       DecimationSettings;                                           // 0x0000(0x0008)
    FHairInterpolationSettings                    InterpolationSettings;                                        // 0x0008(0x000C)
};


// ScriptStruct  HairStrandsCore.HairInterpolationSettings
// Struct Size::0x000C
struct FHairInterpolationSettings
{
    bool                                          bOverrideGuides;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HairToGuideDensity;                                           // 0x0004(0x0004)
    enum class EHairInterpolationQuality          InterpolationQuality;                                         // 0x0008(0x0001)
    enum class EHairInterpolationWeight           InterpolationDistance;                                        // 0x0009(0x0001)
    bool                                          bRandomizeGuide;                                              // 0x000A(0x0001)
    bool                                          bUseUniqueGuide;                                              // 0x000B(0x0001)
};


// ScriptStruct  HairStrandsCore.HairDecimationSettings
// Struct Size::0x0008
struct FHairDecimationSettings
{
    float                                         CurveDecimation;                                              // 0x0000(0x0004)
    float                                         VertexDecimation;                                             // 0x0004(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsMeshesSourceDescription
// Struct Size::0x0060
struct FHairGroupsMeshesSourceDescription
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    UStaticMesh*                                  ImportedMesh;                                                 // 0x0010(0x0008)
    FHairGroupCardsTextures                       Textures;                                                     // 0x0018(0x0030)
    int32_t                                       GroupIndex;                                                   // 0x0048(0x0004)
    int32_t                                       LODIndex;                                                     // 0x004C(0x0004)
    FString                                       ImportedMeshKey;                                              // 0x0050(0x0010)
};


// ScriptStruct  HairStrandsCore.HairGroupsPhysics
// Struct Size::0x02C8
struct FHairGroupsPhysics
{
    FHairSolverSettings                           SolverSettings;                                               // 0x0000(0x0038)
    FHairExternalForces                           ExternalForces;                                               // 0x0038(0x001C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FHairMaterialConstraints                      MaterialConstraints;                                          // 0x0058(0x01D8)
    FHairStrandsParameters                        StrandsParameters;                                            // 0x0230(0x0098)
};


// ScriptStruct  HairStrandsCore.HairStrandsParameters
// Struct Size::0x0098
struct FHairStrandsParameters
{
    enum class EGroomStrandsSize                  StrandsSize;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         StrandsDensity;                                               // 0x0004(0x0004)
    float                                         StrandsSmoothing;                                             // 0x0008(0x0004)
    float                                         StrandsThickness;                                             // 0x000C(0x0004)
    FRuntimeFloatCurve                            ThicknessScale;                                               // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairMaterialConstraints
// Struct Size::0x01D8
struct FHairMaterialConstraints
{
    FHairBendConstraint                           BendConstraint;                                               // 0x0000(0x0098)
    FHairStretchConstraint                        StretchConstraint;                                            // 0x0098(0x0098)
    FHairCollisionConstraint                      CollisionConstraint;                                          // 0x0130(0x00A8)
};


// ScriptStruct  HairStrandsCore.HairCollisionConstraint
// Struct Size::0x00A8
struct FHairCollisionConstraint
{
    bool                                          SolveCollision;                                               // 0x0000(0x0001)
    bool                                          ProjectCollision;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         StaticFriction;                                               // 0x0004(0x0004)
    float                                         KineticFriction;                                              // 0x0008(0x0004)
    float                                         StrandsViscosity;                                             // 0x000C(0x0004)
    FIntVector                                    GridDimension;                                                // 0x0010(0x000C)
    float                                         CollisionRadius;                                              // 0x001C(0x0004)
    FRuntimeFloatCurve                            RadiusScale;                                                  // 0x0020(0x0088)
};


// ScriptStruct  HairStrandsCore.HairStretchConstraint
// Struct Size::0x0098
struct FHairStretchConstraint
{
    bool                                          SolveStretch;                                                 // 0x0000(0x0001)
    bool                                          ProjectStretch;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         StretchDamping;                                               // 0x0004(0x0004)
    float                                         StretchStiffness;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            StretchScale;                                                 // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairBendConstraint
// Struct Size::0x0098
struct FHairBendConstraint
{
    bool                                          SolveBend;                                                    // 0x0000(0x0001)
    bool                                          ProjectBend;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         BendDamping;                                                  // 0x0004(0x0004)
    float                                         BendStiffness;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            BendScale;                                                    // 0x0010(0x0088)
};


// ScriptStruct  HairStrandsCore.HairExternalForces
// Struct Size::0x001C
struct FHairExternalForces
{
    FVector                                       GravityVector;                                                // 0x0000(0x000C)
    float                                         AirDrag;                                                      // 0x000C(0x0004)
    FVector                                       AirVelocity;                                                  // 0x0010(0x000C)
};


// ScriptStruct  HairStrandsCore.HairSolverSettings
// Struct Size::0x0038
struct FHairSolverSettings
{
    bool                                          EnableSimulation;                                             // 0x0000(0x0001)
    enum class EGroomNiagaraSolvers               NiagaraSolver;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TSoftObjectPtr<UNiagaraSystem>                CustomSystem;                                                 // 0x0008(0x0028)
    int32_t                                       SubSteps;                                                     // 0x0030(0x0004)
    int32_t                                       IterationCount;                                               // 0x0034(0x0004)
};


// ScriptStruct  HairStrandsCore.HairGroupsRendering
// Struct Size::0x0030
struct FHairGroupsRendering
{
    FName                                         MaterialSlotName;                                             // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    FHairGeometrySettings                         GeometrySettings;                                             // 0x0010(0x0010)
    FHairShadowSettings                           ShadowSettings;                                               // 0x0020(0x000C)
    FHairAdvancedRenderingSettings                AdvancedSettings;                                             // 0x002C(0x0002)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
};


// ScriptStruct  HairStrandsCore.HairAdvancedRenderingSettings
// Struct Size::0x0002
struct FHairAdvancedRenderingSettings
{
    bool                                          bUseStableRasterization;                                      // 0x0000(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0001(0x0001)
};


// ScriptStruct  HairStrandsCore.HairShadowSettings
// Struct Size::0x000C
struct FHairShadowSettings
{
    float                                         HairShadowDensity;                                            // 0x0000(0x0004)
    float                                         HairRaytracingRadiusScale;                                    // 0x0004(0x0004)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x0008(0x0001)
    bool                                          bVoxelize;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  HairStrandsCore.HairGeometrySettings
// Struct Size::0x0010
struct FHairGeometrySettings
{
    float                                         HairWidth;                                                    // 0x0000(0x0004)
    float                                         HairRootScale;                                                // 0x0004(0x0004)
    float                                         HairTipScale;                                                 // 0x0008(0x0004)
    float                                         HairClipScale;                                                // 0x000C(0x0004)
};


// ScriptStruct  HairStrandsCore.GoomBindingGroupInfo
// Struct Size::0x0010
struct FGoomBindingGroupInfo
{
    int32_t                                       RenRootCount;                                                 // 0x0000(0x0004)
    int32_t                                       RenLODCount;                                                  // 0x0004(0x0004)
    int32_t                                       SimRootCount;                                                 // 0x0008(0x0004)
    int32_t                                       SimLODCount;                                                  // 0x000C(0x0004)
};


// ScriptStruct  HairStrandsCore.FollicleMaskOptions
// Struct Size::0x0010
struct FFollicleMaskOptions
{
    UGroomAsset*                                  Groom;                                                        // 0x0000(0x0008)
    enum class EFollicleMaskChannel               Channel;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  HairStrandsCore.HairGroupDesc
// Struct Size::0x004C
struct FHairGroupDesc
{
    int32_t                                       HairCount;                                                    // 0x0000(0x0004)
    int32_t                                       GuideCount;                                                   // 0x0004(0x0004)
    float                                         HairLength;                                                   // 0x0008(0x0004)
    float                                         HairWidth;                                                    // 0x000C(0x0004)
    bool                                          HairWidth;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         HairRootScale;                                                // 0x0014(0x0004)
    bool                                          HairRootScale;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         HairTipScale;                                                 // 0x001C(0x0004)
    bool                                          HairTipScale;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         HairClipLength;                                               // 0x0024(0x0004)
    bool                                          HairClipLength;                                               // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         HairShadowDensity;                                            // 0x002C(0x0004)
    bool                                          HairShadowDensity;                                            // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         HairRaytracingRadiusScale;                                    // 0x0034(0x0004)
    bool                                          HairRaytracingRadiusScale;                                    // 0x0038(0x0001)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x0039(0x0001)
    bool                                          bUseHairRaytracingGeometry;                                   // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    float                                         LODBias;                                                      // 0x003C(0x0004)
    bool                                          bUseStableRasterization;                                      // 0x0040(0x0001)
    bool                                          bUseStableRasterization;                                      // 0x0041(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0042(0x0001)
    bool                                          bScatterSceneLighting;                                        // 0x0043(0x0001)
    bool                                          bSupportVoxelization;                                         // 0x0044(0x0001)
    bool                                          bSupportVoxelization;                                         // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    int32_t                                       LODForcedIndex;                                               // 0x0048(0x0004)
};


// ScriptStruct  HairStrandsCore.GroomHairGroupPreview
// Struct Size::0x0020
struct FGroomHairGroupPreview
{
    int32_t                                       GroupID;                                                      // 0x0000(0x0004)
    int32_t                                       CurveCount;                                                   // 0x0004(0x0004)
    int32_t                                       GuideCount;                                                   // 0x0008(0x0004)
    FHairGroupsInterpolation                      InterpolationSettings;                                        // 0x000C(0x0014)
};


// ScriptStruct  HairStrandsCore.GroomBuildSettings
// Struct Size::0x000C
struct FGroomBuildSettings
{
    bool                                          bOverrideGuides;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HairToGuideDensity;                                           // 0x0004(0x0004)
    enum class EGroomInterpolationQuality         InterpolationQuality;                                         // 0x0008(0x0001)
    enum class EGroomInterpolationWeight          InterpolationDistance;                                        // 0x0009(0x0001)
    bool                                          bRandomizeGuide;                                              // 0x000A(0x0001)
    bool                                          bUseUniqueGuide;                                              // 0x000B(0x0001)
};


// ScriptStruct  HairStrandsCore.GroomConversionSettings
// Struct Size::0x0018
struct FGroomConversionSettings
{
    FVector                                       Rotation;                                                     // 0x0000(0x000C)
    FVector                                       Scale;                                                        // 0x000C(0x000C)
};


// ScriptStruct  MotionWarping.MotionWarpingWindowData
// Struct Size::0x0010
struct FMotionWarpingWindowData
{
    UAnimNotifyState*                             AnimNotify;                                                   // 0x0000(0x0008)
    float                                         StartTime;                                                    // 0x0008(0x0004)
    float                                         EndTime;                                                      // 0x000C(0x0004)
};


// ScriptStruct  MotionWarping.MotionWarpingSyncPoint
// Struct Size::0x0020
struct FMotionWarpingSyncPoint
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
};


// ScriptStruct  MotionWarping.MotionDeltaTrackContainer
// Struct Size::0x0010
struct FMotionDeltaTrackContainer
{
    TArray<FMotionDeltaTrack>                     Tracks;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MotionWarping.MotionDeltaTrack
// Struct Size::0x0048
struct FMotionDeltaTrack
{
    TArray<FTransform>                            BoneTransformTrack;                                           // 0x0000(0x0010)
    TArray<FVector>                               DeltaTranslationTrack;                                        // 0x0010(0x0010)
    TArray<FRotator>                              DeltaRotationTrack;                                           // 0x0020(0x0010)
    FVector                                       TotalTranslation;                                             // 0x0030(0x000C)
    FRotator                                      TotalRotation;                                                // 0x003C(0x000C)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0168
struct FAnimNode : public FAnimNode
{
    float                                         LocomotionAngle;                                              // 0x00D0(0x0004)
    float                                         ActualLocomotionAngle;                                        // 0x00D4(0x0004)
    FInputScaleBiasClamp                          LocomotionAngleBiasClamp;                                     // 0x00D8(0x0030)
    FOrientationWarpingSettings                   Settings;                                                     // 0x0108(0x0038)
    TArray<FOrientationWarpingSpineBoneData>      SpineBoneDataArray;                                           // 0x0140(0x0010)
    char                                          pa_0150[0x0014]                                               // 0x0150(0x0014)
    float                                         CachedDeltaTime;                                              // 0x0164(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.OrientationWarpingSpineBoneData
// Struct Size::0x0008
struct FOrientationWarpingSpineBoneData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  AnimationWarpingRuntime.OrientationWarpingSettings
// Struct Size::0x0038
struct FOrientationWarpingSettings
{
    enum class EAxis                              YawRotationAxis;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BodyOrientationAlpha;                                         // 0x0004(0x0004)
    TArray<FOrientationWarpingSpineBoneSettings>  SpineBones;                                                   // 0x0008(0x0010)
    FBoneReference                                IkFootRootBone;                                               // 0x0018(0x0010)
    TArray<FBoneReference>                        IKFootBones;                                                  // 0x0028(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.OrientationWarpingSpineBoneSettings
// Struct Size::0x0010
struct FOrientationWarpingSpineBoneSettings
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0010)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x0230
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0018]                                               // 0x00D0(0x0018)
    FBoneReference                                IkFootRootBone;                                               // 0x00E8(0x0010)
    FBoneReference                                PelvisBone;                                                   // 0x00F8(0x0010)
    TArray<FSlopeWarpingFootDefinition>           FeetDefinitions;                                              // 0x0108(0x0010)
    TArray<FSlopeWarpingFootData>                 FeetData;                                                     // 0x0118(0x0010)
    FVectorRK4SpringInterpolator                  PelvisOffsetInterpolator;                                     // 0x0128(0x0008)
    char                                          pa_0130[0x0034]                                               // 0x0130(0x0034)
    FVector                                       GravityDir;                                                   // 0x0164(0x000C)
    FVector                                       CustomFloorOffset;                                            // 0x0170(0x000C)
    float                                         CachedDeltaTime;                                              // 0x017C(0x0004)
    FVector                                       TargetFloorNormalWorldSpace;                                  // 0x0180(0x000C)
    FVectorRK4SpringInterpolator                  FloorNormalInterpolator;                                      // 0x018C(0x0008)
    char                                          pa_0194[0x0034]                                               // 0x0194(0x0034)
    FVector                                       TargetFloorOffsetLocalSpace;                                  // 0x01C8(0x000C)
    FVectorRK4SpringInterpolator                  FloorOffsetInterpolator;                                      // 0x01D4(0x0008)
    char                                          pa_01DC[0x0034]                                               // 0x01DC(0x0034)
    float                                         MaxStepHeight;                                                // 0x0210(0x0004)
    char                                          bKeepMeshInsideOfCapsule;                                     // 0x0214(0x0001)
    char                                          bPullPelvisDown;                                              // 0x0214(0x0001)
    char                                          bUseCustomFloorOffset;                                        // 0x0214(0x0001)
    char                                          bWasOnGround;                                                 // 0x0214(0x0001)
    char                                          bShowDebug;                                                   // 0x0214(0x0001)
    char                                          bFloorSmoothingInitialized;                                   // 0x0214(0x0001)
    char                                          pa_0215[0x0003]                                               // 0x0215(0x0003)
    FVector                                       ActorLocation;                                                // 0x0218(0x000C)
    FVector                                       GravityDirCompSpace;                                          // 0x0224(0x000C)
};


// ScriptStruct  AnimationWarpingRuntime.SlopeWarpingFootData
// Struct Size::0x0060
struct FSlopeWarpingFootData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  AnimationWarpingRuntime.SlopeWarpingFootDefinition
// Struct Size::0x0028
struct FSlopeWarpingFootDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
    float                                         FootSize;                                                     // 0x0024(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.AnimNode
// Struct Size::0x01C0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0008]                                               // 0x00D0(0x0008)
    FBoneReference                                IkFootRootBone;                                               // 0x00D8(0x0010)
    TArray<FStrideWarpingFootDefinition>          FeetDefinitions;                                              // 0x00E8(0x0010)
    TArray<FStrideWarpingFootData>                FeetData;                                                     // 0x00F8(0x0010)
    FBoneReference                                PelvisBone;                                                   // 0x0108(0x0010)
    enum class EStrideWarpingAxisMode             StrideWarpingAxisMode;                                        // 0x0118(0x0001)
    enum class EStrideWarpingAxisMode             FloorNormalAxisMode;                                          // 0x0119(0x0001)
    enum class EStrideWarpingAxisMode             GravityDirAxisMode;                                           // 0x011A(0x0001)
    char                                          pa_011B[0x0001]                                               // 0x011B(0x0001)
    float                                         StrideScaling;                                                // 0x011C(0x0004)
    FInputScaleBiasClamp                          StrideScalingScaleBiasClamp;                                  // 0x0120(0x0030)
    FVector                                       ManualStrideWarpingDir;                                       // 0x0150(0x000C)
    FVector                                       ManualFloorNormalInput;                                       // 0x015C(0x000C)
    FVector                                       ManualGravityDirInput;                                        // 0x0168(0x000C)
    float                                         PelvisPostAdjustmentAlpha;                                    // 0x0174(0x0004)
    int32_t                                       PelvisAdjustmentMaxIter;                                      // 0x0178(0x0004)
    FVectorRK4SpringInterpolator                  PelvisAdjustmentInterp;                                       // 0x017C(0x0008)
    char                                          pa_0184[0x0034]                                               // 0x0184(0x0034)
    char                                          bAdjustThighBonesRotation;                                    // 0x01B8(0x0001)
    char                                          bClampIKUsingFKLeg;                                           // 0x01B8(0x0001)
    char                                          bOrientStrideWarpingAxisBasedOnFloorNormal;                   // 0x01B8(0x0001)
    char                                          pa_01B9[0x0003]                                               // 0x01B9(0x0003)
    float                                         CachedDeltaTime;                                              // 0x01BC(0x0004)
};


// ScriptStruct  AnimationWarpingRuntime.StrideWarpingFootData
// Struct Size::0x0040
struct FStrideWarpingFootData
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  AnimationWarpingRuntime.StrideWarpingFootDefinition
// Struct Size::0x0024
struct FStrideWarpingFootDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
};


// ScriptStruct  AnimationBudgetAllocator.AnimationBudgetAllocatorParameters
// Struct Size::0x0050
struct FAnimationBudgetAllocatorParameters
{
    float                                         BudgetInMs;                                                   // 0x0000(0x0004)
    float                                         MinQuality;                                                   // 0x0004(0x0004)
    int32_t                                       MaxTickRate;                                                  // 0x0008(0x0004)
    float                                         WorkUnitSmoothingSpeed;                                       // 0x000C(0x0004)
    float                                         AlwaysTickFalloffAggression;                                  // 0x0010(0x0004)
    float                                         InterpolationFalloffAggression;                               // 0x0014(0x0004)
    int32_t                                       InterpolationMaxRate;                                         // 0x0018(0x0004)
    int32_t                                       MaxInterpolatedComponents;                                    // 0x001C(0x0004)
    float                                         InterpolationTickMultiplier;                                  // 0x0020(0x0004)
    float                                         InitialEstimatedWorkUnitTimeMs;                               // 0x0024(0x0004)
    int32_t                                       MaxTickedOffsreenComponents;                                  // 0x0028(0x0004)
    int32_t                                       StateChangeThrottleInFrames;                                  // 0x002C(0x0004)
    float                                         BudgetFactorBeforeReducedWork;                                // 0x0030(0x0004)
    float                                         BudgetFactorBeforeReducedWorkEpsilon;                         // 0x0034(0x0004)
    float                                         BudgetPressureSmoothingSpeed;                                 // 0x0038(0x0004)
    int32_t                                       ReducedWorkThrottleMinInFrames;                               // 0x003C(0x0004)
    int32_t                                       ReducedWorkThrottleMaxInFrames;                               // 0x0040(0x0004)
    float                                         BudgetFactorBeforeAggressiveReducedWork;                      // 0x0044(0x0004)
    int32_t                                       ReducedWorkThrottleMaxPerFrame;                               // 0x0048(0x0004)
    float                                         BudgetPressureBeforeEmergencyReducedWork;                     // 0x004C(0x0004)
};


// ScriptStruct  MFGlobalEvent.MFGlobalEventListenerData
// Struct Size::0x0070
struct FMFGlobalEventListenerData
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagCreationWidgetHelper
// Struct Size::0x0001
struct FMFGlobalEventParameterTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagContainer
// Struct Size::0x0020
struct FMFGlobalEventParameterTagContainer
{
    TArray<FMFGlobalEventParameterTag>            MFGlobalEventParameterTags;                                   // 0x0000(0x0010)
    TArray<FMFGlobalEventParameterTag>            ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTag
// Struct Size::0x0008
struct FMFGlobalEventParameterTag
{
    FName                                         TagName;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagNode
// Struct Size::0x0058
struct FMFGlobalEventParameterTagNode
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagSource
// Struct Size::0x0020
struct FMFGlobalEventParameterTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x0008)
    enum class EMFGlobalEventParameterTagSourceTypeSourceType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UMFGlobalEventParameterTagsList*              SourceTagList;                                                // 0x0010(0x0008)
    URestrictedMFGlobalEventParameterTagsList*    SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameter
// Struct Size::0x0028
struct FMFGlobalEventParameter : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    FString                                       DevComment;                                                   // 0x0010(0x0010)
    FName                                         PropertyType;                                                 // 0x0020(0x0008)
};


// ScriptStruct  MFGlobalEventParameterTags.RestrictedMFGlobalEventParameterTagTableRow
// Struct Size::0x0030
struct FRestrictedMFGlobalEventParameterTagTableRow : public FMFGlobalEventParameter
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  MFGlobalEventParameterTags.RestrictedMFGlobalEventParameterConfigInfo
// Struct Size::0x0020
struct FRestrictedMFGlobalEventParameterConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagCategoryRemap
// Struct Size::0x0020
struct FMFGlobalEventParameterTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventParameterTags.MFGlobalEventParameterTagRedirect
// Struct Size::0x0010
struct FMFGlobalEventParameterTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x0008)
    FName                                         NewTagName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagCreationWidgetHelper
// Struct Size::0x0001
struct FMFGlobalEventTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagContainer
// Struct Size::0x0020
struct FMFGlobalEventTagContainer
{
    TArray<FMFGlobalEventTag>                     MFGlobalEventTags;                                            // 0x0000(0x0010)
    TArray<FMFGlobalEventTag>                     ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTag
// Struct Size::0x0008
struct FMFGlobalEventTag
{
    FName                                         TagName;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagNode
// Struct Size::0x0060
struct FMFGlobalEventTagNode
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagSource
// Struct Size::0x0020
struct FMFGlobalEventTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x0008)
    enum class EMFGlobalEventTagSourceType        SourceType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UMFGlobalEventTagsList*                       SourceTagList;                                                // 0x0010(0x0008)
    URestrictedMFGlobalEventTagsList*             SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEvent
// Struct Size::0x0030
struct FMFGlobalEvent : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    FString                                       DevComment;                                                   // 0x0010(0x0010)
    TArray<FMFGlobalEventParameter>               Parameters;                                                   // 0x0020(0x0010)
};


// ScriptStruct  MFGlobalEventTags.RestrictedMFGlobalEventTagTableRow
// Struct Size::0x0038
struct FRestrictedMFGlobalEventTagTableRow : public FMFGlobalEvent
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  MFGlobalEventTags.RestrictedMFGlobalEventConfigInfo
// Struct Size::0x0020
struct FRestrictedMFGlobalEventConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagCategoryRemap
// Struct Size::0x0020
struct FMFGlobalEventTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  MFGlobalEventTags.MFGlobalEventTagRedirect
// Struct Size::0x0010
struct FMFGlobalEventTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x0008)
    FName                                         NewTagName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  MFMission.MFMissionFlowExecutingNodeConfig
// Struct Size::0x0018
struct FMFMissionFlowExecutingNodeConfig
{
    bool                                          bExecutingFlow;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<UMFMissionFlowNode*>                   NodeList;                                                     // 0x0008(0x0010)
};


// ScriptStruct  MFMission.MFMissionFlowInstanceData
// Struct Size::0x0028
struct FMFMissionFlowInstanceData
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    UMFMissionFlow*                               MissionFlow;                                                  // 0x0008(0x0008)
    enum class EMissionFlowNodeStatus             NodeStatus;                                                   // 0x0010(0x0001)
    enum class EMissionStatus                     MissionStatus;                                                // 0x0011(0x0001)
    bool                                          bBeforeState;                                                 // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    ACharacter*                                   LastTriggerCharacter;                                         // 0x0018(0x0008)
    int32_t                                       LoopCount;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  MFMission.MFMissionFlowVariableInstanceData
// Struct Size::0x0108
struct FMFMissionFlowVariableInstanceData
{
    UMFMissionDataComponent*                      DataComp;                                                     // 0x0000(0x0008)
    UMFMissionFlow*                               MissionFlow;                                                  // 0x0008(0x0008)
    UMFMissionFlowVariableData*                   VariableAsset;                                                // 0x0010(0x0008)
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
    TArray<UMFMissionFlowVariableKeyType*>        KeyInstances;                                                 // 0x0038(0x0010)
    char                                          pa_0048[0x00C0]                                               // 0x0048(0x00C0)
};


// ScriptStruct  MFMission.MissionFlowConnections
// Struct Size::0x0010
struct FMissionFlowConnections
{
    TArray<FMissionFlowConnection>                Connections;                                                  // 0x0000(0x0010)
};


// ScriptStruct  MFMission.MissionFlowConnection
// Struct Size::0x0008
struct FMissionFlowConnection
{
    UMFMissionFlowNode*                           ConnectNode;                                                  // 0x0000(0x0008)
};


// ScriptStruct  MFMission.MissionFlowPrevConnection
// Struct Size::0x0010
struct FMissionFlowPrevConnection : public FMissionFlowConnection
{
    enum class EMissionFlowConnectionType         PrevConnectionType;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  MFMission.MissionFlowConnectionWeight
// Struct Size::0x0008
struct FMissionFlowConnectionWeight
{
    char                                          Index;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  MFMission.MFMissionFlowVariableKeySelector
// Struct Size::0x0028
struct FMFMissionFlowVariableKeySelector
{
    TArray<UMFMissionFlowVariableKeyType*>        AllowedTypes;                                                 // 0x0000(0x0010)
    FName                                         SelectedKeyName;                                              // 0x0010(0x0008)
    UMFMissionFlowVariableKeyType*                SelectedKeyType;                                              // 0x0018(0x0008)
    char                                          SelectedKeyID;                                                // 0x0020(0x0001)
    bool                                          bNoneIsAllowedValue;                                          // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  MFMission.MFMissionFlowVariableEntry
// Struct Size::0x0020
struct FMFMissionFlowVariableEntry
{
    FName                                         EntryName;                                                    // 0x0000(0x0008)
    UMFMissionFlowVariableKeyType*                KeyType;                                                      // 0x0008(0x0008)
    char                                          bInstanceSynced;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         Category;                                                     // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MFMission.MFMissionVariableReadBase
// Struct Size::0x0028
struct FMFMissionVariableReadBase
{
    FMFMissionFlowVariableKeySelector             Key;                                                          // 0x0000(0x0028)
};


// ScriptStruct  MFMission.MFMissionVariableRead
// Struct Size::0x0030
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    int32_t                                       ConfigValue;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  MFMission.MFMissionVariableRead
// Struct Size::0x0030
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    UObject*                                      ConfigValue;                                                  // 0x0028(0x0008)
};


// ScriptStruct  MFMission.MFMissionVariableRead
// Struct Size::0x0038
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    FRotator                                      ConfigValue;                                                  // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MFMission.MFMissionVariableRead
// Struct Size::0x0038
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    FString                                       ConfigValue;                                                  // 0x0028(0x0010)
};


// ScriptStruct  MFMission.MFMissionVariableRead
// Struct Size::0x0038
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    FVector                                       ConfigValue;                                                  // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MFMission.MissionObjectivePreConditions
// Struct Size::0x0028
struct FMissionObjectivePreConditions
{
    enum class EMissionObjectiveConditionCheckTypeCheckType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FMissionObjectiveConditionContainer>   ConditionContainers;                                          // 0x0008(0x0010)
    TArray<UMFMissionAction*>                     ActivateActions;                                              // 0x0018(0x0010)
};


// ScriptStruct  MFMission.MissionObjectiveConditionContainer
// Struct Size::0x0018
struct FMissionObjectiveConditionContainer
{
    enum class EMissionObjectiveConditionCheckTypeCheckType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<UMFMissionCondition*>                  Conditions;                                                   // 0x0008(0x0010)
};


// ScriptStruct  MFMission.MissionObjectiveCheckConditions
// Struct Size::0x0060
struct FMissionObjectiveCheckConditions
{
    enum class EMissionHelpType                   HelpType;                                                     // 0x0000(0x0001)
    enum class EMissionCompareType                CompareType;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       BeginProgress;                                                // 0x0004(0x0004)
    int32_t                                       EndProgress;                                                  // 0x0008(0x0004)
    int32_t                                       ProgressUnit;                                                 // 0x000C(0x0004)
    int32_t                                       ProgressFactor;                                               // 0x0010(0x0004)
    bool                                          bNeedReportProgress;                                          // 0x0014(0x0001)
    bool                                          bNeedReport;                                                  // 0x0015(0x0001)
    bool                                          bReachEndNotComplete;                                         // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    int32_t                                       OneBattleMaxAddProgress;                                      // 0x0018(0x0004)
    bool                                          bFailWhenAchieved;                                            // 0x001C(0x0001)
    enum class EMissionObjectiveConditionCheckTypeCheckType;                                                    // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    TArray<FMissionObjectiveConditionContainer>   ConditionContainers;                                          // 0x0020(0x0010)
    TArray<UMFMissionAction*>                     ProgressActions;                                              // 0x0030(0x0010)
    TArray<UMFMissionAction*>                     SuccessActions;                                               // 0x0040(0x0010)
    TArray<UMFMissionAction*>                     FailedActions;                                                // 0x0050(0x0010)
};


// ScriptStruct  MFMission.MissionInstigatorInfo
// Struct Size::0x0010
struct FMissionInstigatorInfo
{
    TArray<UObject*>                              Instigators;                                                  // 0x0000(0x0010)
};


// ScriptStruct  MFMission.MFGlobalEventMessage
// Struct Size::0x0008
struct FMFGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  MFMission.MFGlobalEventMessage
// Struct Size::0x0008
struct FMFGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  MFMission.MFGlobalEventMessage
// Struct Size::0x0008
struct FMFGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  OnlineSubsystem.NamedInterfaceDef
// Struct Size::0x0018
struct FNamedInterfaceDef
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    FString                                       InterfaceClassName;                                           // 0x0008(0x0010)
};


// ScriptStruct  OnlineSubsystem.NamedInterface
// Struct Size::0x0010
struct FNamedInterface
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    UObject*                                      InterfaceObject;                                              // 0x0008(0x0008)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductRequest
// Struct Size::0x0018
struct FInAppPurchaseProductRequest
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemId;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductInfo2
// Struct Size::0x00F8
struct FInAppPurchaseProductInfo2
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00A8(0x0050)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductRequest2
// Struct Size::0x0018
struct FInAppPurchaseProductRequest2
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.PlayerReservation
// Struct Size::0x0050
struct FPlayerReservation
{
    FUniqueNetIdRepl                              UniqueID;                                                     // 0x0000(0x0028)
    FString                                       ValidationStr;                                                // 0x0028(0x0010)
    FString                                       Platform;                                                     // 0x0038(0x0010)
    bool                                          bAllowCrossplay;                                              // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         ElapsedTime;                                                  // 0x004C(0x0004)
};


// ScriptStruct  OnlineSubsystemUtils.PIELoginSettingsInternal
// Struct Size::0x0040
struct FPIELoginSettingsInternal
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Token;                                                        // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    TArray<char>                                  TokenBytes;                                                   // 0x0030(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyReservation
// Struct Size::0x0050
struct FPartyReservation
{
    int32_t                                       TeamNum;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FUniqueNetIdRepl                              PartyLeader;                                                  // 0x0008(0x0028)
    TArray<FPlayerReservation>                    PartyMembers;                                                 // 0x0030(0x0010)
    TArray<FPlayerReservation>                    RemovedPartyMembers;                                          // 0x0040(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.SpectatorReservation
// Struct Size::0x0078
struct FSpectatorReservation
{
    FUniqueNetIdRepl                              SpectatorId;                                                  // 0x0000(0x0028)
    FPlayerReservation                            Spectator;                                                    // 0x0028(0x0050)
};


// ScriptStruct  MFRelightingPortal.MFRelightingPortalStaticMap
// Struct Size::0x0018
struct FMFRelightingPortalStaticMap
{
    int32_t                                       MapSize;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  Samples;                                                      // 0x0008(0x0010)
};


// ScriptStruct  AIServiceSDK.MapRule
// Struct Size::0x0028
struct FMapRule
{
    FSoftObjectPath                               MapPath;                                                      // 0x0000(0x0018)
    TArray<int32_t>                               RuleIDs;                                                      // 0x0018(0x0010)
};


// ScriptStruct  FalconLandscapeMixerShader.FalconScriptTextureView
// Struct Size::0x0020
struct FFalconScriptTextureView
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  FalconLandscapeMixerShader.Scatter3DPattern
// Struct Size::0x0020
struct FScatter3DPattern
{
    TArray<FVector>                               PointCloud;                                                   // 0x0000(0x0010)
    FVector                                       Size;                                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  FalconLandscapeMixerShader.FalconPlacementToolPolygonRigidbody
// Struct Size::0x0058
struct FFalconPlacementToolPolygonRigidbody
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Velocity;                                                     // 0x0018(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0024(0x000C)
    FVector                                       BoundMin;                                                     // 0x0030(0x000C)
    FVector                                       BoundMax;                                                     // 0x003C(0x000C)
    UVolumeTexture*                               SDFTexture;                                                   // 0x0048(0x0008)
    TWeakObjectPtr<AStaticMeshActor>              SMActor;                                                      // 0x0050(0x0008)
};


// ScriptStruct  FalconLandscapeMixerShader.FalconPlacementToolSphereRigidbody
// Struct Size::0x0028
struct FFalconPlacementToolSphereRigidbody
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Radius;                                                       // 0x0024(0x0004)
};


// ScriptStruct  FalconLandscapeMixerShader.FalconRingVertex
// Struct Size::0x000C
struct FFalconRingVertex
{
    FVector                                       position;                                                     // 0x0000(0x000C)
};


// ScriptStruct  FalconLandscapeMixerShader.FalconRTAllocation
// Struct Size::0x0010
struct FFalconRTAllocation
{
    UTextureRenderTarget2D*                       Texture;                                                      // 0x0000(0x0008)
    FIntPoint                                     BasePoint;                                                    // 0x0008(0x0008)
};


// ScriptStruct  GeometryCache.TrackRenderData
// Struct Size::0x0070
struct FTrackRenderData
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshData
// Struct Size::0x00A8
struct FGeometryCacheMeshData
{
    char                                          pa_0000[0x00A8]                                               // 0x0000(0x00A8)
};


// ScriptStruct  GeometryCache.GeometryCacheVertexInfo
// Struct Size::0x0008
struct FGeometryCacheVertexInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshBatchInfo
// Struct Size::0x000C
struct FGeometryCacheMeshBatchInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheParams
// Struct Size::0x0040
struct FMovieSceneGeometryCacheParams
{
    UGeometryCache*                               GeometryCacheAsset;                                           // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         StartOffset;                                                  // 0x001C(0x0004)
    float                                         EndOffset;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FSoftObjectPath                               GeometryCache;                                                // 0x0028(0x0018)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
// Struct Size::0x0068
struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCacheSectionTemplateParametersParams;                                                    // 0x0020(0x0048)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
// Struct Size::0x0048
struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0044(0x0004)
};


// ScriptStruct  ReliefMapping.ReliefMappingGeneratorInput
// Struct Size::0x0040
struct FReliefMappingGeneratorInput
{
    UTexture2D*                                   HeightMap;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  INTLCore.INTLBaseResult
// Struct Size::0x0040
struct FINTLBaseResult
{
    int32_t                                       methodId;                                                     // 0x0000(0x0004)
    int32_t                                       RetCode;                                                      // 0x0004(0x0004)
    FString                                       RetMsg;                                                       // 0x0008(0x0010)
    int32_t                                       ThirdCode;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ThirdMsg;                                                     // 0x0020(0x0010)
    FString                                       extraJson;                                                    // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLAdjustAttrsChangedResult
// Struct Size::0x0050
struct FINTLAdjustAttrsChangedResult : public FINTLBaseResult
{
    FString                                       AdjustAttribution;                                            // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLTabExpEntity
// Struct Size::0x0120
struct FINTLTabExpEntity
{
    FString                                       ExpName;                                                      // 0x0000(0x0010)
    FString                                       Assignment;                                                   // 0x0010(0x0010)
    FString                                       ExpGrayId;                                                    // 0x0020(0x0010)
    FString                                       LayerName;                                                    // 0x0030(0x0010)
    TMap<FString,FString>                         ExpParams;                                                    // 0x0040(0x0050)
    int32_t                                       ExpId;                                                        // 0x0090(0x0004)
    int32_t                                       Bucket;                                                       // 0x0094(0x0004)
    int32_t                                       ModuleBucketNum;                                              // 0x0098(0x0004)
    float                                         percentage;                                                   // 0x009C(0x0004)
    FString                                       ExpKey;                                                       // 0x00A0(0x0010)
    FString                                       ExpGroupKey;                                                  // 0x00B0(0x0010)
    FString                                       ModuleCode;                                                   // 0x00C0(0x0010)
    TMap<FString,FString>                         Params;                                                       // 0x00D0(0x0050)
};


// ScriptStruct  INTLCore.INTLLIBindRewardResult
// Struct Size::0x0080
struct FINTLLIBindRewardResult : public FINTLBaseResult
{
    FString                                       Image;                                                        // 0x0040(0x0010)
    FString                                       Content;                                                      // 0x0050(0x0010)
    int32_t                                       CanSend;                                                      // 0x0060(0x0004)
    int32_t                                       IsSent;                                                       // 0x0064(0x0004)
    bool                                          FromNetwork;                                                  // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       eventId;                                                      // 0x006C(0x0004)
    TArray<FINTLEventsInfoItem>                   Events;                                                       // 0x0070(0x0010)
};


// ScriptStruct  INTLCore.INTLEventsInfoItem
// Struct Size::0x0040
struct FINTLEventsInfoItem
{
    char                                          CanSend;                                                      // 0x0000(0x0001)
    char                                          IsSent;                                                       // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       Image;                                                        // 0x0008(0x0010)
    FString                                       Content;                                                      // 0x0018(0x0010)
    int32_t                                       eventId;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FINTLRewardItem>                       rewards;                                                      // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLRewardItem
// Struct Size::0x0028
struct FINTLRewardItem
{
    FString                                       desc;                                                         // 0x0000(0x0010)
    FString                                       icon;                                                         // 0x0010(0x0010)
    int32_t                                       ID;                                                           // 0x0020(0x0004)
    int32_t                                       Num;                                                          // 0x0024(0x0004)
};


// ScriptStruct  INTLCore.INTLPermissionResult
// Struct Size::0x0050
struct FINTLPermissionResult : public FINTLBaseResult
{
    FString                                       permission;                                                   // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.CutoutInfoResult
// Struct Size::0x0070
struct FCutoutInfoResult : public FINTLBaseResult
{
    bool                                          HasCutout;                                                    // 0x0040(0x0001)
    bool                                          IsCutoutHidden;                                               // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    int32_t                                       ScreenHeight;                                                 // 0x0044(0x0004)
    int32_t                                       ScreenWidth;                                                  // 0x0048(0x0004)
    int32_t                                       StatusBarHeight;                                              // 0x004C(0x0004)
    TArray<FCutoutRect>                           CutoutRects;                                                  // 0x0050(0x0010)
    FCutoutRect                                   SafeArea;                                                     // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.CutoutRect
// Struct Size::0x0010
struct FCutoutRect
{
    int32_t                                       Top;                                                          // 0x0000(0x0004)
    int32_t                                       Bottom;                                                       // 0x0004(0x0004)
    int32_t                                       Left;                                                         // 0x0008(0x0004)
    int32_t                                       Right;                                                        // 0x000C(0x0004)
};


// ScriptStruct  INTLCore.INTLExtendResult
// Struct Size::0x0058
struct FINTLExtendResult : public FINTLBaseResult
{
    enum class EINTLLoginChannel                  Channel;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FString                                       ExtendMethodName;                                             // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.INTLDNSResult
// Struct Size::0x0070
struct FINTLDNSResult : public FINTLBaseResult
{
    FString                                       V4;                                                           // 0x0040(0x0010)
    FString                                       V6;                                                           // 0x0050(0x0010)
    FString                                       Host;                                                         // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.INTLToolsResult
// Struct Size::0x0060
struct FINTLToolsResult : public FINTLBaseResult
{
    FString                                       DeepLinkUrl;                                                  // 0x0040(0x0010)
    FString                                       ShortLinkUrl;                                                 // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLStartUdpSocketResult
// Struct Size::0x0058
struct FINTLStartUdpSocketResult : public FINTLBaseResult
{
    FString                                       Ip;                                                           // 0x0040(0x0010)
    int32_t                                       Net;                                                          // 0x0050(0x0004)
    int32_t                                       Port;                                                         // 0x0054(0x0004)
};


// ScriptStruct  INTLCore.INTLDetectNetworkResult
// Struct Size::0x0050
struct FINTLDetectNetworkResult : public FINTLBaseResult
{
    float                                         LocalRouterTime;                                              // 0x0040(0x0004)
    float                                         InternetRouterTime;                                           // 0x0044(0x0004)
    int32_t                                       InternetDelay;                                                // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  INTLCore.INTLLBSIPInfoResult
// Struct Size::0x0068
struct FINTLLBSIPInfoResult : public FINTLBaseResult
{
    FString                                       Region;                                                       // 0x0040(0x0010)
    FString                                       Alpha2;                                                       // 0x0050(0x0010)
    int32_t                                       Timestamp;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  INTLCore.INTLDirTreeNode
// Struct Size::0x0060
struct FINTLDirTreeNode
{
    int32_t                                       NodeId;                                                       // 0x0000(0x0004)
    int32_t                                       ParentID;                                                     // 0x0004(0x0004)
    bool                                          IsLeaf;                                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       URL;                                                          // 0x0020(0x0010)
    int32_t                                       status;                                                       // 0x0030(0x0004)
    int32_t                                       Tag;                                                          // 0x0034(0x0004)
    int32_t                                       CustomInt1;                                                   // 0x0038(0x0004)
    int32_t                                       CustomInt2;                                                   // 0x003C(0x0004)
    FString                                       CustomStr;                                                    // 0x0040(0x0010)
    TArray<int32_t>                               ChildrenIdSet;                                                // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLDirTreeResult
// Struct Size::0x0070
struct FINTLDirTreeResult : public FINTLBaseResult
{
    int32_t                                       TreeId;                                                       // 0x0040(0x0004)
    int32_t                                       NodeId;                                                       // 0x0044(0x0004)
    FString                                       TreeInfo;                                                     // 0x0048(0x0010)
    FString                                       RoleInfo;                                                     // 0x0058(0x0010)
    int32_t                                       ExpireTime;                                                   // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  INTLCore.INTLUpdateOptionalRepoFilesStatus
// Struct Size::0x0028
struct FINTLUpdateOptionalRepoFilesStatus
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
    int32_t                                       TotalFileNum;                                                 // 0x0010(0x0004)
    int32_t                                       ValidFileNum;                                                 // 0x0014(0x0004)
    FString                                       NeedDownloadSize;                                             // 0x0018(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateInitInfo
// Struct Size::0x0030
struct FINTLUpdateInitInfo
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       RepoID;                                                       // 0x0004(0x0004)
    int32_t                                       ResourceCopyType;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ResourceSavePath;                                             // 0x0010(0x0010)
    FString                                       FirstResourceDirPath;                                         // 0x0020(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateOptionalRepoInitResult
// Struct Size::0x0048
struct FINTLUpdateOptionalRepoInitResult : public FINTLBaseResult
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       RepoID;                                                       // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLUpdateResult
// Struct Size::0x0050
struct FINTLUpdateResult : public FINTLBaseResult
{
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       RepoID;                                                       // 0x0044(0x0004)
    int32_t                                       TaskId;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  INTLCore.INTLUpdateProgress
// Struct Size::0x0068
struct FINTLUpdateProgress
{
    int32_t                                       methodId;                                                     // 0x0000(0x0004)
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       UpdateStep;                                                   // 0x0008(0x0004)
    int32_t                                       RepoID;                                                       // 0x000C(0x0004)
    int32_t                                       TaskId;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       FinishedSize;                                                 // 0x0018(0x0010)
    FString                                       TotalSize;                                                    // 0x0028(0x0010)
    FString                                       Speed;                                                        // 0x0038(0x0010)
    int32_t                                       RemainTime;                                                   // 0x0048(0x0004)
    float                                         StepProgress;                                                 // 0x004C(0x0004)
    float                                         TotalProgress;                                                // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       ErrorMsg;                                                     // 0x0058(0x0010)
};


// ScriptStruct  INTLCore.INTLUpdateStartRepoNewVersionInfo
// Struct Size::0x0040
struct FINTLUpdateStartRepoNewVersionInfo
{
    int32_t                                       methodId;                                                     // 0x0000(0x0004)
    enum class EINTLUpdateActionType              ActionType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       NewVersionType;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Version;                                                      // 0x0010(0x0010)
    FString                                       NeedDownloadSize;                                             // 0x0020(0x0010)
    FString                                       GameDefinedStr;                                               // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLCustomerUserProfile
// Struct Size::0x0100
struct FINTLCustomerUserProfile
{
    FString                                       LangType;                                                     // 0x0000(0x0010)
    FString                                       Sign;                                                         // 0x0010(0x0010)
    FString                                       Openid;                                                       // 0x0020(0x0010)
    FString                                       GameLevel;                                                    // 0x0030(0x0010)
    FString                                       NickName;                                                     // 0x0040(0x0010)
    FString                                       RoleId;                                                       // 0x0050(0x0010)
    FString                                       AreaID;                                                       // 0x0060(0x0010)
    FString                                       ZoneId;                                                       // 0x0070(0x0010)
    FString                                       GameSvrId;                                                    // 0x0080(0x0010)
    FString                                       Region;                                                       // 0x0090(0x0010)
    FString                                       PictureUrl;                                                   // 0x00A0(0x0010)
    FString                                       CustomParam1;                                                 // 0x00B0(0x0010)
    FString                                       CustomParam2;                                                 // 0x00C0(0x0010)
    FString                                       CustomParam3;                                                 // 0x00D0(0x0010)
    FString                                       CustomParam4;                                                 // 0x00E0(0x0010)
    FString                                       CustomParam5;                                                 // 0x00F0(0x0010)
};


// ScriptStruct  INTLCore.INTLCustomerResult
// Struct Size::0x0048
struct FINTLCustomerResult : public FINTLBaseResult
{
    int32_t                                       MsgType;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLComplianceResult
// Struct Size::0x00D8
struct FINTLComplianceResult : public FINTLBaseResult
{
    int32_t                                       AdultStatus;                                                  // 0x0040(0x0004)
    int32_t                                       ParentCertificateStatus;                                      // 0x0044(0x0004)
    FString                                       ParentCertificateStatusExpiration;                            // 0x0048(0x0010)
    int32_t                                       EUUserAgreeStatus;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       CountryCode;                                                  // 0x0060(0x0010)
    int32_t                                       AdultAge;                                                     // 0x0070(0x0004)
    int32_t                                       GameGrade;                                                    // 0x0074(0x0004)
    int32_t                                       CertificateType;                                              // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       AdultStatusExpiration;                                        // 0x0080(0x0010)
    FString                                       TS;                                                           // 0x0090(0x0010)
    bool                                          IsEEA;                                                        // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    FString                                       Region;                                                       // 0x00A8(0x0010)
    FString                                       Email;                                                        // 0x00B8(0x0010)
    int32_t                                       RealNameAuthStatus;                                           // 0x00C8(0x0004)
    int32_t                                       NeedRealNameAuth;                                             // 0x00CC(0x0004)
    bool                                          NeedLICertification;                                          // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  INTLCore.INTLWebViewResult
// Struct Size::0x0058
struct FINTLWebViewResult : public FINTLBaseResult
{
    int32_t                                       MsgType;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       MsgJsonData;                                                  // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.INTLPushResult
// Struct Size::0x0058
struct FINTLPushResult : public FINTLBaseResult
{
    int32_t                                       Type;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Notification;                                                 // 0x0048(0x0010)
};


// ScriptStruct  INTLCore.INTLLocalNotificationIOS
// Struct Size::0x00A0
struct FINTLLocalNotificationIOS
{
    int32_t                                       RepeatType;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AlertTitle;                                                   // 0x0008(0x0010)
    int32_t                                       FireTime;                                                     // 0x0018(0x0004)
    int32_t                                       Badge;                                                        // 0x001C(0x0004)
    FString                                       AlertBody;                                                    // 0x0020(0x0010)
    FString                                       AlertAction;                                                  // 0x0030(0x0010)
    FString                                       NotificationID;                                               // 0x0040(0x0010)
    TMap<FString,FString>                         UserInfo;                                                     // 0x0050(0x0050)
};


// ScriptStruct  INTLCore.INTLLocalNotification
// Struct Size::0x0078
struct FINTLLocalNotification
{
    int32_t                                       NotificationID;                                               // 0x0000(0x0004)
    int32_t                                       ActionType;                                                   // 0x0004(0x0004)
    int32_t                                       SoundEnabled;                                                 // 0x0008(0x0004)
    int32_t                                       Lights;                                                       // 0x000C(0x0004)
    int32_t                                       Vibrate;                                                      // 0x0010(0x0004)
    int32_t                                       FireTime;                                                     // 0x0014(0x0004)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Content;                                                      // 0x0028(0x0010)
    FString                                       TickerText;                                                   // 0x0038(0x0010)
    FString                                       ActionParameter;                                              // 0x0048(0x0010)
    FString                                       RingUri;                                                      // 0x0058(0x0010)
    FString                                       SmallIcon;                                                    // 0x0068(0x0010)
};


// ScriptStruct  INTLCore.INTLFriendReqInfo
// Struct Size::0x0088
struct FINTLFriendReqInfo
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       User;                                                         // 0x0008(0x0010)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Description;                                                  // 0x0028(0x0010)
    FString                                       ImagePath;                                                    // 0x0038(0x0010)
    FString                                       ThumbPath;                                                    // 0x0048(0x0010)
    FString                                       MediaPath;                                                    // 0x0058(0x0010)
    FString                                       Link;                                                         // 0x0068(0x0010)
    FString                                       extraJson;                                                    // 0x0078(0x0010)
};


// ScriptStruct  INTLCore.INTLFriendResult
// Struct Size::0x0050
struct FINTLFriendResult : public FINTLBaseResult
{
    TArray<FINTLPersonInfo>                       FriendInfoList;                                               // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLPersonInfo
// Struct Size::0x0088
struct FINTLPersonInfo
{
    FString                                       Openid;                                                       // 0x0000(0x0010)
    FString                                       userName;                                                     // 0x0010(0x0010)
    int32_t                                       Gender;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       PictureUrl;                                                   // 0x0028(0x0010)
    FString                                       Country;                                                      // 0x0038(0x0010)
    FString                                       Province;                                                     // 0x0048(0x0010)
    FString                                       City;                                                         // 0x0058(0x0010)
    FString                                       Language;                                                     // 0x0068(0x0010)
    FString                                       extraJson;                                                    // 0x0078(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeResult
// Struct Size::0x0060
struct FINTLNoticeResult : public FINTLBaseResult
{
    FString                                       SeqId;                                                        // 0x0040(0x0010)
    TArray<FINTLNoticeInfo>                       NoticeInfoList;                                               // 0x0050(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeInfo
// Struct Size::0x0078
struct FINTLNoticeInfo
{
    int32_t                                       NoticeID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AppID;                                                        // 0x0008(0x0010)
    FString                                       AppNoticeId;                                                  // 0x0018(0x0010)
    int32_t                                       status;                                                       // 0x0028(0x0004)
    int32_t                                       StartTime;                                                    // 0x002C(0x0004)
    int32_t                                       EndTime;                                                      // 0x0030(0x0004)
    int32_t                                       UpdateTime;                                                   // 0x0034(0x0004)
    FString                                       AreaList;                                                     // 0x0038(0x0010)
    TArray<FINTLNoticePicture>                    PictureList;                                                  // 0x0048(0x0010)
    FString                                       ExtraData;                                                    // 0x0058(0x0010)
    TArray<FINTLNoticeContent>                    ContentList;                                                  // 0x0068(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticeContent
// Struct Size::0x0070
struct FINTLNoticeContent
{
    int32_t                                       ContentId;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AppContentId;                                                 // 0x0008(0x0010)
    FString                                       Title;                                                        // 0x0018(0x0010)
    FString                                       Content;                                                      // 0x0028(0x0010)
    FString                                       LangType;                                                     // 0x0038(0x0010)
    int32_t                                       UpdateTime;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       ExtraData;                                                    // 0x0050(0x0010)
    TArray<FINTLNoticePicture>                    PictureList;                                                  // 0x0060(0x0010)
};


// ScriptStruct  INTLCore.INTLNoticePicture
// Struct Size::0x0040
struct FINTLNoticePicture
{
    FString                                       URL;                                                          // 0x0000(0x0010)
    FString                                       Hash;                                                         // 0x0010(0x0010)
    FString                                       RedirectURL;                                                  // 0x0020(0x0010)
    FString                                       ExtraData;                                                    // 0x0030(0x0010)
};


// ScriptStruct  INTLCore.INTLAccountResult
// Struct Size::0x0278
struct FINTLAccountResult : public FINTLBaseResult
{
    int32_t                                       ChannelID;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Channel;                                                      // 0x0048(0x0010)
    FString                                       SeqId;                                                        // 0x0058(0x0010)
    FString                                       userName;                                                     // 0x0068(0x0010)
    FString                                       uid;                                                          // 0x0078(0x0010)
    FString                                       Token;                                                        // 0x0088(0x0010)
    int32_t                                       ExpireTime;                                                   // 0x0098(0x0004)
    int32_t                                       isRegister;                                                   // 0x009C(0x0004)
    int32_t                                       isSetPassword;                                                // 0x00A0(0x0004)
    int32_t                                       isReceiveEmail;                                               // 0x00A4(0x0004)
    int32_t                                       VerifyCodeExpireTime;                                         // 0x00A8(0x0004)
    bool                                          RequestIsLogin;                                               // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    int32_t                                       CanBind;                                                      // 0x00B0(0x0004)
    int32_t                                       LoginDays;                                                    // 0x00B4(0x0004)
    FString                                       PpAcceptanceVersion;                                          // 0x00B8(0x0010)
    FString                                       TosAcceptanceVersion;                                         // 0x00C8(0x0010)
    FDateTime                                     PpAcceptanceTime;                                             // 0x00D8(0x0008)
    FDateTime                                     TosAcceptanceTime;                                            // 0x00E0(0x0008)
    FINTLAccountProfile                           Profile;                                                      // 0x00E8(0x00D8)
    int32_t                                       IsUserNameAvailable;                                          // 0x01C0(0x0004)
    bool                                          HasGameSaccUid;                                               // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    FString                                       GameSaccUid;                                                  // 0x01C8(0x0010)
    bool                                          HasGameSaccOpenId;                                            // 0x01D8(0x0001)
    char                                          pa_01D9[0x0007]                                               // 0x01D9(0x0007)
    FString                                       GameSaccOpenId;                                               // 0x01E0(0x0010)
    bool                                          HasLiUid;                                                     // 0x01F0(0x0001)
    char                                          pa_01F1[0x0007]                                               // 0x01F1(0x0007)
    FString                                       LiUid;                                                        // 0x01F8(0x0010)
    bool                                          HasLiOpenId;                                                  // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
    FString                                       LiOpenId;                                                     // 0x0210(0x0010)
    bool                                          NeedNotify;                                                   // 0x0220(0x0001)
    char                                          pa_0221[0x0007]                                               // 0x0221(0x0007)
    FString                                       UserAgreedGameTos;                                            // 0x0228(0x0010)
    FString                                       UserAgreedGamePP;                                             // 0x0238(0x0010)
    FString                                       UserAgreedLiPP;                                               // 0x0248(0x0010)
    FString                                       UserAgreedLiDt;                                               // 0x0258(0x0010)
    FString                                       UserAgreedLiTos;                                              // 0x0268(0x0010)
};


// ScriptStruct  INTLCore.INTLAccountProfile
// Struct Size::0x00D8
struct FINTLAccountProfile
{
    FString                                       userName;                                                     // 0x0000(0x0010)
    FString                                       Birthday;                                                     // 0x0010(0x0010)
    int32_t                                       BirthdayYear;                                                 // 0x0020(0x0004)
    int32_t                                       BirthdayMonth;                                                // 0x0024(0x0004)
    int32_t                                       BirthdayDay;                                                  // 0x0028(0x0004)
    int32_t                                       isReceiveEmail;                                               // 0x002C(0x0004)
    FString                                       Region;                                                       // 0x0030(0x0010)
    FString                                       LangType;                                                     // 0x0040(0x0010)
    FString                                       extraJson;                                                    // 0x0050(0x0010)
    FString                                       Email;                                                        // 0x0060(0x0010)
    FString                                       Phone;                                                        // 0x0070(0x0010)
    FString                                       PhoneAreaCode;                                                // 0x0080(0x0010)
    int32_t                                       AccountType;                                                  // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       NickName;                                                     // 0x0098(0x0010)
    FString                                       PrivacyPolicy;                                                // 0x00A8(0x0010)
    FString                                       TermsOfService;                                               // 0x00B8(0x0010)
    int32_t                                       PrivacyUpdateTime;                                            // 0x00C8(0x0004)
    int32_t                                       TermsUpdateTime;                                              // 0x00CC(0x0004)
    int32_t                                       UsernamePassVerify;                                           // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  INTLCore.INTLDeviceLevelResult
// Struct Size::0x0048
struct FINTLDeviceLevelResult : public FINTLBaseResult
{
    int32_t                                       DeviceLevel;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  INTLCore.INTLIDTokenResult
// Struct Size::0x0050
struct FINTLIDTokenResult : public FINTLBaseResult
{
    FString                                       IdToken;                                                      // 0x0040(0x0010)
};


// ScriptStruct  INTLCore.INTLAuthResult
// Struct Size::0x0170
struct FINTLAuthResult : public FINTLBaseResult
{
    FString                                       Openid;                                                       // 0x0040(0x0010)
    FString                                       Token;                                                        // 0x0050(0x0010)
    int32_t                                       TokenExpireTime;                                              // 0x0060(0x0004)
    int32_t                                       FirstLogin;                                                   // 0x0064(0x0004)
    FString                                       RegChannelDis;                                                // 0x0068(0x0010)
    FString                                       userName;                                                     // 0x0078(0x0010)
    int32_t                                       Gender;                                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FString                                       Birthday;                                                     // 0x0090(0x0010)
    FString                                       PicUrl;                                                       // 0x00A0(0x0010)
    FString                                       Pf;                                                           // 0x00B0(0x0010)
    FString                                       PfKey;                                                        // 0x00C0(0x0010)
    bool                                          NeedRealNameAuth;                                             // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    int32_t                                       ChannelID;                                                    // 0x00D4(0x0004)
    enum class EINTLLoginChannel                  ChannelName;                                                  // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    FString                                       ChannelInfo;                                                  // 0x00E0(0x0010)
    FString                                       ConfirmCode;                                                  // 0x00F0(0x0010)
    int32_t                                       ConfirmCodeExpireTime;                                        // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FString                                       BindList;                                                     // 0x0108(0x0010)
    FString                                       LegalDocumentsAcceptedVersion;                                // 0x0118(0x0010)
    int32_t                                       DeleteAccountStatus;                                          // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    FString                                       DeleteAccountInfo;                                            // 0x0130(0x0010)
    int32_t                                       DeleteLIAccountStatus;                                        // 0x0140(0x0004)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
    FString                                       TransferCode;                                                 // 0x0148(0x0010)
    int32_t                                       TransferCodeExpireTime;                                       // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FString                                       Email;                                                        // 0x0160(0x0010)
};


// ScriptStruct  INTLCore.INTLGroupReqInfo
// Struct Size::0x0060
struct FINTLGroupReqInfo : public FINTLBaseResult
{
    FString                                       worldId;                                                      // 0x0040(0x0010)
    FString                                       guildId;                                                      // 0x0050(0x0010)
};


// ScriptStruct  LevelInfinite.LIUserData
// Struct Size::0x00B0
struct FLIUserData
{
    int32_t                                       GameId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ChannelID;                                                    // 0x0008(0x0010)
    FString                                       Openid;                                                       // 0x0018(0x0010)
    FString                                       Token;                                                        // 0x0028(0x0010)
    FString                                       RoleId;                                                       // 0x0038(0x0010)
    FString                                       Region;                                                       // 0x0048(0x0010)
    int32_t                                       AreaID;                                                       // 0x0058(0x0004)
    int32_t                                       ZoneId;                                                       // 0x005C(0x0004)
    FString                                       LangType;                                                     // 0x0060(0x0010)
    FString                                       DefLangType;                                                  // 0x0070(0x0010)
    FString                                       RoleName;                                                     // 0x0080(0x0010)
    FString                                       AppVersion;                                                   // 0x0090(0x0010)
    FString                                       extraJson;                                                    // 0x00A0(0x0010)
};


// ScriptStruct  LevelInfinite.LIBaseEvent
// Struct Size::0x0018
struct FLIBaseEvent
{
    enum class ELIEventType                       EventType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       extraJson;                                                    // 0x0008(0x0010)
};


// ScriptStruct  LevelInfinite.GNPanelReadyEventParam
// Struct Size::0x0030
struct FGNPanelReadyEventParam
{
    FString                                       Module;                                                       // 0x0000(0x0010)
    bool                                          isPopPanel;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FGNPanelReadyEventExtraParam                  ExtraParams;                                                  // 0x0018(0x0018)
};


// ScriptStruct  LevelInfinite.GNPanelReadyEventExtraParam
// Struct Size::0x0018
struct FGNPanelReadyEventExtraParam
{
    FString                                       asset;                                                        // 0x0000(0x0010)
    bool                                          is;                                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GameNative.INTLUserData
// Struct Size::0x00E8
struct FINTLUserData
{
    int32_t                                       GameId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ChannelID;                                                    // 0x0008(0x0010)
    FString                                       Openid;                                                       // 0x0018(0x0010)
    FString                                       Token;                                                        // 0x0028(0x0010)
    FString                                       RoleId;                                                       // 0x0038(0x0010)
    FString                                       Region;                                                       // 0x0048(0x0010)
    int32_t                                       AreaID;                                                       // 0x0058(0x0004)
    int32_t                                       ZoneId;                                                       // 0x005C(0x0004)
    int32_t                                       Os;                                                           // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       LangType;                                                     // 0x0068(0x0010)
    FString                                       DefLangType;                                                  // 0x0078(0x0010)
    FString                                       RoleName;                                                     // 0x0088(0x0010)
    FString                                       PayToken;                                                     // 0x0098(0x0010)
    FString                                       HeadUrl;                                                      // 0x00A8(0x0010)
    FString                                       PlayerLevel;                                                  // 0x00B8(0x0010)
    FString                                       AppVersion;                                                   // 0x00C8(0x0010)
    FString                                       extraJson;                                                    // 0x00D8(0x0010)
};


// ScriptStruct  GameNative.INTLFrameInfo
// Struct Size::0x0028
struct FINTLFrameInfo
{
    FString                                       Path;                                                         // 0x0000(0x0010)
    FString                                       Md5;                                                          // 0x0010(0x0010)
    int32_t                                       Size;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Paper2D.IntMargin
// Struct Size::0x0010
struct FIntMargin
{
    int32_t                                       Left;                                                         // 0x0000(0x0004)
    int32_t                                       Top;                                                          // 0x0004(0x0004)
    int32_t                                       Right;                                                        // 0x0008(0x0004)
    int32_t                                       Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperFlipbookKeyFrame
// Struct Size::0x0010
struct FPaperFlipbookKeyFrame
{
    UPaperSprite*                                 Sprite;                                                       // 0x0000(0x0008)
    int32_t                                       FrameRun;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.SpriteInstanceData
// Struct Size::0x0050
struct FSpriteInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
    UPaperSprite*                                 SourceSprite;                                                 // 0x0040(0x0008)
    FColor                                        VertexColor;                                                  // 0x0048(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x004C(0x0004)
};


// ScriptStruct  Paper2D.PaperSpriteSocket
// Struct Size::0x0040
struct FPaperSpriteSocket
{
    FTransform                                    LocalTransform;                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Paper2D.PaperSpriteAtlasSlot
// Struct Size::0x0040
struct FPaperSpriteAtlasSlot
{
    TSoftObjectPtr<UPaperSprite>                  SpriteRef;                                                    // 0x0000(0x0028)
    int32_t                                       AtlasIndex;                                                   // 0x0028(0x0004)
    int32_t                                       X;                                                            // 0x002C(0x0004)
    int32_t                                       Y;                                                            // 0x0030(0x0004)
    int32_t                                       Width;                                                        // 0x0034(0x0004)
    int32_t                                       Height;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Paper2D.PaperTerrainMaterialRule
// Struct Size::0x0038
struct FPaperTerrainMaterialRule
{
    UPaperSprite*                                 StartCap;                                                     // 0x0000(0x0008)
    TArray<UPaperSprite*>                         Body;                                                         // 0x0008(0x0010)
    UPaperSprite*                                 EndCap;                                                       // 0x0018(0x0008)
    float                                         MinimumAngle;                                                 // 0x0020(0x0004)
    float                                         MaximumAngle;                                                 // 0x0024(0x0004)
    bool                                          bEnableCollision;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         CollisionOffset;                                              // 0x002C(0x0004)
    int32_t                                       DrawOrder;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Paper2D.PaperTileInfo
// Struct Size::0x0010
struct FPaperTileInfo
{
    UPaperTileSet*                                TileSet;                                                      // 0x0000(0x0008)
    int32_t                                       PackedTileIndex;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperTileSetTerrain
// Struct Size::0x0018
struct FPaperTileSetTerrain
{
    FString                                       TerrainName;                                                  // 0x0000(0x0010)
    int32_t                                       CenterTileIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Paper2D.PaperTileMetadata
// Struct Size::0x0040
struct FPaperTileMetadata
{
    FName                                         UserDataName;                                                 // 0x0000(0x0008)
    FSpriteGeometryCollection                     CollisionData;                                                // 0x0008(0x0030)
    char                                          TerrainMembership;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Paper2D.SpriteGeometryCollection
// Struct Size::0x0030
struct FSpriteGeometryCollection
{
    TArray<FSpriteGeometryShape>                  Shapes;                                                       // 0x0000(0x0010)
    enum class ESpritePolygonMode                 GeometryType;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       PixelsPerSubdivisionX;                                        // 0x0014(0x0004)
    int32_t                                       PixelsPerSubdivisionY;                                        // 0x0018(0x0004)
    bool                                          bAvoidVertexMerging;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         AlphaThreshold;                                               // 0x0020(0x0004)
    float                                         DetailAmount;                                                 // 0x0024(0x0004)
    float                                         SimplifyEpsilon;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Paper2D.SpriteGeometryShape
// Struct Size::0x0030
struct FSpriteGeometryShape
{
    enum class ESpriteShapeType                   ShapeType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FVector2D>                             Vertices;                                                     // 0x0008(0x0010)
    FVector2D                                     BoxSize;                                                      // 0x0018(0x0008)
    FVector2D                                     BoxPosition;                                                  // 0x0020(0x0008)
    float                                         Rotation;                                                     // 0x0028(0x0004)
    bool                                          bNegativeWinding;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Paper2D.SpriteDrawCallRecord
// Struct Size::0x00D0
struct FSpriteDrawCallRecord
{
    FVector                                       Destination;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UTexture*                                     BaseTexture;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
    FColor                                        Color;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0084]                                               // 0x004C(0x0084)
};


// ScriptStruct  Paper2D.SpriteAssetInitParameters
// Struct Size::0x0040
struct FSpriteAssetInitParameters
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  H5UIWin.BluEyeSettings
// Struct Size::0x0014
struct FBluEyeSettings
{
    float                                         FrameRate;                                                    // 0x0000(0x0004)
    bool                                          bIsTransparent;                                               // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       Width;                                                        // 0x0008(0x0004)
    int32_t                                       Height;                                                       // 0x000C(0x0004)
    bool                                          bEnableWebGL;                                                 // 0x0010(0x0001)
    bool                                          bAudioMuted;                                                  // 0x0011(0x0001)
    bool                                          bAutoPlayEnabled;                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
};


// ScriptStruct  H5UIWin.H5UIShareInfo
// Struct Size::0x0060
struct FH5UIShareInfo
{
    FString                                       Channel;                                                      // 0x0000(0x0010)
    FString                                       AppID;                                                        // 0x0010(0x0010)
    FString                                       Content;                                                      // 0x0020(0x0010)
    FString                                       Link;                                                         // 0x0030(0x0010)
    FString                                       Image;                                                        // 0x0040(0x0010)
    FString                                       URL;                                                          // 0x0050(0x0010)
};


// ScriptStruct  H5UIWin.H5UILoggerInfo
// Struct Size::0x00A8
struct FH5UILoggerInfo
{
    int64_t                                       Timestamp;                                                    // 0x0000(0x0008)
    FString                                       Level;                                                        // 0x0008(0x0010)
    FString                                       File;                                                         // 0x0018(0x0010)
    int32_t                                       Line;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       Function;                                                     // 0x0030(0x0010)
    int32_t                                       Sence;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       Message;                                                      // 0x0048(0x0010)
    FString                                       Pid;                                                          // 0x0058(0x0010)
    FString                                       uid;                                                          // 0x0068(0x0010)
    FString                                       Did;                                                          // 0x0078(0x0010)
    FString                                       Os;                                                           // 0x0088(0x0010)
    FString                                       Role;                                                         // 0x0098(0x0010)
};


// ScriptStruct  H5UIWin.H5UIBasicConfigure
// Struct Size::0x00D0
struct FH5UIBasicConfigure
{
    FString                                       ServerAddress;                                                // 0x0000(0x0010)
    FString                                       Version;                                                      // 0x0010(0x0010)
    FString                                       GameId;                                                       // 0x0020(0x0010)
    FString                                       DeviceID;                                                     // 0x0030(0x0010)
    FString                                       ChannelID;                                                    // 0x0040(0x0010)
    FString                                       UserID;                                                       // 0x0050(0x0010)
    FString                                       Role;                                                         // 0x0060(0x0010)
    FString                                       Area;                                                         // 0x0070(0x0010)
    FString                                       Os;                                                           // 0x0080(0x0010)
    FString                                       Seq;                                                          // 0x0090(0x0010)
    FString                                       Token;                                                        // 0x00A0(0x0010)
    FString                                       LoggerServer;                                                 // 0x00B0(0x0010)
    char                                          pa_00C0[0x0010]                                               // 0x00C0(0x0010)
};


// ScriptStruct  H5UIWin.H5UICacheMeta
// Struct Size::0x0050
struct FH5UICacheMeta
{
    TMap<FString,FH5UICacheEntry>                 DiskCache;                                                    // 0x0000(0x0050)
};


// ScriptStruct  H5UIWin.H5UICacheEntry
// Struct Size::0x0078
struct FH5UICacheEntry
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FString                                       FileHash;                                                     // 0x0010(0x0010)
    int64_t                                       ExpirationTime;                                               // 0x0020(0x0008)
    TMap<FString,FString>                         MetaData;                                                     // 0x0028(0x0050)
};


// ScriptStruct  H5UIWin.H5UIServerAPIResponse
// Struct Size::0x0080
struct FH5UIServerAPIResponse
{
    int32_t                                       Code;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FH5UIManifestConfigure                        Data;                                                         // 0x0018(0x0068)
};


// ScriptStruct  H5UIWin.H5UIManifestConfigure
// Struct Size::0x0068
struct FH5UIManifestConfigure
{
    int32_t                                       Version;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FH5UIConfigure                                Configure;                                                    // 0x0008(0x0050)
    TArray<FH5UITaskConfigure>                    Tasks;                                                        // 0x0058(0x0010)
};


// ScriptStruct  H5UIWin.H5UITaskConfigure
// Struct Size::0x00B0
struct FH5UITaskConfigure
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    int32_t                                       ReserveCount;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    int64_t                                       Expire;                                                       // 0x0028(0x0008)
    TArray<FString>                               Urls;                                                         // 0x0030(0x0010)
    int64_t                                       ActualSize;                                                   // 0x0040(0x0008)
    FString                                       Domain;                                                       // 0x0048(0x0010)
    TArray<FH5UICacheFileItem>                    Files;                                                        // 0x0058(0x0010)
    FString                                       Hash;                                                         // 0x0068(0x0010)
    int64_t                                       Size;                                                         // 0x0078(0x0008)
    FString                                       URL;                                                          // 0x0080(0x0010)
    bool                                          AllowAnonymous;                                               // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FString                                       Stage;                                                        // 0x0098(0x0010)
    int32_t                                       ReserveSize;                                                  // 0x00A8(0x0004)
    int32_t                                       ReserveAge;                                                   // 0x00AC(0x0004)
};


// ScriptStruct  H5UIWin.H5UICacheFileItem
// Struct Size::0x0028
struct FH5UICacheFileItem
{
    FString                                       URL;                                                          // 0x0000(0x0010)
    FString                                       Hash;                                                         // 0x0010(0x0010)
    int64_t                                       Expire;                                                       // 0x0020(0x0008)
};


// ScriptStruct  H5UIWin.H5UIConfigure
// Struct Size::0x0050
struct FH5UIConfigure
{
    bool                                          Prerender;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Index;                                                        // 0x0008(0x0010)
    FString                                       LoggerEndpoint;                                               // 0x0018(0x0010)
    FString                                       LoggerLevel;                                                  // 0x0028(0x0010)
    FString                                       BackgroundColor;                                              // 0x0038(0x0010)
    bool                                          ReserveStatusBar;                                             // 0x0048(0x0001)
    bool                                          DisableHitAnimation;                                          // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  RigLogicModule.VertexLayout
// Struct Size::0x000C
struct FVertexLayout
{
    int32_t                                       position;                                                     // 0x0000(0x0004)
    int32_t                                       TextureCoordinate;                                            // 0x0004(0x0004)
    int32_t                                       Normal;                                                       // 0x0008(0x0004)
};


// ScriptStruct  RigLogicModule.TextureCoordinate
// Struct Size::0x0008
struct FTextureCoordinate
{
    float                                         U;                                                            // 0x0000(0x0004)
    float                                         V;                                                            // 0x0004(0x0004)
};


// ScriptStruct  RigLogicModule.MeshBlendShapeChannelMapping
// Struct Size::0x0008
struct FMeshBlendShapeChannelMapping
{
    int32_t                                       MeshIndex;                                                    // 0x0000(0x0004)
    int32_t                                       BlendShapeChannelIndex;                                       // 0x0004(0x0004)
};


// ScriptStruct  RigLogicModule.CoordinateSystem
// Struct Size::0x0003
struct FCoordinateSystem
{
    enum class EDirection                         XAxis;                                                        // 0x0000(0x0001)
    enum class EDirection                         YAxis;                                                        // 0x0001(0x0001)
    enum class EDirection                         ZAxis;                                                        // 0x0002(0x0001)
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x00E8
struct FRigUnit : public FRigUnitMutable
{
    FRigUnit                                      Data;                                                         // 0x0068(0x0080)
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x0080
struct FRigUnit
{
    TWeakObjectPtr<USkeletalMeshComponent>        SkelMeshComponent;                                            // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TArray<int32_t>                               InputCurveIndices;                                            // 0x0018(0x0010)
    TArray<int32_t>                               HierarchyBoneIndices;                                         // 0x0028(0x0010)
    TArray<FRigUnit>                              MorphTargetCurveIndices;                                      // 0x0038(0x0010)
    TArray<FRigUnit>                              BlendShapeIndices;                                            // 0x0048(0x0010)
    TArray<FRigUnit>                              CurveContainerIndicesForAnimMaps;                             // 0x0058(0x0010)
    TArray<FRigUnit>                              RigLogicIndicesForAnimMaps;                                   // 0x0068(0x0010)
    uint32_t                                      CurrentLOD;                                                   // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  RigLogicModule.RigUnit
// Struct Size::0x0010
struct FRigUnit
{
    TArray<int32_t>                               Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  GLTFExporterRuntime.GLTFOverrideMaterialBakeSettings
// Struct Size::0x0006
struct FGLTFOverrideMaterialBakeSettings
{
    bool                                          bOverrideSize;                                                // 0x0000(0x0001)
    enum class EGLTFMaterialBakeSizePOT           Size;                                                         // 0x0001(0x0001)
    bool                                          bOverrideFilter;                                              // 0x0002(0x0001)
    enum class TextureFilter                      Filter;                                                       // 0x0003(0x0001)
    bool                                          bOverrideTiling;                                              // 0x0004(0x0001)
    enum class TextureAddress                     Tiling;                                                       // 0x0005(0x0001)
};


// ScriptStruct  VariantManagerContent.FunctionCaller
// Struct Size::0x0008
struct FFunctionCaller
{
    FName                                         FunctionName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  VariantManagerContent.CapturedPropSegment
// Struct Size::0x0028
struct FCapturedPropSegment
{
    FString                                       PropertyName;                                                 // 0x0000(0x0010)
    int32_t                                       PropertyIndex;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ComponentName;                                                // 0x0018(0x0010)
};


// ScriptStruct  VariantManagerContent.VariantDependency
// Struct Size::0x0058
struct FVariantDependency
{
    TSoftObjectPtr<UVariantSet>                   VariantSet;                                                   // 0x0000(0x0028)
    TSoftObjectPtr<UVariant>                      Variant;                                                      // 0x0028(0x0028)
    bool                                          bEnabled;                                                     // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  MFBenchmark.MFMarkerPosDataTabelData
// Struct Size::0x0020
struct FMFMarkerPosDataTabelData : public FTableRowBase
{
    float                                         PosX;                                                         // 0x0008(0x0004)
    float                                         PosY;                                                         // 0x000C(0x0004)
    float                                         PosZ;                                                         // 0x0010(0x0004)
    float                                         RotX;                                                         // 0x0014(0x0004)
    float                                         RotY;                                                         // 0x0018(0x0004)
    float                                         RotZ;                                                         // 0x001C(0x0004)
};


// ScriptStruct  MFDataVisualizer.SceneObjeInfo
// Struct Size::0x0028
struct FSceneObjeInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  MFDataVisualizer.SceneObjInfo
// Struct Size::0x0038
struct FSceneObjInfo : public FSceneObjeInfo
{
    UStaticMesh*                                  MeshResource;                                                 // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  MFDataVisualizer.SceneObjInfo
// Struct Size::0x0030
struct FSceneObjInfo : public FSceneObjeInfo
{
    UStaticMesh*                                  MeshResource;                                                 // 0x0028(0x0008)
};


// ScriptStruct  MFDataVisualizer.SceneObjInfo
// Struct Size::0x0048
struct FSceneObjInfo : public FSceneObjeInfo
{
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
    UStaticMesh*                                  MeshResource;                                                 // 0x0038(0x0008)
    UMaterialInterface*                           MainMat;                                                      // 0x0040(0x0008)
};


// ScriptStruct  MFPluginWrapper.PufferTaskInfo
// Struct Size::0x0038
struct FPufferTaskInfo
{
    int32_t                                       TaskId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       TaskName;                                                     // 0x0008(0x0010)
    enum class EPufferTaskState                   TaskState;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    int64_t                                       NowSize;                                                      // 0x0020(0x0008)
    int64_t                                       TotalSize;                                                    // 0x0028(0x0008)
    bool                                          bIsFileTask;                                                  // 0x0030(0x0001)
    bool                                          bIsBatchTask;                                                 // 0x0031(0x0001)
    bool                                          bIsRestoreTask;                                               // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
};


// ScriptStruct  MFPluginWrapper.PufferInitConfigData
// Struct Size::0x00A8
struct FPufferInitConfigData
{
    int32_t                                       MaxDownloadSpeed;                                             // 0x0000(0x0004)
    int32_t                                       MaxDownTask;                                                  // 0x0004(0x0004)
    int32_t                                       MaxDownloadsPerTask;                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       PufferProductId;                                              // 0x0010(0x0008)
    int32_t                                       NeedCheck;                                                    // 0x0018(0x0004)
    int32_t                                       NeedFileRestore;                                              // 0x001C(0x0004)
    int32_t                                       RemoveOldWhenUpdate;                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       StrSourceDir;                                                 // 0x0028(0x0010)
    FString                                       StrPufferServerUrl;                                           // 0x0038(0x0010)
    FString                                       StrPufferGroupMarkId;                                         // 0x0048(0x0010)
    FString                                       strUserID;                                                    // 0x0058(0x0010)
    int64_t                                       PufferGameId;                                                 // 0x0068(0x0008)
    int32_t                                       PufferUpdateType;                                             // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    int64_t                                       PufferDolphinProductId;                                       // 0x0078(0x0008)
    FString                                       StrDolphinAppVersion;                                         // 0x0080(0x0010)
    FString                                       StrDolphinResVersion;                                         // 0x0090(0x0010)
    int32_t                                       EnableIOSBGDownload;                                          // 0x00A0(0x0004)
    int32_t                                       ShowFileList;                                                 // 0x00A4(0x0004)
};


// ScriptStruct  MFPluginWrapper.MyHotfixStruct
// Struct Size::0x0008
struct FMyHotfixStruct
{
    int32_t                                       A;                                                            // 0x0000(0x0004)
    int32_t                                       B;                                                            // 0x0004(0x0004)
};


// ScriptStruct  WindowsDevicePermission.SystemLocalizationMsgTableRow
// Struct Size::0x0038
struct FSystemLocalizationMsgTableRow : public FTableRowBase
{
    uint32_t                                      MsgID;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       culture;                                                      // 0x0010(0x0010)
    FText                                         MsgText;                                                      // 0x0020(0x0018)
};


// ScriptStruct  MFBaseModule.DeviceConsoleConfig
// Struct Size::0x00B0
struct FDeviceConsoleConfig
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  MFBaseModule.DeviceQualityConfig
// Struct Size::0x0060
struct FDeviceQualityConfig
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MFBaseModule.MemorySettingConfig
// Struct Size::0x0100
struct FMemorySettingConfig
{
    char                                          pa_0000[0x0100]                                               // 0x0000(0x0100)
};


// ScriptStruct  GameletJsEnv.GameletPropertyMetaRoot
// Struct Size::0x0001
struct FGameletPropertyMetaRoot
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameletJsEnv.GameletArrayBuffer
// Struct Size::0x0018
struct FGameletArrayBuffer
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GameletJsEnv.GameletJsObject
// Struct Size::0x0060
struct FGameletJsObject
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MFClimateRuntime.MFClimateSharedNoiseGenerationSettings
// Struct Size::0x0064
struct FMFClimateSharedNoiseGenerationSettings
{
    FMFClimateNoiseGenerationParams               BaseNoiseGenerationParams;                                    // 0x0000(0x0014)
    FMFClimateNoiseGenerationParams               DetailNoiseGenerationParams;                                  // 0x0014(0x0014)
    FMFClimateNoiseGenerationParams               BaseNoise2DGenerationParams;                                  // 0x0028(0x0014)
    FMFClimateNoiseGenerationParams               DetailNoise2DGenerationParams;                                // 0x003C(0x0014)
    FMFClimateCurlCloudNoiseGenerationParams      CurlNoiseParams;                                              // 0x0050(0x0008)
    FMFClimateWeatherMapCloudNoiseGenerationParamsWeatherMapParams;                                             // 0x0058(0x000C)
};


// ScriptStruct  MFClimateRuntime.MFClimateWeatherMapCloudNoiseGenerationParams
// Struct Size::0x000C
struct FMFClimateWeatherMapCloudNoiseGenerationParams
{
    int32_t                                       CoverageWorleyCellNum;                                        // 0x0000(0x0004)
    int32_t                                       CoveragePerlinFreq;                                           // 0x0004(0x0004)
    int32_t                                       CloudTypePerlinFreq;                                          // 0x0008(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateCurlCloudNoiseGenerationParams
// Struct Size::0x0008
struct FMFClimateCurlCloudNoiseGenerationParams
{
    int32_t                                       CurlCells;                                                    // 0x0000(0x0004)
    float                                         CurlBrightness;                                               // 0x0004(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateNoiseGenerationParams
// Struct Size::0x0014
struct FMFClimateNoiseGenerationParams
{
    enum class EMFClimateNoiseType                NoiseType;                                                    // 0x0000(0x0004)
    int32_t                                       CellNoiseCells;                                               // 0x0004(0x0004)
    float                                         CellNoiseScale;                                               // 0x0008(0x0004)
    char                                          bCellNoiseUseSmoothMin;                                       // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         CellNoiseSmoothMinK;                                          // 0x0010(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimatePlatformNoiseGenerationSettings
// Struct Size::0x0038
struct FMFClimatePlatformNoiseGenerationSettings
{
    FIntVector                                    BaseNoiseTextureSize;                                         // 0x0000(0x000C)
    FIntVector                                    DetailNoiseTextureSize;                                       // 0x000C(0x000C)
    FIntPoint                                     BaseNoise2DTextureSize;                                       // 0x0018(0x0008)
    FIntPoint                                     DetailNoise2DTextureSize;                                     // 0x0020(0x0008)
    FIntPoint                                     WeatherMapNoiseTextureSize;                                   // 0x0028(0x0008)
    FIntPoint                                     CurlNoiseTextureSize;                                         // 0x0030(0x0008)
};


// ScriptStruct  MFClimateRuntime.MFClimateCloudTypeDescriptor
// Struct Size::0x0228
struct FMFClimateCloudTypeDescriptor
{
    float                                         TypeWeight;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRuntimeFloatCurve                            BaseNoiseCenter;                                              // 0x0008(0x0088)
    FRuntimeFloatCurve                            BaseNoiseVariation;                                           // 0x0090(0x0088)
    FRuntimeFloatCurve                            ExtinctionScale;                                              // 0x0118(0x0088)
    FRuntimeFloatCurve                            Erosion;                                                      // 0x01A0(0x0088)
};


// ScriptStruct  MFClimateRuntime.MFClimateFractalLightningGenerateParams
// Struct Size::0x0034
struct FMFClimateFractalLightningGenerateParams
{
    int32_t                                       RandomSeed;                                                   // 0x0000(0x0004)
    float                                         InitialBranchProb;                                            // 0x0004(0x0004)
    float                                         BranchProbAttenuation;                                        // 0x0008(0x0004)
    FVector                                       TargetOffset;                                                 // 0x000C(0x000C)
    float                                         MinSegmentLength;                                             // 0x0018(0x0004)
    int32_t                                       MaxFracTimes;                                                 // 0x001C(0x0004)
    float                                         WidthFactor;                                                  // 0x0020(0x0004)
    float                                         BranchShortenFactor;                                          // 0x0024(0x0004)
    FVector2D                                     MinMaxBranchLiftAngleDegrees;                                 // 0x0028(0x0008)
    float                                         MinChannelCreationDistance;                                   // 0x0030(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateRainParameterUpdateTick
// Struct Size::0x0040
struct FMFClimateRainParameterUpdateTick : public FTickFunction
{
    AMFClimateRain*                               Rain;                                                         // 0x0038(0x0008)
};


// ScriptStruct  MFClimateRuntime.MFClimateRainOcclusionTestQueueItem
// Struct Size::0x0018
struct FMFClimateRainOcclusionTestQueueItem
{
    UMFClimateMovableRainWetnessComponent*        Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  MFClimateRuntime.MFClimateCloudSettings
// Struct Size::0x008C
struct FMFClimateCloudSettings
{
    float                                         CloudBaseTilingVertical;                                      // 0x0000(0x0004)
    float                                         CloudBaseTilingHorizontal;                                    // 0x0004(0x0004)
    float                                         CloudDetailTiling;                                            // 0x0008(0x0004)
    float                                         CloudDetailStrength;                                          // 0x000C(0x0004)
    float                                         CloudCurlStrength;                                            // 0x0010(0x0004)
    float                                         CloudCurlTiling;                                              // 0x0014(0x0004)
    float                                         DetailWindMultiply;                                           // 0x0018(0x0004)
    float                                         CloudBottomHeight;                                            // 0x001C(0x0004)
    float                                         CloudThickness;                                               // 0x0020(0x0004)
    float                                         CloudDetailFadeStart;                                         // 0x0024(0x0004)
    float                                         CloudDetailFadeEnd;                                           // 0x0028(0x0004)
    float                                         HorizonAARange;                                               // 0x002C(0x0004)
    float                                         HorizonAAValue;                                               // 0x0030(0x0004)
    FLinearColor                                  CloudAlbedo;                                                  // 0x0034(0x0010)
    float                                         CloudExtinction;                                              // 0x0044(0x0004)
    float                                         CloudFirstLobeG;                                              // 0x0048(0x0004)
    float                                         CloudSecondLobeG;                                             // 0x004C(0x0004)
    float                                         MaxShadowRayLength;                                           // 0x0050(0x0004)
    float                                         ShadowAttenuation;                                            // 0x0054(0x0004)
    float                                         CloudAmbientOcclusionSky;                                     // 0x0058(0x0004)
    float                                         CloudAmbientOcclusionGround;                                  // 0x005C(0x0004)
    float                                         CloudOpacityScale;                                            // 0x0060(0x0004)
    FLinearColor                                  CloudEmissive;                                                // 0x0064(0x0010)
    FLinearColor                                  LightningTint;                                                // 0x0074(0x0010)
    float                                         EarthShadowSharpness;                                         // 0x0084(0x0004)
    float                                         InscatteringBrightness;                                       // 0x0088(0x0004)
};


// ScriptStruct  MFClimateRuntime.MFClimateWeatherLayer
// Struct Size::0x0058
struct FMFClimateWeatherLayer
{
    float                                         BlendWeight;                                                  // 0x0000(0x0004)
    float                                         EffectiveBlendWeight;                                         // 0x0004(0x0004)
    ULevelSequence*                               TimeOfDaySequence;                                            // 0x0008(0x0008)
    enum class EWeatherLayerEvaluationMode        EvaluationMode;                                               // 0x0010(0x0004)
    bool                                          bIgnorePresetSystem;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0043]                                               // 0x0015(0x0043)
};


// ScriptStruct  MFClimateRuntime.MFClimateMPCItem
// Struct Size::0x0010
struct FMFClimateMPCItem
{
    UMaterialParameterCollection*                 PublicMPC;                                                    // 0x0000(0x0008)
    UMaterialParameterCollectionInstance*         MPCI;                                                         // 0x0008(0x0008)
};


// ScriptStruct  MFEnvironment.MFEnvBlockInitInfo
// Struct Size::0x0014
struct FMFEnvBlockInitInfo
{
    FMFEnvBurnBlockBound                          BurnBounds;                                                   // 0x0000(0x0010)
    char                                          DamageScale;                                                  // 0x0010(0x0001)
    char                                          TimeScale;                                                    // 0x0011(0x0001)
    bool                                          bNoEffects;                                                   // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
};


// ScriptStruct  MFEnvironment.MFEnvPhysFoliageMeshRow
// Struct Size::0x0050
struct FMFEnvPhysFoliageMeshRow : public FTableRowBase
{
    TSoftObjectPtr<UStaticMesh>                   StaticMeshSoftPtr;                                            // 0x0008(0x0028)
    FSoftObjectPath                               MeshObjectPath;                                               // 0x0030(0x0018)
    enum class EMFPhysFoliageMeshTypeEnum         MeshType;                                                     // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  MFEnvironment.MFEnvTrailPlayerInfo
// Struct Size::0x0038
struct FMFEnvTrailPlayerInfo
{
    FVector                                       PlayerPosition;                                               // 0x0000(0x000C)
    FVector                                       PlayerPositionLeft;                                           // 0x000C(0x000C)
    FVector                                       PlayerPositionRight;                                          // 0x0018(0x000C)
    FVector2D                                     Direction;                                                    // 0x0024(0x0008)
    float                                         Velocity;                                                     // 0x002C(0x0004)
    float                                         Radius;                                                       // 0x0030(0x0004)
    enum class EMFEnvTrailShapeEnum               Shape;                                                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  MFEnvironment.MFEnvWindSwayInstInfo
// Struct Size::0x0030
struct FMFEnvWindSwayInstInfo
{
    UHierarchicalInstancedStaticMeshComponent*    InstPtr;                                                      // 0x0000(0x0008)
    int32_t                                       InstId;                                                       // 0x0008(0x0004)
    FVector2D                                     Pos;                                                          // 0x000C(0x0008)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FVector4                                      Params;                                                       // 0x0020(0x0010)
};


// ScriptStruct  MFEnvironment.MFEnvWindDirectForceInfo
// Struct Size::0x0014
struct FMFEnvWindDirectForceInfo
{
    FVector2D                                     ForceVector;                                                  // 0x0000(0x0008)
    FVector2D                                     ForceOrigin;                                                  // 0x0008(0x0008)
    float                                         ForceMomentum;                                                // 0x0010(0x0004)
};


// ScriptStruct  MFEnvironment.MFEnvWindExplodeForceInfo
// Struct Size::0x0010
struct FMFEnvWindExplodeForceInfo
{
    FVector2D                                     ForceOrigin;                                                  // 0x0000(0x0008)
    float                                         ForceMomentum;                                                // 0x0008(0x0004)
    float                                         LastTime;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.HoverVehicleCheckLocationRepData
// Struct Size::0x0018
struct FHoverVehicleCheckLocationRepData
{
    FVector                                       ActorLocation;                                                // 0x0000(0x000C)
    FRotator                                      ActorRotation;                                                // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.HoverVehicleMovementRepData
// Struct Size::0x000C
struct FHoverVehicleMovementRepData
{
    float                                         ForwardVal;                                                   // 0x0000(0x0004)
    float                                         RightVal;                                                     // 0x0004(0x0004)
    bool                                          IsSpeedUp;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  SGFramework.RepInfo
// Struct Size::0x0030
struct FRepInfo
{
    TArray<FVectorAndDist>                        GridNodes;                                                    // 0x0000(0x0010)
    FIntVector                                    MinCoord;                                                     // 0x0010(0x000C)
    FIntVector                                    MaxCoord;                                                     // 0x001C(0x000C)
    float                                         InMaxDistanceColor;                                           // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.VectorAndDist
// Struct Size::0x0010
struct FVectorAndDist
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
    int32_t                                       ManhattanDistance;                                            // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GridNode
// Struct Size::0x001C
struct FGridNode
{
    char                                          pa_0000[0x001C]                                               // 0x0000(0x001C)
};


// ScriptStruct  SGFramework.CooperateQTECharacterInfo
// Struct Size::0x0010
struct FCooperateQTECharacterInfo
{
    ACharacter*                                   Character;                                                    // 0x0000(0x0008)
    UAnimMontage*                                 TargetAnimMontage;                                            // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.EnvInfo
// Struct Size::0x0018
struct FEnvInfo
{
    TArray<AActor*>                               ActorsNearBy;                                                 // 0x0000(0x0010)
    float                                         DetectRadius;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.AircraftRotorSetup
// Struct Size::0x003C
struct FAircraftRotorSetup
{
    float                                         ForceMax;                                                     // 0x0000(0x0004)
    FRotator                                      RotationMax;                                                  // 0x0004(0x000C)
    FVector                                       CurrentForce;                                                 // 0x0010(0x000C)
    FVector                                       CurrentTorqueForce;                                           // 0x001C(0x000C)
    FName                                         BoneName;                                                     // 0x0028(0x0008)
    FVector                                       AdditionalOffset;                                             // 0x0030(0x000C)
};


// ScriptStruct  SGFramework.AbilitySlot
// Struct Size::0x000C
struct FAbilitySlot
{
    FGameplayTag                                  InstancedAbilityKey;                                          // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    InstancedAbilityHandle;                                       // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.GameEffectExecutor
// Struct Size::0x0378
struct FGameEffectExecutor
{
    FActiveGameplayEffectHandle                   Handle;                                                       // 0x0000(0x0008)
    bool                                          bAdd;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FActiveGameplayEffect                         ActiveEffect;                                                 // 0x0010(0x0368)
};


// ScriptStruct  SGFramework.GameplayAbilityRepEquipAnimMontage
// Struct Size::0x0020
struct FGameplayAbilityRepEquipAnimMontage
{
    bool                                          bHasPlay;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    ASGInventory*                                 EquipInv;                                                     // 0x0008(0x0008)
    UAnimMontage*                                 InventoryMontage;                                             // 0x0010(0x0008)
    UAnimMontage*                                 CharacterMontage;                                             // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.GameplayAbilityRepStopAdvancedAnimMontage
// Struct Size::0x0010
struct FGameplayAbilityRepStopAdvancedAnimMontage
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    FName                                         StopMontagesByGroupName;                                      // 0x0004(0x0008)
    float                                         StopMontagesBlendOutTime;                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GameplayAbilityRepAdvancedAnimMontage
// Struct Size::0x0078
struct FGameplayAbilityRepAdvancedAnimMontage
{
    bool                                          bHasPlay;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimMontage*                                 CharacterMontage;                                             // 0x0008(0x0008)
    USkeletalMeshComponentBudgeted*               MeshComponent;                                                // 0x0010(0x0008)
    USkeletalMesh*                                InventoryMesh;                                                // 0x0018(0x0008)
    UAnimMontage*                                 InventoryMontage;                                             // 0x0020(0x0008)
    UAnimInstance*                                InventoryAnimInstanceClass;                                   // 0x0028(0x0008)
    FName                                         InventoryAttachSocket;                                        // 0x0030(0x0008)
    float                                         Timestamp;                                                    // 0x0038(0x0004)
    FName                                         StopMontagesByGroupName;                                      // 0x003C(0x0008)
    float                                         StopMontagesBlendOutTime;                                     // 0x0044(0x0004)
    bool                                          b3PShouldKeepLastFrame;                                       // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FName>                                 SectionLoopCountKeys;                                         // 0x0050(0x0010)
    TArray<int32_t>                               SectionLoopCountValues;                                       // 0x0060(0x0010)
    bool                                          CanTriggerSoundWithGrass;                                     // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  SGFramework.SGGameplayAbilityActorInfo
// Struct Size::0x0048
struct FSGGameplayAbilityActorInfo : public FGameplayAbilityActorInfo
{
};


// ScriptStruct  SGFramework.SGGameplayEffectContext
// Struct Size::0x0088
struct FSGGameplayEffectContext : public FGameplayEffectContext
{
    FSGGEDataReference                            SGGEDataRef;                                                  // 0x0070(0x0018)
};


// ScriptStruct  SGFramework.SGGEDataReference
// Struct Size::0x0018
struct FSGGEDataReference
{
    UDataTable*                                   DataOwner;                                                    // 0x0000(0x0008)
    uint32_t                                      GE;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.SGAbilityTaskFireTickFunction
// Struct Size::0x0040
struct FSGAbilityTaskFireTickFunction : public FTickFunction
{
    USGAbilityTask*                               Target;                                                       // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.SGAbilityTaskPrepareToFireTickFunction
// Struct Size::0x0040
struct FSGAbilityTaskPrepareToFireTickFunction : public FTickFunction
{
    USGAbilityTask*                               Target;                                                       // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.HeroAbilityConfig
// Struct Size::0x0020
struct FHeroAbilityConfig
{
    FString                                       HeroAbilityName;                                              // 0x0000(0x0010)
    TArray<UGameplayAbility*>                     AbilityModuleClassList;                                       // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SGInventoryChildConfigsTableRow
// Struct Size::0x0020
struct FSGInventoryChildConfigsTableRow : public FTableRowBase
{
    float                                         Percent;                                                      // 0x0008(0x0004)
    enum class ESGInventoryChildConfigOperation   ConfigType;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FSGInventoryChildConfig>               ChildConfigs;                                                 // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SGInventoryChildConfig
// Struct Size::0x0030
struct FSGInventoryChildConfig
{
    TSoftClassPtr<UObject>                        InventoryClass;                                               // 0x0000(0x0028)
    float                                         Percent;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SoundInfoInfo
// Struct Size::0x0010
struct FSoundInfoInfo
{
    UAkAudioEvent*                                AkEvent;                                                      // 0x0000(0x0008)
    bool                                          bLoadAtBeginning;                                             // 0x0008(0x0001)
    bool                                          bUnLoadWhenEnd;                                               // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  SGFramework.SGAdapterAnimInstanceProxy
// Struct Size::0x0870
struct FSGAdapterAnimInstanceProxy : public FAnimInstanceProxy
{
    USGAdapterAnimInstance*                       AnimInstance;                                                 // 0x0860(0x0008)
    float                                         BipOnAlpha;                                                   // 0x0868(0x0004)
    char                                          pa_086C[0x0004]                                               // 0x086C(0x0004)
};


// ScriptStruct  SGFramework.AIRankData
// Struct Size::0x000C
struct FAIRankData
{
    int32_t                                       ranking;                                                      // 0x0000(0x0004)
    int32_t                                       pranking;                                                     // 0x0004(0x0004)
    int32_t                                       ranked;                                                       // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.AIDebugInfoDetail
// Struct Size::0x0168
struct FAIDebugInfoDetail
{
    TWeakObjectPtr<ASGAICharacter>                AICharacterPtr;                                               // 0x0000(0x0008)
    bool                                          bAllBlackboardKeysConcerned;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TreeActiveInstanceIndex;                                      // 0x000C(0x0004)
    int32_t                                       TaskExecutionIndex;                                           // 0x0010(0x0004)
    float                                         LastBlackboardChangeTime;                                     // 0x0014(0x0004)
    float                                         LastDistanceChangeTime;                                       // 0x0018(0x0004)
    float                                         LastTickTime;                                                 // 0x001C(0x0004)
    float                                         DistanceToPlayerSq;                                           // 0x0020(0x0004)
    float                                         AngleToPlayer;                                                // 0x0024(0x0004)
    bool                                          bDisplayable;                                                 // 0x0028(0x0001)
    bool                                          bSelected;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FString                                       AIName;                                                       // 0x0030(0x0010)
    int64_t                                       AIID;                                                         // 0x0040(0x0008)
    int64_t                                       PathGroupID;                                                  // 0x0048(0x0008)
    int64_t                                       EquipPoolID;                                                  // 0x0050(0x0008)
    int64_t                                       CampID;                                                       // 0x0058(0x0008)
    enum class EFactionType                       FactionType;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         HpTotal;                                                      // 0x0064(0x0004)
    float                                         HpHead;                                                       // 0x0068(0x0004)
    float                                         HpChest;                                                      // 0x006C(0x0004)
    float                                         HpStomach;                                                    // 0x0070(0x0004)
    float                                         HpLeftArm;                                                    // 0x0074(0x0004)
    float                                         HpRightArm;                                                   // 0x0078(0x0004)
    float                                         HpLeftLeg;                                                    // 0x007C(0x0004)
    float                                         HpRightLeg;                                                   // 0x0080(0x0004)
    float                                         ElapsedAimingTime;                                            // 0x0084(0x0004)
    float                                         RequiredAimingTime;                                           // 0x0088(0x0004)
    int32_t                                       AimStatus;                                                    // 0x008C(0x0004)
    FColor                                        TextColor;                                                    // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       BehaviorTreeName;                                             // 0x0098(0x0010)
    FString                                       PreviousTaskNames;                                            // 0x00A8(0x0010)
    FString                                       ActiveTaskNames;                                              // 0x00B8(0x0010)
    TArray<FName>                                 BlackboardKeys;                                               // 0x00C8(0x0010)
    TArray<FString>                               BlackboardValues;                                             // 0x00D8(0x0010)
    FString                                       ShootPartName;                                                // 0x00E8(0x0010)
    float                                         HitRatePredestined;                                           // 0x00F8(0x0004)
    float                                         HitRateNormal;                                                // 0x00FC(0x0004)
    float                                         HitRateAverage;                                               // 0x0100(0x0004)
    float                                         NotHitRatePresist;                                            // 0x0104(0x0004)
    bool                                          bInHitInterval;                                               // 0x0108(0x0001)
    char                                          pa_0109[0x0003]                                               // 0x0109(0x0003)
    int32_t                                       HitIntervalCount;                                             // 0x010C(0x0004)
    float                                         FirstTimeSeenScore;                                           // 0x0110(0x0004)
    float                                         FirstTimeSeenTotalUse;                                        // 0x0114(0x0004)
    bool                                          bInBombRange;                                                 // 0x0118(0x0001)
    char                                          pa_0119[0x0003]                                               // 0x0119(0x0003)
    int32_t                                       DelayFrames;                                                  // 0x011C(0x0004)
    FString                                       SpawnPointCheckResult;                                        // 0x0120(0x0010)
    bool                                          bIsCasual;                                                    // 0x0130(0x0001)
    char                                          pa_0131[0x0007]                                               // 0x0131(0x0007)
    UBehaviorTreeComponent*                       CachedBehaviorTreeComponent;                                  // 0x0138(0x0008)
    FString                                       SpawnPointName;                                               // 0x0140(0x0010)
    FString                                       SpawnVolumeName;                                              // 0x0150(0x0010)
    int32_t                                       SpawnSquad;                                                   // 0x0160(0x0004)
    char                                          pa_0164[0x0004]                                               // 0x0164(0x0004)
};


// ScriptStruct  SGFramework.SGAIDebugInfoTextColor
// Struct Size::0x0018
struct FSGAIDebugInfoTextColor
{
    FString                                       BTNameSuffix;                                                 // 0x0000(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.AIDebugDrawStyleTableRow
// Struct Size::0x0020
struct FAIDebugDrawStyleTableRow : public FTableRowBase
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    float                                         Thickness;                                                    // 0x0018(0x0004)
    float                                         Radius;                                                       // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.LockAIData
// Struct Size::0x0020
struct FLockAIData
{
    TArray<FName>                                 VoiceKeys;                                                    // 0x0000(0x0010)
    TArray<FString>                               VoiceValues;                                                  // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.AIPressure
// Struct Size::0x0001
struct FAIPressure
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SGFramework.AIWeaponDefaultBulletClassInfo
// Struct Size::0x0038
struct FAIWeaponDefaultBulletClassInfo
{
    TSoftClassPtr<UObject>                        DefaultBulletClassPtr;                                        // 0x0000(0x0028)
    AActor*                                       DefaultBulletClass;                                           // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.AIIDMappedInfo
// Struct Size::0x0020
struct FAIIDMappedInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  SGFramework.AIIDMappedData
// Struct Size::0x0018
struct FAIIDMappedData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.LoadedAIFactionProfilesOfFactionClass
// Struct Size::0x0050
struct FLoadedAIFactionProfilesOfFactionClass
{
    TMap<UObject*,FLoadedAIFactionProfiles>       LoadedProfilesMap;                                            // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.LoadedAIFactionProfiles
// Struct Size::0x0020
struct FLoadedAIFactionProfiles
{
    TArray<UNPCAIPropertyProfile*>                LoadedProfiles;                                               // 0x0000(0x0010)
    TArray<UNPCAIPropertyProfile*>                LoadedSwitchProfiles;                                         // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SpawnedAIInfo
// Struct Size::0x0038
struct FSpawnedAIInfo
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  SGFramework.PendingSpawnInfo
// Struct Size::0x0150
struct FPendingSpawnInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FSpawnRecord                                  SpawnRecord;                                                  // 0x0010(0x0080)
    bool                                          bIsPMCAI;                                                     // 0x0090(0x0001)
    char                                          pa_0091[0x000B]                                               // 0x0091(0x000B)
    int32_t                                       DelayFrame;                                                   // 0x009C(0x0004)
    char                                          pa_00A0[0x0018]                                               // 0x00A0(0x0018)
    ACharacter*                                   AICharacterClass;                                             // 0x00B8(0x0008)
    AAIController*                                AIControllerClass;                                            // 0x00C0(0x0008)
    UBehaviorTree*                                ArchetypeTemplate;                                            // 0x00C8(0x0008)
    UNPCAIFactionComponent*                       FactionClass;                                                 // 0x00D0(0x0008)
    UNPCAIRoleComponent*                          RoleClass;                                                    // 0x00D8(0x0008)
    char                                          pa_00E0[0x0018]                                               // 0x00E0(0x0018)
    TArray<ASGInventory*>                         AvatarInventories;                                            // 0x00F8(0x0010)
    TArray<ASGInventory*>                         EventAvatarInventories;                                       // 0x0108(0x0010)
    TArray<int64_t>                               AvatarIDs;                                                    // 0x0118(0x0010)
    TArray<int64_t>                               EventAvatarIDs;                                               // 0x0128(0x0010)
    UDataTable*                                   SoundData;                                                    // 0x0138(0x0008)
    ASGInventory*                                 DeathBoxClass;                                                // 0x0140(0x0008)
    char                                          pa_0148[0x0008]                                               // 0x0148(0x0008)
};


// ScriptStruct  SGFramework.SpawnRecord
// Struct Size::0x0080
struct FSpawnRecord
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SpawnPoint;                                                   // 0x0008(0x0008)
    FVector                                       SpawnPosition;                                                // 0x0010(0x000C)
    int32_t                                       SpawnSquadID;                                                 // 0x001C(0x0004)
    FString                                       SpawnArea;                                                    // 0x0020(0x0010)
    int64_t                                       AI;                                                           // 0x0030(0x0008)
    char                                          pa_0038[0x0004]                                               // 0x0038(0x0004)
    enum class ESpawnReason                       SpawnReason;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x000B]                                               // 0x003D(0x000B)
    FString                                       TriggerString;                                                // 0x0048(0x0010)
    char                                          pa_0058[0x001C]                                               // 0x0058(0x001C)
    float                                         ReadyTime;                                                    // 0x0074(0x0004)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  SGFramework.SGNPCSpawnGroupWeight
// Struct Size::0x0014
struct FSGNPCSpawnGroupWeight
{
    FName                                         GroupID;                                                      // 0x0000(0x0008)
    float                                         SpawnWeight;                                                  // 0x0008(0x0004)
    float                                         Probability;                                                  // 0x000C(0x0004)
    int32_t                                       TakenCount;                                                   // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.BattleTestRoomInfo
// Struct Size::0x0010
struct FBattleTestRoomInfo
{
    TArray<FString>                               AreaNames;                                                    // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.BattleTestTeamInfo
// Struct Size::0x0010
struct FBattleTestTeamInfo
{
    TArray<FBattleTestAreaInfo>                   TeamInfo;                                                     // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.BattleTestAreaInfo
// Struct Size::0x0018
struct FBattleTestAreaInfo
{
    int32_t                                       MaxAINum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAIPoolInfo>                           AIPool;                                                       // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.AIPoolInfo
// Struct Size::0x0018
struct FAIPoolInfo
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       Equip;                                                        // 0x0010(0x0004)
    int32_t                                       Weight;                                                       // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.AnimationSpringTickFunction
// Struct Size::0x0060
struct FAnimationSpringTickFunction : public FTickFunction
{
    float                                         FixedTickInterval;                                            // 0x0038(0x0004)
    char                                          pa_003C[0x0024]                                               // 0x003C(0x0024)
};


// ScriptStruct  SGFramework.AnimationSpring
// Struct Size::0x0120
struct FAnimationSpring
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRuntimeFloatCurve                            StiffnessScaleTimeCurve;                                      // 0x0008(0x0088)
    float                                         DistSqToTimeFactor;                                           // 0x0090(0x0004)
    float                                         Damping;                                                      // 0x0094(0x0004)
    float                                         RotationStability;                                            // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FVector4                                      MinError;                                                     // 0x00A0(0x0010)
    FVector4                                      MaxError;                                                     // 0x00B0(0x0010)
    char                                          pa_00C0[0x0060]                                               // 0x00C0(0x0060)
};


// ScriptStruct  SGFramework.ForceModifier
// Struct Size::0x00B0
struct FForceModifier
{
    FVector4                                      AdsScale;                                                     // 0x0000(0x0010)
    FVector4                                      NonAdsScale;                                                  // 0x0010(0x0010)
    bool                                          bAdsScale;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x000F]                                               // 0x0021(0x000F)
    FVector4                                      StandPoseScale;                                               // 0x0030(0x0010)
    FVector4                                      CrouchPoseScale;                                              // 0x0040(0x0010)
    FVector4                                      PronePoseScale;                                               // 0x0050(0x0010)
    bool                                          bPoseScale;                                                   // 0x0060(0x0001)
    char                                          pa_0061[0x000F]                                               // 0x0061(0x000F)
    FVector4                                      SilentWalkScale;                                              // 0x0070(0x0010)
    FVector4                                      RunScale;                                                     // 0x0080(0x0010)
    FVector4                                      SprintScale;                                                  // 0x0090(0x0010)
    bool                                          bMovementScale;                                               // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  SGFramework.SGMontagePlayConfig
// Struct Size::0x0010
struct FSGMontagePlayConfig
{
    enum class EAdapterAnimationType              AdapterAnimType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ForceBlendInTime;                                             // 0x0004(0x0004)
    float                                         ForceBlendOutTime;                                            // 0x0008(0x0004)
    char                                          bDisableBlendIn;                                              // 0x000C(0x0001)
    char                                          bDisableBlendOut;                                             // 0x000C(0x0001)
    char                                          bLockAnimationSet;                                            // 0x000C(0x0001)
    char                                          bStopAllMontage;                                              // 0x000C(0x0001)
    char                                          bSyncMontage;                                                 // 0x000C(0x0001)
    char                                          bCanTriggerWithGrass;                                         // 0x000C(0x0001)
    char                                          bReplayWhileIsPlaying;                                        // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  SGFramework.SGEnterLoopLeaveStateMachine
// Struct Size::0x0024
struct FSGEnterLoopLeaveStateMachine
{
    bool                                          bCanReverse;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         EnterSeqLength;                                               // 0x0004(0x0004)
    float                                         LeaveSeqLength;                                               // 0x0008(0x0004)
    float                                         EnterSeqTime;                                                 // 0x000C(0x0004)
    float                                         LeaveSeqTime;                                                 // 0x0010(0x0004)
    bool                                          bFullyEntered;                                                // 0x0014(0x0001)
    bool                                          bFullyLeaved;                                                 // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         NormalizedEnterSeqTime;                                       // 0x0018(0x0004)
    float                                         NormalizedLeaveSeqTime;                                       // 0x001C(0x0004)
    char                                          pa_0020[0x0001]                                               // 0x0020(0x0001)
    enum class ESGEnterLoopLeaveState             State;                                                        // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  SGFramework.SGOneWayBlend
// Struct Size::0x0038
struct FSGOneWayBlend
{
    FAlphaBlend                                   Blend;                                                        // 0x0000(0x0030)
    bool                                          bCompleted;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Value;                                                        // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.SGFloatCurvePlayer
// Struct Size::0x0028
struct FSGFloatCurvePlayer
{
    UCurveFloat*                                  Curve;                                                        // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    bool                                          bLoop;                                                        // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FFloatRange                                   PlayRange;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.SGSequenceGroupPlayer
// Struct Size::0x0008
struct FSGSequenceGroupPlayer
{
    UCurveFloat*                                  Curve;                                                        // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.SGPreviewRandomIdleAnimSet
// Struct Size::0x0030
struct FSGPreviewRandomIdleAnimSet
{
    FSGPreviewRandomIdleAnimGroup                 BigAnimGroup;                                                 // 0x0000(0x0018)
    FSGPreviewRandomIdleAnimGroup                 SmallAnimGroup;                                               // 0x0018(0x0018)
};


// ScriptStruct  SGFramework.SGPreviewRandomIdleAnimGroup
// Struct Size::0x0018
struct FSGPreviewRandomIdleAnimGroup
{
    TArray<FSGPreviewRandomIdleAnimConfig>        AnimGroup;                                                    // 0x0000(0x0010)
    int32_t                                       GroupWeight;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGPreviewRandomIdleAnimConfig
// Struct Size::0x0010
struct FSGPreviewRandomIdleAnimConfig
{
    UAnimSequence*                                Anim;                                                         // 0x0000(0x0008)
    int32_t                                       Weight;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.CharacterSpeedWarpingBaseSpeed
// Struct Size::0x0020
struct FCharacterSpeedWarpingBaseSpeed
{
    float                                         F;                                                            // 0x0000(0x0004)
    float                                         L;                                                            // 0x0004(0x0004)
    float                                         R;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         LF;                                                           // 0x0010(0x0004)
    float                                         RF;                                                           // 0x0014(0x0004)
    float                                         LB;                                                           // 0x0018(0x0004)
    float                                         RB;                                                           // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGJSCharacterAnimationSet
// Struct Size::0x0008
struct FSGJSCharacterAnimationSet
{
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.SGPreviewCharacterAnimationSet
// Struct Size::0x00C8
struct FSGPreviewCharacterAnimationSet
{
    TMap<FString,UAnimMontage*>                   CustomAnimations;                                             // 0x0000(0x0050)
    UAnimSequence*                                IdleLoop;                                                     // 0x0050(0x0008)
    UAnimSequence*                                ReadyIn;                                                      // 0x0058(0x0008)
    UAnimSequence*                                ReadyLoop;                                                    // 0x0060(0x0008)
    UAnimSequence*                                ReadyOut;                                                     // 0x0068(0x0008)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x0070(0x0008)
    TMap<FString,FSGRandomMontageList>            RandomMontageLists;                                           // 0x0078(0x0050)
};


// ScriptStruct  SGFramework.SGRandomMontageList
// Struct Size::0x0010
struct FSGRandomMontageList
{
    TArray<UAnimMontage*>                         MontageList;                                                  // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGCustomizeAnimationGroup
// Struct Size::0x0018
struct FSGCustomizeAnimationGroup
{
    UAnimMontage*                                 CharacterAnimation;                                           // 0x0000(0x0008)
    UAnimMontage*                                 WeaponAnimation;                                              // 0x0008(0x0008)
    UAnimMontage*                                 FacialAnimation;                                              // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.DeliverCargosAnimInfo
// Struct Size::0x00C8
struct FDeliverCargosAnimInfo
{
    TSoftObjectPtr<UAnimMontage>                  CharacterMontage;                                             // 0x0000(0x0028)
    TSoftObjectPtr<UAnimMontage>                  InventoryMontage;                                             // 0x0028(0x0028)
    TSoftObjectPtr<USkeletalMesh>                 InventoryMesh;                                                // 0x0050(0x0028)
    TSoftClassPtr<UObject>                        AnimInstanceClass;                                            // 0x0078(0x0028)
    FName                                         InventoryAttachSocket;                                        // 0x00A0(0x0008)
    float                                         InPlayRate;                                                   // 0x00A8(0x0004)
    FName                                         StartSectionName;                                             // 0x00AC(0x0008)
    float                                         StartTimeSeconds;                                             // 0x00B4(0x0004)
    float                                         BlendInTime;                                                  // 0x00B8(0x0004)
    float                                         BlendOutTime;                                                 // 0x00BC(0x0004)
    bool                                          bEnableAutoBlendOut;                                          // 0x00C0(0x0001)
    bool                                          bStopAllMontages;                                             // 0x00C1(0x0001)
    char                                          pa_00C2[0x0006]                                               // 0x00C2(0x0006)
};


// ScriptStruct  SGFramework.SGWeaponChangedInfo
// Struct Size::0x00B0
struct FSGWeaponChangedInfo
{
    TWeakObjectPtr<ASGInventory>                  DestWeapon;                                                   // 0x0000(0x0008)
    TWeakObjectPtr<ASGInventory>                  LastWeapon;                                                   // 0x0008(0x0008)
    FSGMontagePlayParams                          CharacterMontageParams;                                       // 0x0010(0x0048)
    FSGMontagePlayParams                          WeaponMontageParams;                                          // 0x0058(0x0048)
    float                                         BlendOutTime;                                                 // 0x00A0(0x0004)
    float                                         BlendInTime;                                                  // 0x00A4(0x0004)
    bool                                          PlayMontageFirst;                                             // 0x00A8(0x0001)
    bool                                          bDisableBlendIn;                                              // 0x00A9(0x0001)
    bool                                          bDisableBlendOut;                                             // 0x00AA(0x0001)
    bool                                          bUseTacticalTrans;                                            // 0x00AB(0x0001)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  SGFramework.SGMontagePlayParams
// Struct Size::0x0048
struct FSGMontagePlayParams
{
    TSoftObjectPtr<UAnimMontage>                  MontagePath;                                                  // 0x0000(0x0028)
    TWeakObjectPtr<UAnimMontage>                  Montage;                                                      // 0x0028(0x0008)
    UAnimMontage*                                 MontageHardPtr;                                               // 0x0030(0x0008)
    FName                                         SectionName;                                                  // 0x0038(0x0008)
    float                                         PlayRate;                                                     // 0x0040(0x0004)
    float                                         StartTime;                                                    // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.SGDynamicAnimationSet
// Struct Size::0x0030
struct FSGDynamicAnimationSet
{
    enum class ESGWeaponForegripType              WeaponForegripType;                                           // 0x0000(0x0001)
    bool                                          bHasForegrip;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    UAnimSequence*                                IdleSeq;                                                      // 0x0008(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x0010(0x0008)
    UBlendSpace1D*                                WeaponSwayBS;                                                 // 0x0018(0x0008)
    UBlendSpace1D*                                WeaponSwayBS;                                                 // 0x0020(0x0008)
    UAnimSequence*                                KickingDoorHandSeq;                                           // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.SGAdapterAnimSet
// Struct Size::0x0050
struct FSGAdapterAnimSet
{
    TMap<enum class EAdapterAnimationType,TSoftObjectPtr<UAnimSequenceBase>>AdapterAnimMontages;                // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SGUAMWeaponAnimationSet
// Struct Size::0x0AC0
struct FSGUAMWeaponAnimationSet
{
    TArray<TSoftObjectPtr<UAnimMontage>>          MeleeFireSeq;                                                 // 0x0000(0x0010)
    FSGMontargeWithPlayRate                       WeaponFireResource;                                           // 0x0010(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponFireResource;                                      // 0x0040(0x0030)
    FSGMontargeWithPlayRate                       WeaponAutoBurstFireResource;                                  // 0x0070(0x0030)
    FSGMontargeWithPlayRate                       WeaponDownFireResource;                                       // 0x00A0(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponDownFireResource;                                  // 0x00D0(0x0030)
    FSGMontargeWithPlayRate                       WeaponFastFireResource;                                       // 0x0100(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponFastFireResource;                                  // 0x0130(0x0030)
    FSGMontargeWithPlayRate                       WeaponEmptyFireResource;                                      // 0x0160(0x0030)
    FSGMontargeWithPlayRate                       WeaponReloadResource;                                         // 0x0190(0x0030)
    FSGMontargeWithPlayRate                       WeaponTacticalReloadResource;                                 // 0x01C0(0x0030)
    FSGMontargeWithPlayRate                       WeaponUnloadMagResource;                                      // 0x01F0(0x0030)
    FSGMontargeWithPlayRate                       WeaponLoadMagResource;                                        // 0x0220(0x0030)
    FSGMontargeWithPlayRate                       MagazineCheckResource;                                        // 0x0250(0x0030)
    FSGMontargeWithPlayRate                       ReloadLoopEndResource;                                        // 0x0280(0x0030)
    FSGMontargeWithPlayRate                       ReloadLoopResource;                                           // 0x02B0(0x0030)
    FSGMontargeWithPlayRate                       ReloadLoopBeginResource;                                      // 0x02E0(0x0030)
    FSGMontargeWithPlayRate                       WeaponPullBoltResource;                                       // 0x0310(0x0030)
    FSGMontargeWithPlayRate                       WeaponPullBoltADSResource;                                    // 0x0340(0x0030)
    FSGMontargeWithPlayRate                       WeaponEndEquipResource;                                       // 0x0370(0x0030)
    FSGMontargeWithPlayRate                       WeaponEquipResource;                                          // 0x03A0(0x0030)
    FSGMontargeWithPlayRate                       WeaponOpenBoltBeforeReloadResource;                           // 0x03D0(0x0030)
    FSGMontargeWithPlayRate                       WeaponCloseBoltAfterReloadResource;                           // 0x0400(0x0030)
    FSGMontargeWithPlayRate                       WeaponBeltOutResource;                                        // 0x0430(0x0030)
    FSGMontargeWithPlayRate                       WeaponBeltInResource;                                         // 0x0460(0x0030)
    FSGMontargeWithPlayRate                       WeaponEquipWithChargeResource;                                // 0x0490(0x0030)
    FSGMontargeWithPlayRate                       WeaponHoldOpenResource;                                       // 0x04C0(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponHoldOpenResource;                                  // 0x04F0(0x0030)
    FSGMontargeWithPlayRate                       WeaponReleaseOpenResource;                                    // 0x0520(0x0030)
    FSGMontargeWithPlayRate                       WeaponCheckFireModeResource;                                  // 0x0550(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponReleaseOpenResource;                               // 0x0580(0x0030)
    FSGMontargeWithPlayRate                       WeaponSwitchFireMode0Resource;                                // 0x05B0(0x0030)
    FSGMontargeWithPlayRate                       WeaponSwitchFireMode1Resource;                                // 0x05E0(0x0030)
    FSGMontargeWithPlayRate                       WeaponSwitchFireMode2Resource;                                // 0x0610(0x0030)
    FSGMontargeWithPlayRate                       WeaponSetBipodOnResource;                                     // 0x0640(0x0030)
    FSGMontargeWithPlayRate                       WeaponSetBipodOffResource;                                    // 0x0670(0x0030)
    FSGMontargeWithPlayRate                       AddNewMagzineResource;                                        // 0x06A0(0x0030)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>AddNewMagzineSeqMap;                                         // 0x06D0(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>CheckMagzineSeqMap;                                          // 0x0720(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>ReloadSeqMap;                                                // 0x0770(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>TacticalReloadSeqMap;                                        // 0x07C0(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>FastReloadSeqMap;                                            // 0x0810(0x0050)
    FSGMontargeWithPlayRate                       WeaponBeginBagOpenResource;                                   // 0x0860(0x0030)
    FSGMontargeWithPlayRate                       WeaponBagOpenResource;                                        // 0x0890(0x0030)
    FSGMontargeWithPlayRate                       WeaponEndBagOpenResource;                                     // 0x08C0(0x0030)
    FSGMontargeWithPlayRate                       WeaponEndKeepPreFireResource;                                 // 0x08F0(0x0030)
    FSGMontargeWithPlayRate                       ProneWeaponEndKeepPreFireResource;                            // 0x0920(0x0030)
    FSGMontargeWithPlayRate                       WeaponSetupAdapterResource;                                   // 0x0950(0x0030)
    FSGMontargeWithPlayRate                       ViewWeaponResource;                                           // 0x0980(0x0030)
    TMap<FString,TSoftObjectPtr<UAnimMontage>>    CustomAnimations;                                             // 0x09B0(0x0050)
    FSGMontargeWithPlayRate                       WeaponFoldScopeResource;                                      // 0x0A00(0x0030)
    FSGMontargeWithPlayRate                       WeaponFoldScopeADSResource;                                   // 0x0A30(0x0030)
    FSGMontargeWithPlayRate                       WeaponUnfoldScopeResource;                                    // 0x0A60(0x0030)
    FSGMontargeWithPlayRate                       WeaponUnfoldScopeADSResource;                                 // 0x0A90(0x0030)
};


// ScriptStruct  SGFramework.SGMontargeWithPlayRate
// Struct Size::0x0030
struct FSGMontargeWithPlayRate
{
    TSoftObjectPtr<UAnimMontage>                  AnimSeq;                                                      // 0x0000(0x0028)
    float                                         PlayRate;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SGMontargeWithPlayRateChangeClip
// Struct Size::0x0038
struct FSGMontargeWithPlayRateChangeClip
{
    TSoftObjectPtr<UAnimMontage>                  AnimSeq;                                                      // 0x0000(0x0028)
    float                                         PlayRate;                                                     // 0x0028(0x0004)
    float                                         BlendInWhenPlayStandAlone;                                    // 0x002C(0x0004)
    float                                         BlendOutWhenPlayStandAlone;                                   // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.SGUAMHandAnimationSet
// Struct Size::0x0E20
struct FSGUAMHandAnimationSet
{
    UAnimSequence*                                IdleSeqBasePose;                                              // 0x0000(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x0008(0x0008)
    UAnimSequence*                                IdleSeq3P;                                                    // 0x0010(0x0008)
    UAnimSequence*                                IdleSeq3P;                                                    // 0x0018(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x0020(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x0028(0x0008)
    UAnimSequence*                                FireAdditive;                                                 // 0x0030(0x0008)
    UAnimSequence*                                FireAdditive;                                                 // 0x0038(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x0040(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x0048(0x0008)
    UAnimSequence*                                ADS;                                                          // 0x0050(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0058(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x0060(0x0008)
    UAnimSequence*                                GripPoseAdditive;                                             // 0x0068(0x0008)
    UAnimSequence*                                GripPoseAdditive;                                             // 0x0070(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x0078(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x0080(0x0008)
    UBlendSpace1D*                                Grip3PIdleBS;                                                 // 0x0088(0x0008)
    UBlendSpace1D*                                GripProne3PIdleBS;                                            // 0x0090(0x0008)
    UBlendSpace1D*                                RearGripIdleBS;                                               // 0x0098(0x0008)
    UBlendSpace1D*                                RearGripIdleBS;                                               // 0x00A0(0x0008)
    UBlendSpace1D*                                RearGripIdleBS;                                               // 0x00A8(0x0008)
    UBlendSpace1D*                                CasualRearGripIdleBS;                                         // 0x00B0(0x0008)
    UAnimSequence*                                CasualIdleSeq;                                                // 0x00B8(0x0008)
    UAnimSequence*                                TacticalPistolStandBasePose;                                  // 0x00C0(0x0008)
    UAnimSequence*                                TacticalPistolStandBasePose;                                  // 0x00C8(0x0008)
    UAnimSequence*                                TacticalPistolCrouchBasePose;                                 // 0x00D0(0x0008)
    UAnimSequence*                                TacticalPistolCrouchBasePose;                                 // 0x00D8(0x0008)
    UAnimSequence*                                TacticalRightHandGripPose;                                    // 0x00E0(0x0008)
    UAnimSequence*                                CasualIdleSeq;                                                // 0x00E8(0x0008)
    bool                                          bEnableInGameCasual;                                          // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
    UBlendSpace1D*                                CasualGripIdleBS;                                             // 0x00F8(0x0008)
    UBlendSpace1D*                                CasualGripIdleBS;                                             // 0x0100(0x0008)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x0108(0x0008)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x0110(0x0008)
    UBlendSpace1D*                                CasualRearGripIdleBS;                                         // 0x0118(0x0008)
    UBlendSpace1D*                                LFingerAdaptiveBS;                                            // 0x0120(0x0008)
    UBlendSpace1D*                                LFingerAdaptiveBS;                                            // 0x0128(0x0008)
    UBlendSpace1D*                                LFingerAdaptiveBS;                                            // 0x0130(0x0008)
    UBlendSpace1D*                                WeaponShakeBS;                                                // 0x0138(0x0008)
    TSoftObjectPtr<UAnimMontage>                  FireSeq;                                                      // 0x0140(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneFireSeq;                                                 // 0x0168(0x0028)
    TSoftObjectPtr<UAnimMontage>                  AutoBurstFireSeq;                                             // 0x0190(0x0028)
    TArray<TSoftObjectPtr<UAnimMontage>>          MeleeFireSeq;                                                 // 0x01B8(0x0010)
    TSoftObjectPtr<UAnimMontage>                  MeleeFireProneSeq;                                            // 0x01C8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  LoopFireSeq;                                                  // 0x01F0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ZoomFireSeq;                                                  // 0x0218(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EmptyFireSeq;                                                 // 0x0240(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ThrowDownSeq;                                                 // 0x0268(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneThrowDownSeq;                                            // 0x0290(0x0028)
    TSoftObjectPtr<UAnimMontage>                  FireWithoutChargeSeq;                                         // 0x02B8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  FastThrowFireSeq;                                             // 0x02E0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneFastThrowFireSeq;                                        // 0x0308(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ReloadSeq;                                                    // 0x0330(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CheckMagazineSeq;                                             // 0x0358(0x0028)
    TSoftObjectPtr<UAnimMontage>                  UnloadMagSeq;                                                 // 0x0380(0x0028)
    TSoftObjectPtr<UAnimMontage>                  LoadMagSeq;                                                   // 0x03A8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  OpenBoltBeforeReloadingSeq;                                   // 0x03D0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CloseBoltAfterReloadingSeq;                                   // 0x03F8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  BeltOutSeq;                                                   // 0x0420(0x0028)
    TSoftObjectPtr<UAnimMontage>                  BeltInSeq;                                                    // 0x0448(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ReloadLoopSeq;                                                // 0x0470(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ReloadLoopBeginSeq;                                           // 0x0498(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ReloadLoopEndSeq;                                             // 0x04C0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  PullBoltSeq;                                                  // 0x04E8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  PullBoltADSSeq;                                               // 0x0510(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndEquipSeq;                                                  // 0x0538(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndEquipSeq;                                                  // 0x0560(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndEquipSeq;                                                  // 0x0588(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EquipSeq;                                                     // 0x05B0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EquipSeq;                                                     // 0x05D8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EquipSeq;                                                     // 0x0600(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EquipWithChargeSeq;                                           // 0x0628(0x0028)
    TSoftObjectPtr<UAnimMontage>                  HoldOpenSeq;                                                  // 0x0650(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneHoldOpenSeq;                                             // 0x0678(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ReleaseHoldSeq;                                               // 0x06A0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CheckFireModeSeq;                                             // 0x06C8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneReleaseHoldSeq;                                          // 0x06F0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SwitchFireMode0Seq;                                           // 0x0718(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SwitchFireMode1Seq;                                           // 0x0740(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SwitchFireMode2Seq;                                           // 0x0768(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SetBipodOnSeq;                                                // 0x0790(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SetBipodOffSeq;                                               // 0x07B8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  AddNewMagzineSeq;                                             // 0x07E0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  MeleeFireCompleteSeq;                                         // 0x0808(0x0028)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>AddNewMagzineSeqMap;                                         // 0x0830(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>CheckMagzineSeqMap;                                          // 0x0880(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>ReloadSeqMap;                                                // 0x08D0(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>TacticalReloadSeqMap;                                        // 0x0920(0x0050)
    TMap<FString,FSGMontargeWithPlayRateChangeClip>FastReloadSeqMap;                                            // 0x0970(0x0050)
    TSoftObjectPtr<UAnimMontage>                  BeginBagOpenSeq;                                              // 0x09C0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndBagOpenSeq;                                                // 0x09E8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  BeginBagOpenSeq;                                              // 0x0A10(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndBagOpenSeq;                                                // 0x0A38(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndKeepPreFireMontage;                                        // 0x0A60(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ProneEndKeepPreFireMontage;                                   // 0x0A88(0x0028)
    TSoftObjectPtr<UAnimMontage>                  SetupAdapterMontage;                                          // 0x0AB0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  BeginLowReadyeMontage;                                        // 0x0AD8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  EndLowReadyeMontage;                                          // 0x0B00(0x0028)
    TSoftObjectPtr<UAnimMontage>                  LootSeq;                                                      // 0x0B28(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ViewWeaponMontage;                                            // 0x0B50(0x0028)
    TSoftObjectPtr<UAnimMontage>                  ViewWeaponGripMontage;                                        // 0x0B78(0x0028)
    TSoftObjectPtr<UAnimMontage>                  FoldScopeSeq;                                                 // 0x0BA0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  FoldScopeADSSeq;                                              // 0x0BC8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  UnfoldScopeSeq;                                               // 0x0BF0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  UnfoldScopeADSSeq;                                            // 0x0C18(0x0028)
    TMap<FString,TSoftObjectPtr<UAnimSequence>>   DTCustomSequences;                                            // 0x0C40(0x0050)
    TMap<FString,TSoftObjectPtr<UAnimSequence>>   DTCustomSequences;                                            // 0x0C90(0x0050)
    TMap<FString,TSoftObjectPtr<UAnimSequence>>   DTFacialAnimaSequences;                                       // 0x0CE0(0x0050)
    TMap<FString,TSoftObjectPtr<UAnimSequence>>   DTFacialAnimaSequences;                                       // 0x0D30(0x0050)
    TSoftObjectPtr<UAnimMontage>                  PushDoor;                                                     // 0x0D80(0x0028)
    TSoftObjectPtr<UAnimMontage>                  PullDoor;                                                     // 0x0DA8(0x0028)
    TSoftObjectPtr<UAnimMontage>                  KeyDoor;                                                      // 0x0DD0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CardDoor;                                                     // 0x0DF8(0x0028)
};


// ScriptStruct  SGFramework.SGPoseCacheInfo
// Struct Size::0x0038
struct FSGPoseCacheInfo
{
    FPoseSnapshot                                 PoseCache;                                                    // 0x0000(0x0038)
};


// ScriptStruct  Engine.PoseSnapshot
// Struct Size::0x0038
struct FPoseSnapshot
{
    TArray<FTransform>                            LocalTransforms;                                              // 0x0000(0x0010)
    TArray<FName>                                 BoneNames;                                                    // 0x0010(0x0010)
    FName                                         SkeletalMeshName;                                             // 0x0020(0x0008)
    FName                                         SnapshotName;                                                 // 0x0028(0x0008)
    bool                                          bIsValid;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SGFramework.SGRagdollInfo
// Struct Size::0x0040
struct FSGRagdollInfo
{
    bool                                          bIsRagdoll;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPoseSnapshot                                 RagdollPose;                                                  // 0x0008(0x0038)
};


// ScriptStruct  SGFramework.SGTakeHitInfo
// Struct Size::0x0020
struct FSGTakeHitInfo
{
    UBlendSpace*                                  TakeHitBlendSpace;                                            // 0x0000(0x0008)
    float                                         TakeHitAnimationPlayRate;                                     // 0x0008(0x0004)
    bool                                          bBlendShapeSwitch;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FVector2D                                     TakeHitDir;                                                   // 0x0010(0x0008)
    float                                         TakeHitAlpha;                                                 // 0x0018(0x0004)
    float                                         StartPos;                                                     // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGAnimWeaponInfo
// Struct Size::0x0098
struct FSGAnimWeaponInfo
{
    float                                         FinalRecoilAlpha;                                             // 0x0000(0x0004)
    FRotator                                      MeleeRecoilRotation;                                          // 0x0004(0x000C)
    float                                         WeaponStabilityAlpha;                                         // 0x0010(0x0004)
    float                                         AimingScale;                                                  // 0x0014(0x0004)
    enum class ESGWeaponForegripType              ForegripType;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         WeaponSwayAlpha;                                              // 0x001C(0x0004)
    float                                         WeaponSwayAlpha;                                              // 0x0020(0x0004)
    float                                         WeaponSwayDelay;                                              // 0x0024(0x0004)
    float                                         WeaponSwayDelay;                                              // 0x0028(0x0004)
    FVector                                       WeaponWithStockHoldingOffset;                                 // 0x002C(0x000C)
    FVector                                       WeaponGunTranslation;                                         // 0x0038(0x000C)
    FRotator                                      GunRotator;                                                   // 0x0044(0x000C)
    FVector                                       WeaponTraceLocationOffset;                                    // 0x0050(0x000C)
    FRotator                                      WeaponTraceRotationOffset;                                    // 0x005C(0x000C)
    FVector                                       WeaponTraceLocationOffset;                                    // 0x0068(0x000C)
    FRotator                                      WeaponTraceRotationOffset;                                    // 0x0074(0x000C)
    FRotator                                      WeaponTraceRUpperArmRot;                                      // 0x0080(0x000C)
    FRotator                                      WeaponTraceRForeArm1Rot;                                      // 0x008C(0x000C)
};


// ScriptStruct  SGFramework.SGAnimTakeCoverInfo
// Struct Size::0x0018
struct FSGAnimTakeCoverInfo
{
    bool                                          bIsTakingCover;                                               // 0x0000(0x0001)
    bool                                          bLastTimeCrouchState;                                         // 0x0001(0x0001)
    enum class ETakeCoverLeanAnimType             CharacterLeanType;                                            // 0x0002(0x0001)
    enum class ESGCharacterCoverState             CharacterCoverState;                                          // 0x0003(0x0001)
    float                                         TranslationAnimProcess;                                       // 0x0004(0x0004)
    enum class ESGCharacterCoverAimingState       CoverAimingState;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         CoverHeightValue;                                             // 0x000C(0x0004)
    float                                         ToCoverPercent;                                               // 0x0010(0x0004)
    enum class ESGCoverType                       CoverType;                                                    // 0x0014(0x0001)
    enum class ESGCoverHeight                     CoverHeightType;                                              // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  SGFramework.SGWeaponAccesoryAnimationSet
// Struct Size::0x0008
struct FSGWeaponAccesoryAnimationSet
{
    UAnimMontage*                                 EndFireSeq;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.SGUAMInteractionAnimationSet
// Struct Size::0x0280
struct FSGUAMInteractionAnimationSet
{
    TSoftObjectPtr<UAnimMontage>                  PickUp;                                                       // 0x0000(0x0028)
    TSoftObjectPtr<UAnimMontage>                  PushDoor;                                                     // 0x0028(0x0028)
    TSoftObjectPtr<UAnimMontage>                  PullDoor;                                                     // 0x0050(0x0028)
    TSoftObjectPtr<UAnimMontage>                  KeyDoor;                                                      // 0x0078(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CardDoor;                                                     // 0x00A0(0x0028)
    TSoftObjectPtr<UAnimMontage>                  Rescue;                                                       // 0x00C8(0x0028)
    TMap<FString,TSoftObjectPtr<UAnimMontage>>    RescueSeqMap;                                                 // 0x00F0(0x0050)
    TSoftObjectPtr<USkeletalMesh>                 RescueInventoryMesh;                                          // 0x0140(0x0028)
    TMap<FString,TSoftObjectPtr<USkeletalMesh>>   RescueInventoryMeshMap;                                       // 0x0168(0x0050)
    TSoftObjectPtr<UAnimMontage>                  RescueInventory;                                              // 0x01B8(0x0028)
    TMap<FString,TSoftObjectPtr<UAnimMontage>>    RescueInventorySeqMap;                                        // 0x01E0(0x0050)
    TMap<FString,TSoftObjectPtr<UAnimMontage>>    InteractionSeqMap;                                            // 0x0230(0x0050)
};


// ScriptStruct  SGFramework.SGUAMJumpAnimationSet
// Struct Size::0x0090
struct FSGUAMJumpAnimationSet
{
    UAnimSequence*                                JumpStart;                                                    // 0x0000(0x0008)
    UAnimSequence*                                JumpLoop;                                                     // 0x0008(0x0008)
    UBlendSpace*                                  JumpEnd;                                                      // 0x0010(0x0008)
    UAnimSequence*                                JumpHighEnd;                                                  // 0x0018(0x0008)
    UAnimSequence*                                JumpLand;                                                     // 0x0020(0x0008)
    UBlendSpace*                                  RunJumpLand;                                                  // 0x0028(0x0008)
    UAnimSequence*                                SprintJumpLand;                                               // 0x0030(0x0008)
    UBlendSpace*                                  RunJumpStart;                                                 // 0x0038(0x0008)
    UBlendSpace*                                  RunJumpLoop;                                                  // 0x0040(0x0008)
    UBlendSpace*                                  RunJumpEnd;                                                   // 0x0048(0x0008)
    UBlendSpace*                                  RunJumpHighEnd;                                               // 0x0050(0x0008)
    UAnimSequence*                                PreJump;                                                      // 0x0058(0x0008)
    UAnimSequence*                                SprintJumpStart;                                              // 0x0060(0x0008)
    UAnimSequence*                                SprintJumpLoop;                                               // 0x0068(0x0008)
    UAnimSequence*                                SprintJumpEnd;                                                // 0x0070(0x0008)
    UBlendSpace*                                  SprintToRunJumpEnd;                                           // 0x0078(0x0008)
    UAnimSequence*                                RunToIdleJumpEnd;                                             // 0x0080(0x0008)
    UAnimSequence*                                SprintToIdleJumpEnd;                                          // 0x0088(0x0008)
};


// ScriptStruct  SGFramework.SGUAMTransitionAnimationSet
// Struct Size::0x00B0
struct FSGUAMTransitionAnimationSet
{
    UBlendSpace*                                  TransitionAnimationSet;                                       // 0x0000(0x0008)
    UBlendSpace*                                  FractureTransitionAnimationSet;                               // 0x0008(0x0008)
    UAnimSequence*                                RunToSprint;                                                  // 0x0010(0x0008)
    UAnimSequence*                                SprintToRun;                                                  // 0x0018(0x0008)
    UAnimSequence*                                RunToSprintRight;                                             // 0x0020(0x0008)
    UAnimSequence*                                SprintToRunRight;                                             // 0x0028(0x0008)
    UAnimSequence*                                StandToCrouch;                                                // 0x0030(0x0008)
    UAnimSequence*                                StandToProne;                                                 // 0x0038(0x0008)
    UAnimSequence*                                SprintToProne;                                                // 0x0040(0x0008)
    UAnimSequence*                                CrouchToStand;                                                // 0x0048(0x0008)
    UAnimSequence*                                CrouchToProne;                                                // 0x0050(0x0008)
    UAnimSequence*                                ProneToStand;                                                 // 0x0058(0x0008)
    UAnimSequence*                                ProneToCrouch;                                                // 0x0060(0x0008)
    UAnimSequence*                                StandToDBNO;                                                  // 0x0068(0x0008)
    UAnimSequence*                                SprintToDBNO;                                                 // 0x0070(0x0008)
    UAnimSequence*                                CrouchToDBNO;                                                 // 0x0078(0x0008)
    UAnimSequence*                                ProneToDBNO;                                                  // 0x0080(0x0008)
    UAnimSequence*                                DBNOToCrouch;                                                 // 0x0088(0x0008)
    UAnimSequence*                                DBNOToProne;                                                  // 0x0090(0x0008)
    UBlendSpace*                                  StandToSprint;                                                // 0x0098(0x0008)
    UBlendSpace*                                  SprintToStand;                                                // 0x00A0(0x0008)
    UBlendSpace*                                  SprintToCrouch;                                               // 0x00A8(0x0008)
};


// ScriptStruct  SGFramework.SGUAMLocomotionAnimationSet
// Struct Size::0x0138
struct FSGUAMLocomotionAnimationSet
{
    UAnimSequence*                                Idle;                                                         // 0x0000(0x0008)
    UAnimSequence*                                IdleLeanLeft;                                                 // 0x0008(0x0008)
    UAnimSequence*                                IdleLeanRight;                                                // 0x0010(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0018(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0020(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0028(0x0008)
    UAimOffsetBlendSpace*                         AimOffset;                                                    // 0x0030(0x0008)
    UAimOffsetBlendSpace*                         AimOffsetLeanLeft;                                            // 0x0038(0x0008)
    UAimOffsetBlendSpace*                         AimOffsetLeanRight;                                           // 0x0040(0x0008)
    UBlendSpace*                                  Locomotion;                                                   // 0x0048(0x0008)
    UBlendSpace*                                  Locomotion;                                                   // 0x0050(0x0008)
    UBlendSpace*                                  Locomotion;                                                   // 0x0058(0x0008)
    UBlendSpace*                                  Locomotion;                                                   // 0x0060(0x0008)
    UAnimSequence*                                Locomotion;                                                   // 0x0068(0x0008)
    UBlendSpace*                                  WalkLocomotion;                                               // 0x0070(0x0008)
    UBlendSpace*                                  RunLocomotion;                                                // 0x0078(0x0008)
    UBlendSpace*                                  SprintLocomotion;                                             // 0x0080(0x0008)
    UBlendSpace*                                  SprintLocomotion;                                             // 0x0088(0x0008)
    UBlendSpace*                                  Locomotion;                                                   // 0x0090(0x0008)
    UBlendSpace*                                  MovementAccelerationLeanBS;                                   // 0x0098(0x0008)
    UBlendSpace*                                  SprintAccelerationLeanBS;                                     // 0x00A0(0x0008)
    UBlendSpace*                                  SprintSharpTurnLeanBS;                                        // 0x00A8(0x0008)
    UAnimSequence*                                TurnLeft90;                                                   // 0x00B0(0x0008)
    UAnimSequence*                                TurnRight90;                                                  // 0x00B8(0x0008)
    UAnimSequence*                                TurnLeft180;                                                  // 0x00C0(0x0008)
    UAnimSequence*                                TurnRight180;                                                 // 0x00C8(0x0008)
    UBlendSpace*                                  MovingStartBS;                                                // 0x00D0(0x0008)
    UBlendSpace*                                  MovingStopBS;                                                 // 0x00D8(0x0008)
    UBlendSpace*                                  MovingStopBS;                                                 // 0x00E0(0x0008)
    UBlendSpace*                                  MovingStopBS;                                                 // 0x00E8(0x0008)
    UBlendSpace*                                  MovingPivotBS;                                                // 0x00F0(0x0008)
    FSGPivotCardinalsAnimation                    PivotCardinals;                                               // 0x00F8(0x0020)
    FSGPivotCardinalsAnimation                    SilentWalkPivotCardinals;                                     // 0x0118(0x0020)
};


// ScriptStruct  SGFramework.SGPivotCardinalsAnimation
// Struct Size::0x0020
struct FSGPivotCardinalsAnimation
{
    UAnimSequence*                                Forward;                                                      // 0x0000(0x0008)
    UAnimSequence*                                Backward;                                                     // 0x0008(0x0008)
    UAnimSequence*                                Left;                                                         // 0x0010(0x0008)
    UAnimSequence*                                Right;                                                        // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGUAMDeathAnimationSet
// Struct Size::0x0340
struct FSGUAMDeathAnimationSet
{
    FSGUAMPerBodyPartDeathAnimationSet            StandDeathSet;                                                // 0x0000(0x00D0)
    FSGUAMPerBodyPartDeathAnimationSet            CrouchDeathSet;                                               // 0x00D0(0x00D0)
    FSGUAMPerBodyPartDeathAnimationSet            ProneDeathSet;                                                // 0x01A0(0x00D0)
    FSGUAMPerBodyPartDeathAnimationSet            DBNODeathSet;                                                 // 0x0270(0x00D0)
};


// ScriptStruct  SGFramework.SGUAMPerBodyPartDeathAnimationSet
// Struct Size::0x00D0
struct FSGUAMPerBodyPartDeathAnimationSet
{
    TArray<UAnimMontage*>                         DefaultAnimtionPool;                                          // 0x0000(0x0010)
    FSGUAMPerDirectionDeathAnimationSet           HitHeadDeathset;                                              // 0x0010(0x0040)
    FSGUAMPerDirectionDeathAnimationSet           HitBodyDeathset;                                              // 0x0050(0x0040)
    FSGUAMPerDirectionDeathAnimationSet           HitLegDeathset;                                               // 0x0090(0x0040)
};


// ScriptStruct  SGFramework.SGUAMPerDirectionDeathAnimationSet
// Struct Size::0x0040
struct FSGUAMPerDirectionDeathAnimationSet
{
    TArray<UAnimMontage*>                         FrontHitPool;                                                 // 0x0000(0x0010)
    TArray<UAnimMontage*>                         BackHitPool;                                                  // 0x0010(0x0010)
    TArray<UAnimMontage*>                         LeftHitPool;                                                  // 0x0020(0x0010)
    TArray<UAnimMontage*>                         RightHitPool;                                                 // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.SGUAMTakeHitAnimationSet
// Struct Size::0x0060
struct FSGUAMTakeHitAnimationSet
{
    TArray<UBlendSpace*>                          TakeHitHead;                                                  // 0x0000(0x0010)
    TArray<UBlendSpace*>                          TakeHitChest;                                                 // 0x0010(0x0010)
    TArray<UBlendSpace*>                          TakeHitLeftLeg;                                               // 0x0020(0x0010)
    TArray<UBlendSpace*>                          TakeHitRightLeg;                                              // 0x0030(0x0010)
    TArray<UBlendSpace*>                          TakeHitRightArm;                                              // 0x0040(0x0010)
    TArray<UBlendSpace*>                          TakeHitLeftArm;                                               // 0x0050(0x0010)
};


// ScriptStruct  SGFramework.SGTacticalPistolAnimationSet
// Struct Size::0x0038
struct FSGTacticalPistolAnimationSet
{
    UAnimMontage*                                 IdleToTacticalAnimation;                                      // 0x0000(0x0008)
    UAnimMontage*                                 TacticalToMainWeaponAnimation;                                // 0x0008(0x0008)
    UAnimMontage*                                 TacticalToPistolMontage;                                      // 0x0010(0x0008)
    UAnimMontage*                                 TacticalToPistolMontage;                                      // 0x0018(0x0008)
    UAnimMontage*                                 TacticalPutDownMontage;                                       // 0x0020(0x0008)
    UAnimSequence*                                TacticalRightHandNegAdditiveSequence;                         // 0x0028(0x0008)
    UAnimSequence*                                DefaultTacticalPisotlGrip;                                    // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.SGIdleBreathAnimationSet
// Struct Size::0x0010
struct FSGIdleBreathAnimationSet
{
    bool                                          UseIdleBreathAnimation;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimSequence*                                IdleBreathAnimation;                                          // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SG1PRelaxAnimationSet
// Struct Size::0x0060
struct FSG1PRelaxAnimationSet
{
    TMap<enum class E1PRelaxType,FSG1PRelaxAnimationSetByGrip>RelaxAnimationMapByType;                          // 0x0000(0x0050)
    TArray<UAnimSequence*>                        DefaultRelaxAnimation;                                        // 0x0050(0x0010)
};


// ScriptStruct  SGFramework.SG1PRelaxAnimationSetByGrip
// Struct Size::0x0060
struct FSG1PRelaxAnimationSetByGrip
{
    TMap<enum class ESGWeaponForegripType,FSGRelaxAnimationArray>GripRelaxAnimationMap;                         // 0x0000(0x0050)
    TArray<UAnimSequence*>                        DefaultRelaxAnimation;                                        // 0x0050(0x0010)
};


// ScriptStruct  SGFramework.SGRelaxAnimationArray
// Struct Size::0x0010
struct FSGRelaxAnimationArray
{
    TArray<UAnimSequence*>                        RelaxAnimation;                                               // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGVaultAnimationSet
// Struct Size::0x0020
struct FSGVaultAnimationSet
{
    TArray<UAnimMontage*>                         VaultAnimationList;                                           // 0x0000(0x0010)
    TArray<UAnimMontage*>                         ClimbAnimationList;                                           // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SGHeadwearAnimationSet
// Struct Size::0x00A0
struct FSGHeadwearAnimationSet
{
    TMap<enum class ESGMainHeadwearType,TSoftObjectPtr<UAnimMontage>>PutUpHeadwearMap;                          // 0x0000(0x0050)
    TMap<enum class ESGMainHeadwearType,TSoftObjectPtr<UAnimMontage>>PutDownHeadwearMap;                        // 0x0050(0x0050)
};


// ScriptStruct  SGFramework.SGAnimationBoneModifierInfo
// Struct Size::0x0028
struct FSGAnimationBoneModifierInfo
{
    FVector                                       BoneTranslation;                                              // 0x0000(0x000C)
    FRotator                                      BoneRotation;                                                 // 0x000C(0x000C)
    TArray<float>                                 ShoeBoneScaleList;                                            // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGAnimationBreathInfo
// Struct Size::0x0018
struct FSGAnimationBreathInfo
{
    FVector                                       BreathTranslation;                                            // 0x0000(0x000C)
    FRotator                                      BreathRotation;                                               // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.SGTurnInPlaceAnimSequenceConfig
// Struct Size::0x0030
struct FSGTurnInPlaceAnimSequenceConfig
{
    UAnimSequence*                                TurnLeft90;                                                   // 0x0000(0x0008)
    UAnimSequence*                                TurnRight90;                                                  // 0x0008(0x0008)
    UAnimSequence*                                TurnLeft90;                                                   // 0x0010(0x0008)
    UAnimSequence*                                TurnRight90;                                                  // 0x0018(0x0008)
    UAnimSequence*                                TurnLeft90;                                                   // 0x0020(0x0008)
    UAnimSequence*                                TurnRight90;                                                  // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.InvBulletInfo
// Struct Size::0x0018
struct FInvBulletInfo
{
    TArray<FBulletMeshInfo>                       BulletMeshInfos;                                              // 0x0000(0x0010)
    int32_t                                       WaitInsertBulletNum;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.BulletMeshInfo
// Struct Size::0x0038
struct FBulletMeshInfo
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    UStaticMeshComponent*                         Mesh;                                                         // 0x0008(0x0008)
    UStaticMeshComponent*                         BeltMesh;                                                     // 0x0010(0x0008)
    UStaticMesh*                                  CacheMesh;                                                    // 0x0018(0x0008)
    FSoftObjectPath                               BulletClass;                                                  // 0x0020(0x0018)
};


// ScriptStruct  SGFramework.MeshSkinMaterialInfo
// Struct Size::0x0018
struct FMeshSkinMaterialInfo
{
    ASGInventory*                                 OwnerInventory;                                               // 0x0000(0x0008)
    TArray<TSoftObjectPtr<UMaterialInterface>>    SkinMaterialList;                                             // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.SGAvatarRuntimeInstanced
// Struct Size::0x0028
struct FSGAvatarRuntimeInstanced
{
    int64_t                                       AvatarID;                                                     // 0x0000(0x0008)
    int32_t                                       bPutOnOrTakeOff;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       ParentAvatarID;                                               // 0x0010(0x0008)
    bool                                          bIsIgnoredAvatar3P;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    USGInventoryEquipMeshComponent*               EquipMeshComponent;                                           // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.SGBackpackAnimInstanceProxy
// Struct Size::0x08A0
struct FSGBackpackAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x0030]                                               // 0x0860(0x0030)
    USGBackpackAnimInstance*                      AnimInstance;                                                 // 0x0890(0x0008)
    char                                          pa_0898[0x0008]                                               // 0x0898(0x0008)
};


// ScriptStruct  SGFramework.BreakInfo
// Struct Size::0x0014
struct FBreakInfo
{
    bool                                          bBroken;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Dir;                                                          // 0x0004(0x000C)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.TempBurningInfo
// Struct Size::0x0008
struct FTempBurningInfo
{
    bool                                          bIsBurning;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.TempBurningMaterialParamInfo
// Struct Size::0x0014
struct FTempBurningMaterialParamInfo
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    float                                         CurrValue;                                                    // 0x000C(0x0004)
    float                                         ValuePerSec;                                                  // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.BurningInfo
// Struct Size::0x0008
struct FBurningInfo
{
    bool                                          bIsBurning;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.BurningMaterialParamInfo
// Struct Size::0x0014
struct FBurningMaterialParamInfo
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    float                                         CurrValue;                                                    // 0x000C(0x0004)
    float                                         ValuePerSec;                                                  // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.SGCameraMaterialSpec
// Struct Size::0x0010
struct FSGCameraMaterialSpec
{
    USGCameraMaterial*                            CameraMaterial;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGCameraMaterialAfterHeatTickFunction
// Struct Size::0x0040
struct FSGCameraMaterialAfterHeatTickFunction : public FTickFunction
{
    USGCameraMaterial*                            Target;                                                       // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.BloodRandomConfig
// Struct Size::0x0040
struct FBloodRandomConfig
{
    int32_t                                       NumMin;                                                       // 0x0000(0x0004)
    int32_t                                       NumMax;                                                       // 0x0004(0x0004)
    int32_t                                       DurationMin;                                                  // 0x0008(0x0004)
    int32_t                                       DurationMax;                                                  // 0x000C(0x0004)
    float                                         PosX;                                                         // 0x0010(0x0004)
    float                                         PosX;                                                         // 0x0014(0x0004)
    float                                         PosX;                                                         // 0x0018(0x0004)
    float                                         PosX;                                                         // 0x001C(0x0004)
    float                                         PosY;                                                         // 0x0020(0x0004)
    float                                         PosY;                                                         // 0x0024(0x0004)
    float                                         PosY;                                                         // 0x0028(0x0004)
    float                                         PosY;                                                         // 0x002C(0x0004)
    float                                         ScaleMin;                                                     // 0x0030(0x0004)
    float                                         ScaleMax;                                                     // 0x0034(0x0004)
    float                                         RotatingAngleMin;                                             // 0x0038(0x0004)
    float                                         RotatingAngleMax;                                             // 0x003C(0x0004)
};


// ScriptStruct  SGFramework.BloodDropParams
// Struct Size::0x0020
struct FBloodDropParams
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  SGFramework.SGCameraMaterialCrossHairTickFunction
// Struct Size::0x0040
struct FSGCameraMaterialCrossHairTickFunction : public FTickFunction
{
    USGCameraMaterial*                            Target;                                                       // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.RandomDyingCurveSet
// Struct Size::0x0018
struct FRandomDyingCurveSet
{
    UCurveFloat*                                  CloseEyeCurve;                                                // 0x0000(0x0008)
    UCurveFloat*                                  DesaturationCurve;                                            // 0x0008(0x0008)
    UCurveFloat*                                  LightIntensityCurve;                                          // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.FlashDistanceCurveSet
// Struct Size::0x0028
struct FFlashDistanceCurveSet
{
    float                                         MinDistance;                                                  // 0x0000(0x0004)
    float                                         MaxDistance;                                                  // 0x0004(0x0004)
    UCurveFloat*                                  OpacityCurveSet;                                              // 0x0008(0x0008)
    UCurveFloat*                                  InnerFlareStrengthCurveSet;                                   // 0x0010(0x0008)
    UCurveFloat*                                  EdgeFlareStrengthCurveSet;                                    // 0x0018(0x0008)
    UCurveFloat*                                  FlashWhiteCurveSet;                                           // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.DistortRandomConfig
// Struct Size::0x0020
struct FDistortRandomConfig
{
    int32_t                                       NumMin;                                                       // 0x0000(0x0004)
    int32_t                                       NumMax;                                                       // 0x0004(0x0004)
    int32_t                                       DurationMin;                                                  // 0x0008(0x0004)
    int32_t                                       DurationMax;                                                  // 0x000C(0x0004)
    float                                         PosX;                                                         // 0x0010(0x0004)
    float                                         PosX;                                                         // 0x0014(0x0004)
    float                                         PosY;                                                         // 0x0018(0x0004)
    float                                         PosY;                                                         // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.HeatDistortParams
// Struct Size::0x0014
struct FHeatDistortParams
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  SGFramework.SGCameraMaterialLensDistortTickFunction
// Struct Size::0x0040
struct FSGCameraMaterialLensDistortTickFunction : public FTickFunction
{
    USGCameraMaterial*                            Target;                                                       // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.GrenadeBlurData
// Struct Size::0x0018
struct FGrenadeBlurData
{
    float                                         DurationGrenade;                                              // 0x0000(0x0004)
    float                                         GrenadeExplosionThreshold;                                    // 0x0004(0x0004)
    UCurveFloat*                                  BlurStrengthGrenadeCurve;                                     // 0x0008(0x0008)
    UCurveFloat*                                  GrenadeDistanceCurve;                                         // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.InterpSpeedOverride
// Struct Size::0x0018
struct FInterpSpeedOverride
{
    USGCameraMode*                                PrevCameraModeClass;                                          // 0x0000(0x0008)
    float                                         OriginLocInterpSpeed;                                         // 0x0008(0x0004)
    FVector                                       PerAxisOriginLocInterpSpeed;                                  // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.ViewOffsetData
// Struct Size::0x0024
struct FViewOffsetData
{
    FVector                                       OffsetHigh;                                                   // 0x0000(0x000C)
    FVector                                       OffsetMid;                                                    // 0x000C(0x000C)
    FVector                                       OffsetLow;                                                    // 0x0018(0x000C)
};


// ScriptStruct  SGFramework.OscillatorInfo
// Struct Size::0x0078
struct FOscillatorInfo
{
    enum class ECameraShakeAxis                   ShakeAxis;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSineOscillator                               OscillatorSetting;                                            // 0x0008(0x0040)
    char                                          pa_0048[0x0030]                                               // 0x0048(0x0030)
};


// ScriptStruct  SGFramework.SineOscillator
// Struct Size::0x0040
struct FSineOscillator
{
    float                                         DurationTime;                                                 // 0x0000(0x0004)
    float                                         SingleFireDurationTime;                                       // 0x0004(0x0004)
    bool                                          bSkipBlendIn;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         BlendInTime;                                                  // 0x000C(0x0004)
    float                                         BlendOutTime;                                                 // 0x0010(0x0004)
    float                                         AmplitudeAdditiveTime;                                        // 0x0014(0x0004)
    float                                         Period;                                                       // 0x0018(0x0004)
    bool                                          bUseRandomInitialOffset;                                      // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Delay;                                                        // 0x0020(0x0004)
    float                                         BaseAmplitude;                                                // 0x0024(0x0004)
    float                                         PerAmplitudeAdd;                                              // 0x0028(0x0004)
    float                                         MinAmplitudeScale;                                            // 0x002C(0x0004)
    float                                         MaxAmplitudeScale;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UCurveFloat*                                  AmplitudeCurve;                                               // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.PenetrationAvoidanceFeeler
// Struct Size::0x0028
struct FPenetrationAvoidanceFeeler
{
    FRotator                                      AdjustmentRot;                                                // 0x0000(0x000C)
    float                                         WorldWeight;                                                  // 0x000C(0x0004)
    float                                         PawnWeight;                                                   // 0x0010(0x0004)
    FVector                                       Extent;                                                       // 0x0014(0x000C)
    int32_t                                       TraceInterval;                                                // 0x0020(0x0004)
    int32_t                                       FramesUntilNextTrace;                                         // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.MovieCameraFocusPointParams
// Struct Size::0x0038
struct FMovieCameraFocusPointParams
{
    AActor*                                       FocusActor;                                                   // 0x0000(0x0008)
    FName                                         FocusBoneName;                                                // 0x0008(0x0008)
    FVector                                       FocusWorldLoc;                                                // 0x0010(0x000C)
    float                                         CameraFOV;                                                    // 0x001C(0x0004)
    FVector2D                                     InterpSpeedRange;                                             // 0x0020(0x0008)
    FVector2D                                     InFocusFOV;                                                   // 0x0028(0x0008)
    bool                                          bAlwaysFocus;                                                 // 0x0030(0x0001)
    bool                                          bAdjustCamera;                                                // 0x0031(0x0001)
    bool                                          bIgnoreTrace;                                                 // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    float                                         FocusPitchOffsetDeg;                                          // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.MovieCameraParams
// Struct Size::0x0048
struct FMovieCameraParams
{
    FVector                                       fFocusOffset;                                                 // 0x0000(0x000C)
    float                                         fFOVScale;                                                    // 0x000C(0x0004)
    float                                         fYawScale;                                                    // 0x0010(0x0004)
    float                                         fPitchScale;                                                  // 0x0014(0x0004)
    float                                         fViewOffsetDistanceScale;                                     // 0x0018(0x0004)
    float                                         fSurroundingSpeed;                                            // 0x001C(0x0004)
    bool                                          bSurroundingClockwise;                                        // 0x0020(0x0001)
    bool                                          bFPPMode;                                                     // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    int32_t                                       iCamera3PMode;                                                // 0x0024(0x0004)
    bool                                          bManual;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       OrbitingOffset;                                               // 0x002C(0x000C)
    FRotator                                      OrbitingViewRotation;                                         // 0x0038(0x000C)
    float                                         ManualMoveSpeedBias;                                          // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.CameraFocusPointParams
// Struct Size::0x0038
struct FCameraFocusPointParams
{
    AActor*                                       FocusActor;                                                   // 0x0000(0x0008)
    FName                                         FocusBoneName;                                                // 0x0008(0x0008)
    FVector                                       FocusWorldLoc;                                                // 0x0010(0x000C)
    float                                         CameraFOV;                                                    // 0x001C(0x0004)
    FVector2D                                     InterpSpeedRange;                                             // 0x0020(0x0008)
    FVector2D                                     InFocusFOV;                                                   // 0x0028(0x0008)
    bool                                          bAlwaysFocus;                                                 // 0x0030(0x0001)
    bool                                          bAdjustCamera;                                                // 0x0031(0x0001)
    bool                                          bIgnoreTrace;                                                 // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    float                                         FocusPitchOffsetDeg;                                          // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.ReplicationInfo
// Struct Size::0x0058
struct FReplicationInfo
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  SGFramework.NPCFireBodyPartBoneNameMap
// Struct Size::0x000C
struct FNPCFireBodyPartBoneNameMap
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    bool                                          bIsSocketBone;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  SGFramework.PoseTransition
// Struct Size::0x0004
struct FPoseTransition
{
    enum class EAIPose                            FromPose;                                                     // 0x0000(0x0001)
    enum class EAIPose                            ToPose;                                                       // 0x0001(0x0001)
    enum class EAnimTransitionState               TransitionState;                                              // 0x0002(0x0001)
    bool                                          bForceStopMovement;                                           // 0x0003(0x0001)
};


// ScriptStruct  SGFramework.AISoundRepInfo
// Struct Size::0x0008
struct FAISoundRepInfo
{
    enum class EAISoundType                       SoundType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.RepCustomizeAnimation
// Struct Size::0x0020
struct FRepCustomizeAnimation
{
    FString                                       InCustomizeMontageName;                                       // 0x0000(0x0010)
    FName                                         InCustomizeMontageSectionName;                                // 0x0010(0x0008)
    bool                                          bReplayWhileIsPlaying;                                        // 0x0018(0x0001)
    char                                          bPlayFlag;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  SGFramework.SGCharacterAnimInstanceProxyBase
// Struct Size::0x1600
struct FSGCharacterAnimInstanceProxyBase : public FAnimInstanceProxy
{
    UAnimSequence*                                Stand;                                                        // 0x0860(0x0008)
    UAnimSequence*                                CasualStandAnimations;                                        // 0x0868(0x0008)
    UAnimSequence*                                StandAnimations;                                              // 0x0870(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0878(0x0008)
    UAnimSequence*                                Stand;                                                        // 0x0880(0x0008)
    UAnimSequence*                                Stand;                                                        // 0x0888(0x0008)
    UAnimSequence*                                Stand;                                                        // 0x0890(0x0008)
    UAnimSequence*                                Stand;                                                        // 0x0898(0x0008)
    UAnimSequence*                                Stand;                                                        // 0x08A0(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x08A8(0x0008)
    UAimOffsetBlendSpace*                         Stand;                                                        // 0x08B0(0x0008)
    UAimOffsetBlendSpace*                         Stand;                                                        // 0x08B8(0x0008)
    UAimOffsetBlendSpace*                         Stand;                                                        // 0x08C0(0x0008)
    enum class ELocomotionType                    Stand;                                                        // 0x08C8(0x0001)
    bool                                          bHasLocomotion;                                               // 0x08C9(0x0001)
    char                                          pa_08CA[0x0006]                                               // 0x08CA(0x0006)
    UBlendSpace*                                  Stand;                                                        // 0x08D0(0x0008)
    UBlendSpace*                                  StandSprint;                                                  // 0x08D8(0x0008)
    UBlendSpace*                                  AccelerationLeanBS;                                           // 0x08E0(0x0008)
    UBlendSpace*                                  SprintSharpTurnLeanBS;                                        // 0x08E8(0x0008)
    bool                                          bHasStand;                                                    // 0x08F0(0x0001)
    char                                          pa_08F1[0x0007]                                               // 0x08F1(0x0007)
    UAnimSequence*                                Crouch;                                                       // 0x08F8(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x0900(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x0908(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x0910(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x0918(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x0920(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0928(0x0008)
    UAimOffsetBlendSpace*                         Crouch;                                                       // 0x0930(0x0008)
    UAimOffsetBlendSpace*                         Crouch;                                                       // 0x0938(0x0008)
    UAimOffsetBlendSpace*                         Crouch;                                                       // 0x0940(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0948(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0950(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0958(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0960(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0968(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x0970(0x0008)
    UAimOffsetBlendSpace*                         Prone;                                                        // 0x0978(0x0008)
    UAimOffsetBlendSpace*                         Prone;                                                        // 0x0980(0x0008)
    UAimOffsetBlendSpace*                         Prone;                                                        // 0x0988(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x0990(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x0998(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x09A0(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x09A8(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x09B0(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x09B8(0x0008)
    UAimOffsetBlendSpace*                         DBNO;                                                         // 0x09C0(0x0008)
    UAimOffsetBlendSpace*                         DBNO;                                                         // 0x09C8(0x0008)
    UAimOffsetBlendSpace*                         DBNO;                                                         // 0x09D0(0x0008)
    UAnimSequence*                                Current;                                                      // 0x09D8(0x0008)
    UAnimSequenceBase*                            DeathAnim;                                                    // 0x09E0(0x0008)
    UAnimSequence*                                Current;                                                      // 0x09E8(0x0008)
    enum class EAnimStance                        Stance;                                                       // 0x09F0(0x0001)
    enum class EWeaponType                        WeaponStance;                                                 // 0x09F1(0x0001)
    bool                                          bIsStand;                                                     // 0x09F2(0x0001)
    bool                                          bIsCasual;                                                    // 0x09F3(0x0001)
    bool                                          bIsCrouch;                                                    // 0x09F4(0x0001)
    bool                                          bIsProne;                                                     // 0x09F5(0x0001)
    bool                                          bProneChangeThisFrame;                                        // 0x09F6(0x0001)
    bool                                          bIsDBNO;                                                      // 0x09F7(0x0001)
    bool                                          bIsLadderClimbing;                                            // 0x09F8(0x0001)
    char                                          pa_09F9[0x0003]                                               // 0x09F9(0x0003)
    float                                         PronePlayRate;                                                // 0x09FC(0x0004)
    bool                                          bIsMoving;                                                    // 0x0A00(0x0001)
    bool                                          bIsNotMoving;                                                 // 0x0A01(0x0001)
    bool                                          bIsLocationChagned;                                           // 0x0A02(0x0001)
    bool                                          bILastLocationChagned;                                        // 0x0A03(0x0001)
    bool                                          bIsMovingForward;                                             // 0x0A04(0x0001)
    bool                                          bIsMovingOnGround;                                            // 0x0A05(0x0001)
    bool                                          bIsNotSprinting;                                              // 0x0A06(0x0001)
    bool                                          bIsSprinting;                                                 // 0x0A07(0x0001)
    bool                                          bIsSprintingLastUpdate;                                       // 0x0A08(0x0001)
    char                                          pa_0A09[0x0003]                                               // 0x0A09(0x0003)
    float                                         MovingRatio;                                                  // 0x0A0C(0x0004)
    float                                         NotMovingRatio;                                               // 0x0A10(0x0004)
    float                                         SprintingRatio;                                               // 0x0A14(0x0004)
    float                                         NotSprintingRatio;                                            // 0x0A18(0x0004)
    bool                                          bFullySprinting;                                              // 0x0A1C(0x0001)
    bool                                          bIsShadow;                                                    // 0x0A1D(0x0001)
    bool                                          bIs1PSprinting;                                               // 0x0A1E(0x0001)
    bool                                          bIs1PMeleeWeaponSprinting;                                    // 0x0A1F(0x0001)
    bool                                          bIs1PPistolSprinting;                                         // 0x0A20(0x0001)
    bool                                          bEnableSprintAddtive;                                         // 0x0A21(0x0001)
    bool                                          bIsSprintingLastTime;                                         // 0x0A22(0x0001)
    char                                          pa_0A23[0x0001]                                               // 0x0A23(0x0001)
    float                                         MovementStance;                                               // 0x0A24(0x0004)
    bool                                          bIsLeaning;                                                   // 0x0A28(0x0001)
    bool                                          bIsLeaningLeft;                                               // 0x0A29(0x0001)
    bool                                          bIsLeaningRight;                                              // 0x0A2A(0x0001)
    bool                                          bIsDead;                                                      // 0x0A2B(0x0001)
    enum class EWeaponLeanAimType                 LeanAimType;                                                  // 0x0A2C(0x0001)
    char                                          pa_0A2D[0x0003]                                               // 0x0A2D(0x0003)
    float                                         LeftLeanAOAdditiveAlpha;                                      // 0x0A30(0x0004)
    float                                         RightLeanAOAdditiveAlpha;                                     // 0x0A34(0x0004)
    bool                                          bIsFPP;                                                       // 0x0A38(0x0001)
    bool                                          bIsLocalPlayerControlled;                                     // 0x0A39(0x0001)
    bool                                          bIs1P;                                                        // 0x0A3A(0x0001)
    enum class ECharacterSex                      CharacterSex;                                                 // 0x0A3B(0x0001)
    float                                         IdleBreathAlpha;                                              // 0x0A3C(0x0004)
    bool                                          bIsAiming;                                                    // 0x0A40(0x0001)
    bool                                          bIsSwitchingScope;                                            // 0x0A41(0x0001)
    bool                                          bIsScoping;                                                   // 0x0A42(0x0001)
    char                                          pa_0A43[0x0001]                                               // 0x0A43(0x0001)
    float                                         CurrentSightFov;                                              // 0x0A44(0x0004)
    bool                                          bIsScopingWithRearSight;                                      // 0x0A48(0x0001)
    bool                                          bIsArmedWithGun;                                              // 0x0A49(0x0001)
    bool                                          bIsArmedWithoutGun;                                           // 0x0A4A(0x0001)
    bool                                          bIsArmedWithThrown;                                           // 0x0A4B(0x0001)
    bool                                          bIsArmedWithMainWeapon;                                       // 0x0A4C(0x0001)
    bool                                          bIsArmedWithAssistWeapon;                                     // 0x0A4D(0x0001)
    bool                                          bIsArmedWithDualHandWeapon;                                   // 0x0A4E(0x0001)
    bool                                          bShouldUseSnapPose;                                           // 0x0A4F(0x0001)
    bool                                          bIsReloading;                                                 // 0x0A50(0x0001)
    bool                                          bIsUpperbody;                                                 // 0x0A51(0x0001)
    bool                                          bIsMirrorAnim;                                                // 0x0A52(0x0001)
    bool                                          bIsUsingItem;                                                 // 0x0A53(0x0001)
    bool                                          bIsCheckingWeapon;                                            // 0x0A54(0x0001)
    bool                                          bShouldUseHandOffset;                                         // 0x0A55(0x0001)
    bool                                          bCanPlayIdleAnim;                                             // 0x0A56(0x0001)
    char                                          pa_0A57[0x0001]                                               // 0x0A57(0x0001)
    int32_t                                       IdleAnimIndex;                                                // 0x0A58(0x0004)
    bool                                          bIsFiring;                                                    // 0x0A5C(0x0001)
    bool                                          bIsSilentWalk;                                                // 0x0A5D(0x0001)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x0A5E(0x0001)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x0A5F(0x0001)
    bool                                          bIsPlayingAdditiveMontage;                                    // 0x0A60(0x0001)
    bool                                          bOverrideRightHandPostAdditive;                               // 0x0A61(0x0001)
    bool                                          bIsPlayingFireMontage;                                        // 0x0A62(0x0001)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x0A63(0x0001)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x0A64(0x0001)
    bool                                          bIsPlayingAnimMontage;                                        // 0x0A65(0x0001)
    bool                                          bDisableAdditiveMontageBlendPerBone;                          // 0x0A66(0x0001)
    bool                                          bIsEmptyHand;                                                 // 0x0A67(0x0001)
    bool                                          bIsPrviewCharacter;                                           // 0x0A68(0x0001)
    char                                          pa_0A69[0x0003]                                               // 0x0A69(0x0003)
    float                                         FPPAnimWeight;                                                // 0x0A6C(0x0004)
    float                                         FPPAnimWeight;                                                // 0x0A70(0x0004)
    bool                                          bShouldBlendFPPAnimWeight;                                    // 0x0A74(0x0001)
    bool                                          bShouldFPPWeaponSway;                                         // 0x0A75(0x0001)
    bool                                          bAnimSetReady;                                                // 0x0A76(0x0001)
    bool                                          bPlayingCustomAnimation;                                      // 0x0A77(0x0001)
    bool                                          bIsShadowMesh;                                                // 0x0A78(0x0001)
    bool                                          bShouldModifyAOCurve;                                         // 0x0A79(0x0001)
    char                                          pa_0A7A[0x0002]                                               // 0x0A7A(0x0002)
    float                                         bShouldModifyCopyHandGunIKBone;                               // 0x0A7C(0x0004)
    bool                                          bShouldMovementSway;                                          // 0x0A80(0x0001)
    bool                                          bShouldStandToCrouching;                                      // 0x0A81(0x0001)
    bool                                          bShouldCrouchingToStand;                                      // 0x0A82(0x0001)
    bool                                          bIsFPPAndAiming;                                              // 0x0A83(0x0001)
    bool                                          bIsFPPAndNotAiming;                                           // 0x0A84(0x0001)
    char                                          pa_0A85[0x0003]                                               // 0x0A85(0x0003)
    float                                         fIsFPPAndAiming;                                              // 0x0A88(0x0004)
    bool                                          bIsLegOutOfEndurance;                                         // 0x0A8C(0x0001)
    bool                                          bShouldTick1PRelax;                                           // 0x0A8D(0x0001)
    char                                          pa_0A8E[0x0012]                                               // 0x0A8E(0x0012)
    float                                         bTacticalPistol;                                              // 0x0AA0(0x0004)
    enum class ETacticalPistolStatus              CurrentTacticalPisotlStatus;                                  // 0x0AA4(0x0001)
    char                                          pa_0AA5[0x0003]                                               // 0x0AA5(0x0003)
    float                                         bFPPAndNotInOrTransTacticalPistolState;                       // 0x0AA8(0x0004)
    float                                         bInOrTransTacticalPistolState;                                // 0x0AAC(0x0004)
    float                                         TacticalLeftHandWeaponGripAlpha;                              // 0x0AB0(0x0004)
    float                                         TacticalRightHandWeaponGripAlpha;                             // 0x0AB4(0x0004)
    float                                         TacticalPistolHandOffsetAlpha;                                // 0x0AB8(0x0004)
    float                                         TacticalPistolWeaponGripAlphaBeforeADS;                       // 0x0ABC(0x0004)
    float                                         TacticalPistolWeaponGripAlphaAfterADS;                        // 0x0AC0(0x0004)
    float                                         bAdditiveTacticalPistolGrip;                                  // 0x0AC4(0x0004)
    float                                         bShouldTacticalPistolCopyItemr;                               // 0x0AC8(0x0004)
    float                                         bTacticalPistolAiming;                                        // 0x0ACC(0x0004)
    float                                         bFPPTacticalPistolAiming;                                     // 0x0AD0(0x0004)
    float                                         bIsTacticalBallisticShieldGrip;                               // 0x0AD4(0x0004)
    float                                         bIs3PTacticalBallisticShieldGrip;                             // 0x0AD8(0x0004)
    float                                         bShouldCopyVB;                                                // 0x0ADC(0x0004)
    UAnimSequence*                                Tactical;                                                     // 0x0AE0(0x0008)
    UBlendSpace1D*                                Tactical;                                                     // 0x0AE8(0x0008)
    float                                         EnableBlendTacticaWeaponBaseGrip;                             // 0x0AF0(0x0004)
    char                                          pa_0AF4[0x0004]                                               // 0x0AF4(0x0004)
    UAnimSequence*                                LeftHandWeaponBaseGripPose;                                   // 0x0AF8(0x0008)
    UAnimSequence*                                TacticalPistolBaseGripPose;                                   // 0x0B00(0x0008)
    UAnimSequence*                                TacticalPistolStandBasePose;                                  // 0x0B08(0x0008)
    UAnimSequence*                                TacticalPistolCrouchBasePose;                                 // 0x0B10(0x0008)
    UAnimSequence*                                TacticalRightHandGripPose;                                    // 0x0B18(0x0008)
    UAnimSequence*                                TacticalRightHandNegAdditiveSequence;                         // 0x0B20(0x0008)
    FVector                                       TacticalLeftHandOffset;                                       // 0x0B28(0x000C)
    FVector                                       TacticalRightHandOffset;                                      // 0x0B34(0x000C)
    float                                         TacticalWeaponForegripType;                                   // 0x0B40(0x0004)
    enum class ETacticalPistolStatus              LastTacticalPistolStatus;                                     // 0x0B44(0x0001)
    char                                          pa_0B45[0x0003]                                               // 0x0B45(0x0003)
    float                                         Enable;                                                       // 0x0B48(0x0004)
    float                                         Enable;                                                       // 0x0B4C(0x0004)
    float                                         Enable;                                                       // 0x0B50(0x0004)
    float                                         UpperBodyBlendAlpha;                                          // 0x0B54(0x0004)
    float                                         UpperBodyBlendAlpha;                                          // 0x0B58(0x0004)
    float                                         TacticalZoomingAlpha;                                         // 0x0B5C(0x0004)
    float                                         TacticalLeftHandGunkickAlpha;                                 // 0x0B60(0x0004)
    float                                         TacticalLeftHandGunkickAlpha;                                 // 0x0B64(0x0004)
    float                                         bShouldOverrideLocomotionPelvis;                              // 0x0B68(0x0004)
    float                                         MovementSpeedScale;                                           // 0x0B6C(0x0004)
    bool                                          bWantStop;                                                    // 0x0B70(0x0001)
    char                                          pa_0B71[0x0003]                                               // 0x0B71(0x0003)
    float                                         MovingDirection;                                              // 0x0B74(0x0004)
    float                                         MovingDirectionClamped;                                       // 0x0B78(0x0004)
    float                                         MovingDirectionCompensation;                                  // 0x0B7C(0x0004)
    float                                         MovingDirectionOrientationWarpCopyBoneAlpha;                  // 0x0B80(0x0004)
    float                                         WantToMoveDirAngle;                                           // 0x0B84(0x0004)
    float                                         PawnToCamerAngle;                                             // 0x0B88(0x0004)
    float                                         NormalizedSpeed;                                              // 0x0B8C(0x0004)
    float                                         VerticalVelocity;                                             // 0x0B90(0x0004)
    float                                         HorizontalVelocity;                                           // 0x0B94(0x0004)
    float                                         AccLength;                                                    // 0x0B98(0x0004)
    float                                         AccDirection;                                                 // 0x0B9C(0x0004)
    float                                         VelocityBeforStop;                                            // 0x0BA0(0x0004)
    float                                         AccDirBeforStop;                                              // 0x0BA4(0x0004)
    float                                         DirectionBeforStop;                                           // 0x0BA8(0x0004)
    float                                         ProneRampRotationPitch;                                       // 0x0BAC(0x0004)
    float                                         ProneRampRotation;                                            // 0x0BB0(0x0004)
    float                                         MovementPlayRate;                                             // 0x0BB4(0x0004)
    float                                         MovementStartPosition;                                        // 0x0BB8(0x0004)
    float                                         MovementSpeedWarping;                                         // 0x0BBC(0x0004)
    bool                                          bIsPlayingRootMotion;                                         // 0x0BC0(0x0001)
    char                                          pa_0BC1[0x0003]                                               // 0x0BC1(0x0003)
    FVector                                       FPPLowerBodyOffset;                                           // 0x0BC4(0x000C)
    FVector                                       FPPJumpUpperBodyOffset;                                       // 0x0BD0(0x000C)
    char                                          pa_0BDC[0x0004]                                               // 0x0BDC(0x0004)
    FQuat                                         CurrentFloorSlope;                                            // 0x0BE0(0x0010)
    FVector                                       Acceleration;                                                 // 0x0BF0(0x000C)
    FVector                                       Velocity;                                                     // 0x0BFC(0x000C)
    FVector                                       VelocityLastUpdate;                                           // 0x0C08(0x000C)
    float                                         AccVelAngle;                                                  // 0x0C14(0x0004)
    float                                         VelocityAngleDeltaSinceLastUpdate;                            // 0x0C18(0x0004)
    bool                                          bMovingIntoWall;                                              // 0x0C1C(0x0001)
    char                                          pa_0C1D[0x0003]                                               // 0x0C1D(0x0003)
    FVector                                       CoachLookAtLocation;                                          // 0x0C20(0x000C)
    float                                         CoachLookAtYaw;                                               // 0x0C2C(0x0004)
    float                                         CoachLookAtPitch;                                             // 0x0C30(0x0004)
    float                                         CoachLookAtAlpha;                                             // 0x0C34(0x0004)
    FVector                                       BreathTranslation;                                            // 0x0C38(0x000C)
    FVector                                       BreathTranslation;                                            // 0x0C44(0x000C)
    FRotator                                      BreathRotation;                                               // 0x0C50(0x000C)
    float                                         RotationYaw;                                                  // 0x0C5C(0x0004)
    float                                         RotationPitch;                                                // 0x0C60(0x0004)
    float                                         Yaw;                                                          // 0x0C64(0x0004)
    float                                         Pitch;                                                        // 0x0C68(0x0004)
    float                                         Roll;                                                         // 0x0C6C(0x0004)
    FRotator                                      ViewRotation;                                                 // 0x0C70(0x000C)
    FRotator                                      ViewRotation;                                                 // 0x0C7C(0x000C)
    FRotator                                      AORotation;                                                   // 0x0C88(0x000C)
    FRotator                                      AORotationWithWeaponSway;                                     // 0x0C94(0x000C)
    FRotator                                      AORotationWithWeaponSway;                                     // 0x0CA0(0x000C)
    FRotator                                      AORotationWithWeaponSway;                                     // 0x0CAC(0x000C)
    FVector                                       SpineOffset;                                                  // 0x0CB8(0x000C)
    FVector                                       SpineOffsetWhenPitch;                                         // 0x0CC4(0x000C)
    float                                         WeaponSwayAlpha;                                              // 0x0CD0(0x0004)
    float                                         WeaponSwayAlpha;                                              // 0x0CD4(0x0004)
    float                                         WeaponSwayDelay;                                              // 0x0CD8(0x0004)
    float                                         WeaponSwayDelay;                                              // 0x0CDC(0x0004)
    bool                                          bShouldUseAO;                                                 // 0x0CE0(0x0001)
    char                                          pa_0CE1[0x0003]                                               // 0x0CE1(0x0003)
    FRotator                                      MeshRotationOffset;                                           // 0x0CE4(0x000C)
    FVector                                       MeshLocationOffset;                                           // 0x0CF0(0x000C)
    FRotator                                      MeshLegsRotationOffset;                                       // 0x0CFC(0x000C)
    bool                                          bUseOverrideInterpolationParam;                               // 0x0D08(0x0001)
    char                                          pa_0D09[0x0003]                                               // 0x0D09(0x0003)
    FInterpolationParameter                       OverrideInterpolationParam;                                   // 0x0D0C(0x0008)
    FInterpolationParameter                       OverrideInterpolationParam;                                   // 0x0D14(0x0008)
    float                                         WeaponShakeAlpha;                                             // 0x0D1C(0x0004)
    float                                         WeaponShakeType;                                              // 0x0D20(0x0004)
    float                                         RootBoneRotationYaw;                                          // 0x0D24(0x0004)
    enum class ERootYawOffsetMode                 RootYawOffsetMode;                                            // 0x0D28(0x0001)
    bool                                          bIsJumping;                                                   // 0x0D29(0x0001)
    bool                                          bIsFalling;                                                   // 0x0D2A(0x0001)
    char                                          pa_0D2B[0x0001]                                               // 0x0D2B(0x0001)
    float                                         FallingAnimType;                                              // 0x0D2C(0x0004)
    bool                                          bIsInAir;                                                     // 0x0D30(0x0001)
    bool                                          bIsPreJump;                                                   // 0x0D31(0x0001)
    bool                                          bIsNoneJumpState;                                             // 0x0D32(0x0001)
    bool                                          bIsNotInAir;                                                  // 0x0D33(0x0001)
    bool                                          bIsLanding;                                                   // 0x0D34(0x0001)
    bool                                          bIsHighJump;                                                  // 0x0D35(0x0001)
    bool                                          bIsSprintJumping;                                             // 0x0D36(0x0001)
    bool                                          bIsRunJumping;                                                // 0x0D37(0x0001)
    bool                                          bIsSliding;                                                   // 0x0D38(0x0001)
    char                                          pa_0D39[0x0003]                                               // 0x0D39(0x0003)
    float                                         SlideAngle;                                                   // 0x0D3C(0x0004)
    float                                         FallingAlpha;                                                 // 0x0D40(0x0004)
    float                                         LandingAlpha;                                                 // 0x0D44(0x0004)
    float                                         LandPredictionAlpha;                                          // 0x0D48(0x0004)
    bool                                          bTrigger;                                                     // 0x0D4C(0x0001)
    bool                                          bTrigger;                                                     // 0x0D4D(0x0001)
    char                                          pa_0D4E[0x0002]                                               // 0x0D4E(0x0002)
    FVector                                       LandingTranslation;                                           // 0x0D50(0x000C)
    FVector                                       LandingTranslation;                                           // 0x0D5C(0x000C)
    FRotator                                      LandingRotation;                                              // 0x0D68(0x000C)
    float                                         LeanRollOffset;                                               // 0x0D74(0x0004)
    FRotator                                      LeanRotation;                                                 // 0x0D78(0x000C)
    FVector                                       LeanOffset;                                                   // 0x0D84(0x000C)
    FVector                                       LeanTranslation;                                              // 0x0D90(0x000C)
    float                                         LeanDuration;                                                 // 0x0D9C(0x0004)
    bool                                          bEnableAccelerationLean;                                      // 0x0DA0(0x0001)
    bool                                          bEnableRunningAccelerationLean;                               // 0x0DA1(0x0001)
    bool                                          bEnableSprintingAccelerationLean;                             // 0x0DA2(0x0001)
    char                                          pa_0DA3[0x0001]                                               // 0x0DA3(0x0001)
    float                                         AccelerateLeanAmount;                                         // 0x0DA4(0x0004)
    float                                         AccelerateLeanAmount;                                         // 0x0DA8(0x0004)
    float                                         LeanLeftAOAdditiveRatio;                                      // 0x0DAC(0x0004)
    float                                         LeanRightAOAdditiveRatio;                                     // 0x0DB0(0x0004)
    float                                         SprintSharpTurnLeanAmount;                                    // 0x0DB4(0x0004)
    float                                         TargetSprintSharpTurnLeanAmount;                              // 0x0DB8(0x0004)
    float                                         LastMeshDirAccDirDiff;                                        // 0x0DBC(0x0004)
    bool                                          SprintSharpTurnLeanAmountBlendIn;                             // 0x0DC0(0x0001)
    char                                          pa_0DC1[0x0003]                                               // 0x0DC1(0x0003)
    float                                         AccumulatedMeshDirAccDirDiff;                                 // 0x0DC4(0x0004)
    float                                         AccelerationVelocityAngle;                                    // 0x0DC8(0x0004)
    bool                                          bIsRagdoll;                                                   // 0x0DCC(0x0001)
    char                                          pa_0DCD[0x0003]                                               // 0x0DCD(0x0003)
    FPoseSnapshot                                 RagdollPose;                                                  // 0x0DD0(0x0038)
    float                                         DeathDirection;                                               // 0x0E08(0x0004)
    int32_t                                       DeathStance;                                                  // 0x0E0C(0x0004)
    int32_t                                       DeathBodyPart;                                                // 0x0E10(0x0004)
    char                                          pa_0E14[0x0004]                                               // 0x0E14(0x0004)
    USGCharacterAnimInstanceBase*                 SGAnimInstance;                                               // 0x0E18(0x0008)
    USGCharacterLocomotionAnimInstance*           SGLocomotionAnimInstance;                                     // 0x0E20(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0E28(0x0008)
    ASGWeapon*                                    SGWeapon;                                                     // 0x0E30(0x0008)
    ASGWeapon*                                    TacticalWeapon;                                               // 0x0E38(0x0008)
    ASGWeapon*                                    LastTacticalWeapon;                                           // 0x0E40(0x0008)
    USkeletalMeshComponent*                       SGOrnamentMesh;                                               // 0x0E48(0x0008)
    bool                                          bIsWeaponChange;                                              // 0x0E50(0x0001)
    bool                                          bStanceChanged;                                               // 0x0E51(0x0001)
    bool                                          bIs1PChanged;                                                 // 0x0E52(0x0001)
    bool                                          bHasTransition;                                               // 0x0E53(0x0001)
    float                                         TransitionType;                                               // 0x0E54(0x0004)
    bool                                          bHasAnimStanceTransition;                                     // 0x0E58(0x0001)
    char                                          pa_0E59[0x0003]                                               // 0x0E59(0x0003)
    float                                         AnimStanceTransitionType;                                     // 0x0E5C(0x0004)
    float                                         SprintTransitionOutPlayRate;                                  // 0x0E60(0x0004)
    char                                          pa_0E64[0x0004]                                               // 0x0E64(0x0004)
    USkeletalMeshComponent*                       CopyPoseFrom;                                                 // 0x0E68(0x0008)
    float                                         Current1PRelaxRemaingTime;                                    // 0x0E70(0x0004)
    float                                         Shared1PRelaxRemaingTime;                                     // 0x0E74(0x0004)
    float                                         CurrentIdle1PRelaxTriggerTime;                                // 0x0E78(0x0004)
    float                                         Idle1PRelaxAccTime;                                           // 0x0E7C(0x0004)
    FRotator                                      MeleeRecoilRotation;                                          // 0x0E80(0x000C)
    float                                         WeaponStabilityAlpha;                                         // 0x0E8C(0x0004)
    float                                         AimingScale;                                                  // 0x0E90(0x0004)
    FVector                                       WeaponSwayTranslation;                                        // 0x0E94(0x000C)
    FRotator                                      WeaponSwayRotation;                                           // 0x0EA0(0x000C)
    FVector                                       WeaponSwaySpringPivotOffset;                                  // 0x0EAC(0x000C)
    FRotator                                      WeaponADSRotation;                                            // 0x0EB8(0x000C)
    FVector                                       WeaponADSLocation;                                            // 0x0EC4(0x000C)
    FVector                                       WeaponADSLocation;                                            // 0x0ED0(0x000C)
    bool                                          bShouldUseADSBreath;                                          // 0x0EDC(0x0001)
    bool                                          bShouldUseFPPBreathCurve;                                     // 0x0EDD(0x0001)
    char                                          pa_0EDE[0x0002]                                               // 0x0EDE(0x0002)
    float                                         bShouldUseFPPBreathAnimation;                                 // 0x0EE0(0x0004)
    char                                          pa_0EE4[0x0004]                                               // 0x0EE4(0x0004)
    UAnimSequence*                                FPPIdleBreathAnimation;                                       // 0x0EE8(0x0008)
    FVector                                       WeaponWithStockHoldingOffset;                                 // 0x0EF0(0x000C)
    FVector                                       WeaponGunTranslation;                                         // 0x0EFC(0x000C)
    FRotator                                      WeaponGunRotator;                                             // 0x0F08(0x000C)
    FVector                                       WeaponShakePivotOffset;                                       // 0x0F14(0x000C)
    FVector                                       ADSWeaponGunTranslation;                                      // 0x0F20(0x000C)
    FRotator                                      ADSWeaponGunRotator;                                          // 0x0F2C(0x000C)
    FRotator                                      ADSWeaponSightRotator;                                        // 0x0F38(0x000C)
    FVector                                       ADSWeaponShakePivotOffset;                                    // 0x0F44(0x000C)
    FVector                                       ADSWeaponSightShakePivotOffset;                               // 0x0F50(0x000C)
    FRotator                                      WeaponSwayRotation;                                           // 0x0F5C(0x000C)
    FVector                                       WeaponTraceLocationOffset;                                    // 0x0F68(0x000C)
    FRotator                                      WeaponTraceRotationOffset;                                    // 0x0F74(0x000C)
    FVector                                       WeaponTraceLocationOffset;                                    // 0x0F80(0x000C)
    FRotator                                      WeaponTraceRotationOffset;                                    // 0x0F8C(0x000C)
    FRotator                                      WeaponTraceRUpperArmRot;                                      // 0x0F98(0x000C)
    FRotator                                      WeaponTraceRForeArm1Rot;                                      // 0x0FA4(0x000C)
    FVector                                       CameraOffsetForWeaponTrace;                                   // 0x0FB0(0x000C)
    FRotator                                      WeaponMovementSwayRotation;                                   // 0x0FBC(0x000C)
    float                                         WeaponZoomTime;                                               // 0x0FC8(0x0004)
    float                                         WeaponUnZoomTime;                                             // 0x0FCC(0x0004)
    float                                         WeaponZoomAnimRate;                                           // 0x0FD0(0x0004)
    float                                         WeaponUnZoomAnimRate;                                         // 0x0FD4(0x0004)
    float                                         ZoomingAlpha;                                                 // 0x0FD8(0x0004)
    float                                         UnZoomingAlpha;                                               // 0x0FDC(0x0004)
    float                                         ZoomingAnimTime;                                              // 0x0FE0(0x0004)
    float                                         UnZoomingAnimTime;                                            // 0x0FE4(0x0004)
    float                                         AlphaForZoomingBranch;                                        // 0x0FE8(0x0004)
    float                                         AlphaForUnzoomingBranch;                                      // 0x0FEC(0x0004)
    bool                                          bCachedIsAiming;                                              // 0x0FF0(0x0001)
    bool                                          bInitFromHipFiring;                                           // 0x0FF1(0x0001)
    bool                                          bInitFromADS;                                                 // 0x0FF2(0x0001)
    char                                          pa_0FF3[0x0001]                                               // 0x0FF3(0x0001)
    float                                         HoldingWeaponAlpha;                                           // 0x0FF4(0x0004)
    FVector                                       ZoomingOffset;                                                // 0x0FF8(0x000C)
    FVector                                       ZoomingLagPivotOffset;                                        // 0x1004(0x000C)
    FVector                                       ZoomingHandOffset;                                            // 0x1010(0x000C)
    FRotator                                      ZoomingHandRotOffset;                                         // 0x101C(0x000C)
    char                                          pa_1028[0x0018]                                               // 0x1028(0x0018)
    FVector                                       ZoomingIronSightOffset;                                       // 0x1040(0x000C)
    FRotator                                      ZoomingIronSightRotOffset;                                    // 0x104C(0x000C)
    FVector                                       CurrentZoomingHandOffset;                                     // 0x1058(0x000C)
    FRotator                                      CurrentZoomingHandRotOffset;                                  // 0x1064(0x000C)
    char                                          pa_1070[0x0010]                                               // 0x1070(0x0010)
    FVector                                       CurrentZoomingCameraOffset;                                   // 0x1080(0x000C)
    FVector                                       ZoomingCameraOffset;                                          // 0x108C(0x000C)
    FVector                                       UnZoomingHandOffset;                                          // 0x1098(0x000C)
    bool                                          bADSMoveCamera;                                               // 0x10A4(0x0001)
    char                                          pa_10A5[0x0003]                                               // 0x10A5(0x0003)
    float                                         CameraPosBlendRatio;                                          // 0x10A8(0x0004)
    bool                                          bExperimentalADS;                                             // 0x10AC(0x0001)
    bool                                          bIsWeaponCollapsed;                                           // 0x10AD(0x0001)
    char                                          pa_10AE[0x0026]                                               // 0x10AE(0x0026)
    FSGAnimationBreathInfo                        BreathInfo;                                                   // 0x10D4(0x0018)
    char                                          pa_10EC[0x0004]                                               // 0x10EC(0x0004)
    UBlendSpace*                                  TakeHitBlendSpace;                                            // 0x10F0(0x0008)
    float                                         TakeHitAnimationPlayRate;                                     // 0x10F8(0x0004)
    bool                                          bBlendShapeSwitch;                                            // 0x10FC(0x0001)
    char                                          pa_10FD[0x0003]                                               // 0x10FD(0x0003)
    float                                         TakeHitDirX;                                                  // 0x1100(0x0004)
    float                                         TakeHitDirY;                                                  // 0x1104(0x0004)
    float                                         TakeHitAlpha;                                                 // 0x1108(0x0004)
    bool                                          bIsTakingHit;                                                 // 0x110C(0x0001)
    bool                                          bIsProneTakingHit;                                            // 0x110D(0x0001)
    char                                          pa_110E[0x0002]                                               // 0x110E(0x0002)
    float                                         StartPos;                                                     // 0x1110(0x0004)
    bool                                          bIsPoseCache;                                                 // 0x1114(0x0001)
    char                                          pa_1115[0x0003]                                               // 0x1115(0x0003)
    FPoseSnapshot                                 PoseCache;                                                    // 0x1118(0x0038)
    float                                         WeaponHandgripType;                                           // 0x1150(0x0004)
    bool                                          bHasIdleSeqBasePose;                                          // 0x1154(0x0001)
    char                                          pa_1155[0x0003]                                               // 0x1155(0x0003)
    UAnimSequence*                                IdleSeqBasePose;                                              // 0x1158(0x0008)
    bool                                          bHasIdleSeq;                                                  // 0x1160(0x0001)
    char                                          pa_1161[0x0007]                                               // 0x1161(0x0007)
    UAnimSequence*                                IdleSeq;                                                      // 0x1168(0x0008)
    bool                                          bHasIdleSeq;                                                  // 0x1170(0x0001)
    char                                          pa_1171[0x0007]                                               // 0x1171(0x0007)
    UAnimSequence*                                IdleSeq;                                                      // 0x1178(0x0008)
    UAnimSequence*                                IdleSeq;                                                      // 0x1180(0x0008)
    UAnimSequence*                                ADS;                                                          // 0x1188(0x0008)
    UAnimSequence*                                ZoomInSeq;                                                    // 0x1190(0x0008)
    UAnimSequence*                                ZoomOutSeq;                                                   // 0x1198(0x0008)
    bool                                          bShouldUseZoomAnimation;                                      // 0x11A0(0x0001)
    bool                                          bHasCasualIdleSeq;                                            // 0x11A1(0x0001)
    char                                          pa_11A2[0x0006]                                               // 0x11A2(0x0006)
    UAnimSequence*                                CasualIdleSeq;                                                // 0x11A8(0x0008)
    FVector                                       ForeGripOffset;                                               // 0x11B0(0x000C)
    char                                          pa_11BC[0x0004]                                               // 0x11BC(0x0004)
    UBlendSpace1D*                                WeaponShakeBS;                                                // 0x11C0(0x0008)
    bool                                          bHasWeaponShakeBS;                                            // 0x11C8(0x0001)
    char                                          pa_11C9[0x0003]                                               // 0x11C9(0x0003)
    FVector                                       HandWeaponOffset;                                             // 0x11CC(0x000C)
    FVector                                       HandWeaponOffset;                                             // 0x11D8(0x000C)
    FRotator                                      HandWeaponOffset;                                             // 0x11E4(0x000C)
    FVector                                       HandOffset;                                                   // 0x11F0(0x000C)
    float                                         Enable;                                                       // 0x11FC(0x0004)
    FVector                                       HandOffset;                                                   // 0x1200(0x000C)
    float                                         Enable;                                                       // 0x120C(0x0004)
    float                                         WeaponReargripType;                                           // 0x1210(0x0004)
    char                                          pa_1214[0x0004]                                               // 0x1214(0x0004)
    UBlendSpace1D*                                RearGripIdleBS;                                               // 0x1218(0x0008)
    UBlendSpace1D*                                CasualRearGripIdleBS;                                         // 0x1220(0x0008)
    float                                         Enable;                                                       // 0x1228(0x0004)
    bool                                          bHasForegrip;                                                 // 0x122C(0x0001)
    char                                          pa_122D[0x0003]                                               // 0x122D(0x0003)
    float                                         WeaponForegripType;                                           // 0x1230(0x0004)
    float                                         GripPoseAdjustmentAlpha;                                      // 0x1234(0x0004)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x1238(0x0008)
    FVector                                       HandWeaponOffset;                                             // 0x1240(0x000C)
    FVector                                       TPPWeaponOffsetCrouchMoving;                                  // 0x124C(0x000C)
    FVector                                       WeaponOffsetSprintingViewWeapon;                              // 0x1258(0x000C)
    bool                                          EnableTargetIK;                                               // 0x1264(0x0001)
    char                                          pa_1265[0x0003]                                               // 0x1265(0x0003)
    FVector                                       LeftHandTarget;                                               // 0x1268(0x000C)
    FVector                                       LeftHandTargetOffset;                                         // 0x1274(0x000C)
    FVector                                       LeftShoudlerLocation;                                         // 0x1280(0x000C)
    FRotator                                      LeftShoudlerRotation;                                         // 0x128C(0x000C)
    float                                         SprintWeaponOffsetRatio;                                      // 0x1298(0x0004)
    float                                         ProneMoveWeaponOffsetRatio;                                   // 0x129C(0x0004)
    FVector                                       ProneMoveWeaponOffset;                                        // 0x12A0(0x000C)
    FRotator                                      DBNOMeshRotationOffset;                                       // 0x12AC(0x000C)
    FRotator                                      WeaponSprintLeftArmRot;                                       // 0x12B8(0x000C)
    float                                         Enable;                                                       // 0x12C4(0x0004)
    FVector                                       HandOffset;                                                   // 0x12C8(0x000C)
    char                                          pa_12D4[0x0004]                                               // 0x12D4(0x0004)
    UBlendSpace1D*                                AdjustGripIdleBS;                                             // 0x12D8(0x0008)
    UBlendSpace1D*                                AICasualGripIdleBS;                                           // 0x12E0(0x0008)
    UBlendSpace1D*                                CasualGripIdleBS;                                             // 0x12E8(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x12F0(0x0008)
    bool                                          bHasReargrip;                                                 // 0x12F8(0x0001)
    char                                          pa_12F9[0x0007]                                               // 0x12F9(0x0007)
    UBlendSpace1D*                                LFingerAdaptiveBS;                                            // 0x1300(0x0008)
    float                                         bEnableLFingerAdaptive;                                       // 0x1308(0x0004)
    float                                         LFingerAdaptiveAlpha;                                         // 0x130C(0x0004)
    UAnimSequence*                                FP;                                                           // 0x1310(0x0008)
    bool                                          bShouldUse1PForeGripPose;                                     // 0x1318(0x0001)
    char                                          pa_1319[0x0007]                                               // 0x1319(0x0007)
    UAnimSequence*                                GripPoseAdditive3P;                                           // 0x1320(0x0008)
    UAnimSequence*                                GripPoseBase3P;                                               // 0x1328(0x0008)
    bool                                          bEnableGripPoseAdditive3P;                                    // 0x1330(0x0001)
    char                                          pa_1331[0x0003]                                               // 0x1331(0x0003)
    float                                         IsTransitioning;                                              // 0x1334(0x0004)
    float                                         IsForbiddenFire;                                              // 0x1338(0x0004)
    float                                         BlendLeftRightArmPose;                                        // 0x133C(0x0004)
    float                                         Enable;                                                       // 0x1340(0x0004)
    float                                         Override;                                                     // 0x1344(0x0004)
    float                                         Override;                                                     // 0x1348(0x0004)
    float                                         Override;                                                     // 0x134C(0x0004)
    float                                         Override;                                                     // 0x1350(0x0004)
    float                                         Override;                                                     // 0x1354(0x0004)
    float                                         Override;                                                     // 0x1358(0x0004)
    float                                         Override;                                                     // 0x135C(0x0004)
    float                                         Override;                                                     // 0x1360(0x0004)
    float                                         Override;                                                     // 0x1364(0x0004)
    float                                         Override;                                                     // 0x1368(0x0004)
    float                                         Override;                                                     // 0x136C(0x0004)
    float                                         Override;                                                     // 0x1370(0x0004)
    float                                         Override;                                                     // 0x1374(0x0004)
    float                                         Override;                                                     // 0x1378(0x0004)
    float                                         Override;                                                     // 0x137C(0x0004)
    float                                         Enable;                                                       // 0x1380(0x0004)
    float                                         Enable;                                                       // 0x1384(0x0004)
    float                                         Enable;                                                       // 0x1388(0x0004)
    float                                         Enable;                                                       // 0x138C(0x0004)
    float                                         Enable;                                                       // 0x1390(0x0004)
    float                                         Enable;                                                       // 0x1394(0x0004)
    float                                         Enable;                                                       // 0x1398(0x0004)
    float                                         Enable;                                                       // 0x139C(0x0004)
    float                                         Disable;                                                      // 0x13A0(0x0004)
    float                                         Enable;                                                       // 0x13A4(0x0004)
    float                                         Enable;                                                       // 0x13A8(0x0004)
    float                                         Enable;                                                       // 0x13AC(0x0004)
    float                                         LeftHandIK;                                                   // 0x13B0(0x0004)
    float                                         RecoilUp;                                                     // 0x13B4(0x0004)
    float                                         RecoilBack;                                                   // 0x13B8(0x0004)
    float                                         Enable;                                                       // 0x13BC(0x0004)
    float                                         Enable;                                                       // 0x13C0(0x0004)
    FRotator                                      CameraRotationOffset;                                         // 0x13C4(0x000C)
    FRotator                                      ScalableCameraRotationOffset;                                 // 0x13D0(0x000C)
    FVector                                       ScalableCameraTranslationOffset;                              // 0x13DC(0x000C)
    float                                         Enable;                                                       // 0x13E8(0x0004)
    float                                         Enable;                                                       // 0x13EC(0x0004)
    bool                                          bEnable;                                                      // 0x13F0(0x0001)
    bool                                          bAutoOverrideUpperbody3P;                                     // 0x13F1(0x0001)
    char                                          pa_13F2[0x0002]                                               // 0x13F2(0x0002)
    float                                         Enable;                                                       // 0x13F4(0x0004)
    float                                         Enable;                                                       // 0x13F8(0x0004)
    float                                         Enable;                                                       // 0x13FC(0x0004)
    float                                         Enable;                                                       // 0x1400(0x0004)
    float                                         Enable;                                                       // 0x1404(0x0004)
    float                                         Enable;                                                       // 0x1408(0x0004)
    float                                         Disable;                                                      // 0x140C(0x0004)
    float                                         Enable;                                                       // 0x1410(0x0004)
    float                                         Enable;                                                       // 0x1414(0x0004)
    float                                         Enable;                                                       // 0x1418(0x0004)
    float                                         Enable;                                                       // 0x141C(0x0004)
    float                                         Enable;                                                       // 0x1420(0x0004)
    float                                         Enable;                                                       // 0x1424(0x0004)
    float                                         Enable;                                                       // 0x1428(0x0004)
    float                                         Enable;                                                       // 0x142C(0x0004)
    float                                         Enable;                                                       // 0x1430(0x0004)
    float                                         Enable;                                                       // 0x1434(0x0004)
    float                                         Enable;                                                       // 0x1438(0x0004)
    float                                         Enable;                                                       // 0x143C(0x0004)
    float                                         Override;                                                     // 0x1440(0x0004)
    float                                         Disable;                                                      // 0x1444(0x0004)
    float                                         FootLock;                                                     // 0x1448(0x0004)
    float                                         FootLock;                                                     // 0x144C(0x0004)
    float                                         Enable;                                                       // 0x1450(0x0004)
    float                                         Enable;                                                       // 0x1454(0x0004)
    float                                         LookAtClamp;                                                  // 0x1458(0x0004)
    float                                         Enable;                                                       // 0x145C(0x0004)
    FVector                                       PostProcessHandTranslation;                                   // 0x1460(0x000C)
    float                                         Spine;                                                        // 0x146C(0x0004)
    float                                         LeftHandFollowMagazineRatio;                                  // 0x1470(0x0004)
    FVector                                       LeftHandFollowMagazineOffset;                                 // 0x1474(0x000C)
    float                                         CurrentTurnYawWeight;                                         // 0x1480(0x0004)
    float                                         SmoothedEnableUpAORatio;                                      // 0x1484(0x0004)
    float                                         UpperBodyAnimRatio;                                           // 0x1488(0x0004)
    bool                                          bOverrideUpperBody;                                           // 0x148C(0x0001)
    char                                          pa_148D[0x0003]                                               // 0x148D(0x0003)
    float                                         WeaponStanceAlpha;                                            // 0x1490(0x0004)
    float                                         WeaponStanceAlpha;                                            // 0x1494(0x0004)
    float                                         WeaponStanceAlpha;                                            // 0x1498(0x0004)
    float                                         WeaponStanceAlpha;                                            // 0x149C(0x0004)
    bool                                          bIsProneMoving;                                               // 0x14A0(0x0001)
    char                                          pa_14A1[0x0001]                                               // 0x14A1(0x0001)
    bool                                          bIsSilentWalkMoving;                                          // 0x14A2(0x0001)
    bool                                          bIsSprintAiming;                                              // 0x14A3(0x0001)
    float                                         SprintADSTime;                                                // 0x14A4(0x0004)
    float                                         SprintADSAlpha;                                               // 0x14A8(0x0004)
    FVector                                       SprintADSTranslation;                                         // 0x14AC(0x000C)
    FRotator                                      SprintADSRotation;                                            // 0x14B8(0x000C)
    float                                         ADSBlendTime;                                                 // 0x14C4(0x0004)
    bool                                          bIsSprintingLastTime;                                         // 0x14C8(0x0001)
    bool                                          bIsCrouchAndNotDBNO;                                          // 0x14C9(0x0001)
    bool                                          bIsProneAndNotDBNO;                                           // 0x14CA(0x0001)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x14CB(0x0001)
    bool                                          bCanCallapseGun;                                              // 0x14CC(0x0001)
    char                                          pa_14CD[0x0003]                                               // 0x14CD(0x0003)
    float                                         DisableUpperbodyLocomotion;                                   // 0x14D0(0x0004)
    bool                                          bEnableFPPWeaponLeanRotation;                                 // 0x14D4(0x0001)
    char                                          pa_14D5[0x0003]                                               // 0x14D5(0x0003)
    float                                         PostProcessHandTranslationRatio;                              // 0x14D8(0x0004)
    bool                                          bDecreaseUpperBodyAnimRatio;                                  // 0x14DC(0x0001)
    char                                          pa_14DD[0x0003]                                               // 0x14DD(0x0003)
    float                                         PlayingUpperBodyAnimWithoutGunRatio;                          // 0x14E0(0x0004)
    bool                                          bMovingWithoutGunOrUpperbodyAnim;                             // 0x14E4(0x0001)
    bool                                          bIsCrouchAndMoving;                                           // 0x14E5(0x0001)
    bool                                          bSprintingWithoutDualHandWeaponOrUpperbodyAnim;               // 0x14E6(0x0001)
    bool                                          bMovingWithoutUpperbodyAnim;                                  // 0x14E7(0x0001)
    bool                                          bSprintingWithoutGunOrUpperbodyAnim;                          // 0x14E8(0x0001)
    bool                                          bMovingWithMainWeapon;                                        // 0x14E9(0x0001)
    bool                                          bMovingWithMainWeaponWithoutUpperbodyAnim;                    // 0x14EA(0x0001)
    bool                                          bSprintingWithAssistWithoutUpperbodyAnim;                     // 0x14EB(0x0001)
    bool                                          bSprintingWithMeleeAndUpperbodyAnim;                          // 0x14EC(0x0001)
    bool                                          bSprintingWithoutUpperbodyAnim;                               // 0x14ED(0x0001)
    bool                                          bSprintingViewWeapon;                                         // 0x14EE(0x0001)
    char                                          pa_14EF[0x0001]                                               // 0x14EF(0x0001)
    float                                         Enable;                                                       // 0x14F0(0x0004)
    bool                                          bSprintingNotIntoWall;                                        // 0x14F4(0x0001)
    bool                                          bProneUsingItem;                                              // 0x14F5(0x0001)
    char                                          pa_14F6[0x0002]                                               // 0x14F6(0x0002)
    FVector                                       UpperarmL;                                                    // 0x14F8(0x000C)
    FVector                                       UpperarmLMiddleSlider1;                                       // 0x1504(0x000C)
    bool                                          bNoAdditiveMontage;                                           // 0x1510(0x0001)
    char                                          pa_1511[0x0003]                                               // 0x1511(0x0003)
    float                                         UpperBodySlotAnimationRatio;                                  // 0x1514(0x0004)
    float                                         CopyIKHandGunAfterMontageRatio;                               // 0x1518(0x0004)
    float                                         Enable;                                                       // 0x151C(0x0004)
    float                                         Enable;                                                       // 0x1520(0x0004)
    float                                         Disable;                                                      // 0x1524(0x0004)
    float                                         OverrideFootLWhenMovingStop;                                  // 0x1528(0x0004)
    float                                         OverrideFootRWhenMovingStop;                                  // 0x152C(0x0004)
    float                                         Disable;                                                      // 0x1530(0x0004)
    float                                         Disable;                                                      // 0x1534(0x0004)
    bool                                          bHasZoomInOutSeq;                                             // 0x1538(0x0001)
    bool                                          bHasIdleAOSeq;                                                // 0x1539(0x0001)
    bool                                          bIsStandAndNotMoving;                                         // 0x153A(0x0001)
    bool                                          bIsCrouchOrMoving;                                            // 0x153B(0x0001)
    float                                         RecoilRatio3P;                                                // 0x153C(0x0004)
    float                                         RecoilPlayerRatio3P;                                          // 0x1540(0x0004)
    char                                          pa_1544[0x0004]                                               // 0x1544(0x0004)
    UAnimSequence*                                FireAdditive;                                                 // 0x1548(0x0008)
    bool                                          bHasFireAdditive;                                             // 0x1550(0x0001)
    char                                          pa_1551[0x0003]                                               // 0x1551(0x0003)
    FRotator                                      LookAroundOffset;                                             // 0x1554(0x000C)
    UAimOffsetBlendSpace*                         LookAround;                                                   // 0x1560(0x0008)
    float                                         FocalPointRatio;                                              // 0x1568(0x0004)
    FVector                                       FocalPoint;                                                   // 0x156C(0x000C)
    FVector                                       WeaponOffset3P;                                               // 0x1578(0x000C)
    FVector                                       WeaponOffsetSprinting1P;                                      // 0x1584(0x000C)
    FRotator                                      WeaponRotOffsetSprinting1P;                                   // 0x1590(0x000C)
    FVector                                       WeaponOffset3PAvoidSight;                                     // 0x159C(0x000C)
    bool                                          bEnableWeaponOffset3P;                                        // 0x15A8(0x0001)
    char                                          pa_15A9[0x0003]                                               // 0x15A9(0x0003)
    FVector                                       FovCorrection;                                                // 0x15AC(0x000C)
    bool                                          bIsAI;                                                        // 0x15B8(0x0001)
    char                                          pa_15B9[0x0003]                                               // 0x15B9(0x0003)
    int32_t                                       CurrentLOD;                                                   // 0x15BC(0x0004)
    char                                          pa_15C0[0x0016]                                               // 0x15C0(0x0016)
    bool                                          bPlayMontageAddjustAddjustGrip;                               // 0x15D6(0x0001)
    char                                          pa_15D7[0x0001]                                               // 0x15D7(0x0001)
    float                                         GripAdjustLeftHandBlendWeight;                                // 0x15D8(0x0004)
    float                                         GripAdjustRightHandBlendWeight;                               // 0x15DC(0x0004)
    USGCharacterAnimationSetsPerCharacterSex*     CurrentCharacterAnimationSetsPerCharacterSex;                 // 0x15E0(0x0008)
    USGPerWeaponAnimationSets*                    CurrentPerWeaponAnimationSetsClass;                           // 0x15E8(0x0008)
    USGPerWeaponAnimationSets*                    CurrentPerWeaponAnimationSetsClass;                           // 0x15F0(0x0008)
    enum class EMovementStance                    FromMovementStance;                                           // 0x15F8(0x0001)
    enum class EMovementStance                    ToMovementStance;                                             // 0x15F9(0x0001)
    enum class EAnimStance                        FromAnimStance;                                               // 0x15FA(0x0001)
    enum class EAnimStance                        ToAnimStance;                                                 // 0x15FB(0x0001)
    char                                          pa_15FC[0x0004]                                               // 0x15FC(0x0004)
};


// ScriptStruct  Engine.InterpolationParameter
// Struct Size::0x0008
struct FInterpolationParameter
{
    float                                         InterpolationTime;                                            // 0x0000(0x0004)
    enum class EFilterInterpolationType           InterpolationType;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  SGFramework.SGCharacterAnimInstanceProxyLOD
// Struct Size::0x1640
struct FSGCharacterAnimInstanceProxyLOD : public FSGCharacterAnimInstanceProxyBase
{
    char                                          pa_1600[0x0030]                                               // 0x1600(0x0030)
    float                                         LocomotionHandIK;                                             // 0x1630(0x0004)
    char                                          pa_1634[0x000C]                                               // 0x1634(0x000C)
};


// ScriptStruct  SGFramework.SGCharacterAnimInstanceProxy
// Struct Size::0x1650
struct FSGCharacterAnimInstanceProxy : public FSGCharacterAnimInstanceProxyLOD
{
    USGCharacterCastShadowComponent*              CachedCastShadowComponent;                                    // 0x1640(0x0008)
    char                                          pa_1648[0x0008]                                               // 0x1648(0x0008)
};


// ScriptStruct  SGFramework.SpineOffsetPreset
// Struct Size::0x0018
struct FSpineOffsetPreset
{
    FVector                                       TranslationOffset;                                            // 0x0000(0x000C)
    FVector                                       TranslationOffsetAccordingToPitch;                            // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.SGTPPRecoilConfig
// Struct Size::0x0048
struct FSGTPPRecoilConfig
{
    UCurveFloat*                                  AccumulateCurve;                                              // 0x0000(0x0008)
    UCurveFloat*                                  BlendOutCurve;                                                // 0x0008(0x0008)
    FAlphaBlend                                   Blend;                                                        // 0x0010(0x0030)
    float                                         CurrentValue;                                                 // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.SGCharacterAnimReducer
// Struct Size::0x0070
struct FSGCharacterAnimReducer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          bIsSwitchingPose;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UAnimSequence*                                CurrentBasePose;                                              // 0x0010(0x0008)
    UAnimSequence*                                TargetBasePose;                                               // 0x0018(0x0008)
    float                                         BodyAlpha;                                                    // 0x0020(0x0004)
    float                                         LeftLegAlpha;                                                 // 0x0024(0x0004)
    float                                         RightLegAlpha;                                                // 0x0028(0x0004)
    float                                         PelvisWeight;                                                 // 0x002C(0x0004)
    float                                         LeftFootWeight;                                               // 0x0030(0x0004)
    float                                         RightFootWeight;                                              // 0x0034(0x0004)
    float                                         HandAlpha;                                                    // 0x0038(0x0004)
    float                                         SwitchPoseTime;                                               // 0x003C(0x0004)
    UCurveFloat*                                  BodyAlphaCurve;                                               // 0x0040(0x0008)
    UCurveFloat*                                  LeftLegAlphaCurve;                                            // 0x0048(0x0008)
    UCurveFloat*                                  RightLegAlphaCurve;                                           // 0x0050(0x0008)
    UCurveFloat*                                  DistanceToMaxFootAdditiveWeightCurve;                         // 0x0058(0x0008)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
};


// ScriptStruct  SGFramework.HeadSubGroupInfo
// Struct Size::0x000C
struct FHeadSubGroupInfo
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    enum class EHeadHitSubGroupType               HeadHitSubGroupType;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  SGFramework.AvatarPreloadAsset
// Struct Size::0x0020
struct FAvatarPreloadAsset
{
    bool                                          bStaticMesh;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UStreamableRenderAsset*                       StaticAsset;                                                  // 0x0008(0x0008)
    UStreamableRenderAsset*                       MaleAsset;                                                    // 0x0010(0x0008)
    UStreamableRenderAsset*                       FemaleAsset;                                                  // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGAvatarData
// Struct Size::0x0020
struct FSGAvatarData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int64_t                                       AvatarID;                                                     // 0x0008(0x0008)
    ASGInventory*                                 AvatarClass;                                                  // 0x0010(0x0008)
    int32_t                                       bPutOnOrTakeOff;                                              // 0x0018(0x0004)
    bool                                          bIsIgnoredAvatar3P;                                           // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  SGFramework.RepTurnInPlaceAnimMontage
// Struct Size::0x0010
struct FRepTurnInPlaceAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    char                                          ForcePlayBit;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  SGFramework.SGTurnInPlaceAnimationConfig
// Struct Size::0x0030
struct FSGTurnInPlaceAnimationConfig
{
    UAnimMontage*                                 TurnLeft90;                                                   // 0x0000(0x0008)
    UAnimMontage*                                 TurnRight90;                                                  // 0x0008(0x0008)
    UAnimMontage*                                 TurnLeft90;                                                   // 0x0010(0x0008)
    UAnimMontage*                                 TurnRight90;                                                  // 0x0018(0x0008)
    UAnimMontage*                                 TurnLeft90;                                                   // 0x0020(0x0008)
    UAnimMontage*                                 TurnRight90;                                                  // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.BadgeAttachInfo
// Struct Size::0x0040
struct FBadgeAttachInfo
{
    USGInventoryEquipMeshComponent*               AttachEquipMeshComp;                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    AttachOffset;                                                 // 0x0010(0x0030)
};


// ScriptStruct  SGFramework.WeaponMeshWaitToAttach
// Struct Size::0x0050
struct FWeaponMeshWaitToAttach
{
    TMap<ASGInventory*,UMeshComponent*>           WaitToAttachMap;                                              // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SGCharacterCaptureAnimInstanceProxy
// Struct Size::0x08E0
struct FSGCharacterCaptureAnimInstanceProxy : public FAnimInstanceProxy
{
    FVector                                       HandWeaponOffset;                                             // 0x0860(0x000C)
    bool                                          bIsEmptyHand;                                                 // 0x086C(0x0001)
    bool                                          bHasCasualSeq;                                                // 0x086D(0x0001)
    bool                                          bHasReargrip;                                                 // 0x086E(0x0001)
    char                                          pa_086F[0x0001]                                               // 0x086F(0x0001)
    float                                         GripPoseAdjustmentAlpha;                                      // 0x0870(0x0004)
    float                                         CasualGripBSAplha;                                            // 0x0874(0x0004)
    float                                         RearGripTypeAlpha;                                            // 0x0878(0x0004)
    float                                         ForegripTypeAlpha;                                            // 0x087C(0x0004)
    float                                         Disable;                                                      // 0x0880(0x0004)
    float                                         Disable;                                                      // 0x0884(0x0004)
    float                                         Enable;                                                       // 0x0888(0x0004)
    float                                         Enable;                                                       // 0x088C(0x0004)
    FVector                                       ForeGripOffset;                                               // 0x0890(0x000C)
    char                                          pa_089C[0x0004]                                               // 0x089C(0x0004)
    UBlendSpace1D*                                RearGripCasualBS;                                             // 0x08A0(0x0008)
    UBlendSpace1D*                                CasualGripBS;                                                 // 0x08A8(0x0008)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x08B0(0x0008)
    UAnimSequence*                                CasualIdleSeq;                                                // 0x08B8(0x0008)
    USGCharacterCaptureAnimInstance*              SGAnimInstance;                                               // 0x08C0(0x0008)
    ACharacter*                                   OwnerCharacter;                                               // 0x08C8(0x0008)
    ASGCharacterCaptureActor*                     SGCaptureCharacter;                                           // 0x08D0(0x0008)
    char                                          pa_08D8[0x0008]                                               // 0x08D8(0x0008)
};


// ScriptStruct  SGFramework.DebugPhysicsBodyInfos
// Struct Size::0x0040
struct FDebugPhysicsBodyInfos
{
    bool                                          bEnable;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FDebugBoxBodyInfo>                     BoxBodies;                                                    // 0x0008(0x0010)
    TArray<FDebugCapsuleBodyInfo>                 CapsuleBodies;                                                // 0x0018(0x0010)
    FVector                                       ServerLocation;                                               // 0x0028(0x000C)
    FRotator                                      ServerRotation;                                               // 0x0034(0x000C)
};


// ScriptStruct  SGFramework.DebugCapsuleBodyInfo
// Struct Size::0x0030
struct FDebugCapsuleBodyInfo
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    float                                         Radius;                                                       // 0x0020(0x0004)
    float                                         HalfHeight;                                                   // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.DebugBoxBodyInfo
// Struct Size::0x0030
struct FDebugBoxBodyInfo
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FVector                                       BoxExtent;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.DogTagCreateInfo
// Struct Size::0x0070
struct FDogTagCreateInfo
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    int32_t                                       PlayerLevel;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    uint64_t                                      DeathTime;                                                    // 0x0018(0x0008)
    FString                                       KillerPlayerName;                                             // 0x0020(0x0010)
    uint64_t                                      KillerPlayerWeaponID;                                         // 0x0030(0x0008)
    enum class ECharacterType                     KillerCharacterType;                                          // 0x0038(0x0001)
    bool                                          IsSameTeam;                                                   // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    FString                                       MapName;                                                      // 0x0040(0x0010)
    int32_t                                       DeathReason;                                                  // 0x0050(0x0004)
    int32_t                                       PlayerRank;                                                   // 0x0054(0x0004)
    uint32_t                                      GOpenID;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    uint64_t                                      GID;                                                          // 0x0060(0x0008)
    int32_t                                       NationalFlagIso;                                              // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  SGFramework.CharacterDeathInfo
// Struct Size::0x0050
struct FCharacterDeathInfo
{
    bool                                          bIsDead;                                                      // 0x0000(0x0001)
    bool                                          bForceDied;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Timestamp;                                                    // 0x0004(0x0004)
    int32_t                                       DeathCount;                                                   // 0x0008(0x0004)
    FVector                                       DeathLocation;                                                // 0x000C(0x000C)
    FRotator                                      DeathRotation;                                                // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    AActor*                                       DamageCauser;                                                 // 0x0028(0x0008)
    enum class ESGDamageCauserType                DamageCauserType;                                             // 0x0030(0x0001)
    enum class ECharacterEnduranceType            DeathBodyPart;                                                // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    FVector                                       Momentum;                                                     // 0x0034(0x000C)
    bool                                          bPenetrateArmor;                                              // 0x0040(0x0001)
    enum class EAnimStance                        DeathAnimationState;                                          // 0x0041(0x0001)
    enum class EHitGroupType                      HitGroup;                                                     // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
    UAnimMontage*                                 DeathAnimation;                                               // 0x0048(0x0008)
};


// ScriptStruct  SGFramework.SGClientMoveInfo
// Struct Size::0x0008
struct FSGClientMoveInfo
{
    float                                         ClientTimeStamp;                                              // 0x0000(0x0004)
    float                                         DeltaTime;                                                    // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.SGServerMoveResult
// Struct Size::0x0010
struct FSGServerMoveResult
{
    float                                         ClientTimeStamp;                                              // 0x0000(0x0004)
    float                                         DeltaTime;                                                    // 0x0004(0x0004)
    enum class EServerMoveResultType              MoveResultType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       MoveType;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGCharacterDebugMovementInfo
// Struct Size::0x005C
struct FSGCharacterDebugMovementInfo
{
    float                                         MaxSpeed;                                                     // 0x0000(0x0004)
    FVector                                       Velocity;                                                     // 0x0004(0x000C)
    FVector                                       Acceleration;                                                 // 0x0010(0x000C)
    FVector                                       CharacterLocation;                                            // 0x001C(0x000C)
    FRotator                                      CharacterRotation;                                            // 0x0028(0x000C)
    float                                         TotalWeaponMovementSpeedScale;                                // 0x0034(0x0004)
    float                                         ShootingSpeedScale;                                           // 0x0038(0x0004)
    float                                         ReloadMovingScale;                                            // 0x003C(0x0004)
    float                                         ADSZoomMovingScale;                                           // 0x0040(0x0004)
    float                                         MovementAbilitySpeedScale;                                    // 0x0044(0x0004)
    float                                         OverweightMovingScale;                                        // 0x0048(0x0004)
    float                                         EquipmentMovingScale;                                         // 0x004C(0x0004)
    float                                         JumpXYVelocityScale;                                          // 0x0050(0x0004)
    float                                         JumpZVelocityScale;                                           // 0x0054(0x0004)
    bool                                          IsSprinting;                                                  // 0x0058(0x0001)
    enum class ECharacterSprintFailureReason      SprintFailureReason;                                          // 0x0059(0x0001)
    char                                          pa_005A[0x0002]                                               // 0x005A(0x0002)
};


// ScriptStruct  SGFramework.DeliverCargosAnimConfTableRow
// Struct Size::0x00E0
struct FDeliverCargosAnimConfTableRow : public FTableRowBase
{
    FDeliverCargosRelevantAnimInfo                DeliverCargosAnimInfo;                                        // 0x0008(0x00D8)
};


// ScriptStruct  SGFramework.DeliverCargosRelevantAnimInfo
// Struct Size::0x00D8
struct FDeliverCargosRelevantAnimInfo
{
    TArray<int32_t>                               RelevantIDArr;                                                // 0x0000(0x0010)
    FDeliverCargosAnimInfo                        AnimInfo;                                                     // 0x0010(0x00C8)
};


// ScriptStruct  SGFramework.SGCharacterEnduranceExtraCureContext
// Struct Size::0x0070
struct FSGCharacterEnduranceExtraCureContext
{
    float                                         Vaule;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FGameplayAttribute                            TargetAttribute;                                              // 0x0008(0x0038)
    AActor*                                       TargetActor;                                                  // 0x0040(0x0008)
    AActor*                                       SourceActor;                                                  // 0x0048(0x0008)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    AActor*                                       EffectCauser;                                                 // 0x0058(0x0008)
    UGameplayAbility*                             ContextGA;                                                    // 0x0060(0x0008)
    int32_t                                       LastCureCount;                                                // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  SGFramework.CharacterEnduranceAbility
// Struct Size::0x0160
struct FCharacterEnduranceAbility
{
    FCharacterEnduranceDebuffAbility              BleedDebuffAbilitiesByChance;                                 // 0x0000(0x0030)
    FCharacterEnduranceDebuffAbility              PainDebuffAbilitiesByChance;                                  // 0x0030(0x0028)
    FCharacterEnduranceDebuffAbility              BoneBreakDebuffAbilitiesByChance;                             // 0x0058(0x0028)
    FCharacterEnduranceDebuffAbility              TunnelVisonDebuffAbilitiesByChance;                           // 0x0080(0x0028)
    FCharacterEnduranceDebuffAbility              FreshWoundDebuffAbilitiesByChance;                            // 0x00A8(0x0028)
    FCharacterEnduranceDebuffAbility              TinnitusDebuffAbilities;                                      // 0x00D0(0x0028)
    FCharacterEnduranceDebuffAbility              StunDebuffAbilities;                                          // 0x00F8(0x0028)
    UGameplayAbility*                             AutoRecoverAbilityClass;                                      // 0x0120(0x0008)
    UGameplayAbility*                             ForbiddenAutoRecoverByTakeDamageAbilityClass;                 // 0x0128(0x0008)
    UGameplayAbility*                             InfiniteForbiddenAutoRecoverByTakeDamageAbilityClass;         // 0x0130(0x0008)
    UGameplayAbility*                             OutOfEnduranceAbilityClass;                                   // 0x0138(0x0008)
    bool                                          bSpreadDamageToOthersWhenOutOfEndurance;                      // 0x0140(0x0001)
    char                                          pa_0141[0x0003]                                               // 0x0141(0x0003)
    float                                         SpreadDamageScale;                                            // 0x0144(0x0004)
    float                                         EffectDuration;                                               // 0x0148(0x0004)
    char                                          pa_014C[0x0014]                                               // 0x014C(0x0014)
};


// ScriptStruct  SGFramework.CharacterEnduranceDebuffAbility
// Struct Size::0x0028
struct FCharacterEnduranceDebuffAbility
{
    float                                         ChanceToTrigger;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UGameplayAbility*                             DebuffAbilityClass;                                           // 0x0008(0x0008)
    UCurveFloat*                                  TriggerChanceCurve;                                           // 0x0010(0x0008)
    UCurveFloat*                                  DurationTimeCurve;                                            // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.CharacterEnduranceDebuffAbility
// Struct Size::0x0028
struct FCharacterEnduranceDebuffAbility : public FCharacterEnduranceDebuffAbility
{
};


// ScriptStruct  SGFramework.CharacterEnduranceDebuffAbility
// Struct Size::0x0028
struct FCharacterEnduranceDebuffAbility : public FCharacterEnduranceDebuffAbility
{
};


// ScriptStruct  SGFramework.CharacterEnduranceDebuffAbility
// Struct Size::0x0030
struct FCharacterEnduranceDebuffAbility : public FCharacterEnduranceDebuffAbility
{
    float                                         TrapTriggerChance;                                            // 0x0028(0x0004)
    float                                         BurnTriggerChance;                                            // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SGCharacterFacialAnimationSetsPerCharacterSex
// Struct Size::0x0150
struct FSGCharacterFacialAnimationSetsPerCharacterSex
{
    TMap<FString,UAnimMontage*>                   FacialAnimations;                                             // 0x0000(0x0050)
    TMap<FString,TSoftObjectPtr<UAnimSequence>>   DTFacialAnimaSequences;                                       // 0x0050(0x0050)
    FSGRandomMontageList                          DTRandomMontageList;                                          // 0x00A0(0x0010)
    TMap<FName,FSGRandomMontageList>              ZDRandomMontageLists;                                         // 0x00B0(0x0050)
    TMap<FName,FSGRandomMontageList>              JSRandomMontageLists;                                         // 0x0100(0x0050)
};


// ScriptStruct  SGFramework.SGCharacterFacialAnimInstanceProxy
// Struct Size::0x08F0
struct FSGCharacterFacialAnimInstanceProxy : public FAnimInstanceProxy
{
    UAnimSequence*                                FacialAnimeSeq;                                               // 0x0860(0x0008)
    float                                         bShouldBlendMouth;                                            // 0x0868(0x0004)
    char                                          pa_086C[0x0004]                                               // 0x086C(0x0004)
    USGCharacterFacialAnimInstance*               SGAnimInstance;                                               // 0x0870(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0878(0x0008)
    float                                         StartTimeOffset;                                              // 0x0880(0x0004)
    float                                         bIsEquipMask;                                                 // 0x0884(0x0004)
    float                                         ControlRigAimWeight;                                          // 0x0888(0x0004)
    FVector                                       EyeAimPosition;                                               // 0x088C(0x000C)
    FVector2D                                     FaceAimControl;                                               // 0x0898(0x0008)
    bool                                          bUseFacialAnimation;                                          // 0x08A0(0x0001)
    bool                                          bDTCharacter;                                                 // 0x08A1(0x0001)
    bool                                          bZDCharacter;                                                 // 0x08A2(0x0001)
    bool                                          bJSCharacter;                                                 // 0x08A3(0x0001)
    bool                                          bPMCCharacter;                                                // 0x08A4(0x0001)
    bool                                          bScavCharacter;                                               // 0x08A5(0x0001)
    char                                          pa_08A6[0x0002]                                               // 0x08A6(0x0002)
    FName                                         ZDCharacterTag;                                               // 0x08A8(0x0008)
    FName                                         JSCharacterTag;                                               // 0x08B0(0x0008)
    TArray<UAnimMontage*>                         DTRandomMontageList;                                          // 0x08B8(0x0010)
    TArray<UAnimMontage*>                         ZDRandomMontageList;                                          // 0x08C8(0x0010)
    TArray<UAnimMontage*>                         JSRandomMontageList;                                          // 0x08D8(0x0010)
    char                                          pa_08E8[0x0008]                                               // 0x08E8(0x0008)
};


// ScriptStruct  SGFramework.FlashData
// Struct Size::0x0028
struct FFlashData
{
    float                                         EffectInfulenceFactor;                                        // 0x0000(0x0004)
    float                                         FlashDurationTime;                                            // 0x0004(0x0004)
    float                                         FadeoutTime;                                                  // 0x0008(0x0004)
    float                                         FlashLightCircleFadeoutTime;                                  // 0x000C(0x0004)
    float                                         DistortionFadeoutTime;                                        // 0x0010(0x0004)
    FVector                                       FlashBangWorldLocation;                                       // 0x0014(0x000C)
    enum class ESGThrowSubType                    ThrowSubType;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         TimeSeconds;                                                  // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.SoundSourceTypeFSoundInfluenceFactor
// Struct Size::0x0050
struct FSoundSourceTypeFSoundInfluenceFactor
{
    TMap<enum class ESoundSourceType,FSoundInfluenceFactor>SourceTypeInfluenceFactor;                           // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SoundInfluenceFactor
// Struct Size::0x0008
struct FSoundInfluenceFactor
{
    float                                         LevelInfluence;                                               // 0x0000(0x0004)
    float                                         MaxDistanceInfluence;                                         // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.FootAudioSettings
// Struct Size::0x0020
struct FFootAudioSettings
{
    float                                         FootstepInterval;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAkAudioEvent*                                FootstepAudioEvent;                                           // 0x0008(0x0008)
    float                                         FoleyDelay;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UAkAudioEvent*                                FoleyAudioEvent;                                              // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterFootIKAnimInstanceProxy
// Struct Size::0x0920
struct FSGCharacterFootIKAnimInstanceProxy : public FAnimInstanceProxy
{
    FVector                                       IKFoot;                                                       // 0x0860(0x000C)
    FRotator                                      FootLock;                                                     // 0x086C(0x000C)
    FVector                                       FootLock;                                                     // 0x0878(0x000C)
    float                                         FootLock;                                                     // 0x0884(0x0004)
    FRotator                                      FootLock;                                                     // 0x0888(0x000C)
    FVector                                       FootLock;                                                     // 0x0894(0x000C)
    float                                         FootLock;                                                     // 0x08A0(0x0004)
    FVector                                       FootOffset;                                                   // 0x08A4(0x000C)
    FRotator                                      FootOffset;                                                   // 0x08B0(0x000C)
    FVector                                       FootOffset;                                                   // 0x08BC(0x000C)
    FRotator                                      FootOffset;                                                   // 0x08C8(0x000C)
    FVector                                       PelvisOffset;                                                 // 0x08D4(0x000C)
    float                                         FootIKAlpha;                                                  // 0x08E0(0x0004)
    FRotator                                      ThighOffset;                                                  // 0x08E4(0x000C)
    FRotator                                      ThighOffset;                                                  // 0x08F0(0x000C)
    bool                                          bIsProne;                                                     // 0x08FC(0x0001)
    bool                                          bShouldUpdateFootIK;                                          // 0x08FD(0x0001)
    char                                          pa_08FE[0x0002]                                               // 0x08FE(0x0002)
    float                                         bInOrTransTacticalPistolState;                                // 0x0900(0x0004)
    char                                          pa_0904[0x0004]                                               // 0x0904(0x0004)
    USGCharacterFootIKAnimInstance*               SGAnimInstance;                                               // 0x0908(0x0008)
    UAnimInstance*                                SGMainAnimInstance;                                           // 0x0910(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0918(0x0008)
};


// ScriptStruct  SGFramework.ThrowableWeaponBanInfo
// Struct Size::0x0038
struct FThrowableWeaponBanInfo
{
    int32_t                                       RowNum;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    uint64_t                                      GrenadeItemId;                                                // 0x0008(0x0008)
    uint32_t                                      HitGroup;                                                     // 0x0010(0x0004)
    float                                         DamageThres;                                                  // 0x0014(0x0004)
    int32_t                                       DamageTimes;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               TimesThres;                                                   // 0x0020(0x0010)
    uint64_t                                      BanNumber;                                                    // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.ScreenEffectConfArray
// Struct Size::0x0018
struct FScreenEffectConfArray
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    bool                                          ApplyCurve;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         DefaultValue;                                                 // 0x000C(0x0004)
    UCurveFloat*                                  Curve;                                                        // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterHandIKAnimInstanceProxy
// Struct Size::0x09D0
struct FSGCharacterHandIKAnimInstanceProxy : public FAnimInstanceProxy
{
    bool                                          bShouldUpdateHandIK;                                          // 0x0860(0x0001)
    char                                          pa_0861[0x0003]                                               // 0x0861(0x0003)
    float                                         Enable;                                                       // 0x0864(0x0004)
    float                                         Enable;                                                       // 0x0868(0x0004)
    float                                         Enable;                                                       // 0x086C(0x0004)
    float                                         Enable;                                                       // 0x0870(0x0004)
    float                                         Enable;                                                       // 0x0874(0x0004)
    float                                         Enable;                                                       // 0x0878(0x0004)
    char                                          pa_087C[0x0018]                                               // 0x087C(0x0018)
    float                                         ArmStretch;                                                   // 0x0894(0x0004)
    FVector                                       ArmStretch;                                                   // 0x0898(0x000C)
    FVector                                       HandWeaponOffset;                                             // 0x08A4(0x000C)
    FVector                                       HandWeaponOffset;                                             // 0x08B0(0x000C)
    FRotator                                      HandWeaponOffset;                                             // 0x08BC(0x000C)
    FVector                                       LeftHandJointOffset;                                          // 0x08C8(0x000C)
    FVector                                       RightHandJointOffset;                                         // 0x08D4(0x000C)
    FVector                                       LeftArmOffset;                                                // 0x08E0(0x000C)
    FVector                                       RightHandOffset;                                              // 0x08EC(0x000C)
    FVector                                       RightArmAimOffset;                                            // 0x08F8(0x000C)
    FVector                                       HandOffset;                                                   // 0x0904(0x000C)
    float                                         Enable;                                                       // 0x0910(0x0004)
    FVector                                       HandOffset;                                                   // 0x0914(0x000C)
    bool                                          bShouldModified;                                              // 0x0920(0x0001)
    char                                          pa_0921[0x0003]                                               // 0x0921(0x0003)
    FVector                                       ModifiedLocation;                                             // 0x0924(0x000C)
    bool                                          bShouldModified;                                              // 0x0930(0x0001)
    bool                                          bShouldModified;                                              // 0x0931(0x0001)
    bool                                          bDisableModified;                                             // 0x0932(0x0001)
    char                                          pa_0933[0x0001]                                               // 0x0933(0x0001)
    FVector                                       ModifiedLocation;                                             // 0x0934(0x000C)
    FVector                                       ModifiedLocation;                                             // 0x0940(0x000C)
    float                                         Enable;                                                       // 0x094C(0x0004)
    float                                         bShouldCopyRightToGun;                                        // 0x0950(0x0004)
    FVector                                       LeftHandParentBoneSpaceOffset;                                // 0x0954(0x000C)
    float                                         LeftHandParentBoneSpaceAlpha;                                 // 0x0960(0x0004)
    FVector                                       RightHandParentBoneSpaceOffset;                               // 0x0964(0x000C)
    float                                         RightHandParentBoneSpaceAlpha;                                // 0x0970(0x0004)
    bool                                          bIsPrviewCharacter;                                           // 0x0974(0x0001)
    enum class EWeaponType                        WeaponStance;                                                 // 0x0975(0x0001)
    bool                                          bIsUsingItem;                                                 // 0x0976(0x0001)
    bool                                          bIsRescuingTeammate;                                          // 0x0977(0x0001)
    float                                         bTacticalPistol;                                              // 0x0978(0x0004)
    float                                         bInOrTransTacticalPistolState;                                // 0x097C(0x0004)
    float                                         bTacticalPistolAiming;                                        // 0x0980(0x0004)
    float                                         bShouldTacticalPistolCopyItemr;                               // 0x0984(0x0004)
    float                                         TacticalPistolHandOffsetAlpha;                                // 0x0988(0x0004)
    FVector                                       TacticalLeftHandOffset;                                       // 0x098C(0x000C)
    FVector                                       TacticalRightHandOffset;                                      // 0x0998(0x000C)
    char                                          pa_09A4[0x0004]                                               // 0x09A4(0x0004)
    USGCharacterHandIKAnimInstance*               SGAnimInstance;                                               // 0x09A8(0x0008)
    USGCharacterAnimInstance*                     SGMainAnimInstance;                                           // 0x09B0(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x09B8(0x0008)
    ASGWeapon*                                    SGWeapon;                                                     // 0x09C0(0x0008)
    char                                          pa_09C8[0x0008]                                               // 0x09C8(0x0008)
};


// ScriptStruct  SGFramework.SGHoldInputRecord
// Struct Size::0x0018
struct FSGHoldInputRecord
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.SGHoldInputBehavior
// Struct Size::0x0030
struct FSGHoldInputBehavior
{
    FGameplayTagContainer                         TagsToWait;                                                   // 0x0000(0x0020)
    TArray<FName>                                 ActionsToOverride;                                            // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.FHostedInteractAnimConfTableRow
// Struct Size::0x00F8
struct FFHostedInteractAnimConfTableRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Describe;                                                     // 0x0010(0x0010)
    FHostedInteractAnimInfo                       HostedInteractAnimInfo;                                       // 0x0020(0x0060)
    enum class EHostedInteractRule                HostedInteractRule;                                           // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    int32_t                                       MaxHostedInteractCount;                                       // 0x0084(0x0004)
    FSoftObjectPath                               InteractIconResource;                                         // 0x0088(0x0018)
    FSoftObjectPath                               InteractingIconResource;                                      // 0x00A0(0x0018)
    FString                                       InteractDisplay;                                              // 0x00B8(0x0010)
    FString                                       InteractingDisplay;                                           // 0x00C8(0x0010)
    TArray<FInteractInventoryInfo>                CostInventoryInfos;                                           // 0x00D8(0x0010)
    FString                                       CostInventoryDeficiencyTips;                                  // 0x00E8(0x0010)
};


// ScriptStruct  SGFramework.InteractInventoryInfo
// Struct Size::0x0018
struct FInteractInventoryInfo
{
    int64_t                                       ItemId;                                                       // 0x0000(0x0008)
    ASGInventory*                                 InventoryClass;                                               // 0x0008(0x0008)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    enum class ESGInteractCostType                CostType;                                                     // 0x0014(0x0001)
    bool                                          OnlyCheck;                                                    // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  SGFramework.HostedInteractAnimInfo
// Struct Size::0x0060
struct FHostedInteractAnimInfo
{
    float                                         ForwardDis;                                                   // 0x0000(0x0004)
    float                                         RightDis;                                                     // 0x0004(0x0004)
    int32_t                                       LoopCount;                                                    // 0x0008(0x0004)
    float                                         DurationOnceTime;                                             // 0x000C(0x0004)
    float                                         MoveToTargetOverTime;                                         // 0x0010(0x0004)
    float                                         RotationInterpSpeed;                                          // 0x0014(0x0004)
    float                                         PlayRate;                                                     // 0x0018(0x0004)
    FName                                         StartSectionName;                                             // 0x001C(0x0008)
    float                                         StartTimeSeconds;                                             // 0x0024(0x0004)
    float                                         BlendInTime;                                                  // 0x0028(0x0004)
    float                                         BlendOutTime;                                                 // 0x002C(0x0004)
    bool                                          bEnableAutoBlendOut;                                          // 0x0030(0x0001)
    bool                                          bStopAllMontages;                                             // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    UAnimMontage*                                 StartMontage;                                                 // 0x0038(0x0008)
    UAnimMontage*                                 LoopMontage;                                                  // 0x0040(0x0008)
    UAnimMontage*                                 EndMontage;                                                   // 0x0048(0x0008)
    UAnimMontage*                                 InventoryLoopMontage;                                         // 0x0050(0x0008)
    UAnimInstance*                                InventoryAnimInstance;                                        // 0x0058(0x0008)
};


// ScriptStruct  SGFramework.KeyDoorTagetInfo
// Struct Size::0x0028
struct FKeyDoorTagetInfo
{
    FVector                                       DoorLocation;                                                 // 0x0000(0x000C)
    FVector                                       FaceDirection;                                                // 0x000C(0x000C)
    FVector                                       LockLocation;                                                 // 0x0018(0x000C)
    float                                         MoveDuration;                                                 // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.KeyDoorIKInfo
// Struct Size::0x0058
struct FKeyDoorIKInfo
{
    bool                                          EnableIK;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         KeyAttachDelayTime;                                           // 0x0004(0x0004)
    float                                         KeyDetachDelayTime;                                           // 0x0008(0x0004)
    FVector                                       LockLocation;                                                 // 0x000C(0x000C)
    FVector                                       ShoulderLocation;                                             // 0x0018(0x000C)
    FRotator                                      ShoulderRotator;                                              // 0x0024(0x000C)
    TSoftObjectPtr<USkeletalMesh>                 KeySkeletalMeshTemplate;                                      // 0x0030(0x0028)
};


// ScriptStruct  SGFramework.PreOccupiedContainerList
// Struct Size::0x0010
struct FPreOccupiedContainerList
{
    TArray<ASGInventory*>                         ContainerInvList;                                             // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SpawnActorInfo
// Struct Size::0x0048
struct FSpawnActorInfo
{
    AActor*                                       PreviewActor;                                                 // 0x0000(0x0008)
    float                                         PreviewDis;                                                   // 0x0008(0x0004)
    float                                         MinDisSquared;                                                // 0x000C(0x0004)
    UObject*                                      ActorToSpawnClass;                                            // 0x0010(0x0008)
    FVector                                       BoxExtent;                                                    // 0x0018(0x000C)
    float                                         ActorLocUpTraceDis;                                           // 0x0024(0x0004)
    float                                         ActorLocDownTraceDis;                                         // 0x0028(0x0004)
    FVector                                       CameraLoc;                                                    // 0x002C(0x000C)
    FVector                                       TargetLoc;                                                    // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.ContainerSearchingInfo
// Struct Size::0x0028
struct FContainerSearchingInfo
{
    USGInventoryContainerSearchingComponent*      ContainerSearchingCom;                                        // 0x0000(0x0008)
    bool                                          IsPendingStartAutoSearch;                                     // 0x0008(0x0001)
    bool                                          IsInAutoSearching;                                            // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         RoughSearchFinishTime;                                        // 0x000C(0x0004)
    USGInventorySearchComponent*                  CurAutoSearchingInventorySearchCom;                           // 0x0010(0x0008)
    float                                         DetailSearchFinishTime;                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       BeginSeachTimeStamp;                                          // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.CharacterLeanParams
// Struct Size::0x0028
struct FCharacterLeanParams
{
    float                                         LeanRollOffset;                                               // 0x0000(0x0004)
    FVector                                       LeanLOffset;                                                  // 0x0004(0x000C)
    FVector                                       LeanROffset;                                                  // 0x0010(0x000C)
    float                                         LeanInterpSpeedLRToCenter;                                    // 0x001C(0x0004)
    float                                         LeanInterpSpeedCenterToLR;                                    // 0x0020(0x0004)
    float                                         LeanInterpSpeedLRToOtherSide;                                 // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.ProtectCacheComponent
// Struct Size::0x0010
struct FProtectCacheComponent
{
    UActorComponent*                              HiddenComponent;                                              // 0x0000(0x0008)
    bool                                          bCastShadow;                                                  // 0x0008(0x0001)
    bool                                          bHiddenInGame;                                                // 0x0009(0x0001)
    bool                                          bVisible;                                                     // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  SGFramework.SGCharacterLocomotionAnimInstanceProxy
// Struct Size::0x0D90
struct FSGCharacterLocomotionAnimInstanceProxy : public FAnimInstanceProxy
{
    UAnimSequence*                                Stand;                                                        // 0x0860(0x0008)
    UAnimSequence*                                Idle;                                                         // 0x0868(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0870(0x0008)
    enum class ELocomotionType                    Stand;                                                        // 0x0878(0x0001)
    char                                          pa_0879[0x0007]                                               // 0x0879(0x0007)
    UAnimSequence*                                Stand;                                                        // 0x0880(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0888(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0890(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0898(0x0008)
    UAnimSequence*                                Crouch;                                                       // 0x08A0(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x08A8(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x08B0(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x08B8(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x08C0(0x0008)
    UAnimSequence*                                Prone;                                                        // 0x08C8(0x0008)
    UBlendSpace*                                  Prone;                                                        // 0x08D0(0x0008)
    UBlendSpace*                                  Prone;                                                        // 0x08D8(0x0008)
    UBlendSpace*                                  Prone;                                                        // 0x08E0(0x0008)
    UBlendSpace*                                  Prone;                                                        // 0x08E8(0x0008)
    UAnimSequence*                                DBNO;                                                         // 0x08F0(0x0008)
    UBlendSpace*                                  DBNO;                                                         // 0x08F8(0x0008)
    UBlendSpace*                                  DBNO;                                                         // 0x0900(0x0008)
    UBlendSpace*                                  DBNO;                                                         // 0x0908(0x0008)
    UBlendSpace*                                  DBNO;                                                         // 0x0910(0x0008)
    UAnimSequence*                                Current;                                                      // 0x0918(0x0008)
    UBlendSpace*                                  TransitionAnimationSet;                                       // 0x0920(0x0008)
    UAnimSequence*                                StandToCrouch;                                                // 0x0928(0x0008)
    UAnimSequence*                                StandToProne;                                                 // 0x0930(0x0008)
    UAnimSequence*                                RunToSprint;                                                  // 0x0938(0x0008)
    UAnimSequence*                                SprintToRun;                                                  // 0x0940(0x0008)
    UAnimSequence*                                RunToSprintRight;                                             // 0x0948(0x0008)
    UAnimSequence*                                SprintToRunRight;                                             // 0x0950(0x0008)
    UAnimSequence*                                SprintToProne;                                                // 0x0958(0x0008)
    UAnimSequence*                                CrouchToStand;                                                // 0x0960(0x0008)
    UAnimSequence*                                CrouchToProne;                                                // 0x0968(0x0008)
    UAnimSequence*                                ProneToStand;                                                 // 0x0970(0x0008)
    UAnimSequence*                                ProneToCrouch;                                                // 0x0978(0x0008)
    UAnimSequence*                                StandToDBNO;                                                  // 0x0980(0x0008)
    UAnimSequence*                                SprintToDBNO;                                                 // 0x0988(0x0008)
    UAnimSequence*                                CrouchToDBNO;                                                 // 0x0990(0x0008)
    UAnimSequence*                                ProneToDBNO;                                                  // 0x0998(0x0008)
    UAnimSequence*                                DBNOToCrouch;                                                 // 0x09A0(0x0008)
    UAnimSequence*                                DBNOToProne;                                                  // 0x09A8(0x0008)
    UBlendSpace*                                  StandToSprint;                                                // 0x09B0(0x0008)
    UBlendSpace*                                  SprintToStand;                                                // 0x09B8(0x0008)
    UBlendSpace*                                  SprintToCrouch;                                               // 0x09C0(0x0008)
    UAnimSequence*                                JumpStart;                                                    // 0x09C8(0x0008)
    UAnimSequence*                                JumpLoop;                                                     // 0x09D0(0x0008)
    UBlendSpace*                                  JumpEnd;                                                      // 0x09D8(0x0008)
    UBlendSpace*                                  RunJumpStart;                                                 // 0x09E0(0x0008)
    UBlendSpace*                                  RunJumpLoop;                                                  // 0x09E8(0x0008)
    UBlendSpace*                                  RunJumpEnd;                                                   // 0x09F0(0x0008)
    UAnimSequence*                                JumpHighEnd;                                                  // 0x09F8(0x0008)
    UBlendSpace*                                  RunJumpHighEnd;                                               // 0x0A00(0x0008)
    UAnimSequence*                                PreJump;                                                      // 0x0A08(0x0008)
    UAnimSequence*                                SprintJumpStart;                                              // 0x0A10(0x0008)
    UAnimSequence*                                SprintJumpLoop;                                               // 0x0A18(0x0008)
    UAnimSequence*                                SprintJumpEnd;                                                // 0x0A20(0x0008)
    UBlendSpace*                                  SprintToRunJumpEnd;                                           // 0x0A28(0x0008)
    UAnimSequence*                                RunToIdleJumpEnd;                                             // 0x0A30(0x0008)
    UAnimSequence*                                SprintToIdleJumpEnd;                                          // 0x0A38(0x0008)
    UAnimSequenceBase*                            DeathAnim;                                                    // 0x0A40(0x0008)
    enum class EAnimStance                        Stance;                                                       // 0x0A48(0x0001)
    enum class EWeaponType                        WeaponStance;                                                 // 0x0A49(0x0001)
    bool                                          bIsSprintingLastTime;                                         // 0x0A4A(0x0001)
    bool                                          bIsSprintingLastUpdate;                                       // 0x0A4B(0x0001)
    bool                                          bIsViewTargetLocomotion;                                      // 0x0A4C(0x0001)
    bool                                          bIs1P;                                                        // 0x0A4D(0x0001)
    char                                          pa_0A4E[0x0002]                                               // 0x0A4E(0x0002)
    float                                         IdleBreathAlpha;                                              // 0x0A50(0x0004)
    float                                         bIs1PAiming;                                                  // 0x0A54(0x0004)
    float                                         bIs1PTacticalPistolAiming;                                    // 0x0A58(0x0004)
    bool                                          bLastLocationChanged;                                         // 0x0A5C(0x0001)
    bool                                          bStanceChangedThisFrame;                                      // 0x0A5D(0x0001)
    char                                          pa_0A5E[0x0002]                                               // 0x0A5E(0x0002)
    float                                         GroundDistance;                                               // 0x0A60(0x0004)
    bool                                          bIsAiming;                                                    // 0x0A64(0x0001)
    bool                                          bIsAimingLastUpdate;                                          // 0x0A65(0x0001)
    bool                                          bIsScoping;                                                   // 0x0A66(0x0001)
    bool                                          bIsSprintingLastTime;                                         // 0x0A67(0x0001)
    bool                                          bIsCrouchAndNotDBNO;                                          // 0x0A68(0x0001)
    bool                                          bIsProneAndNotDBNO;                                           // 0x0A69(0x0001)
    bool                                          bFootRFrontWhenSprintChange;                                  // 0x0A6A(0x0001)
    bool                                          bIsMovingOnGroundAndSprinting;                                // 0x0A6B(0x0001)
    bool                                          bIsMovingOnGroundAndSprintJumping;                            // 0x0A6C(0x0001)
    bool                                          bAnimStanceTransitionInvalid1P;                               // 0x0A6D(0x0001)
    bool                                          bAnimStanceTransitionInvalid3P;                               // 0x0A6E(0x0001)
    bool                                          bStandToCrouchTransitionBlendOut;                             // 0x0A6F(0x0001)
    bool                                          bCrouchToStandTransitionBlendOut;                             // 0x0A70(0x0001)
    bool                                          bIsStand;                                                     // 0x0A71(0x0001)
    bool                                          bIsCasual;                                                    // 0x0A72(0x0001)
    bool                                          bIsCrouch;                                                    // 0x0A73(0x0001)
    bool                                          bIsProne;                                                     // 0x0A74(0x0001)
    bool                                          bIsDBNO;                                                      // 0x0A75(0x0001)
    char                                          pa_0A76[0x0002]                                               // 0x0A76(0x0002)
    float                                         PronePlayRate;                                                // 0x0A78(0x0004)
    bool                                          bIsMoving;                                                    // 0x0A7C(0x0001)
    bool                                          bWasMovingLastUpdate;                                         // 0x0A7D(0x0001)
    bool                                          bIsSilentWalk;                                                // 0x0A7E(0x0001)
    bool                                          bIsMovingForward;                                             // 0x0A7F(0x0001)
    bool                                          bIsMovingOnGround;                                            // 0x0A80(0x0001)
    bool                                          bIsSprinting;                                                 // 0x0A81(0x0001)
    char                                          pa_0A82[0x0002]                                               // 0x0A82(0x0002)
    float                                         MovementStance;                                               // 0x0A84(0x0004)
    bool                                          bIsUsingItem;                                                 // 0x0A88(0x0001)
    bool                                          bIsArmedWithGun;                                              // 0x0A89(0x0001)
    bool                                          bIsArmedWithoutGun;                                           // 0x0A8A(0x0001)
    bool                                          bIsArmedWithThrown;                                           // 0x0A8B(0x0001)
    bool                                          bIsArmedWithMainWeapon;                                       // 0x0A8C(0x0001)
    bool                                          bIsArmedWithAssistWeapon;                                     // 0x0A8D(0x0001)
    bool                                          bIsArmedWithDualHandWeapon;                                   // 0x0A8E(0x0001)
    bool                                          bIsJumping;                                                   // 0x0A8F(0x0001)
    bool                                          bIsSprintJumping;                                             // 0x0A90(0x0001)
    bool                                          bIsRunJumping;                                                // 0x0A91(0x0001)
    bool                                          bIsFalling;                                                   // 0x0A92(0x0001)
    char                                          pa_0A93[0x0001]                                               // 0x0A93(0x0001)
    float                                         FallingAnimType;                                              // 0x0A94(0x0004)
    bool                                          bIsInAir;                                                     // 0x0A98(0x0001)
    bool                                          bIsInAirChangeThisFrame;                                      // 0x0A99(0x0001)
    char                                          pa_0A9A[0x0002]                                               // 0x0A9A(0x0002)
    FRotator                                      WorldRotation;                                                // 0x0A9C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0AA8(0x000C)
    FVector                                       LocalAcceleration2DNormalized;                                // 0x0AB4(0x000C)
    FVector                                       Velocity;                                                     // 0x0AC0(0x000C)
    bool                                          bIsRunningIntoWall;                                           // 0x0ACC(0x0001)
    bool                                          bAccelerationOpposeVelocity;                                  // 0x0ACD(0x0001)
    char                                          pa_0ACE[0x0002]                                               // 0x0ACE(0x0002)
    FRotator                                      CurrentFloorSlopeWitnRootQuat;                                // 0x0AD0(0x000C)
    float                                         MovementPlayRate;                                             // 0x0ADC(0x0004)
    float                                         MovementStartPosition;                                        // 0x0AE0(0x0004)
    float                                         MovementSpeedWarping;                                         // 0x0AE4(0x0004)
    float                                         DirectionBeforStop;                                           // 0x0AE8(0x0004)
    bool                                          bIsNotMoving;                                                 // 0x0AEC(0x0001)
    bool                                          bIsNotSprinting;                                              // 0x0AED(0x0001)
    bool                                          bIsNotInAir;                                                  // 0x0AEE(0x0001)
    bool                                          bEnableSliding;                                               // 0x0AEF(0x0001)
    bool                                          bIsChangeActorRotation;                                       // 0x0AF0(0x0001)
    bool                                          bTurnLeft;                                                    // 0x0AF1(0x0001)
    bool                                          bEnableTeleportTurnAnimation;                                 // 0x0AF2(0x0001)
    char                                          pa_0AF3[0x0001]                                               // 0x0AF3(0x0001)
    float                                         TurnInPlaceMaxThreshold;                                      // 0x0AF4(0x0004)
    bool                                          bIsPreJump;                                                   // 0x0AF8(0x0001)
    bool                                          bIsNoneJumpState;                                             // 0x0AF9(0x0001)
    bool                                          bIsPreJumpAnimValid;                                          // 0x0AFA(0x0001)
    bool                                          bCanEnterPreJumpState;                                        // 0x0AFB(0x0001)
    bool                                          bNearlyMovingForward;                                         // 0x0AFC(0x0001)
    bool                                          bCanAnimStanceTransitionBlendOut;                             // 0x0AFD(0x0001)
    char                                          pa_0AFE[0x0002]                                               // 0x0AFE(0x0002)
    float                                         MovingDirection;                                              // 0x0B00(0x0004)
    float                                         MovingDirectionWithOffset;                                    // 0x0B04(0x0004)
    float                                         MovingDirectionClamped;                                       // 0x0B08(0x0004)
    float                                         MovingDirectionCompensation;                                  // 0x0B0C(0x0004)
    float                                         MovingDirectionOrientationWarpCopyBoneAlpha;                  // 0x0B10(0x0004)
    int32_t                                       CurrentMovingCardinalTP;                                      // 0x0B14(0x0004)
    float                                         CurrentMovingOrientationWarpingAngle;                         // 0x0B18(0x0004)
    float                                         SmoothedMovingOrientationWarpingAngle;                        // 0x0B1C(0x0004)
    float                                         MovingStartOrientationWarpingAngle;                           // 0x0B20(0x0004)
    float                                         MovingDirectionByCardinalTP;                                  // 0x0B24(0x0004)
    UAnimSequence*                                TurnInPlaceAnimationSequence;                                 // 0x0B28(0x0008)
    float                                         TurnInPlaceAnimationTime;                                     // 0x0B30(0x0004)
    float                                         RootBoneRotationYaw;                                          // 0x0B34(0x0004)
    float                                         NegRootBoneRotationYaw;                                       // 0x0B38(0x0004)
    float                                         TurnYawWeight;                                                // 0x0B3C(0x0004)
    enum class ETurnInPlaceState                  TurnInPlaceState;                                             // 0x0B40(0x0001)
    enum class ERootYawOffsetMode                 RootYawOffsetMode;                                            // 0x0B41(0x0001)
    bool                                          bShouldTurnInIdle;                                            // 0x0B42(0x0001)
    bool                                          bShouldTurnInPlace;                                           // 0x0B43(0x0001)
    bool                                          bShouldTurnInPlaceRecvoery;                                   // 0x0B44(0x0001)
    char                                          pa_0B45[0x0003]                                               // 0x0B45(0x0003)
    USGCharacterLocomotionAnimInstance*           SGAnimInstance;                                               // 0x0B48(0x0008)
    USGCharacterAnimInstance*                     SGMainAnimInstance;                                           // 0x0B50(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0B58(0x0008)
    ASGWeapon*                                    SGWeapon;                                                     // 0x0B60(0x0008)
    bool                                          bIsWeaponChange;                                              // 0x0B68(0x0001)
    bool                                          bHasTransition;                                               // 0x0B69(0x0001)
    char                                          pa_0B6A[0x0002]                                               // 0x0B6A(0x0002)
    float                                         TransitionType;                                               // 0x0B6C(0x0004)
    bool                                          bHasAnimStanceTransition;                                     // 0x0B70(0x0001)
    char                                          pa_0B71[0x0003]                                               // 0x0B71(0x0003)
    float                                         AnimStanceTransitionType;                                     // 0x0B74(0x0004)
    float                                         StandToProneTransitionType;                                   // 0x0B78(0x0004)
    bool                                          bIsSprintToCrouch;                                            // 0x0B7C(0x0001)
    char                                          pa_0B7D[0x0003]                                               // 0x0B7D(0x0003)
    float                                         SprintTransitionOutPlayRate;                                  // 0x0B80(0x0004)
    char                                          pa_0B84[0x0004]                                               // 0x0B84(0x0004)
    TArray<enum class EMovementStance>            MovementStanceRingBuffer;                                     // 0x0B88(0x0010)
    char                                          pa_0B98[0x0008]                                               // 0x0B98(0x0008)
    USkeletalMeshComponent*                       CopyPoseFrom;                                                 // 0x0BA0(0x0008)
    float                                         FixedMovingDirection;                                         // 0x0BA8(0x0004)
    int32_t                                       FixedMovingDirectionPositive;                                 // 0x0BAC(0x0004)
    float                                         FixedMovingDirectionWithOffset;                               // 0x0BB0(0x0004)
    float                                         SmoothedFixedMovingDirection;                                 // 0x0BB4(0x0004)
    char                                          pa_0BB8[0x0010]                                               // 0x0BB8(0x0010)
    UBlendSpace*                                  Stand;                                                        // 0x0BC8(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0BD0(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0BD8(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0BE0(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0BE8(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0BF0(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0BF8(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0C00(0x0008)
    UBlendSpace*                                  DestMovingStopBS;                                             // 0x0C08(0x0008)
    UBlendSpace*                                  Stand;                                                        // 0x0C10(0x0008)
    UBlendSpace*                                  Crouch;                                                       // 0x0C18(0x0008)
    UAnimSequenceBase*                            MovingStartAnimSeq;                                           // 0x0C20(0x0008)
    UAnimSequenceBase*                            MovingStopAnimSeq;                                            // 0x0C28(0x0008)
    bool                                          bShouldMovingStart;                                           // 0x0C30(0x0001)
    bool                                          bShouldJumpToMoving;                                          // 0x0C31(0x0001)
    bool                                          bShouldJumpToMovingFast;                                      // 0x0C32(0x0001)
    bool                                          bShouldMovingStop;                                            // 0x0C33(0x0001)
    bool                                          bShouldJumpToIdle;                                            // 0x0C34(0x0001)
    bool                                          bShouldJumpToStop;                                            // 0x0C35(0x0001)
    bool                                          bPivot;                                                       // 0x0C36(0x0001)
    bool                                          bPostPivot;                                                   // 0x0C37(0x0001)
    float                                         AnimSeqMovingStartTime;                                       // 0x0C38(0x0004)
    float                                         MovingStartNormalizeTime;                                     // 0x0C3C(0x0004)
    float                                         AnimSeqMovingStopTime;                                        // 0x0C40(0x0004)
    float                                         MovingStopNormalizeTime;                                      // 0x0C44(0x0004)
    float                                         MovingStopDirection;                                          // 0x0C48(0x0004)
    float                                         MovingPivotNormalizeTime;                                     // 0x0C4C(0x0004)
    float                                         MovingPivotDirection;                                         // 0x0C50(0x0004)
    float                                         MovingStartNormalizeSpeed;                                    // 0x0C54(0x0004)
    float                                         MovingStopNormalizeSpeed;                                     // 0x0C58(0x0004)
    bool                                          bMovingStartInvalid;                                          // 0x0C5C(0x0001)
    bool                                          bMovingStopInvalid;                                           // 0x0C5D(0x0001)
    char                                          pa_0C5E[0x003A]                                               // 0x0C5E(0x003A)
    float                                         RootYawOffset;                                                // 0x0C98(0x0004)
    float                                         TurnInPlaceAnimTime;                                          // 0x0C9C(0x0004)
    UAnimSequence*                                TurnInPlaceAnimSequence;                                      // 0x0CA0(0x0008)
    bool                                          bTurnInPlaceIdle;                                             // 0x0CA8(0x0001)
    bool                                          bTurnInPlaceRotation;                                         // 0x0CA9(0x0001)
    bool                                          bTurnInPlaceRecovery;                                         // 0x0CAA(0x0001)
    char                                          pa_0CAB[0x0001]                                               // 0x0CAB(0x0001)
    float                                         OrientationWarpingAngle;                                      // 0x0CAC(0x0004)
    char                                          pa_0CB0[0x0004]                                               // 0x0CB0(0x0004)
    bool                                          bMovingPerpendicularToInitialPivot;                           // 0x0CB4(0x0001)
    bool                                          bCanEnterPivotState;                                          // 0x0CB5(0x0001)
    bool                                          bPivotBlendToStop;                                            // 0x0CB6(0x0001)
    bool                                          bPivotBlendToCycle;                                           // 0x0CB7(0x0001)
    bool                                          bPivotBlendToCycleDueToStanceChange;                          // 0x0CB8(0x0001)
    bool                                          bShouldSwitchPivotState;                                      // 0x0CB9(0x0001)
    char                                          pa_0CBA[0x0002]                                               // 0x0CBA(0x0002)
    FVector                                       PivotStartingAcceleration;                                    // 0x0CBC(0x000C)
    float                                         TimeAtPivotStop;                                              // 0x0CC8(0x0004)
    float                                         LastPivotTime;                                                // 0x0CCC(0x0004)
    UAnimSequence*                                PivotAnimSequenceA;                                           // 0x0CD0(0x0008)
    UAnimSequence*                                PivotAnimSequenceB;                                           // 0x0CD8(0x0008)
    float                                         PivotAnimSequenceLength;                                      // 0x0CE0(0x0004)
    float                                         PivotSequencePlayerATime;                                     // 0x0CE4(0x0004)
    float                                         PivotSequencePlayerBTime;                                     // 0x0CE8(0x0004)
    bool                                          bUsePivotStateMachineA;                                       // 0x0CEC(0x0001)
    char                                          pa_0CED[0x0003]                                               // 0x0CED(0x0003)
    FVector                                       SmoothLastUpdateLocalAccNormal2D;                             // 0x0CF0(0x000C)
    char                                          pa_0CFC[0x002C]                                               // 0x0CFC(0x002C)
    UAnimSequence*                                JumpLand;                                                     // 0x0D28(0x0008)
    UBlendSpace*                                  RunJumpLand;                                                  // 0x0D30(0x0008)
    UAnimSequence*                                SprintJumpLand;                                               // 0x0D38(0x0008)
    UAnimSequence*                                JumpLandAnimation;                                            // 0x0D40(0x0008)
    float                                         LandAnimPosition;                                             // 0x0D48(0x0004)
    float                                         LandAnimNormalizedTime;                                       // 0x0D4C(0x0004)
    bool                                          bCanEnterLand;                                                // 0x0D50(0x0001)
    char                                          pa_0D51[0x0007]                                               // 0x0D51(0x0007)
    USGCharacterAnimationSetsPerCharacterSex*     CurrentCharacterAnimationSetsPerCharacterSex;                 // 0x0D58(0x0008)
    USGPerWeaponAnimationSets*                    CurrentPerWeaponAnimationSetsClass;                           // 0x0D60(0x0008)
    USGPerWeaponAnimationSets*                    CurrentPerWeaponAnimationSetsClass;                           // 0x0D68(0x0008)
    enum class EMovementStance                    FromMovementStance;                                           // 0x0D70(0x0001)
    enum class EMovementStance                    ToMovementStance;                                             // 0x0D71(0x0001)
    enum class EAnimStance                        FromAnimStance;                                               // 0x0D72(0x0001)
    enum class EAnimStance                        ToAnimStance;                                                 // 0x0D73(0x0001)
    char                                          pa_0D74[0x001C]                                               // 0x0D74(0x001C)
};


// ScriptStruct  SGFramework.SGCharacterGroundInfo
// Struct Size::0x00A8
struct FSGCharacterGroundInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FHitResult                                    GroundHitResult;                                              // 0x0008(0x0098)
    float                                         GroundDistance;                                               // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  SGFramework.SGMaxSpeedFactorDiff
// Struct Size::0x000C
struct FSGMaxSpeedFactorDiff
{
    enum class ESGMaxSpeedFactor                  Factor;                                                       // 0x0000(0x0004)
    float                                         Client;                                                       // 0x0004(0x0004)
    float                                         Server;                                                       // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.LadderClimbingNetInfo
// Struct Size::0x0003
struct FLadderClimbingNetInfo
{
    enum class ELadderClimbingDirectionType       DirectionType;                                                // 0x0000(0x0001)
    enum class ELadderClimbingInputType           InputType;                                                    // 0x0001(0x0001)
    enum class ELadderClimbingStateType           StateType;                                                    // 0x0002(0x0001)
};


// ScriptStruct  SGFramework.LadderClimbingMontage
// Struct Size::0x0010
struct FLadderClimbingMontage
{
    enum class ELadderClimbingInputType           InputType;                                                    // 0x0000(0x0001)
    enum class ELadderClimbingDirectionType       DirectionType;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    UAnimMontage*                                 CharacterMontage;                                             // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGVaultAnimationConfig
// Struct Size::0x0030
struct FSGVaultAnimationConfig
{
    enum class EVaultChoice                       VaultChoice;                                                  // 0x0000(0x0001)
    enum class EObstacleHeightLevel               ObstacleHeightLevel;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         PassabilityMinRadius;                                         // 0x0004(0x0004)
    float                                         PassabilityMinHalfHeight;                                     // 0x0008(0x0004)
    float                                         PassabilityHeightOffset;                                      // 0x000C(0x0004)
    float                                         ApexEdgeDistance;                                             // 0x0010(0x0004)
    float                                         HoriMoveDistancePreJump;                                      // 0x0014(0x0004)
    float                                         HoriMoveDistancePreApex;                                      // 0x0018(0x0004)
    float                                         HoriMoveDistancePostApex;                                     // 0x001C(0x0004)
    float                                         HoriMoveDistancePostFall;                                     // 0x0020(0x0004)
    float                                         VerticalMoveDistanceApex;                                     // 0x0024(0x0004)
    float                                         PlayRateNormal;                                               // 0x0028(0x0004)
    float                                         PlayRateOverWeight;                                           // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.VaultRepInfo
// Struct Size::0x0030
struct FVaultRepInfo
{
    enum class EVaultPhase                        VaultPhase;                                                   // 0x0000(0x0001)
    enum class EVaultChoice                       VaultChoice;                                                  // 0x0001(0x0001)
    enum class EObstacleHeightLevel               ObstacleHeightLevel;                                          // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       CharacterForwardDiretion;                                     // 0x0004(0x000C)
    FVector                                       CharacterTowardsObstacleDiretion;                             // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FSGPredictPathNode>                    PathNodes;                                                    // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.SGPredictPathNode
// Struct Size::0x0020
struct FSGPredictPathNode
{
    FVector                                       PredictLocation;                                              // 0x0000(0x000C)
    FRotator                                      PredictRotation;                                              // 0x000C(0x000C)
    FName                                         Name;                                                         // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.VaultResult
// Struct Size::0x00B8
struct FVaultResult
{
    enum class EVaultFailReason                   VaultFailReason;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       CharacterWantsToVaultLocation;                                // 0x0004(0x000C)
    FVector                                       CharacterLocation;                                            // 0x0010(0x000C)
    FVector                                       CharacterFloorLocation;                                       // 0x001C(0x000C)
    FVector                                       CharacterForwardDiretion;                                     // 0x0028(0x000C)
    FVector                                       CharacterTowardsObstacleDiretion;                             // 0x0034(0x000C)
    float                                         CharacterTowardsObstacleDegree;                               // 0x0040(0x0004)
    float                                         CharacterVelocity;                                            // 0x0044(0x0004)
    FVector                                       CharacterAcceleration;                                        // 0x0048(0x000C)
    FRotator                                      CharacterRotation;                                            // 0x0054(0x000C)
    float                                         ForwardTraceDistance;                                         // 0x0060(0x0004)
    enum class EVaultChoice                       VaultChoice;                                                  // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    float                                         FallHeight;                                                   // 0x0068(0x0004)
    float                                         ObstacleHeight;                                               // 0x006C(0x0004)
    enum class EObstacleHeightLevel               ObstacleHeightLevel;                                          // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FVector                                       VaultApexPoint;                                               // 0x0074(0x000C)
    FVector                                       ObstacleImpactPoint;                                          // 0x0080(0x000C)
    FVector                                       ObstacleImpactNormal;                                         // 0x008C(0x000C)
    enum class EMovementMode                      MovementModeAfterVault;                                       // 0x0098(0x0001)
    char                                          pa_0099[0x000F]                                               // 0x0099(0x000F)
    TArray<FSGPredictPathNode>                    PathNodes;                                                    // 0x00A8(0x0010)
};


// ScriptStruct  SGFramework.SGCharacterPreviewAnimInstanceProxy
// Struct Size::0x0B40
struct FSGCharacterPreviewAnimInstanceProxy : public FAnimInstanceProxy
{
    bool                                          bShouldUseFPPBreath;                                          // 0x0860(0x0001)
    bool                                          bHasIdleSeq;                                                  // 0x0861(0x0001)
    char                                          pa_0862[0x0006]                                               // 0x0862(0x0006)
    UAnimSequence*                                IdleSeq;                                                      // 0x0868(0x0008)
    UAnimSequence*                                IdleSeqBasePose;                                              // 0x0870(0x0008)
    UAnimSequence*                                IdleBreathAdditiveSeq;                                        // 0x0878(0x0008)
    bool                                          bHasCasualIdleSeq;                                            // 0x0880(0x0001)
    char                                          pa_0881[0x0003]                                               // 0x0881(0x0003)
    float                                         HasCasualIdleSeq;                                             // 0x0884(0x0004)
    UAnimSequence*                                DTRandomIdleSeq;                                              // 0x0888(0x0008)
    float                                         DTRandomIdleLength;                                           // 0x0890(0x0004)
    float                                         DTRandomIdleTime;                                             // 0x0894(0x0004)
    bool                                          bHasDTRandomIdleSeq;                                          // 0x0898(0x0001)
    bool                                          bShouldUseCasualIdleSeq;                                      // 0x0899(0x0001)
    char                                          pa_089A[0x0006]                                               // 0x089A(0x0006)
    UAnimSequence*                                CasualIdleSeq;                                                // 0x08A0(0x0008)
    UAnimSequence*                                DTCustomizeAnimeSeq;                                          // 0x08A8(0x0008)
    UAnimSequence*                                DefaultDTCustomAnimSeq;                                       // 0x08B0(0x0008)
    float                                         StartTimeOffset;                                              // 0x08B8(0x0004)
    float                                         WeaponHandgripType;                                           // 0x08BC(0x0004)
    float                                         Enable;                                                       // 0x08C0(0x0004)
    float                                         Enable;                                                       // 0x08C4(0x0004)
    float                                         Enable;                                                       // 0x08C8(0x0004)
    bool                                          bIsPlayingSlotAnimation;                                      // 0x08CC(0x0001)
    char                                          pa_08CD[0x0003]                                               // 0x08CD(0x0003)
    float                                         Enable;                                                       // 0x08D0(0x0004)
    float                                         Enable;                                                       // 0x08D4(0x0004)
    float                                         Enable;                                                       // 0x08D8(0x0004)
    char                                          pa_08DC[0x0004]                                               // 0x08DC(0x0004)
    ASGWeapon*                                    SGWeapon;                                                     // 0x08E0(0x0008)
    bool                                          bIsWeaponChange;                                              // 0x08E8(0x0001)
    bool                                          bIsCharacterAnimationSetsChange;                              // 0x08E9(0x0001)
    enum class EWeaponType                        WeaponStance;                                                 // 0x08EA(0x0001)
    char                                          pa_08EB[0x0001]                                               // 0x08EB(0x0001)
    float                                         FullBodySlotAnimationRatio;                                   // 0x08EC(0x0004)
    bool                                          bLockChangeAnimationSet;                                      // 0x08F0(0x0001)
    bool                                          bTeamUpCharacter;                                             // 0x08F1(0x0001)
    bool                                          bTeamUpScav;                                                  // 0x08F2(0x0001)
    bool                                          bTeamPlatformCharacter;                                       // 0x08F3(0x0001)
    bool                                          bReady;                                                       // 0x08F4(0x0001)
    bool                                          bReadyLastUpdate;                                             // 0x08F5(0x0001)
    bool                                          bNotReady;                                                    // 0x08F6(0x0001)
    char                                          pa_08F7[0x0001]                                               // 0x08F7(0x0001)
    FRotator                                      RootBoneRotation;                                             // 0x08F8(0x000C)
    FSGEnterLoopLeaveStateMachine                 ReadyOrNotStateMachine;                                       // 0x0904(0x0024)
    FName                                         TeamPlatformTag;                                              // 0x0928(0x0008)
    bool                                          bJSCharacter;                                                 // 0x0930(0x0001)
    char                                          pa_0931[0x0003]                                               // 0x0931(0x0003)
    FName                                         JSCharacterTag;                                               // 0x0934(0x0008)
    char                                          pa_093C[0x0004]                                               // 0x093C(0x0004)
    UAnimSequence*                                TeamPlatformIdleSeq;                                          // 0x0940(0x0008)
    UAnimSequence*                                ReadyInSeq;                                                   // 0x0948(0x0008)
    UAnimSequence*                                ReadyLoopSeq;                                                 // 0x0950(0x0008)
    UAnimSequence*                                ReadyOutSeq;                                                  // 0x0958(0x0008)
    UBlendSpace1D*                                TeamPlatformCasualGripAdjustmentBS;                           // 0x0960(0x0008)
    TArray<UAnimMontage*>                         TeamPlatfromIdleMontageList;                                  // 0x0968(0x0010)
    TArray<UAnimMontage*>                         TeamPlatfromReadyMontageList;                                 // 0x0978(0x0010)
    bool                                          bZDSequenceValid;                                             // 0x0988(0x0001)
    char                                          pa_0989[0x0007]                                               // 0x0989(0x0007)
    UBlendSpace1D*                                JSCasualGripAdjustmentBS;                                     // 0x0990(0x0008)
    FVector                                       HandWeaponOffset;                                             // 0x0998(0x000C)
    FVector                                       HandWeaponOffset;                                             // 0x09A4(0x000C)
    FRotator                                      HandWeaponOffset;                                             // 0x09B0(0x000C)
    FVector                                       HandOffset;                                                   // 0x09BC(0x000C)
    float                                         Enable;                                                       // 0x09C8(0x0004)
    FVector                                       HandOffset;                                                   // 0x09CC(0x000C)
    FVector                                       HandOffset;                                                   // 0x09D8(0x000C)
    float                                         Enable;                                                       // 0x09E4(0x0004)
    FVector                                       PreviewCharacterWeaponTranslation;                            // 0x09E8(0x000C)
    FRotator                                      PreviewCharacterWeaponRotation;                               // 0x09F4(0x000C)
    float                                         EnablePreviewCharacterWeaponOffset;                           // 0x0A00(0x0004)
    FVector                                       ForeGripOffset;                                               // 0x0A04(0x000C)
    float                                         ZDIdleBasePoseBlendRatio;                                     // 0x0A10(0x0004)
    FVector                                       GripPoseAdjustmentOffset;                                     // 0x0A14(0x000C)
    float                                         Enable;                                                       // 0x0A20(0x0004)
    float                                         Enable;                                                       // 0x0A24(0x0004)
    float                                         WeaponReargripType;                                           // 0x0A28(0x0004)
    char                                          pa_0A2C[0x0004]                                               // 0x0A2C(0x0004)
    UBlendSpace1D*                                RearGripIdleBS;                                               // 0x0A30(0x0008)
    UBlendSpace1D*                                CasualRearGripIdleBS;                                         // 0x0A38(0x0008)
    float                                         Enable;                                                       // 0x0A40(0x0004)
    bool                                          bHasForegrip;                                                 // 0x0A44(0x0001)
    bool                                          bPistolGrip;                                                  // 0x0A45(0x0001)
    bool                                          bHasWeaponForegrip;                                           // 0x0A46(0x0001)
    char                                          pa_0A47[0x0001]                                               // 0x0A47(0x0001)
    float                                         WeaponForegripType;                                           // 0x0A48(0x0004)
    float                                         GripPoseAdjustmentAlpha;                                      // 0x0A4C(0x0004)
    UBlendSpace1D*                                CasualGripAdjustmentBS;                                       // 0x0A50(0x0008)
    UBlendSpace1D*                                AdjustGripIdleBS;                                             // 0x0A58(0x0008)
    UBlendSpace1D*                                ForeGripBS;                                                   // 0x0A60(0x0008)
    UBlendSpace1D*                                CasualGripIdleBS;                                             // 0x0A68(0x0008)
    UBlendSpace1D*                                GripIdleBS;                                                   // 0x0A70(0x0008)
    bool                                          bHasReargrip;                                                 // 0x0A78(0x0001)
    bool                                          bHasLeftHandWeaponMesh;                                       // 0x0A79(0x0001)
    char                                          pa_0A7A[0x0006]                                               // 0x0A7A(0x0006)
    UBlendSpace1D*                                LFingerAdaptiveBS;                                            // 0x0A80(0x0008)
    bool                                          bEnableLFingerAdaptive;                                       // 0x0A88(0x0001)
    char                                          pa_0A89[0x0003]                                               // 0x0A89(0x0003)
    float                                         LFingerAdaptiveAlpha;                                         // 0x0A8C(0x0004)
    float                                         Enable;                                                       // 0x0A90(0x0004)
    float                                         AdaptiveLeftHandWeaponTriggerPointAlpha;                      // 0x0A94(0x0004)
    float                                         AdaptiveRightHandWeaponTriggerPointAlpha;                     // 0x0A98(0x0004)
    float                                         Enable;                                                       // 0x0A9C(0x0004)
    float                                         Enable;                                                       // 0x0AA0(0x0004)
    float                                         Enable;                                                       // 0x0AA4(0x0004)
    float                                         Enable;                                                       // 0x0AA8(0x0004)
    char                                          pa_0AAC[0x0004]                                               // 0x0AAC(0x0004)
    float                                         DTAnimSequenceScaleRate;                                      // 0x0AB0(0x0004)
    enum class ECharacterSex                      CharacterSex;                                                 // 0x0AB4(0x0001)
    bool                                          bIsMale;                                                      // 0x0AB5(0x0001)
    char                                          pa_0AB6[0x0002]                                               // 0x0AB6(0x0002)
    USGCharacterPreviewAnimInstance*              SGAnimInstance;                                               // 0x0AB8(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0AC0(0x0008)
    USGCharacterPreviewComponent*                 CachedPreviewComponent;                                       // 0x0AC8(0x0008)
    USGCharacterAnimationSets*                    CharacterAnimationSetsClass;                                  // 0x0AD0(0x0008)
    USGPerWeaponAnimationSets*                    PerWeaponAnimationSetsClass;                                  // 0x0AD8(0x0008)
    char                                          pa_0AE0[0x0008]                                               // 0x0AE0(0x0008)
    USGCharacterAnimationSetsPerCharacterSex*     CachedCharacterAnimationSets;                                 // 0x0AE8(0x0008)
    bool                                          bAnimSetReady;                                                // 0x0AF0(0x0001)
    char                                          pa_0AF1[0x0002]                                               // 0x0AF1(0x0002)
    bool                                          bPreviewCaptureCharacter;                                     // 0x0AF3(0x0001)
    bool                                          bIsCasual;                                                    // 0x0AF4(0x0001)
    bool                                          bIs1P;                                                        // 0x0AF5(0x0001)
    bool                                          bAdditiveLeftHandGrip;                                        // 0x0AF6(0x0001)
    char                                          pa_0AF7[0x0001]                                               // 0x0AF7(0x0001)
    float                                         ControlRigAimWeight;                                          // 0x0AF8(0x0004)
    FVector                                       EyeAimPosition;                                               // 0x0AFC(0x000C)
    FVector2D                                     FaceAimControl;                                               // 0x0B08(0x0008)
    UAnimSequence*                                PreviewIdleAnim;                                              // 0x0B10(0x0008)
    UBlendSpace1D*                                PreviewAdjustmentBS;                                          // 0x0B18(0x0008)
    UAnimSequence*                                PreviewIdleAnimHandPose;                                      // 0x0B20(0x0008)
    UAnimSequence*                                WeaponOrientPose;                                             // 0x0B28(0x0008)
    bool                                          bShouldUseTeamHandPose;                                       // 0x0B30(0x0001)
    char                                          pa_0B31[0x0003]                                               // 0x0B31(0x0003)
    float                                         Curve;                                                        // 0x0B34(0x0004)
    float                                         Curve;                                                        // 0x0B38(0x0004)
    float                                         PreviewAnimFKGunPose;                                         // 0x0B3C(0x0004)
};


// ScriptStruct  SGFramework.SGCharacterProgressAbility
// Struct Size::0x0018
struct FSGCharacterProgressAbility
{
    UGameplayAbility*                             AbilityClass;                                                 // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ACharacter*                                   Owner;                                                        // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterProgressAbility
// Struct Size::0x0038
struct FSGCharacterProgressAbility : public FSGCharacterProgressAbility
{
    AActor*                                       CachedFillSource;                                             // 0x0018(0x0008)
    float                                         CachedUseTime;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0014]                                               // 0x0024(0x0014)
};


// ScriptStruct  SGFramework.SGCharacterProgressAbility
// Struct Size::0x0020
struct FSGCharacterProgressAbility : public FSGCharacterProgressAbility
{
    AActor*                                       CachedFillInventory;                                          // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterProgressAbility
// Struct Size::0x0020
struct FSGCharacterProgressAbility : public FSGCharacterProgressAbility
{
    AActor*                                       CachedTargetContainer;                                        // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterRagdollAnimInstanceProxy
// Struct Size::0x08B0
struct FSGCharacterRagdollAnimInstanceProxy : public FAnimInstanceProxy
{
    USGCharacterRagdollAnimInstance*              AnimInstance;                                                 // 0x0860(0x0008)
    ASGCharacter*                                 SGCharacter;                                                  // 0x0868(0x0008)
    bool                                          bIsDead;                                                      // 0x0870(0x0001)
    bool                                          bIsRagdoll;                                                   // 0x0871(0x0001)
    char                                          pa_0872[0x0002]                                               // 0x0872(0x0002)
    float                                         ForceSnapPelvisToRootAlpha;                                   // 0x0874(0x0004)
    FPoseSnapshot                                 RagdollPose;                                                  // 0x0878(0x0038)
};


// ScriptStruct  SGFramework.SGRagdollCriticalBoneInfo
// Struct Size::0x0010
struct FSGRagdollCriticalBoneInfo
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    float                                         DisplacementTolerance;                                        // 0x0008(0x0004)
    int32_t                                       LocationSampleNum;                                            // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGRagdollBakedBoneInfo
// Struct Size::0x0028
struct FSGRagdollBakedBoneInfo
{
    enum class ESGRagdollStage                    ServerRagdollStage;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ServerRagdollStartTime;                                       // 0x0004(0x0004)
    TArray<FSGPoseSnapshotRotationTranslation>    BakedBoneRotationTranslations;                                // 0x0008(0x0010)
    TArray<FName>                                 SnapshotBoneNames;                                            // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGPoseSnapshotRotationTranslation
// Struct Size::0x0020
struct FSGPoseSnapshotRotationTranslation
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Translation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGRagdollImpulseLinkInfo
// Struct Size::0x0014
struct FSGRagdollImpulseLinkInfo
{
    FName                                         Bone1;                                                        // 0x0000(0x0008)
    FName                                         Bone2;                                                        // 0x0008(0x0008)
    float                                         LinkRatio;                                                    // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.SGRagdollImpulseApplyInfo
// Struct Size::0x0028
struct FSGRagdollImpulseApplyInfo
{
    AActor*                                       DamageCauser;                                                 // 0x0000(0x0008)
    FVector                                       Momentum;                                                     // 0x0008(0x000C)
    FVector                                       HitLocation;                                                  // 0x0014(0x000C)
    FName                                         HitBoneName;                                                  // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.CharacterDefaultInventoryList
// Struct Size::0x0020
struct FCharacterDefaultInventoryList
{
    TArray<AActor*>                               DefaultPickupInventories;                                     // 0x0000(0x0010)
    TArray<AActor*>                               DefaultPickupToBagInventories;                                // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.GameplayEffectHandleArrayWrap
// Struct Size::0x0010
struct FGameplayEffectHandleArrayWrap
{
    TArray<FActiveGameplayEffectHandle>           GameplayEffectHandleList;                                     // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.GameplayEffectArrayWrap
// Struct Size::0x0010
struct FGameplayEffectArrayWrap
{
    TArray<UGameplayEffect*>                      GameplayEffectList;                                           // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGCharacterShadowAnimInstanceProxy
// Struct Size::0x0890
struct FSGCharacterShadowAnimInstanceProxy : public FAnimInstanceProxy
{
    USGCharacterCastShadowComponent*              CachedCastShadowComponent;                                    // 0x0860(0x0008)
    FRotator                                      AORotationWithWeaponSway;                                     // 0x0868(0x000C)
    FRotator                                      AORotationWithWeaponSway;                                     // 0x0874(0x000C)
    float                                         Enable;                                                       // 0x0880(0x0004)
    float                                         bInOrTransTacticalPistolState;                                // 0x0884(0x0004)
    char                                          pa_0888[0x0008]                                               // 0x0888(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterComponentsSignificanceThresolds
// Struct Size::0x0068
struct FSGCharacterComponentsSignificanceThresolds : public FTableRowBase
{
    UActorComponent*                              ComponentClass;                                               // 0x0008(0x0008)
    int32_t                                       DeviceQuality;                                                // 0x0010(0x0004)
    FSGCharacterComponentsSignificanceParams      SignificanceParams;                                           // 0x0014(0x0054)
};


// ScriptStruct  SGFramework.SGCharacterComponentsSignificanceParams
// Struct Size::0x0054
struct FSGCharacterComponentsSignificanceParams
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    bool                                          bMultiThreading;                                              // 0x0008(0x0001)
    bool                                          bIgnoreLimitExceed;                                           // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       SignificanceBias;                                             // 0x000C(0x0004)
    float                                         MinTickInterval;                                              // 0x0010(0x0004)
    float                                         MinTickInterval;                                              // 0x0014(0x0004)
    float                                         CompSubSigLimitUpdateThreshold;                               // 0x0018(0x0004)
    float                                         CompSubSigLimitUpdateScale;                                   // 0x001C(0x0004)
    float                                         HighVelocity;                                                 // 0x0020(0x0004)
    float                                         HighVelocity;                                                 // 0x0024(0x0004)
    int32_t                                       HighVelocity;                                                 // 0x0028(0x0004)
    int32_t                                       HighVelocity;                                                 // 0x002C(0x0004)
    int32_t                                       HighVelocity;                                                 // 0x0030(0x0004)
    int32_t                                       HighVelocity;                                                 // 0x0034(0x0004)
    int32_t                                       HighVelocity;                                                 // 0x0038(0x0004)
    float                                         LowVelocity;                                                  // 0x003C(0x0004)
    int32_t                                       LowVelocity;                                                  // 0x0040(0x0004)
    int32_t                                       LowVelocity;                                                  // 0x0044(0x0004)
    int32_t                                       LowVelocity;                                                  // 0x0048(0x0004)
    int32_t                                       LowVelocity;                                                  // 0x004C(0x0004)
    int32_t                                       LowVelocity;                                                  // 0x0050(0x0004)
};


// ScriptStruct  SGFramework.UIOpStruct
// Struct Size::0x0002
struct FUIOpStruct
{
    enum class ESGUIOperationForSpectating        Op;                                                           // 0x0000(0x0001)
    bool                                          bOpen;                                                        // 0x0001(0x0001)
};


// ScriptStruct  SGFramework.SGCharacterSpringAnimInstanceProxy
// Struct Size::0x0910
struct FSGCharacterSpringAnimInstanceProxy : public FAnimInstanceProxy
{
    bool                                          bAiming;                                                      // 0x0860(0x0001)
    bool                                          bShouldAlignAroundPivot;                                      // 0x0861(0x0001)
    char                                          pa_0862[0x0002]                                               // 0x0862(0x0002)
    FVector                                       HandTranslation;                                              // 0x0864(0x000C)
    FRotator                                      HandRotation;                                                 // 0x0870(0x000C)
    FRotator                                      HandPivotRotation;                                            // 0x087C(0x000C)
    FRotator                                      RecoilPivotRotation;                                          // 0x0888(0x000C)
    FVector                                       RecoilPivot;                                                  // 0x0894(0x000C)
    FRotator                                      WeaponSwayRotation;                                           // 0x08A0(0x000C)
    FVector                                       WeaponSwayPivot;                                              // 0x08AC(0x000C)
    FVector                                       AimingAlignPivot;                                             // 0x08B8(0x000C)
    char                                          pa_08C4[0x000C]                                               // 0x08C4(0x000C)
    FTransform                                    AimingTransform;                                              // 0x08D0(0x0030)
    FVector                                       CameraTranslation;                                            // 0x0900(0x000C)
    float                                         AimingAlignSpeed;                                             // 0x090C(0x0004)
};


// ScriptStruct  SGFramework.TacticalPistolRepInfo
// Struct Size::0x0020
struct FTacticalPistolRepInfo
{
    enum class ETacticalPistolStatus              TacticalPistolStatus;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    ASGInventory*                                 LeftHandWeapon;                                               // 0x0008(0x0008)
    ASGInventory*                                 RightHandWeapon;                                              // 0x0010(0x0008)
    bool                                          UpdateWeaponEquipPos;                                         // 0x0018(0x0001)
    bool                                          bPlayingMontage;                                              // 0x0019(0x0001)
    bool                                          bUseFastTrans;                                                // 0x001A(0x0001)
    char                                          pa_001B[0x0005]                                               // 0x001B(0x0005)
};


// ScriptStruct  SGFramework.RepTakeHitInfo
// Struct Size::0x00F0
struct FRepTakeHitInfo
{
    FTakeHitInfo                                  TakeHitInfo;                                                  // 0x0000(0x0058)
    FHitResult                                    TakeHitResult;                                                // 0x0058(0x0098)
};


// ScriptStruct  SGFramework.TakeHitInfo
// Struct Size::0x0058
struct FTakeHitInfo
{
    float                                         Damage;                                                       // 0x0000(0x0004)
    FVector                                       Momentum;                                                     // 0x0004(0x000C)
    char                                          ShotDirPitch;                                                 // 0x0010(0x0001)
    char                                          ShotDirYaw;                                                   // 0x0011(0x0001)
    enum class EHitGroupType                      HitGroup;                                                     // 0x0012(0x0001)
    bool                                          bPenerateArmor;                                               // 0x0013(0x0001)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    uint64_t                                      HitArmorItemID;                                               // 0x0018(0x0008)
    AActor*                                       Causer;                                                       // 0x0020(0x0008)
    AActor*                                       DamageCauser;                                                 // 0x0028(0x0008)
    enum class EDamageTypeEnum                    DamageTypeEnum;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    AActor*                                       AmmoClass;                                                    // 0x0038(0x0008)
    float                                         FlyDistance;                                                  // 0x0040(0x0004)
    bool                                          bTerminal;                                                    // 0x0044(0x0001)
    char                                          HitFlags;                                                     // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    FSGBulletID                                   BulletID;                                                     // 0x0048(0x0010)
};


// ScriptStruct  SGFramework.SpectatingFlowData
// Struct Size::0x0038
struct FSpectatingFlowData
{
    int32_t                                       eventId;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       SpectatedOpenID;                                              // 0x0008(0x0010)
    FString                                       SpectatedGUID;                                                // 0x0018(0x0010)
    float                                         SpectatingTime;                                               // 0x0028(0x0004)
    float                                         BattleTime;                                                   // 0x002C(0x0004)
    float                                         AliveTime;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.EnterDBNOBackupData
// Struct Size::0x0010
struct FEnterDBNOBackupData
{
    float                                         KillDistance;                                                 // 0x0000(0x0004)
    bool                                          bHitArmor;                                                    // 0x0004(0x0001)
    bool                                          bPenetrateArmor;                                              // 0x0005(0x0001)
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    int32_t                                       KillerBulletPenetrateFactor;                                  // 0x0008(0x0004)
    enum class ECharacterDeathType                DeathType;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  SGFramework.LastHitPlayerInfo
// Struct Size::0x00E0
struct FLastHitPlayerInfo
{
    ASGCharacter*                                 Character;                                                    // 0x0000(0x0008)
    int64_t                                       TakerGID;                                                     // 0x0008(0x0008)
    int32_t                                       bPenetrateArmor;                                              // 0x0010(0x0004)
    float                                         PenetrateArmorProbability;                                    // 0x0014(0x0004)
    FString                                       TakerName;                                                    // 0x0018(0x0010)
    int64_t                                       BulletID;                                                     // 0x0028(0x0008)
    uint64_t                                      ArmorId;                                                      // 0x0030(0x0008)
    int32_t                                       CurrentArmorDurability;                                       // 0x0038(0x0004)
    int32_t                                       CurrentArmorDurabilityMax;                                    // 0x003C(0x0004)
    float                                         TotalDamage;                                                  // 0x0040(0x0004)
    float                                         TotalArmorReduceDamage;                                       // 0x0044(0x0004)
    bool                                          bIsDBNO;                                                      // 0x0048(0x0001)
    bool                                          bIsDead;                                                      // 0x0049(0x0001)
    char                                          pa_004A[0x0002]                                               // 0x004A(0x0002)
    int32_t                                       bBodyHitThrough;                                              // 0x004C(0x0004)
    float                                         ShootDistance;                                                // 0x0050(0x0004)
    int32_t                                       WeaponId;                                                     // 0x0054(0x0004)
    FSGPlayerIconInfo                             PlayerIconInfo;                                               // 0x0058(0x0048)
    FSGPlayerShowInfo                             PlayerShowInfo;                                               // 0x00A0(0x0040)
};


// ScriptStruct  SGFramework.DSWeaponValidateFail
// Struct Size::0x0038
struct FDSWeaponValidateFail
{
    FString                                       WeaponId;                                                     // 0x0000(0x0010)
    int32_t                                       WeaponType;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       FailType;                                                     // 0x0018(0x0010)
    FString                                       ReasonStr;                                                    // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.BroadcastOnGameHUDConfig
// Struct Size::0x0030
struct FBroadcastOnGameHUDConfig
{
    enum class EReportType                        ReportType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       OptionalMessageID;                                            // 0x0004(0x0004)
    FText                                         OptionalText;                                                 // 0x0008(0x0018)
    bool                                          bNotClearQueue;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       CheckServerTimeIndex;                                         // 0x0024(0x0004)
    bool                                          bCheckOutOfTime;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  SGFramework.TickSettingBaseOnURO
// Struct Size::0x0010
struct FTickSettingBaseOnURO
{
    TArray<FTickSettingPerURO>                    URO;                                                          // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.TickSettingPerURO
// Struct Size::0x000C
struct FTickSettingPerURO
{
    bool                                          bEnableUpdate;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         TickInternal;                                                 // 0x0004(0x0004)
    float                                         TickAccumulate;                                               // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.HitBulletHolesInfo
// Struct Size::0x0028
struct FHitBulletHolesInfo
{
    FString                                       TakerName;                                                    // 0x0000(0x0010)
    int64_t                                       BulletID;                                                     // 0x0010(0x0008)
    int32_t                                       bBodyHitThrough;                                              // 0x0018(0x0004)
    float                                         ShootDistance;                                                // 0x001C(0x0004)
    int32_t                                       WeaponId;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.BulletHolesInfo
// Struct Size::0x00A0
struct FBulletHolesInfo
{
    int64_t                                       TakerGID;                                                     // 0x0000(0x0008)
    int64_t                                       CauserGID;                                                    // 0x0008(0x0008)
    float                                         ArmorReduceDamage;                                            // 0x0010(0x0004)
    float                                         RealDamage;                                                   // 0x0014(0x0004)
    enum class EHitGroupType                      BodyPart;                                                     // 0x0018(0x0001)
    enum class EHeadHitSubGroupType               HeadSubGroupPart;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    int32_t                                       Timestamp;                                                    // 0x001C(0x0004)
    FBodyPartEndurance                            BeforeEndurance;                                              // 0x0020(0x001C)
    FBodyPartEndurance                            CurrentEndurance;                                             // 0x003C(0x001C)
    FBodyPartEndurance                            MaxEndurance;                                                 // 0x0058(0x001C)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FBodyPartBuffInfo>                     BuffList;                                                     // 0x0078(0x0010)
    uint64_t                                      ArmorId;                                                      // 0x0088(0x0008)
    int32_t                                       CurrentArmorDurability;                                       // 0x0090(0x0004)
    int32_t                                       CurrentArmorDurabilityMax;                                    // 0x0094(0x0004)
    float                                         PenetrateArmorProbability;                                    // 0x0098(0x0004)
    bool                                          bPenetrateArmor;                                              // 0x009C(0x0001)
    bool                                          bBodyHitThrough;                                              // 0x009D(0x0001)
    char                                          pa_009E[0x0002]                                               // 0x009E(0x0002)
};


// ScriptStruct  SGFramework.BodyPartBuffInfo
// Struct Size::0x0018
struct FBodyPartBuffInfo
{
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               BuffList;                                                     // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.BodyPartEndurance
// Struct Size::0x001C
struct FBodyPartEndurance
{
    float                                         HeadEndurance;                                                // 0x0000(0x0004)
    float                                         ChestEndurance;                                               // 0x0004(0x0004)
    float                                         StomachEndurance;                                             // 0x0008(0x0004)
    float                                         LeftArmEndurance;                                             // 0x000C(0x0004)
    float                                         RightArmEndurance;                                            // 0x0010(0x0004)
    float                                         LeftLegEndurance;                                             // 0x0014(0x0004)
    float                                         RightLegEndurance;                                            // 0x0018(0x0004)
};


// ScriptStruct  SGFramework.CharacterAbilityDebugInfo
// Struct Size::0x0050
struct FCharacterAbilityDebugInfo
{
    TArray<FString>                               ActiveAbiltiyNameList;                                        // 0x0000(0x0010)
    TArray<FString>                               ActiveGameEffectNameList;                                     // 0x0010(0x0010)
    TArray<FString>                               OwnedTagsList;                                                // 0x0020(0x0010)
    TArray<FString>                               BlockedTagsStringList;                                        // 0x0030(0x0010)
    TArray<FString>                               MinimalTagsList;                                              // 0x0040(0x0010)
};


// ScriptStruct  SGFramework.MontageTickCondition
// Struct Size::0x0028
struct FMontageTickCondition
{
    bool                                          bShouldTickPose;                                              // 0x0000(0x0001)
    bool                                          bNoSkeletonUpdate;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       AnimScriptInstanceName;                                       // 0x0008(0x0010)
    FString                                       VisibilityBasedAnimTickOptionName;                            // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGUsingInventoryRepAnimInfo
// Struct Size::0x0038
struct FSGUsingInventoryRepAnimInfo
{
    UAnimMontage*                                 CharacterMontage;                                             // 0x0000(0x0008)
    UAnimMontage*                                 InventoryMontage;                                             // 0x0008(0x0008)
    USkeletalMesh*                                InventoryMesh;                                                // 0x0010(0x0008)
    float                                         Rate;                                                         // 0x0018(0x0004)
    FName                                         StartSection;                                                 // 0x001C(0x0008)
    FName                                         AttachSocket;                                                 // 0x0024(0x0008)
    float                                         StartTimeStamp;                                               // 0x002C(0x0004)
    bool                                          PlayBit;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SGFramework.ArmorConsumeStruct
// Struct Size::0x0020
struct FArmorConsumeStruct
{
    float                                         ArmorConsume;                                                 // 0x0000(0x0004)
    float                                         BlockDamage;                                                  // 0x0004(0x0004)
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    int32_t                                       BodyPart;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int64_t                                       BulletID;                                                     // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.DebuffInfoStruct
// Struct Size::0x0028
struct FDebuffInfoStruct
{
    int64_t                                       CauserId;                                                     // 0x0000(0x0008)
    int64_t                                       TakerId;                                                      // 0x0008(0x0008)
    int64_t                                       EventTime;                                                    // 0x0010(0x0008)
    int32_t                                       BodyPart;                                                     // 0x0018(0x0004)
    int32_t                                       DebuffType;                                                   // 0x001C(0x0004)
    int32_t                                       GrantedFlag;                                                  // 0x0020(0x0004)
    float                                         EffectDuration;                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.ArmorDamageStruct
// Struct Size::0x0018
struct FArmorDamageStruct
{
    float                                         BlockDamage;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       DamageTime;                                                   // 0x0008(0x0008)
    int64_t                                       TakerId;                                                      // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.RealDamageOnBodyPartForTlog
// Struct Size::0x0018
struct FRealDamageOnBodyPartForTlog
{
    int32_t                                       BodyPart;                                                     // 0x0000(0x0004)
    float                                         RealDamage;                                                   // 0x0004(0x0004)
    int32_t                                       ExtraFlag;                                                    // 0x0008(0x0004)
    char                                          TakerTeamType;                                                // 0x000C(0x0001)
    char                                          CauserTeamType;                                               // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    uint32_t                                      BulletID;                                                     // 0x0010(0x0004)
    int32_t                                       DamageCauserType;                                             // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.RealDamageOnBodyPartStruct
// Struct Size::0x0098
struct FRealDamageOnBodyPartStruct
{
    int64_t                                       CauserId;                                                     // 0x0000(0x0008)
    int64_t                                       TakerId;                                                      // 0x0008(0x0008)
    int32_t                                       CauserTeamId;                                                 // 0x0010(0x0004)
    int32_t                                       TeamID;                                                       // 0x0014(0x0004)
    char                                          CauserTeamType;                                               // 0x0018(0x0001)
    char                                          TakerTeamType;                                                // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    int64_t                                       DamageTime;                                                   // 0x0020(0x0008)
    float                                         AttackDamage;                                                 // 0x0028(0x0004)
    float                                         RealDamage;                                                   // 0x002C(0x0004)
    int64_t                                       FireCounter;                                                  // 0x0030(0x0008)
    int32_t                                       BodyPart;                                                     // 0x0038(0x0004)
    int32_t                                       DetailBodyPart;                                               // 0x003C(0x0004)
    int64_t                                       DamageCauserID;                                               // 0x0040(0x0008)
    FVector                                       DamagePosition;                                               // 0x0048(0x000C)
    FVector                                       DamagedPosition;                                              // 0x0054(0x000C)
    float                                         DamageDistance;                                               // 0x0060(0x0004)
    int32_t                                       DamageCauserType;                                             // 0x0064(0x0004)
    int64_t                                       BulletID;                                                     // 0x0068(0x0008)
    int32_t                                       bPenetrateArmor;                                              // 0x0070(0x0004)
    float                                         PenetrateArmorProbability;                                    // 0x0074(0x0004)
    int32_t                                       ExtraFlag;                                                    // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       CauserName;                                                   // 0x0080(0x0010)
    float                                         CauseArmorReduceDamage;                                       // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  SGFramework.BulletPassStructDeprecated
// Struct Size::0x004C
struct FBulletPassStructDeprecated
{
    float                                         Velocity;                                                     // 0x0000(0x0004)
    FVector                                       PassDir;                                                      // 0x0004(0x000C)
    FVector                                       PassLocation;                                                 // 0x0010(0x000C)
    float                                         BulletPassAngle;                                              // 0x001C(0x0004)
    float                                         TimeToReach;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0010]                                               // 0x0024(0x0010)
    FVector                                       EnterPoint;                                                   // 0x0034(0x000C)
    FVector                                       LeavePoint;                                                   // 0x0040(0x000C)
};


// ScriptStruct  SGFramework.EndurancePartInfo
// Struct Size::0x0010
struct FEndurancePartInfo
{
    enum class ECharacterEnduranceType            EndurancePart;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NowEndurance;                                                 // 0x0004(0x0004)
    float                                         MaxEndurance;                                                 // 0x0008(0x0004)
    float                                         EndurancePercent;                                             // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGCharacterLadderClimbData
// Struct Size::0x0030
struct FSGCharacterLadderClimbData
{
    bool                                          bIsClimbing;                                                  // 0x0000(0x0001)
    bool                                          bIsStartClimb;                                                // 0x0001(0x0001)
    bool                                          bIsClimbFinish;                                               // 0x0002(0x0001)
    enum class ELadderClimbEnterType              EnterType;                                                    // 0x0003(0x0001)
    enum class ELadderClimbExitType               ExitType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    AActor*                                       ClimbLadder;                                                  // 0x0008(0x0008)
    float                                         OriginGravityScale;                                           // 0x0010(0x0004)
    float                                         TraceDistance;                                                // 0x0014(0x0004)
    float                                         StartClimbTime;                                               // 0x0018(0x0004)
    float                                         EndClimbTime;                                                 // 0x001C(0x0004)
    float                                         LadderHalfHeight;                                             // 0x0020(0x0004)
    float                                         LeaveGroundDistance;                                          // 0x0024(0x0004)
    float                                         ClimbSpeed;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.CharacterGameEffectTags
// Struct Size::0x0040
struct FCharacterGameEffectTags
{
    FGameplayTag                                  AnyTag;                                                       // 0x0000(0x0008)
    FGameplayTag                                  HeadTag;                                                      // 0x0008(0x0008)
    FGameplayTag                                  ChestTag;                                                     // 0x0010(0x0008)
    FGameplayTag                                  StomachTag;                                                   // 0x0018(0x0008)
    FGameplayTag                                  LeftArmTag;                                                   // 0x0020(0x0008)
    FGameplayTag                                  RightArmTag;                                                  // 0x0028(0x0008)
    FGameplayTag                                  LeftLegTag;                                                   // 0x0030(0x0008)
    FGameplayTag                                  RightLegTag;                                                  // 0x0038(0x0008)
};


// ScriptStruct  SGFramework.SGFreeGridQueryParams
// Struct Size::0x0028
struct FSGFreeGridQueryParams
{
    AActor*                                       IgnoreInventory;                                              // 0x0000(0x0008)
    AActor*                                       IgnoreInventory2;                                             // 0x0008(0x0008)
    bool                                          bAllowMerge;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    int64_t                                       SelfItemID;                                                   // 0x0018(0x0008)
    enum class ESearchingPrefer                   SearchingPrefer;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  SGFramework.SGGlobalGridOccupyInfo
// Struct Size::0x0028
struct FSGGlobalGridOccupyInfo
{
    ASGInventory*                                 ContainerInventory;                                           // 0x0000(0x0008)
    int32_t                                       ContainerIndex;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSGGridOccupyInfo                             OccupyInfo;                                                   // 0x0010(0x0018)
};


// ScriptStruct  SGFramework.SGGridOccupyInfo
// Struct Size::0x0018
struct FSGGridOccupyInfo
{
    int32_t                                       StartRow;                                                     // 0x0000(0x0004)
    int32_t                                       StartColumn;                                                  // 0x0004(0x0004)
    int32_t                                       EndRow;                                                       // 0x0008(0x0004)
    int32_t                                       EndColumn;                                                    // 0x000C(0x0004)
    ASGInventory*                                 MergeTargetInventory;                                         // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterVehicleReplicationData
// Struct Size::0x0038
struct FSGCharacterVehicleReplicationData
{
    enum class ESGCharacterVehicleSyncType        SyncType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    APawn*                                        Vehicle;                                                      // 0x0008(0x0008)
    int32_t                                       SeatIndex;                                                    // 0x0010(0x0004)
    FVector                                       ExitLocation;                                                 // 0x0014(0x000C)
    FRotator                                      ExitRotation;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    APawn*                                        LastVehicle;                                                  // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.SGUVStruct
// Struct Size::0x0010
struct FSGUVStruct
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.CharacterHealthStaticsWhenDeads
// Struct Size::0x0010
struct FCharacterHealthStaticsWhenDeads
{
    TArray<FCharacterHealthStaticsWhenDead>       CharacterHealthStaticsWhenDeadArray;                          // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.WeaponAttachInfoStruct
// Struct Size::0x0040
struct FWeaponAttachInfoStruct
{
    ASGInventory*                                 TargetWeapon;                                                 // 0x0000(0x0008)
    int32_t                                       SocketIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FTransform                                    OriginalTransform;                                            // 0x0010(0x0030)
};


// ScriptStruct  SGFramework.SGHandWeaponState
// Struct Size::0x00B8
struct FSGHandWeaponState
{
    enum class ESGHandState                       HandState;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSGSwitchWeaponIntent                         Intent;                                                       // 0x0008(0x0018)
    FSGMontagePlayParams                          HandAnim;                                                     // 0x0020(0x0048)
    FSGMontagePlayParams                          WeaponAnim;                                                   // 0x0068(0x0048)
    bool                                          bIntentFullFilled;                                            // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  SGFramework.SGSwitchToInventoryStatus
// Struct Size::0x0018
struct FSGSwitchToInventoryStatus
{
    ASGWeapon*                                    SourceWeapon;                                                 // 0x0000(0x0008)
    ASGInventory*                                 DestInventory;                                                // 0x0008(0x0008)
    enum class ESwitchToInventoryStage            Stage;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.SGSwitchWeaponStatus
// Struct Size::0x0018
struct FSGSwitchWeaponStatus
{
    ASGWeapon*                                    SourceWeapon;                                                 // 0x0000(0x0008)
    ASGWeapon*                                    DestWeapon;                                                   // 0x0008(0x0008)
    enum class ESwitchWeaponStage                 Stage;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.WeaponTraceRightHandOffsetParam
// Struct Size::0x0024
struct FWeaponTraceRightHandOffsetParam
{
    FRotator                                      RotationOffset;                                               // 0x0000(0x000C)
    FVector                                       LocationOffset;                                               // 0x000C(0x000C)
    FVector                                       LocationOffset;                                               // 0x0018(0x000C)
};


// ScriptStruct  SGFramework.APIPlayerDynamicInfo
// Struct Size::0x0030
struct FAPIPlayerDynamicInfo
{
    uint64_t                                      GID;                                                          // 0x0000(0x0008)
    uint64_t                                      TakeOutAllValue;                                              // 0x0008(0x0008)
    uint64_t                                      HarvestValue;                                                 // 0x0010(0x0008)
    enum class ESGCompetitionStatusType           AliveState;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    uint32_t                                      KillPMCNum;                                                   // 0x001C(0x0004)
    TArray<FAPIEquipmentInfo>                     AllTakeEquipmentArray;                                        // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.APIEquipmentInfo
// Struct Size::0x000C
struct FAPIEquipmentInfo
{
    uint32_t                                      ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       ItemValue;                                                    // 0x0004(0x0004)
    uint32_t                                      ItemNum;                                                      // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.CompetitionPlayerKillList
// Struct Size::0x0020
struct FCompetitionPlayerKillList
{
    uint64_t                                      KillerGID;                                                    // 0x0000(0x0008)
    APlayerState*                                 PS;                                                           // 0x0008(0x0008)
    TArray<FCompetitionKillInfo>                  KillInfoArray;                                                // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.PlayerStatusInfo
// Struct Size::0x0010
struct FPlayerStatusInfo
{
    uint64_t                                      PlayerGID;                                                    // 0x0000(0x0008)
    int32_t                                       StatusValue;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGCompSignificanceVolumeRelevantInfo
// Struct Size::0x0028
struct FSGCompSignificanceVolumeRelevantInfo
{
    enum class ESGCompSignificanceVolumeRelevantTypeType;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<ASGCompSignificanceVolume*>            GroupA;                                                       // 0x0008(0x0010)
    TArray<ASGCompSignificanceVolume*>            GroupB;                                                       // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.AutoCaptureInvsFilter
// Struct Size::0x0030
struct FAutoCaptureInvsFilter
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  SGFramework.SGContainerEffectParam
// Struct Size::0x0030
struct FSGContainerEffectParam
{
    int64_t                                       AllInventoryThresholdValue;                                   // 0x0000(0x0008)
    TSoftObjectPtr<UParticleSystem>               ParticleSystemAsset;                                          // 0x0008(0x0028)
};


// ScriptStruct  SGFramework.ContextMenuSlotSetting
// Struct Size::0x0030
struct FContextMenuSlotSetting : public FTableRowBase
{
    enum class ESlotEnum                          SlotType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FText                                         TextName;                                                     // 0x0010(0x0018)
    UTexture2D*                                   SlotIcon;                                                     // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.ItemRotatorConf
// Struct Size::0x0028
struct FItemRotatorConf : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    FRotator                                      Rotator;                                                      // 0x000C(0x000C)
    FRotator                                      WeaponBuildOverviewRotator;                                   // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.ColorLUTConf
// Struct Size::0x0020
struct FColorLUTConf : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    UTexture2D*                                   Image;                                                        // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGGAData
// Struct Size::0x0008
struct FSGGAData : public FTableRowBase
{
};


// ScriptStruct  SGFramework.InventoryGAData
// Struct Size::0x0208
struct FInventoryGAData : public FSGGAData
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FGameplayTagContainer                         InventoryTagType;                                             // 0x0010(0x0020)
    TSoftObjectPtr<USkeletalMesh>                 MeshAsset;                                                    // 0x0030(0x0028)
    TSoftClassPtr<UObject>                        MeshAnimInstace;                                              // 0x0058(0x0028)
    TSoftObjectPtr<UAnimMontage>                  MeshMontageToPlay;                                            // 0x0080(0x0028)
    TSoftObjectPtr<UAnimMontage>                  CharMontageToPlay;                                            // 0x00A8(0x0028)
    FName                                         MontageStartSection;                                          // 0x00D0(0x0008)
    float                                         PlayRate;                                                     // 0x00D8(0x0004)
    bool                                          bUseDynamicLoopCount;                                         // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    float                                         Period;                                                       // 0x00E0(0x0004)
    float                                         CureValueOncePeriod;                                          // 0x00E4(0x0004)
    FGameplayTag                                  AbilityGameplayTag;                                           // 0x00E8(0x0008)
    float                                         GA;                                                           // 0x00F0(0x0004)
    bool                                          bApplyGEOneByOne;                                             // 0x00F4(0x0001)
    char                                          pa_00F5[0x0003]                                               // 0x00F5(0x0003)
    float                                         GameplayEffectEndTime;                                        // 0x00F8(0x0004)
    FName                                         AttachSocket;                                                 // 0x00FC(0x0008)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    TArray<FSGGEDataLookupDT>                     GA;                                                           // 0x0108(0x0010)
    TArray<FSGGEDataLookupDT>                     GA;                                                           // 0x0118(0x0010)
    TArray<FSGGEDataLookupDT>                     GA;                                                           // 0x0128(0x0010)
    int32_t                                       PassivePriority;                                              // 0x0138(0x0004)
    char                                          pa_013C[0x0004]                                               // 0x013C(0x0004)
    TMap<FGameplayTag,FInventoryPassiveGEContainer>PassiveGameplayEffectsConfigMap;                             // 0x0140(0x0050)
    float                                         AttachSetupDuration;                                          // 0x0190(0x0004)
    float                                         DetachSetupDuration;                                          // 0x0194(0x0004)
    bool                                          bShowCancelButton;                                            // 0x0198(0x0001)
    char                                          pa_0199[0x0007]                                               // 0x0199(0x0007)
    TMap<uint32_t,float>                          SubInventoryProbabilityConfigMap;                             // 0x01A0(0x0050)
    FSGGEDataLookupDT                             SetupGERef;                                                   // 0x01F0(0x0018)
};


// ScriptStruct  SGFramework.SGGEDataLookupDT
// Struct Size::0x0018
struct FSGGEDataLookupDT
{
    UDataTable*                                   DataOwner;                                                    // 0x0000(0x0008)
    uint32_t                                      GEData;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.InventoryPassiveGEContainer
// Struct Size::0x0018
struct FInventoryPassiveGEContainer
{
    int32_t                                       MaxUsageNum;                                                  // 0x0000(0x0004)
    int32_t                                       DurabilityPerUsage;                                           // 0x0004(0x0004)
    TArray<FSGGEDataLookupDT>                     GameplayEffectsRefConfigList;                                 // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.SGGEData
// Struct Size::0x00C8
struct FSGGEData : public FTableRowBase
{
    uint32_t                                      OwnerItemID;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UGameplayEffect*                              GameplayEffect;                                               // 0x0010(0x0008)
    TArray<FInventoryGEAttributeModifier>         AttributeModifiers;                                           // 0x0018(0x0010)
    float                                         Duration;                                                     // 0x0028(0x0004)
    float                                         Period;                                                       // 0x002C(0x0004)
    UGameplayModMagnitudeCalculation*             DurationCalcClass;                                            // 0x0030(0x0008)
    float                                         Chance;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FGameplayTagContainer                         GrantedTags;                                                  // 0x0040(0x0020)
    FGameplayTagContainer                         RemoveGEWithGameplayTag;                                      // 0x0060(0x0020)
    FGameplayTagContainer                         GEAssetGameplayTag;                                           // 0x0080(0x0020)
    bool                                          bBodypartLimitUse;                                            // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
    TArray<FSGGEDataLookupDT>                     PrematureExpirationGameplayEffectsRefList;                    // 0x00A8(0x0010)
    TArray<FSGGEDataLookupDT>                     RoutineExpirationGameplayEffectsRefList;                      // 0x00B8(0x0010)
};


// ScriptStruct  SGFramework.InventoryGEAttributeModifier
// Struct Size::0x00D0
struct FInventoryGEAttributeModifier
{
    FGameplayAttribute                            ModifyAttribute;                                              // 0x0000(0x0038)
    float                                         ModifyValue;                                                  // 0x0038(0x0004)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    UGameplayModMagnitudeCalculation*             CalculationClassMagnitude;                                    // 0x0040(0x0008)
    float                                         Coefficient;                                                  // 0x0048(0x0004)
    char                                          Priority;                                                     // 0x004C(0x0001)
    enum class EGameplayModsSelector              ModsSelector;                                                 // 0x004D(0x0001)
    enum class EGameplayModEvaluationChannel      ModChannel;                                                   // 0x004E(0x0001)
    char                                          pa_004F[0x0001]                                               // 0x004F(0x0001)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0050(0x0040)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0090(0x0040)
};


// ScriptStruct  SGFramework.InventoryGE
// Struct Size::0x00C8
struct FInventoryGE : public FSGGEData
{
};


// ScriptStruct  SGFramework.SGGADataReference
// Struct Size::0x0010
struct FSGGADataReference
{
    UObject*                                      DataOwner;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.ServerKey2Text
// Struct Size::0x0030
struct FServerKey2Text : public FTableRowBase
{
    FString                                       ServerKey;                                                    // 0x0008(0x0010)
    FText                                         ServerText;                                                   // 0x0018(0x0018)
};


// ScriptStruct  SGFramework.DoorDeferUpdateInfo
// Struct Size::0x0018
struct FDoorDeferUpdateInfo
{
    TWeakObjectPtr<ASGDoorBase>                   DoorWeakPtr;                                                  // 0x0000(0x0008)
    FRotator                                      TwoWayDoorPlankRotator;                                       // 0x0008(0x000C)
    float                                         DynamicLightingFactor;                                        // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.RelightingPortalData
// Struct Size::0x0080
struct FRelightingPortalData
{
    FTransform                                    Transfrom;                                                    // 0x0000(0x0030)
    bool                                          bProbeInjection;                                              // 0x0030(0x0001)
    bool                                          bSunGI;                                                       // 0x0031(0x0001)
    bool                                          bSkyLight;                                                    // 0x0032(0x0001)
    bool                                          bLocalLight;                                                  // 0x0033(0x0001)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FVector4                                      LocalLightSHVectorR;                                          // 0x0040(0x0010)
    FVector4                                      LocalLightSHVectorG;                                          // 0x0050(0x0010)
    FVector4                                      LocalLightSHVectorB;                                          // 0x0060(0x0010)
    bool                                          bMultiBounceGI;                                               // 0x0070(0x0001)
    bool                                          bCastShadowMap;                                               // 0x0071(0x0001)
    bool                                          bSurfelLighting;                                              // 0x0072(0x0001)
    char                                          pa_0073[0x0001]                                               // 0x0073(0x0001)
    float                                         Weight;                                                       // 0x0074(0x0004)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  SGFramework.SGDoorMovementSyncInfo
// Struct Size::0x001C
struct FSGDoorMovementSyncInfo
{
    FSGDoorMovementInfo                           MovementInfo;                                                 // 0x0000(0x0018)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
};


// ScriptStruct  SGFramework.SGDoorMovementInfo
// Struct Size::0x0018
struct FSGDoorMovementInfo
{
    bool                                          bIsMoving;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MovingProgress;                                               // 0x0004(0x0004)
    enum class ESGDoorState                       PreState;                                                     // 0x0008(0x0001)
    enum class ESGDoorState                       NewState;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         MoveSpeed;                                                    // 0x000C(0x0004)
    int32_t                                       OptCount;                                                     // 0x0010(0x0004)
    bool                                          bInit;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  SGFramework.SGThrowWeaponPerWeaponAnimSetDuplicateConfig
// Struct Size::0x0108
struct FSGThrowWeaponPerWeaponAnimSetDuplicateConfig
{
    UObject*                                      PerWeaponAnimSetToDuplicate;                                  // 0x0000(0x0008)
    FString                                       OutPathSet;                                                   // 0x0008(0x0010)
    FString                                       OutPathHand;                                                  // 0x0018(0x0010)
    FString                                       OutPathWeapon;                                                // 0x0028(0x0010)
    bool                                          bAutoSave;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       BaseWeaponName;                                               // 0x0040(0x0010)
    FString                                       TargetWeaponName;                                             // 0x0050(0x0010)
    FName                                         SlotNameToUseOldAnim;                                         // 0x0060(0x0008)
    TMap<FName,UAnimMontage*>                     SourceHandMontageByPropertyNameMap;                           // 0x0068(0x0050)
    TMap<FName,UAnimMontage*>                     SourceWeaponMontageByPropertyNameMap;                         // 0x00B8(0x0050)
};


// ScriptStruct  SGFramework.SGPerWeaponAnimSetDuplicateConfig
// Struct Size::0x0178
struct FSGPerWeaponAnimSetDuplicateConfig
{
    UObject*                                      PerWeaponAnimSetToDuplicate;                                  // 0x0000(0x0008)
    FString                                       OutPathSet;                                                   // 0x0008(0x0010)
    FString                                       OutPathHand;                                                  // 0x0018(0x0010)
    FString                                       OutPathWeapon;                                                // 0x0028(0x0010)
    TArray<FName>                                 PropertiesToDuplicateHand;                                    // 0x0038(0x0010)
    TArray<FName>                                 PropertiesToDuplicateWeapon;                                  // 0x0048(0x0010)
    TArray<FName>                                 PropertiesNotToDuplicateHand;                                 // 0x0058(0x0010)
    TArray<FName>                                 PropertiesNotToDuplicateWeapon;                               // 0x0068(0x0010)
    bool                                          bAutoSave;                                                    // 0x0078(0x0001)
    bool                                          bOverrideCurve;                                               // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    FSGPerWeaponAnimSetAnimNotifyStateConfig      NotifyStateConfig;                                            // 0x0080(0x0058)
    TMap<FName,UAnimMontage*>                     ReplaceHandMontageByPropertyNameMap;                          // 0x00D8(0x0050)
    TMap<FName,UAnimMontage*>                     ReplaceWeaponMontageByPropertyNameMap;                        // 0x0128(0x0050)
};


// ScriptStruct  SGFramework.SGPerWeaponAnimSetAnimNotifyStateConfig
// Struct Size::0x0058
struct FSGPerWeaponAnimSetAnimNotifyStateConfig
{
    UAnimNotifyState*                             NotifyStateClass;                                             // 0x0000(0x0008)
    TMap<FName,float>                             PropertyNameToNotifyStateDuration;                            // 0x0008(0x0050)
};


// ScriptStruct  SGFramework.CachedFirePassByInfo
// Struct Size::0x0068
struct FCachedFirePassByInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TSet<AActor*>                                 CachedActors;                                                 // 0x0010(0x0050)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  SGFramework.SGGameInfo
// Struct Size::0x0014
struct FSGGameInfo
{
    uint32_t                                      MainModeID;                                                   // 0x0000(0x0004)
    uint32_t                                      SubModeID;                                                    // 0x0004(0x0004)
    uint32_t                                      MapID;                                                        // 0x0008(0x0004)
    uint32_t                                      Difficulty;                                                   // 0x000C(0x0004)
    uint32_t                                      SpecialID;                                                    // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.DeferredExecCmd
// Struct Size::0x0018
struct FDeferredExecCmd
{
    UWorld*                                       ExecWorld;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.ActivityRequireComponentInfo
// Struct Size::0x0010
struct FActivityRequireComponentInfo
{
    UActorComponent*                              ActivityGameStateComponent;                                   // 0x0000(0x0008)
    UActorComponent*                              ActivityPlayerStateComponent;                                 // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GestureAnim
// Struct Size::0x0080
struct FGestureAnim
{
    bool                                          bOneHand;                                                     // 0x0000(0x0001)
    bool                                          bFullBody;                                                    // 0x0001(0x0001)
    enum class EGestureType                       GestureType;                                                  // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    TSoftObjectPtr<UAnimMontage>                  GestureRifle;                                                 // 0x0008(0x0028)
    TSoftObjectPtr<UAnimMontage>                  GestureEmptyHand;                                             // 0x0030(0x0028)
    TSoftObjectPtr<UAnimMontage>                  GestureTwoHandsMelee;                                         // 0x0058(0x0028)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0068
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FHostedInteractAnimInfo                       AnimInfo;                                                     // 0x0008(0x0060)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0010
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    int32_t                                       InteractIndex;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0020
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FString                                       SprayTexturePath;                                             // 0x0008(0x0010)
    int32_t                                       SprayItemID;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0018
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    int32_t                                       GestureItemID;                                                // 0x0008(0x0004)
    FRotator                                      ActorRotation;                                                // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0010
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    enum class EAdapterAnimationType              AdapterAnimationType;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0018
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FVector                                       TargetLocation;                                               // 0x0008(0x000C)
    float                                         Duration;                                                     // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x00D0
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FDeliverCargosAnimInfo                        AnimInfo;                                                     // 0x0008(0x00C8)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0018
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    UObject*                                      ActorToSpawnClass;                                            // 0x0008(0x0008)
    AActor*                                       ActorToUse;                                                   // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0010
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FLadderClimbingNetInfo                        NetInfo;                                                      // 0x0008(0x0003)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0010
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    enum class EUABagOperation                    Operation;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0028
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    FVector                                       StartPos;                                                     // 0x0008(0x000C)
    FVector                                       EndPos;                                                       // 0x0014(0x000C)
    FName                                         LineTraceHitBoneName;                                         // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.SGGameplayAbilityTargetData
// Struct Size::0x0020
struct FSGGameplayAbilityTargetData : public FGameplayAbilityTargetData
{
    int32_t                                       ContainerIndex;                                               // 0x0008(0x0004)
    enum class EAttachPosition                    AttachPosition;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FItemGridInfo                                 ItemGridInfo;                                                 // 0x0010(0x0008)
    bool                                          IsDoRotate;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.SensitivityData
// Struct Size::0x0028
struct FSensitivityData
{
    int32_t                                       NoGlass;                                                      // 0x0000(0x0004)
    int32_t                                       RedSpot;                                                      // 0x0004(0x0004)
    int32_t                                       Holographic;                                                  // 0x0008(0x0004)
    int32_t                                       MechinicalAim;                                                // 0x000C(0x0004)
    int32_t                                       VSS;                                                          // 0x0010(0x0004)
    int32_t                                       Scale2;                                                       // 0x0014(0x0004)
    int32_t                                       Scale3;                                                       // 0x0018(0x0004)
    int32_t                                       Scale4;                                                       // 0x001C(0x0004)
    int32_t                                       Scale6;                                                       // 0x0020(0x0004)
    int32_t                                       Scale8;                                                       // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.SpawnedAIInfoForDebug
// Struct Size::0x0048
struct FSpawnedAIInfoForDebug
{
    TWeakObjectPtr<AActor>                        Character;                                                    // 0x0000(0x0008)
    float                                         SpawnTime;                                                    // 0x0008(0x0004)
    float                                         DeadTime;                                                     // 0x000C(0x0004)
    FVector                                       position;                                                     // 0x0010(0x000C)
    enum class EAIMainType                        AIType;                                                       // 0x001C(0x0001)
    bool                                          IsAlive;                                                      // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    int32_t                                       DeadReason;                                                   // 0x0020(0x0004)
    int32_t                                       SquadID;                                                      // 0x0024(0x0004)
    int32_t                                       CurrentAllyNum;                                               // 0x0028(0x0004)
    int32_t                                       MaxAllyNum;                                                   // 0x002C(0x0004)
    int32_t                                       EquipmentID;                                                  // 0x0030(0x0004)
    int32_t                                       Difficulty;                                                   // 0x0034(0x0004)
    FString                                       AreaID;                                                       // 0x0038(0x0010)
};


// ScriptStruct  SGFramework.ScavInfo
// Struct Size::0x0088
struct FScavInfo
{
    int32_t                                       SquadID;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MaxNum;                                                       // 0x0008(0x0010)
    int32_t                                       LimitMin;                                                     // 0x0018(0x0004)
    int32_t                                       LimitMax;                                                     // 0x001C(0x0004)
    int32_t                                       ALiveNum;                                                     // 0x0020(0x0004)
    int32_t                                       DeadNum;                                                      // 0x0024(0x0004)
    int32_t                                       TotalNum;                                                     // 0x0028(0x0004)
    int32_t                                       BossNum;                                                      // 0x002C(0x0004)
    int32_t                                       FollowerNum;                                                  // 0x0030(0x0004)
    int32_t                                       PMCNum;                                                       // 0x0034(0x0004)
    TArray<FAIIDNum>                              AIIDNum;                                                      // 0x0038(0x0010)
    TArray<FWaveInfo>                             WaveNum;                                                      // 0x0048(0x0010)
    int32_t                                       DestroyedNum;                                                 // 0x0058(0x0004)
    float                                         FirstSpawnTime;                                               // 0x005C(0x0004)
    bool                                          bIsPrioritySquad;                                             // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       SquadType;                                                    // 0x0064(0x0004)
    TArray<FPendingSpawnAIDebugInfo>              PendingInfo;                                                  // 0x0068(0x0010)
    TArray<TWeakObjectPtr<ASGAICharacter>>        CharacterArray;                                               // 0x0078(0x0010)
};


// ScriptStruct  SGFramework.PendingSpawnAIDebugInfo
// Struct Size::0x0048
struct FPendingSpawnAIDebugInfo
{
    int32_t                                       PendingIndex;                                                 // 0x0000(0x0004)
    FName                                         AIID;                                                         // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SpawnArea;                                                    // 0x0010(0x0010)
    FString                                       SpawnPoint;                                                   // 0x0020(0x0010)
    FString                                       ContextString;                                                // 0x0030(0x0010)
    bool                                          bSpawned;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  SGFramework.WaveInfo
// Struct Size::0x0010
struct FWaveInfo
{
    int32_t                                       WaveIndex;                                                    // 0x0000(0x0004)
    int32_t                                       Total;                                                        // 0x0004(0x0004)
    int32_t                                       Dead;                                                         // 0x0008(0x0004)
    int32_t                                       Destroyed;                                                    // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.AIIDNum
// Struct Size::0x0048
struct FAIIDNum
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       AIID;                                                         // 0x0008(0x0008)
    int32_t                                       AIState;                                                      // 0x0010(0x0004)
    int32_t                                       AIPriority;                                                   // 0x0014(0x0004)
    int32_t                                       RemoveReason;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PriorityContextString;                                        // 0x0020(0x0010)
    FString                                       RemoveContextString;                                          // 0x0030(0x0010)
    bool                                          bIsPending;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  SGFramework.TeammateCurseInfo
// Struct Size::0x0038
struct FTeammateCurseInfo
{
    uint64_t                                      SelfGID;                                                      // 0x0000(0x0008)
    TArray<uint64_t>                              CursedCharacters;                                             // 0x0008(0x0010)
    bool                                          bAffectAllFaction;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    uint64_t                                      TeammateKillerGID;                                            // 0x0020(0x0008)
    TArray<uint64_t>                              TeammateGIDs;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.DeferDestroyCharacterInFrameInfo
// Struct Size::0x0018
struct FDeferDestroyCharacterInFrameInfo
{
    AActor*                                       SpawningCharacter;                                            // 0x0000(0x0008)
    FVector                                       DeathLocation;                                                // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.DeferDestroyActorInFrameInfo
// Struct Size::0x0008
struct FDeferDestroyActorInFrameInfo
{
    AActor*                                       SpawningActor;                                                // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.DeferUnreplicateActorInFrameInfo
// Struct Size::0x0008
struct FDeferUnreplicateActorInFrameInfo
{
    AActor*                                       UnreplicateActor;                                             // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.EscapeInfo
// Struct Size::0x0018
struct FEscapeInfo
{
    int32_t                                       TeamID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<ASGVolume*>                            EscapeVolumes;                                                // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.CharacterDeathGUIDInfo
// Struct Size::0x0068
struct FCharacterDeathGUIDInfo
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  SGFramework.SprayActors
// Struct Size::0x0010
struct FSprayActors
{
    TArray<ASGSprayActor*>                        SprayActors;                                                  // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.MissionStatisData
// Struct Size::0x0050
struct FMissionStatisData
{
    TMap<int64_t,int64_t>                         DataMap;                                                      // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.StatisBattleIntensityExpectationSampleCollection
// Struct Size::0x0010
struct FStatisBattleIntensityExpectationSampleCollection
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.StatisBattleIntensityExpectationSample
// Struct Size::0x0008
struct FStatisBattleIntensityExpectationSample
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.AIProtectSafeBoxMessage
// Struct Size::0x0038
struct FAIProtectSafeBoxMessage
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    int64_t                                       PGID;                                                         // 0x0008(0x0008)
    bool                                          bAIRLUsed;                                                    // 0x0010(0x0001)
    bool                                          bSurvived;                                                    // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    float                                         ProtectionDuration;                                           // 0x0014(0x0004)
    int32_t                                       EnterBattleTimes;                                             // 0x0018(0x0004)
    int32_t                                       LeaveBattleTimes;                                             // 0x001C(0x0004)
    float                                         TotalBattleDuration;                                          // 0x0020(0x0004)
    int32_t                                       TotalFireCount;                                               // 0x0024(0x0004)
    int32_t                                       TotalHitCount;                                                // 0x0028(0x0004)
    int32_t                                       TotalHitPlayerCount;                                          // 0x002C(0x0004)
    int32_t                                       TotalKillPlayerCount;                                         // 0x0030(0x0004)
    float                                         TotalMoveDuration;                                            // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.AICommonStatis
// Struct Size::0x0050
struct FAICommonStatis
{
    bool                                          bAIRLUsed;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         SpawnTime;                                                    // 0x0004(0x0004)
    float                                         SpawnTime;                                                    // 0x0008(0x0004)
    float                                         ReadyTime;                                                    // 0x000C(0x0004)
    float                                         ReadyTime;                                                    // 0x0010(0x0004)
    float                                         LeaveTime;                                                    // 0x0014(0x0004)
    float                                         LeaveTime;                                                    // 0x0018(0x0004)
    enum class ELeaveGameReason                   LeaveReason;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<float>                                 FireTimes;                                                    // 0x0020(0x0010)
    TArray<FAICommonStatis>                       HitInfos;                                                     // 0x0030(0x0010)
    TArray<FAICommonStatis>                       MarkBattleInfos;                                              // 0x0040(0x0010)
};


// ScriptStruct  SGFramework.AICommonStatis
// Struct Size::0x000C
struct FAICommonStatis
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  SGFramework.AICommonStatis
// Struct Size::0x0018
struct FAICommonStatis
{
    int64_t                                       ID;                                                           // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
    float                                         ArmorDamage;                                                  // 0x000C(0x0004)
    float                                         RealDamage;                                                   // 0x0010(0x0004)
    enum class ECharacterType                     CharacterType;                                                // 0x0014(0x0001)
    bool                                          bKilled;                                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  SGFramework.AIGameAchieveMessage
// Struct Size::0x0048
struct FAIGameAchieveMessage
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    int64_t                                       PGID;                                                         // 0x0008(0x0008)
    float                                         ReadyTime;                                                    // 0x0010(0x0004)
    float                                         LeaveTime;                                                    // 0x0014(0x0004)
    float                                         SurvivalTime;                                                 // 0x0018(0x0004)
    int32_t                                       LeaveReason;                                                  // 0x001C(0x0004)
    int32_t                                       BattleCount;                                                  // 0x0020(0x0004)
    int32_t                                       FireCount;                                                    // 0x0024(0x0004)
    int32_t                                       HitCount;                                                     // 0x0028(0x0004)
    float                                         RealDamage;                                                   // 0x002C(0x0004)
    float                                         ArmorDamage;                                                  // 0x0030(0x0004)
    int32_t                                       KillPlayerNum;                                                // 0x0034(0x0004)
    int32_t                                       HitPlayerNum;                                                 // 0x0038(0x0004)
    int32_t                                       PeekCount;                                                    // 0x003C(0x0004)
    int32_t                                       CallUpReason;                                                 // 0x0040(0x0004)
    int32_t                                       CallUpResult;                                                 // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.AICausePVPMessage
// Struct Size::0x0028
struct FAICausePVPMessage
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    int64_t                                       PGID;                                                         // 0x0008(0x0008)
    float                                         TimePartA;                                                    // 0x0010(0x0004)
    float                                         DistancePartA1;                                               // 0x0014(0x0004)
    float                                         DistancePartA2;                                               // 0x0018(0x0004)
    float                                         TimePartB;                                                    // 0x001C(0x0004)
    float                                         DistancePartB1;                                               // 0x0020(0x0004)
    float                                         DistancePartB2;                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.PlayerFightInfo
// Struct Size::0x0020
struct FPlayerFightInfo
{
    float                                         LastTimeFightAgainstOtherPlayer;                              // 0x0000(0x0004)
    FVector                                       LastLocationFightAgainstOtherPlayer;                          // 0x0004(0x000C)
    TArray<FPlayerFightInfo>                      KilledAIs;                                                    // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.PlayerFightInfo
// Struct Size::0x0030
struct FPlayerFightInfo
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    int64_t                                       PGID;                                                         // 0x0008(0x0008)
    float                                         Time;                                                         // 0x0010(0x0004)
    FVector                                       AILocation;                                                   // 0x0014(0x000C)
    FVector                                       PlayerLocation;                                               // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.HighOutputMultiPlayerGameEndReportInfo
// Struct Size::0x0048
struct FHighOutputMultiPlayerGameEndReportInfo
{
    int32_t                                       MediateTriggeredTime;                                         // 0x0000(0x0004)
    int32_t                                       SinglePMCTriggeredTime;                                       // 0x0004(0x0004)
    int32_t                                       SingleScavTriggeredTime;                                      // 0x0008(0x0004)
    bool                                          GroupOneTriggered;                                            // 0x000C(0x0001)
    bool                                          GroupTwoTriggered;                                            // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    int32_t                                       MediateSignedTime;                                            // 0x0010(0x0004)
    int32_t                                       SinglePMCSignedTime;                                          // 0x0014(0x0004)
    int32_t                                       SingleScavSignedTime;                                         // 0x0018(0x0004)
    bool                                          GroupOneSigned;                                               // 0x001C(0x0001)
    bool                                          GroupTwoSigned;                                               // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    int32_t                                       GroupGetLastHitNumber;                                        // 0x0020(0x0004)
    int32_t                                       GroupFinalReceiveNumber;                                      // 0x0024(0x0004)
    bool                                          SubsistanceTriggered;                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       PlayerNumber;                                                 // 0x002C(0x0004)
    int32_t                                       ScavRefreshTime;                                              // 0x0030(0x0004)
    int32_t                                       PMC;                                                          // 0x0034(0x0004)
    int32_t                                       MediateStopReason;                                            // 0x0038(0x0004)
    int32_t                                       EscapeBefore10Min;                                            // 0x003C(0x0004)
    int32_t                                       EscapeBefore20Min;                                            // 0x0040(0x0004)
    int32_t                                       Backup;                                                       // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.AIRLReportData
// Struct Size::0x0018
struct FAIRLReportData
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    int64_t                                       PGID;                                                         // 0x0008(0x0008)
    float                                         AIRL;                                                         // 0x0010(0x0004)
    bool                                          AIRL;                                                         // 0x0014(0x0001)
    bool                                          AIRL;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  SGFramework.HighOutputGameEndReportData
// Struct Size::0x0018
struct FHighOutputGameEndReportData
{
    bool                                          WeaponBoxIsOpened;                                            // 0x0000(0x0001)
    bool                                          MovingTriggered;                                              // 0x0001(0x0001)
    bool                                          StaticTriggered;                                              // 0x0002(0x0001)
    bool                                          ScavOrderDelivered;                                           // 0x0003(0x0001)
    bool                                          ScavOrderSigned;                                              // 0x0004(0x0001)
    bool                                          PMCOrderDelivered;                                            // 0x0005(0x0001)
    bool                                          PMCOrderSigned;                                               // 0x0006(0x0001)
    bool                                          MediateOrderSigned;                                           // 0x0007(0x0001)
    bool                                          CloseForNoWeapon;                                             // 0x0008(0x0001)
    bool                                          CloseScavOrder;                                               // 0x0009(0x0001)
    bool                                          CloseMovingTheater;                                           // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    int32_t                                       ScavRefreshTimes;                                             // 0x000C(0x0004)
    int32_t                                       PMC;                                                          // 0x0010(0x0004)
    int32_t                                       MediateStopReason;                                            // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.AIDieOrKillBattleInfo
// Struct Size::0x0044
struct FAIDieOrKillBattleInfo
{
    float                                         KillerElapsedTimeSinceReady;                                  // 0x0000(0x0004)
    float                                         KillerBattleDuration;                                         // 0x0004(0x0004)
    float                                         KillerFoundTargetDuration;                                    // 0x0008(0x0004)
    float                                         KillerShootTargetDuration;                                    // 0x000C(0x0004)
    float                                         KillerFirstHitDuration;                                       // 0x0010(0x0004)
    int32_t                                       KillerCumulativeHitTimes;                                     // 0x0014(0x0004)
    int32_t                                       KillerTeamCumulativeHitTimes;                                 // 0x0018(0x0004)
    bool                                          KillerHasGoal;                                                // 0x001C(0x0001)
    bool                                          KillerIsKilledMyGoal;                                         // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         KilledFirstTakeHitDuration;                                   // 0x0020(0x0004)
    int32_t                                       KilledCumulativeTakeHitTimes;                                 // 0x0024(0x0004)
    float                                         KilledElapsedTimeSinceReady;                                  // 0x0028(0x0004)
    float                                         KilledBattleDuration;                                         // 0x002C(0x0004)
    float                                         KilledFoundTargetDuration;                                    // 0x0030(0x0004)
    float                                         KilledShootTargetDuration;                                    // 0x0034(0x0004)
    float                                         KilledFirstHitDuration;                                       // 0x0038(0x0004)
    int32_t                                       KilledCumulativeHitTimes;                                     // 0x003C(0x0004)
    bool                                          KilledHasGoal;                                                // 0x0040(0x0001)
    bool                                          KilledIsKillerMyGoal;                                         // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
};


// ScriptStruct  SGFramework.ItemDetailedSourceInfo
// Struct Size::0x0050
struct FItemDetailedSourceInfo
{
    TMap<FItemDetailKeyInfo,int32_t>              DetailedNumMap;                                               // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.ItemDetailKeyInfo
// Struct Size::0x0008
struct FItemDetailKeyInfo
{
    int32_t                                       SpawnTypeID;                                                  // 0x0000(0x0004)
    int32_t                                       FactionType;                                                  // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.ThunderInfo
// Struct Size::0x0020
struct FThunderInfo
{
    FDateTime                                     StartTimeStamp;                                               // 0x0000(0x0008)
    float                                         FirstStageTime;                                               // 0x0008(0x0004)
    float                                         SecondStageTime;                                              // 0x000C(0x0004)
    float                                         ThirdStageTime;                                               // 0x0010(0x0004)
    int32_t                                       ThunderTypeIndex;                                             // 0x0014(0x0004)
    enum class EThunderstormStage                 CurrentState;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.ModeThunderTimeInfo
// Struct Size::0x0018
struct FModeThunderTimeInfo
{
    TArray<int32_t>                               ThunderTypeIndexWeightArray;                                  // 0x0000(0x0010)
    float                                         MinPlayTime;                                                  // 0x0010(0x0004)
    float                                         MaxPlayTime;                                                  // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.PlayerStartGroup
// Struct Size::0x0018
struct FPlayerStartGroup
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<AActor*>                               PlayerStarts;                                                 // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.SGRandomDistributionCurve
// Struct Size::0x0008
struct FSGRandomDistributionCurve
{
    UCurveFloat*                                  ParameterCurve;                                               // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.FollowCharacterWidgetInfo
// Struct Size::0x0020
struct FFollowCharacterWidgetInfo
{
    int32_t                                       WidgetIndex;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       PlayerName;                                                   // 0x0008(0x0010)
    int32_t                                       MentorPupilType;                                              // 0x0018(0x0004)
    bool                                          bIsTeammate;                                                  // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  SGFramework.ChaseActivityAvatarInfo
// Struct Size::0x0010
struct FChaseActivityAvatarInfo
{
    int32_t                                       AvatarItemID;                                                 // 0x0000(0x0004)
    float                                         ScanningRange;                                                // 0x0004(0x0004)
    float                                         ScanningInterval;                                             // 0x0008(0x0004)
    int32_t                                       ScanningIntervalScale;                                        // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SafeZoneCache
// Struct Size::0x0010
struct FSafeZoneCache
{
    int32_t                                       SafeZonePadX;                                                 // 0x0000(0x0004)
    int32_t                                       SafeZonePadY;                                                 // 0x0004(0x0004)
    int32_t                                       SafeZonePadEX;                                                // 0x0008(0x0004)
    int32_t                                       SafeZonePadEY;                                                // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.ConfigUpdateItem
// Struct Size::0x0038
struct FConfigUpdateItem
{
    int32_t                                       ConfigType;                                                   // 0x0000(0x0004)
    int32_t                                       ConfigOperate;                                                // 0x0004(0x0004)
    FString                                       ConfigName;                                                   // 0x0008(0x0010)
    FString                                       ConfigSection;                                                // 0x0018(0x0010)
    TArray<FConfigUpdateItemKeyValue>             ConfigKeyValues;                                              // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.ConfigUpdateItemKeyValue
// Struct Size::0x0028
struct FConfigUpdateItemKeyValue
{
    int32_t                                       ValueType;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Key;                                                          // 0x0008(0x0010)
    FString                                       Value;                                                        // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.SGMonitorData
// Struct Size::0x0078
struct FSGMonitorData
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
    FVector2D                                     PrevPosition;                                                 // 0x0068(0x0008)
    FIntPoint                                     PrevResolution;                                               // 0x0070(0x0008)
};


// ScriptStruct  SGFramework.BenchmarkQualityLevels
// Struct Size::0x0030
struct FBenchmarkQualityLevels
{
    int32_t                                       ResolutionQuality;                                            // 0x0000(0x0004)
    int32_t                                       ViewDistanceQuality;                                          // 0x0004(0x0004)
    int32_t                                       AntiAliasingQuality;                                          // 0x0008(0x0004)
    int32_t                                       ShadowQuality;                                                // 0x000C(0x0004)
    int32_t                                       LightingQuality;                                              // 0x0010(0x0004)
    int32_t                                       PostProcessQuality;                                           // 0x0014(0x0004)
    int32_t                                       TextureQuality;                                               // 0x0018(0x0004)
    int32_t                                       EffectsQuality;                                               // 0x001C(0x0004)
    int32_t                                       FoliageQuality;                                               // 0x0020(0x0004)
    int32_t                                       ShadingQuality;                                               // 0x0024(0x0004)
    float                                         CPUBenchmarkResults;                                          // 0x0028(0x0004)
    float                                         GPUBenchmarkResults;                                          // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.GameUserDefaultSettings
// Struct Size::0x0028
struct FGameUserDefaultSettings : public FTableRowBase
{
    FName                                         Name;                                                         // 0x0008(0x0008)
    enum class ESettingValueType                  Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Value;                                                        // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.GashaponSpawnPoint
// Struct Size::0x0018
struct FGashaponSpawnPoint
{
    FVector                                       SpawnLocation;                                                // 0x0000(0x000C)
    FRotator                                      SpawnRotation;                                                // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.GashaponSpawnInfo
// Struct Size::0x0018
struct FGashaponSpawnInfo
{
    TArray<FGashaponSpawnItemInfo>                SpawnItemList;                                                // 0x0000(0x0010)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.GashaponSpawnItemInfo
// Struct Size::0x0008
struct FGashaponSpawnItemInfo
{
    int32_t                                       SpawnItemID;                                                  // 0x0000(0x0004)
    int32_t                                       SpawnCount;                                                   // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Character;                                                    // 0x0000(0x0008)
    AActor*                                       Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Character;                                                    // 0x0000(0x0008)
    AActor*                                       Container;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   SearchingPlayer;                                              // 0x0000(0x0008)
    AActor*                                       Container;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       InteractActor;                                                // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0030
struct FGlobalEventMessage
{
    ASGGameState*                                 Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       Target;                                                       // 0x0008(0x0008)
    FString                                       NewFlowState;                                                 // 0x0010(0x0010)
    FString                                       OldFlowState;                                                 // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ASGGameState*                                 Instigator;                                                   // 0x0000(0x0008)
    UAISceneEventMessage*                         AISceneEvent;                                                 // 0x0008(0x0008)
    ACharacter*                                   Character;                                                    // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ASGGameState*                                 Instigator;                                                   // 0x0000(0x0008)
    UAISceneEventMessage*                         AISceneEvent;                                                 // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ASGGameState*                                 Instigator;                                                   // 0x0000(0x0008)
    UAISceneEventMessage*                         AISceneEvent;                                                 // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ASGGameState*                                 Instigator;                                                   // 0x0000(0x0008)
    UAISceneEventMessage*                         AISceneEvent;                                                 // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ASGFaction*                                   Instigator;                                                   // 0x0000(0x0008)
    enum class EFactionType                       FactionType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       IntCount;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    bool                                          bool;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ItemId;                                                       // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    bool                                          bool;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       WidgetID;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    int32_t                                       BagTabType;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    int32_t                                       DetailBoardType;                                              // 0x0008(0x0004)
    int32_t                                       ItemId;                                                       // 0x000C(0x0004)
    int32_t                                       TaskId;                                                       // 0x0010(0x0004)
    bool                                          bool;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    bool                                          bool;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       BagType;                                                      // 0x000C(0x0004)
    AActor*                                       Container;                                                    // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    int64_t                                       VolumeID;                                                     // 0x0000(0x0008)
    AActor*                                       InteractActor;                                                // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    enum class EAttachPosition                    AttachPosition;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Weapon;                                                       // 0x0008(0x0008)
    ASGInventory*                                 ChildInventory;                                               // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0028
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    enum class EMapSignType                       SignType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector2D                                     Sign;                                                         // 0x000C(0x0008)
    int32_t                                       Sign;                                                         // 0x0014(0x0004)
    int32_t                                       TaskId;                                                       // 0x0018(0x0004)
    FVector2D                                     Sign;                                                         // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    APlayerController*                            Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    float                                         MoveDistance;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       EscapeVolume;                                                 // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessageBase
// Struct Size::0x0001
struct FGlobalEventMessageBase
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage : public FGlobalEventMessageBase
{
    FMFGlobalEventTag                             EventTag;                                                     // 0x0000(0x0008)
    int64_t                                       VolumeID;                                                     // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0020
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    ASGInventory*                                 InventoryMag;                                                 // 0x0010(0x0008)
    int32_t                                       IntCount;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    int32_t                                       IntOldCount;                                                  // 0x0010(0x0004)
    int32_t                                       IntNewCount;                                                  // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Character;                                                    // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0030
struct FGlobalEventMessage
{
    ACharacter*                                   Character;                                                    // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FStackableItemSourceInfo                      StackableItemSourceInfo;                                      // 0x0018(0x0018)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0030
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
    TArray<FStackableItemSourceInfo>              FromPlayerInfos;                                              // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGThrowableProjectile*                       ThrowableProjectile;                                          // 0x0008(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    bool                                          bInteract;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x0008(0x0001)
    enum class ECharacterGameEffectType           GameEffectType;                                               // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    enum class EUseInventoryPhase                 UseInventoryPhase;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       Trigger;                                                      // 0x0008(0x0008)
    ACharacter*                                   AttractAI;                                                    // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    APlayerController*                            Instigator;                                                   // 0x0000(0x0008)
    enum class EPlayerEndGameType                 EndGameType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    AActor*                                       EscapeVolume;                                                 // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    APlayerController*                            Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    APlayerController*                            Instigator;                                                   // 0x0000(0x0008)
    FName                                         NewFlowState;                                                 // 0x0008(0x0008)
    FName                                         OldFlowState;                                                 // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   InteractCharacter;                                            // 0x0000(0x0008)
    int32_t                                       InteractActorConfigID;                                        // 0x0008(0x0004)
    int32_t                                       InteractActorGID;                                             // 0x000C(0x0004)
    AActor*                                       InteractActor;                                                // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       InteractActor;                                                // 0x0008(0x0008)
    enum class EInteractEventType                 InteractEventType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0028
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ACharacter*                                   DamageTakePlayer;                                             // 0x0008(0x0008)
    AActor*                                       DamageCauser;                                                 // 0x0010(0x0008)
    enum class ESGArmorType                       ArmorType;                                                    // 0x0018(0x0001)
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    UDamageEventObject*                           DamageInfo;                                                   // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0028
struct FGlobalEventMessage
{
    AController*                                  Instigator;                                                   // 0x0000(0x0008)
    AController*                                  KilledPlayer;                                                 // 0x0008(0x0008)
    AActor*                                       KillerWeapon;                                                 // 0x0010(0x0008)
    float                                         KillDistance;                                                 // 0x0018(0x0004)
    enum class ECharacterEnduranceType            EnduranceType;                                                // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    UDamageEventObject*                           DamageInfo;                                                   // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       Target;                                                       // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage : public FGlobalEventMessageBase
{
    FMFGlobalEventTag                             EventTag;                                                     // 0x0000(0x0008)
    AGameState*                                   Instigator;                                                   // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.LootContainerUnLockInfo
// Struct Size::0x0028
struct FLootContainerUnLockInfo
{
    int32_t                                       LootPointID;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<uint64_t>                              UnLockPlayerGIDs;                                             // 0x0008(0x0010)
    float                                         UnLockTime;                                                   // 0x0018(0x0004)
    float                                         LootExtendTime;                                               // 0x001C(0x0004)
    float                                         LootExtendValidTime;                                          // 0x0020(0x0004)
    bool                                          bIsBlock;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  SGFramework.TestActivityInfo
// Struct Size::0x000C
struct FTestActivityInfo
{
    int32_t                                       ActivityID;                                                   // 0x0000(0x0004)
    int32_t                                       DisplayOrder;                                                 // 0x0004(0x0004)
    int32_t                                       ActivityType;                                                 // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.PlayerAuthInfo
// Struct Size::0x0020
struct FPlayerAuthInfo
{
    int64_t                                       GID;                                                          // 0x0000(0x0008)
    FString                                       Token;                                                        // 0x0008(0x0010)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.WeatherInfo
// Struct Size::0x0018
struct FWeatherInfo
{
    int32_t                                       Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               WeatherList;                                                  // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.ActivityInfo
// Struct Size::0x000C
struct FActivityInfo
{
    int32_t                                       ActivityID;                                                   // 0x0000(0x0004)
    int32_t                                       DisplayOrder;                                                 // 0x0004(0x0004)
    int32_t                                       ActivityType;                                                 // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.PendingLoadHUDClassInfo
// Struct Size::0x0020
struct FPendingLoadHUDClassInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    USGUserWidget*                                Class;                                                        // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.WidgetCountDebugInfo
// Struct Size::0x0008
struct FWidgetCountDebugInfo
{
    int32_t                                       InstNum;                                                      // 0x0000(0x0004)
    int32_t                                       TotalChildNum;                                                // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.SGViewTable
// Struct Size::0x0060
struct FSGViewTable : public FTableRowBase
{
    int32_t                                       WidgetViewId;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        TemplateUMG;                                                  // 0x0010(0x0028)
    enum class EHUDHierarchy                      Hierachy;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FVector2D                                     position;                                                     // 0x003C(0x0008)
    FAnchors                                      Anchor;                                                       // 0x0044(0x0010)
    FVector2D                                     Alignment;                                                    // 0x0054(0x0008)
    bool                                          SizeToContent;                                                // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  SGFramework.ImpactEffectNamedParameters
// Struct Size::0x0010
struct FImpactEffectNamedParameters
{
    TArray<FParticleSysParam>                     ParticleParams;                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleSysParam
// Struct Size::0x0080
struct FParticleSysParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EParticleSysParamType              ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Scalar;                                                       // 0x000C(0x0004)
    float                                         Scalar;                                                       // 0x0010(0x0004)
    FVector                                       Vector;                                                       // 0x0014(0x000C)
    FVector                                       Vector;                                                       // 0x0020(0x000C)
    FColor                                        Color;                                                        // 0x002C(0x0004)
    AActor*                                       Actor;                                                        // 0x0030(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0038(0x0008)
    char                                          pa_0040[0x0040]                                               // 0x0040(0x0040)
};


// ScriptStruct  SGFramework.RicochetConfig
// Struct Size::0x000C
struct FRicochetConfig
{
    float                                         MinIncidenceAngle;                                            // 0x0000(0x0004)
    FVector2D                                     ProbabilityRange;                                             // 0x0004(0x0008)
};


// ScriptStruct  SGFramework.ImpactAudioResource
// Struct Size::0x0018
struct FImpactAudioResource
{
    UAkAudioEvent*                                AudioEvent;                                                   // 0x0000(0x0008)
    UAkAudioEvent*                                AudioEvent;                                                   // 0x0008(0x0008)
    float                                         MaterialAudioCoolDown;                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.ImpactEffectResource
// Struct Size::0x0068
struct FImpactEffectResource
{
    FImpactParticleResource                       ParticleResource;                                             // 0x0000(0x0018)
    FImpactDecalResource                          DecalResource;                                                // 0x0018(0x0050)
};


// ScriptStruct  SGFramework.ImpactDecalResource
// Struct Size::0x0050
struct FImpactDecalResource
{
    UMaterialInterface*                           DecalMaterial;                                                // 0x0000(0x0008)
    FInt32Range                                   RandomFrameIndex;                                             // 0x0008(0x0010)
    FFloatRange                                   RandomSize;                                                   // 0x0018(0x0010)
    FFloatRange                                   RandomRotation;                                               // 0x0028(0x0010)
    FFloatRange                                   RandomAlpha;                                                  // 0x0038(0x0010)
    float                                         LifeSpan;                                                     // 0x0048(0x0004)
    bool                                          bTransparentSurface;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  SGFramework.ImpactParticleResource
// Struct Size::0x0018
struct FImpactParticleResource
{
    UFXSystemAsset*                               ParticleTemplate;                                             // 0x0000(0x0008)
    UCurveFloat*                                  ScaleCurveByDistance;                                         // 0x0008(0x0008)
    UCurveFloat*                                  ScaleCurveByFOV;                                              // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.PooledImpactEffectBind
// Struct Size::0x0368
struct FPooledImpactEffectBind
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FPooledImpactEffectResource                   EffectResouce;                                                // 0x0008(0x00D8)
    FPooledImpactEffectResource                   EffectResouce;                                                // 0x00E0(0x00D8)
    FPooledImpactEffectResource                   MeleeEffectResource;                                          // 0x01B8(0x00D8)
    FPooledImpactEffectResource                   MeleeEffectResource;                                          // 0x0290(0x00D8)
};


// ScriptStruct  SGFramework.PooledImpactEffectResource
// Struct Size::0x00D8
struct FPooledImpactEffectResource
{
    UFXSystemAsset*                               ParticleTemplate;                                             // 0x0000(0x0008)
    UParticleSystem*                              ParticleNegagiveTemplate;                                     // 0x0008(0x0008)
    UAkAudioEvent*                                AudioEvent;                                                   // 0x0010(0x0008)
    FMeleeAudioEvent                              MeleeAudioEvent;                                              // 0x0018(0x0010)
    UStaticMesh*                                  StaticMeshTemplate;                                           // 0x0028(0x0008)
    UStaticMesh*                                  NegagiveStaticMeshTemplate;                                   // 0x0030(0x0008)
    UMaterialInterface*                           DecalOverridenMaterial;                                       // 0x0038(0x0008)
    UMaterialInterface*                           NegagiveDecalOverridenMaterial;                               // 0x0040(0x0008)
    FDecalImpactEffectResource                    DecalResource;                                                // 0x0048(0x0060)
    FVector                                       DecalScale;                                                   // 0x00A8(0x000C)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    UCurveFloat*                                  ScaleCurveByDistance;                                         // 0x00B8(0x0008)
    UCurveFloat*                                  ScaleCurveByFOV;                                              // 0x00C0(0x0008)
    char                                          pa_00C8[0x000C]                                               // 0x00C8(0x000C)
    float                                         LifeSpan;                                                     // 0x00D4(0x0004)
};


// ScriptStruct  SGFramework.DecalImpactEffectResource
// Struct Size::0x0060
struct FDecalImpactEffectResource
{
    UMaterialInterface*                           DecalMaterial;                                                // 0x0000(0x0008)
    FInt32Range                                   RandomFrameIndex;                                             // 0x0008(0x0010)
    FFloatRange                                   RandomSize;                                                   // 0x0018(0x0010)
    FFloatRange                                   RandomRotation;                                               // 0x0028(0x0010)
    FFloatRange                                   RandomAlpha;                                                  // 0x0038(0x0010)
    FName                                         DecalRandomTextureParamName;                                  // 0x0048(0x0008)
    FName                                         DecalRandomRotationParamName;                                 // 0x0050(0x0008)
    FName                                         DecalRandomAlphaParamName;                                    // 0x0058(0x0008)
};


// ScriptStruct  SGFramework.MeleeAudioEvent
// Struct Size::0x0010
struct FMeleeAudioEvent
{
    UAkAudioEvent*                                BluntMeleeAudioEvent;                                         // 0x0000(0x0008)
    UAkAudioEvent*                                SharpMeleeAudioEvent;                                         // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.InteractableItemTable
// Struct Size::0x0030
struct FInteractableItemTable : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       exe;                                                          // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.InteractConfig
// Struct Size::0x0028
struct FInteractConfig
{
    float                                         KeyAttachDelayTime;                                           // 0x0000(0x0004)
    float                                         KeyDetachDelayTime;                                           // 0x0004(0x0004)
    float                                         TriggerFinishTime;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       KeyItemID;                                                    // 0x0010(0x0008)
    FString                                       AnimMontageName;                                              // 0x0018(0x0010)
};


// ScriptStruct  SGFramework.UserWidgetPopInfo
// Struct Size::0x0058
struct FUserWidgetPopInfo
{
    USGInteractUserWidget*                        UserWidgetClass;                                              // 0x0000(0x0008)
    UObject*                                      DisplaySprite;                                                // 0x0008(0x0008)
    FText                                         DisplayText;                                                  // 0x0010(0x0018)
    FText                                         UsingDisplayText;                                             // 0x0028(0x0018)
    FVector2D                                     PopAnchors;                                                   // 0x0040(0x0008)
    FVector2D                                     PopPosition;                                                  // 0x0048(0x0008)
    float                                         InteractRequireTime;                                          // 0x0050(0x0004)
    int32_t                                       InteractionType;                                              // 0x0054(0x0004)
};


// ScriptStruct  SGFramework.SGInteractiveObjectGrid
// Struct Size::0x0028
struct FSGInteractiveObjectGrid
{
    int32_t                                       GridX;                                                        // 0x0000(0x0004)
    int32_t                                       GridY;                                                        // 0x0004(0x0004)
    int32_t                                       GridZ;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<TScriptInterface<ISGInteractiveObjectInterface>>InteractiveObjects;                                  // 0x0010(0x0010)
    char                                          bIsVisible;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  SGFramework.ManualNetRelevantFollowOnwerInfo
// Struct Size::0x0010
struct FManualNetRelevantFollowOnwerInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       CachedOwner;                                                  // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGInventoryAnimInstanceProxy
// Struct Size::0x0870
struct FSGInventoryAnimInstanceProxy : public FAnimInstanceProxy
{
    bool                                          bIs1P;                                                        // 0x0860(0x0001)
    bool                                          bIsOwnerCharacterProne;                                       // 0x0861(0x0001)
    char                                          pa_0862[0x0006]                                               // 0x0862(0x0006)
    USGInventoryAnimInstance*                     AnimInstance;                                                 // 0x0868(0x0008)
};


// ScriptStruct  SGFramework.SightBlockArea
// Struct Size::0x0010
struct FSightBlockArea
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.AssembleParentInfo
// Struct Size::0x0010
struct FAssembleParentInfo
{
    AActor*                                       ParentItem;                                                   // 0x0000(0x0008)
    int32_t                                       OffsetIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.AttachInvInfo
// Struct Size::0x0010
struct FAttachInvInfo
{
    ASGInventory*                                 AttachmentClass;                                              // 0x0000(0x0008)
    int32_t                                       Num;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.BeUsedRecord
// Struct Size::0x0010
struct FBeUsedRecord
{
    AActor*                                       User;                                                         // 0x0000(0x0008)
    int32_t                                       UsedTimes;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SubCameraInfo
// Struct Size::0x0120
struct FSubCameraInfo
{
    int32_t                                       ScopeLevel;                                                   // 0x0000(0x0004)
    float                                         ZoomingSensitivity;                                           // 0x0004(0x0004)
    float                                         ShoulderZoomingSensitivity;                                   // 0x0008(0x0004)
    float                                         NormalFireSensitivity;                                        // 0x000C(0x0004)
    float                                         ZoomFOV;                                                      // 0x0010(0x0004)
    float                                         HoldingBreathZoomFOV;                                         // 0x0014(0x0004)
    FVector                                       FiringZoomInVector;                                           // 0x0018(0x000C)
    float                                         BlurRadius;                                                   // 0x0024(0x0004)
    float                                         BlurThresHold;                                                // 0x0028(0x0004)
    float                                         FiringAnimTranslationWeight;                                  // 0x002C(0x0004)
    float                                         FiringAnimRotationWeight;                                     // 0x0030(0x0004)
    FName                                         AimingBase;                                                   // 0x0034(0x0008)
    FName                                         AimingPivotSocket;                                            // 0x003C(0x0008)
    FName                                         AimingDOF;                                                    // 0x0044(0x0008)
    enum class EAdapterAnimationType              SwitchAnim;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    float                                         CameraGunkickWeight;                                          // 0x0050(0x0004)
    FVector                                       AimingBaseOffset;                                             // 0x0054(0x000C)
    int32_t                                       ScopeMaterialElementIndex;                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TSoftObjectPtr<UMaterialInterface>            InnerScopeBlurMaterial;                                       // 0x0068(0x0028)
    FVector4                                      LocalScopeParamAndRadius;                                     // 0x0090(0x0010)
    UMaterialInstanceDynamic*                     BackupScopeMI;                                                // 0x00A0(0x0008)
    UMaterialInstanceDynamic*                     InnerScopeBlurMI;                                             // 0x00A8(0x0008)
    float                                         LensDistortionImageScale;                                     // 0x00B0(0x0004)
    float                                         Magnification;                                                // 0x00B4(0x0004)
    UMaterialInterface*                           BlurMaterial;                                                 // 0x00B8(0x0008)
    UMaterialInterface*                           LensDistortMaterial;                                          // 0x00C0(0x0008)
    float                                         ZeroingDistance;                                              // 0x00C8(0x0004)
    bool                                          bIsIronSight;                                                 // 0x00CC(0x0001)
    char                                          pa_00CD[0x0003]                                               // 0x00CD(0x0003)
    FText                                         DisplayName;                                                  // 0x00D0(0x0018)
    bool                                          bUsingScopeSceneCapture;                                      // 0x00E8(0x0001)
    char                                          pa_00E9[0x0007]                                               // 0x00E9(0x0007)
    UTexture*                                     ScopeReticleTexture;                                          // 0x00F0(0x0008)
    float                                         ScopeReticleScale;                                            // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    TArray<FCrossHairTexInfo>                     ScopeReticleList;                                             // 0x0100(0x0010)
    int32_t                                       ScopeMaterialIndex;                                           // 0x0110(0x0004)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
    UAnimSequenceBase*                            SwitchMagnificationAnim;                                      // 0x0118(0x0008)
};


// ScriptStruct  SGFramework.CrossHairTexInfo
// Struct Size::0x0018
struct FCrossHairTexInfo
{
    UTexture2D*                                   Tex;                                                          // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UAnimSequenceBase*                            SwitchMagnificationAnim;                                      // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.WeaponScopeScaleConfigTableRow
// Struct Size::0x0020
struct FWeaponScopeScaleConfigTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<FWeaponScopeScaleSG>                   WeaponScopeScale;                                             // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.WeaponScopeScaleSG
// Struct Size::0x0030
struct FWeaponScopeScaleSG
{
    uint64_t                                      ID;                                                           // 0x0000(0x0008)
    FText                                         WeaponName;                                                   // 0x0008(0x0018)
    float                                         RoScale;                                                      // 0x0020(0x0004)
    float                                         LoScale;                                                      // 0x0024(0x0004)
    float                                         ADSGunKickScale;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.InventoryContainerBase
// Struct Size::0x0010
struct FInventoryContainerBase
{
    TArray<FGridPreOccupiedInfo>                  PreOccupiedActorInfoMap;                                      // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.GridPreOccupiedInfo
// Struct Size::0x0020
struct FGridPreOccupiedInfo
{
    AActor*                                       OccupyKeyInventory;                                           // 0x0000(0x0008)
    FSGGridOccupyInfo                             GridOccupyInfo;                                               // 0x0008(0x0018)
};


// ScriptStruct  SGFramework.InventoryTempleteClass
// Struct Size::0x0028
struct FInventoryTempleteClass
{
    TSoftClassPtr<UObject>                        TempleteClass;                                                // 0x0000(0x0028)
};


// ScriptStruct  SGFramework.InventoryIdClass
// Struct Size::0x0058
struct FInventoryIdClass
{
    uint64_t                                      ID;                                                           // 0x0000(0x0008)
    TSoftClassPtr<UObject>                        Class;                                                        // 0x0008(0x0028)
    TSoftClassPtr<UObject>                        TempleteClass;                                                // 0x0030(0x0028)
};


// ScriptStruct  SGFramework.FlashlightInfo
// Struct Size::0x0018
struct FFlashlightInfo
{
    ULightComponent*                              LightComponent;                                               // 0x0000(0x0008)
    FVector                                       LocationOffset;                                               // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.RPCS
// Struct Size::0x0004
struct FRPCS
{
    int32_t                                       ReplicateIndex;                                               // 0x0000(0x0004)
};


// ScriptStruct  SGFramework.RPCS
// Struct Size::0x0008
struct FRPCS
{
    bool                                          bAutoActivateInput;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ReplicateIndex;                                               // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.InventoryLockInfo
// Struct Size::0x0018
struct FInventoryLockInfo
{
    ASGCharacter*                                 LockedByCharacter;                                            // 0x0000(0x0008)
    TArray<enum class EInventoryLockType>         LockTypeArray;                                                // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.InventoryForcedInteractInfo
// Struct Size::0x0020
struct FInventoryForcedInteractInfo
{
    ASGCharacter*                                 InteractCharacter;                                            // 0x0000(0x0008)
    int32_t                                       RemainInteractCount;                                          // 0x0008(0x0004)
    enum class EInventoryForcedInteractType       CurInventoryForcedInteractType;                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FHostedInteractInfo>                   HostedInteractInfoList;                                       // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.HostedInteractInfo
// Struct Size::0x0010
struct FHostedInteractInfo
{
    int64_t                                       HostedInteracteRuleID;                                        // 0x0000(0x0008)
    int32_t                                       HostedInteractCount;                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.ItemSkinInfo
// Struct Size::0x0070
struct FItemSkinInfo
{
    int32_t                                       SkinID;                                                       // 0x0000(0x0004)
    int32_t                                       ItemId;                                                       // 0x0004(0x0004)
    bool                                          bIsStaticMesh;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TSoftObjectPtr<UStreamableRenderAsset>        MeshPath;                                                     // 0x0010(0x0028)
    TSoftObjectPtr<UStreamableRenderAsset>        MeshPath;                                                     // 0x0038(0x0028)
    TArray<FOverrideMaterialInfo>                 OverrideMaterials;                                            // 0x0060(0x0010)
};


// ScriptStruct  SGFramework.OverrideMaterialInfo
// Struct Size::0x0030
struct FOverrideMaterialInfo
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TSoftObjectPtr<UMaterialInterface>            OverrideMaterial;                                             // 0x0008(0x0028)
};


// ScriptStruct  SGFramework.SGMovableArmorDamageScaleMap
// Struct Size::0x0050
struct FSGMovableArmorDamageScaleMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SGMovableArmorDamageScale
// Struct Size::0x000C
struct FSGMovableArmorDamageScale
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  SGFramework.DuplicatedInventoryMesh
// Struct Size::0x0010
struct FDuplicatedInventoryMesh
{
    UPrimitiveComponent*                          DupInventoryMesh;                                             // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.LoosePointInfo
// Struct Size::0x0018
struct FLoosePointInfo
{
    FString                                       LoosePointName;                                               // 0x0000(0x0010)
    uint32_t                                      LoosePointDetailID;                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.LastCharacterOwnerInfo
// Struct Size::0x0010
struct FLastCharacterOwnerInfo
{
    ASGCharacter*                                 LastOwner;                                                    // 0x0000(0x0008)
    int64_t                                       RemoveFrame;                                                  // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.TacticalInvStateInfo
// Struct Size::0x0020
struct FTacticalInvStateInfo
{
    FGameplayTag                                  TacticTag;                                                    // 0x0000(0x0008)
    TArray<USGInventoryTacticComponent*>          AttachedTacticalComponents;                                   // 0x0008(0x0010)
    bool                                          bShouldEnableSwitch;                                          // 0x0018(0x0001)
    bool                                          bSwitchStateOn;                                               // 0x0019(0x0001)
    bool                                          bTacticalInvsActive;                                          // 0x001A(0x0001)
    bool                                          bCachedSwitchStateOn;                                         // 0x001B(0x0001)
    bool                                          bCachedShouldEnableSwitch;                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  SGFramework.ScopeRangeForTeammateIcon
// Struct Size::0x002C
struct FScopeRangeForTeammateIcon
{
    FBox2D                                        ShowRangeForScopePosition;                                    // 0x0000(0x0014)
    FBox2D                                        HideRangeForWorldPosition;                                    // 0x0014(0x0014)
    float                                         ShowRadius;                                                   // 0x0028(0x0004)
};


// ScriptStruct  SGFramework.ScopeZoomParamOnMaterials
// Struct Size::0x0020
struct FScopeZoomParamOnMaterials
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    USGInventoryMeshComponent*                    ScopeMeshComponent;                                           // 0x0008(0x0008)
    ASGInventory*                                 ScopeInv;                                                     // 0x0010(0x0008)
    bool                                          bIsCameraPrepared;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.InvGiveExtraParams
// Struct Size::0x0068
struct FInvGiveExtraParams
{
    enum class EAttachPosition                    Pos;                                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    ASGInventory*                                 ParentInv;                                                    // 0x0008(0x0008)
    int32_t                                       ContainerIndex;                                               // 0x0010(0x0004)
    FName                                         SocketName;                                                   // 0x0014(0x0008)
    bool                                          bDestroyItem;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FItemGridInfo                                 DropPosition;                                                 // 0x0020(0x0008)
    int32_t                                       Durability;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       InstId;                                                       // 0x0030(0x0008)
    int64_t                                       TakeInPlayerGID;                                              // 0x0038(0x0008)
    int32_t                                       InsureType;                                                   // 0x0040(0x0004)
    int32_t                                       SkinID;                                                       // 0x0044(0x0004)
    ASGInventory*                                 MergeTargetInventory;                                         // 0x0048(0x0008)
    int32_t                                       PendantID;                                                    // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FStackableItemSourceInfo>              ItemSourceInfo;                                               // 0x0058(0x0010)
};


// ScriptStruct  SGFramework.EquipmentSkinInfo
// Struct Size::0x0080
struct FEquipmentSkinInfo
{
    int32_t                                       SkinID;                                                       // 0x0000(0x0004)
    int32_t                                       ItemId;                                                       // 0x0004(0x0004)
    bool                                          bIsStaticMesh;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TSoftObjectPtr<UStreamableRenderAsset>        MeshPath;                                                     // 0x0010(0x0028)
    TSoftObjectPtr<UStreamableRenderAsset>        MeshPath;                                                     // 0x0038(0x0028)
    TArray<FOverrideMaterialInfo>                 OverrideMaterials;                                            // 0x0060(0x0010)
    TArray<FOverrideMaterialInfo>                 OverrideMaterials;                                            // 0x0070(0x0010)
};


// ScriptStruct  SGFramework.InventorySpawnSourceInfo
// Struct Size::0x0030
struct FInventorySpawnSourceInfo
{
    enum class ESGInventorySpawnSourceType        SpawnSourceType;                                              // 0x0000(0x0001)
    enum class ECharacterType                     FromCharacterType;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    int64_t                                       FromPlayerGID;                                                // 0x0008(0x0008)
    int32_t                                       FromTeamIndex;                                                // 0x0010(0x0004)
    FVector                                       SpawnLocation;                                                // 0x0014(0x000C)
    FRotator                                      SpawnRotation;                                                // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.InventoryContainer
// Struct Size::0x0010
struct FInventoryContainer
{
    TArray<ASGInventory*>                         InventoryArray;                                               // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.InventorySourceInfo
// Struct Size::0x0018
struct FInventorySourceInfo
{
    int32_t                                       InventoryID;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       FromPlayerGID;                                                // 0x0008(0x0008)
    int32_t                                       InventoryCount;                                               // 0x0010(0x0004)
    enum class ECharacterType                     FromCharacterType;                                            // 0x0014(0x0001)
    enum class ESGInventorySpawnSourceType        InventorySourceType;                                          // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  SGFramework.SGThermalImagerParams
// Struct Size::0x0014
struct FSGThermalImagerParams
{
    enum class ESGThermalImagerType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ThermalModeParameter;                                         // 0x0004(0x0004)
    float                                         BloomIntensity;                                               // 0x0008(0x0004)
    float                                         BloomThreshold;                                               // 0x000C(0x0004)
    float                                         ChromaticAberrationIntensity;                                 // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.InventoryOperationRepInfo
// Struct Size::0x0050
struct FInventoryOperationRepInfo
{
    int32_t                                       OldParentInvRuntimeID;                                        // 0x0000(0x0004)
    int32_t                                       NewParentInvRuntimeID;                                        // 0x0004(0x0004)
    int32_t                                       NewContainerIndex;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<UActorComponent*>                      OldParentGridBaseTraceList;                                   // 0x0010(0x0010)
    AActor*                                       OldParentInv;                                                 // 0x0020(0x0008)
    AActor*                                       NewParentInv;                                                 // 0x0028(0x0008)
    enum class EAttachPosition                    OldAttachPosition;                                            // 0x0030(0x0001)
    enum class EAttachPosition                    AttachPosition;                                               // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    FItemGridInfo                                 StartGridPosition;                                            // 0x0034(0x0008)
    int32_t                                       Count;                                                        // 0x003C(0x0004)
    FVector                                       OperationLoc;                                                 // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  SGFramework.InventoryInteractionRepInfo
// Struct Size::0x0018
struct FInventoryInteractionRepInfo
{
    enum class EInventoryInteractionType          InvInteractType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<ASGInventory*>                         InteractInvList;                                              // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.DropTransformInfo
// Struct Size::0x0050
struct FDropTransformInfo
{
    FTransform                                    DropTransform;                                                // 0x0000(0x0030)
    bool                                          bShouldDrop;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       Count;                                                        // 0x0034(0x0004)
    FVector                                       Momentum;                                                     // 0x0038(0x000C)
    bool                                          bWithPhysics;                                                 // 0x0044(0x0001)
    char                                          pa_0045[0x000B]                                               // 0x0045(0x000B)
};


// ScriptStruct  SGFramework.PendingAttachData
// Struct Size::0x0020
struct FPendingAttachData
{
    USceneComponent*                              ChildComponent;                                               // 0x0000(0x0008)
    USceneComponent*                              ParentComponent;                                              // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SearchContainerInfo
// Struct Size::0x0008
struct FSearchContainerInfo
{
    bool                                          ContainerSearchState;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       UnSearchItemCount;                                            // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.ConversionContainerInfo
// Struct Size::0x0010
struct FConversionContainerInfo
{
    AActor*                                       ChildActorClass;                                              // 0x0000(0x0008)
    int32_t                                       StackCount;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.WeaponAssembleEnvironmentInfo
// Struct Size::0x0110
struct FWeaponAssembleEnvironmentInfo
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    int32_t                                       SocketIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FAssembleSocketInfo                           SocketInfo;                                                   // 0x0010(0x0080)
    UStaticMeshComponent*                         StaticMeshComp;                                               // 0x0090(0x0008)
    USkeletalMeshComponent*                       SkeletalMeshComp;                                             // 0x0098(0x0008)
    UStaticMeshComponent*                         ParentStaticMeshComp;                                         // 0x00A0(0x0008)
    USkeletalMeshComponent*                       ParentSkeletalMeshComp;                                       // 0x00A8(0x0008)
    ASGInventory*                                 AttachedInv;                                                  // 0x00B0(0x0008)
    ASGInventory*                                 ParentInv;                                                    // 0x00B8(0x0008)
    bool                                          bStatic;                                                      // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
    USkeletalMeshComponent*                       StaticMeshComp;                                               // 0x00C8(0x0008)
    TArray<UFXSystemComponent*>                   OwnedParticleSystemComponents;                                // 0x00D0(0x0010)
    char                                          pa_00E0[0x0004]                                               // 0x00E0(0x0004)
    FVector                                       SocketLocation;                                               // 0x00E4(0x000C)
    FVector                                       SocketPrimitiveLocation;                                      // 0x00F0(0x000C)
    FVector                                       SocketLocalLocation;                                          // 0x00FC(0x000C)
    int64_t                                       ParentItemID;                                                 // 0x0108(0x0008)
};


// ScriptStruct  SGFramework.AssembleSocketInfo
// Struct Size::0x0080
struct FAssembleSocketInfo
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    FGameplayTagContainer                         SupportAdapterTagList;                                        // 0x0008(0x0020)
    bool                                          bDisplaySocket;                                               // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FVector                                       UIStartOffest;                                                // 0x002C(0x000C)
    FVector                                       UIEndOffest;                                                  // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         UIPartName;                                                   // 0x0048(0x0018)
    ASGInventory*                                 AttachedInventory;                                            // 0x0060(0x0008)
    TArray<FSocketOffsetInfo>                     SocketOffsetInfo;                                             // 0x0068(0x0010)
    bool                                          bPlaceHolderInventory;                                        // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    uint32_t                                      FakeID;                                                       // 0x007C(0x0004)
};


// ScriptStruct  SGFramework.SocketOffsetInfo
// Struct Size::0x0014
struct FSocketOffsetInfo
{
    FName                                         OffsetName;                                                   // 0x0000(0x0008)
    FVector                                       OffsetLoc;                                                    // 0x0008(0x000C)
};


// ScriptStruct  SGFramework.ContainerInfo
// Struct Size::0x0018
struct FContainerInfo
{
    AActor*                                       ContainActorClass;                                            // 0x0000(0x0008)
    int32_t                                       MaxStackCount;                                                // 0x0008(0x0004)
    int32_t                                       StackCount;                                                   // 0x000C(0x0004)
    enum class EAttachPosition                    AttachPos;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.ItemSizeModifyInfo
// Struct Size::0x0010
struct FItemSizeModifyInfo
{
    int32_t                                       Up;                                                           // 0x0000(0x0004)
    int32_t                                       Down;                                                         // 0x0004(0x0004)
    int32_t                                       Left;                                                         // 0x0008(0x0004)
    int32_t                                       Right;                                                        // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.InventoryDogTagInfo
// Struct Size::0x0068
struct FInventoryDogTagInfo
{
    FString                                       RecordedDeathCharacterName;                                   // 0x0000(0x0010)
    int32_t                                       RecordedDeathCharacterLevel;                                  // 0x0010(0x0004)
    uint32_t                                      RecordedDeathCharacterGOpenID;                                // 0x0014(0x0004)
    uint64_t                                      RecordedDeathCharacterGID;                                    // 0x0018(0x0008)
    uint64_t                                      RecordedDeathCharacterTime;                                   // 0x0020(0x0008)
    FString                                       RecordedDeathCauserName;                                      // 0x0028(0x0010)
    uint64_t                                      RecordedDeathCauserWeaponID;                                  // 0x0038(0x0008)
    FString                                       RecordedDeathMapName;                                         // 0x0040(0x0010)
    int32_t                                       RecordedDeathCauserCharacterType;                             // 0x0050(0x0004)
    int32_t                                       RecordedDeathReason;                                          // 0x0054(0x0004)
    bool                                          RecordedDeathCauserIsTeamMate;                                // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    int32_t                                       RecordedDeathCharacterRankLevel;                              // 0x005C(0x0004)
    int32_t                                       RecordedDeathCharacterNationalFlagIso;                        // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  SGFramework.SGLinearMotionSimulationCurrentParameters
// Struct Size::0x0018
struct FSGLinearMotionSimulationCurrentParameters
{
    int32_t                                       CurrentStageIndex;                                            // 0x0000(0x0004)
    float                                         CurrentStageSpeed;                                            // 0x0004(0x0004)
    float                                         CurrentStageDistance;                                         // 0x0008(0x0004)
    float                                         CurrentStageTime;                                             // 0x000C(0x0004)
    enum class ESGLinearMotionSimulationStageEndConditionTypeOverrideEndConditionType;                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         OverrideEndConditionValue;                                    // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGLinearMotionSimulationStage
// Struct Size::0x0020
struct FSGLinearMotionSimulationStage
{
    enum class ESGLinearMotionSimulationStageInitialSpeedTypeInitialSpeedType;                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         InitialSpeed;                                                 // 0x0004(0x0004)
    float                                         Acceleration;                                                 // 0x0008(0x0004)
    FVector                                       MotionDirection;                                              // 0x000C(0x000C)
    enum class ESGLinearMotionSimulationStageEndConditionTypeEndConditionType;                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         EndConditionValue;                                            // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.MissionReplicateDataChangedEvent
// Struct Size::0x0068
struct FMissionReplicateDataChangedEvent
{
    enum class EMFMissionDataChangeType           changeType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FMFMissionReplicateData                       ReplicateData;                                                // 0x0008(0x0058)
    ACharacter*                                   SharerCharacter;                                              // 0x0060(0x0008)
};


// ScriptStruct  SGFramework.MissionFlowReplicateDataChangedEvent
// Struct Size::0x0038
struct FMissionFlowReplicateDataChangedEvent
{
    enum class EMFMissionDataChangeType           changeType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FMFMissionFlowReplicateData                   ReplicateData;                                                // 0x0008(0x0020)
    TArray<FMFMissionReplicateData>               MissionReplicateDataList;                                     // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.MissionActorReferenceButton
// Struct Size::0x0004
struct FMissionActorReferenceButton
{
    int32_t                                       Placeholder;                                                  // 0x0000(0x0004)
};


// ScriptStruct  SGFramework.MissionActorReference
// Struct Size::0x0018
struct FMissionActorReference
{
    FName                                         RefStr;                                                       // 0x0000(0x0008)
    AActor*                                       RefActor;                                                     // 0x0008(0x0008)
    FName                                         RefLevelName;                                                 // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.ModeTableRowBase
// Struct Size::0x0020
struct FModeTableRowBase : public FTableRowBase
{
    int32_t                                       MainModeID;                                                   // 0x0008(0x0004)
    int32_t                                       SubModeID;                                                    // 0x000C(0x0004)
    int32_t                                       MapID;                                                        // 0x0010(0x0004)
    int32_t                                       SpecialID;                                                    // 0x0014(0x0004)
    int32_t                                       Difficulty;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGTakeOutReplaceTable
// Struct Size::0x0030
struct FSGTakeOutReplaceTable : public FModeTableRowBase
{
    TArray<FSGTakeOutReplaceRaw>                  ReplaceRuleArr;                                               // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.SGTakeOutReplaceRaw
// Struct Size::0x0020
struct FSGTakeOutReplaceRaw
{
    enum class ESGTakeOutReplaceType              ReplaceType;                                                  // 0x0000(0x0001)
    enum class EFactionType                       Faction;                                                      // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    uint64_t                                      FromItemID;                                                   // 0x0008(0x0008)
    uint64_t                                      ToItemID;                                                     // 0x0010(0x0008)
    uint64_t                                      ToItemNum;                                                    // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGModeDogTagReplaceTable
// Struct Size::0x0040
struct FSGModeDogTagReplaceTable : public FModeTableRowBase
{
    TArray<FSGModeDogTagReplaceRaw>               ModeDogTagReplaceArr;                                         // 0x0020(0x0010)
    TArray<FSGModeAIDogTagReplaceRaw>             AIDogTagReplaceArr;                                           // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.SGModeAIDogTagReplaceRaw
// Struct Size::0x0020
struct FSGModeAIDogTagReplaceRaw
{
    TArray<int64_t>                               AIID;                                                         // 0x0000(0x0010)
    enum class EFactionType                       FactionType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    uint64_t                                      ReplaceItemID;                                                // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.SGModeDogTagReplaceRaw
// Struct Size::0x0010
struct FSGModeDogTagReplaceRaw
{
    enum class EFactionType                       FactionType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    uint64_t                                      ReplaceItemID;                                                // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.UAGameBigMapConfigModeTable
// Struct Size::0x0068
struct FUAGameBigMapConfigModeTable : public FModeTableRowBase
{
    TSoftClassPtr<UObject>                        BigMapInfoActor;                                              // 0x0020(0x0028)
    bool                                          IsNeedDisplayBigMapLayer;                                     // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FSoftObjectPath                               BigMapEffectDataTablePath;                                    // 0x0050(0x0018)
};


// ScriptStruct  SGFramework.SGModePreloadClassTable
// Struct Size::0x0040
struct FSGModePreloadClassTable : public FModeTableRowBase
{
    TArray<TSoftClassPtr<UObject>>                PreloadClass;                                                 // 0x0020(0x0010)
    TArray<TSoftClassPtr<UObject>>                DevPreloadClass;                                              // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.SGModeActorPoolTable
// Struct Size::0x0080
struct FSGModeActorPoolTable : public FModeTableRowBase
{
    TArray<FPoolActorInfo>                        PoolActorInfoList;                                            // 0x0020(0x0010)
    TMap<uint64_t,FPoolInventoryInfo>             PoolInventoryInfoList;                                        // 0x0030(0x0050)
};


// ScriptStruct  SGFramework.PoolInventoryInfo
// Struct Size::0x0014
struct FPoolInventoryInfo
{
    int32_t                                       MaxPoolCount;                                                 // 0x0000(0x0004)
    int32_t                                       CurrPoolCount;                                                // 0x0004(0x0004)
    int32_t                                       Priority;                                                     // 0x0008(0x0004)
    bool                                          bIsUsing;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       LimitFlag;                                                    // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.PoolActorInfo
// Struct Size::0x0038
struct FPoolActorInfo
{
    TSoftClassPtr<UObject>                        PoolActorClass;                                               // 0x0000(0x0028)
    int32_t                                       MaxPoolCount;                                                 // 0x0028(0x0004)
    int32_t                                       CurrPoolCount;                                                // 0x002C(0x0004)
    int32_t                                       Priority;                                                     // 0x0030(0x0004)
    int32_t                                       LimitFlag;                                                    // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.UAGameModeReplayTable
// Struct Size::0x0028
struct FUAGameModeReplayTable : public FModeTableRowBase
{
    bool                                          OpenReplay;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  SGFramework.UAThunderDetailTable
// Struct Size::0x0018
struct FUAThunderDetailTable : public FTableRowBase
{
    int32_t                                       ThunderTypeIndex;                                             // 0x0008(0x0004)
    float                                         FirstStageTime;                                               // 0x000C(0x0004)
    float                                         SecondStageTime;                                              // 0x0010(0x0004)
    float                                         ThirdStageTime;                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.UAModeThunderTable
// Struct Size::0x0038
struct FUAModeThunderTable : public FModeTableRowBase
{
    int32_t                                       ThunderCount;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FModeThunderTimeInfo>                  PlayThunderTimeInfoArray;                                     // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.UAModeAIDifficultyTable
// Struct Size::0x0050
struct FUAModeAIDifficultyTable : public FModeTableRowBase
{
    FString                                       AIPathLevelName;                                              // 0x0020(0x0010)
    FString                                       AISpawnLevelName;                                             // 0x0030(0x0010)
    UDataTable*                                   AIPortraitToAIID;                                             // 0x0040(0x0008)
    int32_t                                       AISpawnConfigID;                                              // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  SGFramework.MotionWarpingNetSyncPoint
// Struct Size::0x0030
struct FMotionWarpingNetSyncPoint
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMotionWarpingSyncPoint                       SyncPoint;                                                    // 0x0010(0x0020)
};


// ScriptStruct  SGFramework.SGNPCAINameTableRow
// Struct Size::0x0028
struct FSGNPCAINameTableRow : public FTableRowBase
{
    FText                                         NameText;                                                     // 0x0008(0x0018)
    int32_t                                       NamePoolID;                                                   // 0x0020(0x0004)
    int32_t                                       Level;                                                        // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.SGNPCAIFactionTableRow
// Struct Size::0x0038
struct FSGNPCAIFactionTableRow : public FTableRowBase
{
    TArray<TSoftObjectPtr<UNPCAIFactionPlugin>>   MustPlugin;                                                   // 0x0008(0x0010)
    TArray<TSoftObjectPtr<UNPCAIFactionPlugin>>   ExtraPlugin;                                                  // 0x0018(0x0010)
    TArray<TSoftObjectPtr<UNPCAIFactionPlugin>>   SwitchPlugin;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SGFramework.SGNPCSpawnConfigTableRow
// Struct Size::0x0148
struct FSGNPCSpawnConfigTableRow : public FTableRowBase
{
    FString                                       AIDisplayName;                                                // 0x0008(0x0010)
    int32_t                                       MaxEquipSuiteCount;                                           // 0x0018(0x0004)
    int32_t                                       PullPriority;                                                 // 0x001C(0x0004)
    int32_t                                       NamePoolID;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TSoftClassPtr<UObject>                        AICharacterClass;                                             // 0x0028(0x0028)
    TMap<enum class EFactionType,FSGAICampPerformances>AIFactionPerformances;                                   // 0x0050(0x0050)
    TSoftClassPtr<UObject>                        AIControllerClass;                                            // 0x00A0(0x0028)
    TSoftClassPtr<UObject>                        FactionClass;                                                 // 0x00C8(0x0028)
    TSoftClassPtr<UObject>                        RoleClass;                                                    // 0x00F0(0x0028)
    TSoftObjectPtr<UBehaviorTree>                 ArchetypeTemplate;                                            // 0x0118(0x0028)
    FName                                         FactionName;                                                  // 0x0140(0x0008)
};


// ScriptStruct  SGFramework.SGAICampPerformances
// Struct Size::0x0050
struct FSGAICampPerformances
{
    TMap<int32_t,enum class EAIPerformance>       AIPerformances;                                               // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SGAIEventAvatarTableRow
// Struct Size::0x0058
struct FSGAIEventAvatarTableRow : public FTableRowBase
{
    int32_t                                       eventId;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               AIIDs;                                                        // 0x0010(0x0010)
    TSoftObjectPtr<UDataTable>                    SoundData;                                                    // 0x0020(0x0028)
    TArray<int64_t>                               AvatarInventoryID;                                            // 0x0048(0x0010)
};


// ScriptStruct  SGFramework.SGAIPerformanceTableRow
// Struct Size::0x0058
struct FSGAIPerformanceTableRow : public FTableRowBase
{
    enum class EAIPerformance                     AIPerformance;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<TSoftObjectPtr<UDataTable>>            SoundDatas;                                                   // 0x0010(0x0010)
    TSoftClassPtr<UObject>                        DeathBoxClass;                                                // 0x0020(0x0028)
    TArray<FSGAIAvatarInventories>                AvatarInventoriesGroup;                                       // 0x0048(0x0010)
};


// ScriptStruct  SGFramework.SGAIAvatarInventories
// Struct Size::0x0010
struct FSGAIAvatarInventories
{
    TArray<int64_t>                               AvatarInventoryID;                                            // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGOrnamentAnimInstanceProxy
// Struct Size::0x08C0
struct FSGOrnamentAnimInstanceProxy : public FAnimInstanceProxy
{
    USGOrnamentAnimInstance*                      AnimInstance;                                                 // 0x0860(0x0008)
    enum class EOrnamentSimulateMethod            ActiveSimulateMethod;                                         // 0x0868(0x0001)
    char                                          pa_0869[0x0007]                                               // 0x0869(0x0007)
    FTransform                                    ExternalCollisionTransform;                                   // 0x0870(0x0030)
    FVector                                       ExternalCollisionExtend;                                      // 0x08A0(0x000C)
    char                                          pa_08AC[0x0004]                                               // 0x08AC(0x0004)
    USkeletalMeshComponent*                       ExternalCollisionTarget;                                      // 0x08B0(0x0008)
    char                                          pa_08B8[0x0008]                                               // 0x08B8(0x0008)
};


// ScriptStruct  SGFramework.SGParadropConfigTableRow
// Struct Size::0x0160
struct FSGParadropConfigTableRow : public FModeTableRowBase
{
    TArray<int32_t>                               ActIDs;                                                       // 0x0020(0x0010)
    FName                                         CachedRowName;                                                // 0x0030(0x0008)
    FString                                       LevelName;                                                    // 0x0038(0x0010)
    TArray<FName>                                 ParadropWaveConfigTableRowNames;                              // 0x0048(0x0010)
    FName                                         CalledParadropWaveConfigTableRowName;                         // 0x0058(0x0008)
    TArray<FSGParadropBigGroupInfo>               BigGroupInfos;                                                // 0x0060(0x0010)
    char                                          pa_0070[0x00F0]                                               // 0x0070(0x00F0)
};


// ScriptStruct  SGFramework.SGParadropBigGroupInfo
// Struct Size::0x0020
struct FSGParadropBigGroupInfo
{
    int32_t                                       BigGroup;                                                     // 0x0000(0x0004)
    int32_t                                       Priority;                                                     // 0x0004(0x0004)
    int32_t                                       PriorityReduction;                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FSGParadropGroupInfo>                  GroupInfos;                                                   // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SGParadropGroupInfo
// Struct Size::0x000C
struct FSGParadropGroupInfo
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    int32_t                                       Weight;                                                       // 0x0004(0x0004)
    int32_t                                       WeightReduction;                                              // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.SGParadropWaveInfo
// Struct Size::0x0140
struct FSGParadropWaveInfo : public FTableRowBase
{
    int32_t                                       Probability;                                                  // 0x0008(0x0004)
    int32_t                                       MinTime;                                                      // 0x000C(0x0004)
    int32_t                                       MaxTime;                                                      // 0x0010(0x0004)
    int32_t                                       MinNum;                                                       // 0x0014(0x0004)
    int32_t                                       MaxNum;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ValidGroupIndexs;                                             // 0x0020(0x0010)
    int32_t                                       SpecialReplaceProbability;                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FSGParadropDetailInfo>                 NormalParadropDetail;                                         // 0x0038(0x0010)
    TArray<FSGParadropDetailInfo>                 SpecialParadropDetail;                                        // 0x0048(0x0010)
    TSoftClassPtr<UObject>                        PlaneClass;                                                   // 0x0058(0x0028)
    int32_t                                       Radius;                                                       // 0x0080(0x0004)
    int32_t                                       Height;                                                       // 0x0084(0x0004)
    int32_t                                       AdjustmentHeight;                                             // 0x0088(0x0004)
    int32_t                                       PlaneSpeed;                                                   // 0x008C(0x0004)
    TSoftObjectPtr<UAkAudioEvent>                 PlaneEndAudioEvent;                                           // 0x0090(0x0028)
    TSoftObjectPtr<UAkAudioEvent>                 PlaneStartAudioEvent;                                         // 0x00B8(0x0028)
    int32_t                                       Pre;                                                          // 0x00E0(0x0004)
    enum class ESGParadropState                   PassivityTarceParadropState;                                  // 0x00E4(0x0001)
    char                                          pa_00E5[0x0003]                                               // 0x00E5(0x0003)
    int32_t                                       PassivityTaraceConfigID;                                      // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    TMap<enum class ESGParadropState,FBroadcastOnGameHUDConfig>BroadcastConfig;                                 // 0x00F0(0x0050)
};


// ScriptStruct  SGFramework.SGParadropDetailInfo
// Struct Size::0x0080
struct FSGParadropDetailInfo
{
    TSoftClassPtr<UObject>                        ParadropBaseClass;                                            // 0x0000(0x0028)
    TSoftClassPtr<UObject>                        ParadropCarrierClass;                                         // 0x0028(0x0028)
    TSoftClassPtr<UObject>                        ParadropPayloadClass;                                         // 0x0050(0x0028)
    float                                         ParadropRequiredFallingChannelRadius;                         // 0x0078(0x0004)
    float                                         ParadropRequiredFlatGroundRadius;                             // 0x007C(0x0004)
};


// ScriptStruct  SGFramework.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
    ASGParadropBase*                              Target;                                                       // 0x0008(0x0008)
    enum class ESGParadropState                   ParadropState;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.PSCInfo
// Struct Size::0x0010
struct FPSCInfo
{
    UParticleSystem*                              Template;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.AutoAimFrameRecord
// Struct Size::0x0084
struct FAutoAimFrameRecord
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    float                                         FOV;                                                          // 0x0004(0x0004)
    float                                         BaseStartRangeH;                                              // 0x0008(0x0004)
    float                                         Distance2StartRangeScaleH;                                    // 0x000C(0x0004)
    float                                         FOV2StartRangeScaleH;                                         // 0x0010(0x0004)
    float                                         ModifiedStartRangeH;                                          // 0x0014(0x0004)
    float                                         BaseEndRangeH;                                                // 0x0018(0x0004)
    float                                         Distance2EndRangeScaleH;                                      // 0x001C(0x0004)
    float                                         FOV2EndRangeScaleH;                                           // 0x0020(0x0004)
    float                                         ModifiedEndRangeH;                                            // 0x0024(0x0004)
    float                                         BaseSpeedH;                                                   // 0x0028(0x0004)
    float                                         BaseAngularSpeedH;                                            // 0x002C(0x0004)
    float                                         Distance2SpeedScaleH;                                         // 0x0030(0x0004)
    float                                         FOV2SpeedScaleH;                                              // 0x0034(0x0004)
    float                                         RecoilTime2SpeedScaleH;                                       // 0x0038(0x0004)
    float                                         RectDist2SpeedScaleH;                                         // 0x003C(0x0004)
    float                                         HorizontalRecoil2SpeedScaleH;                                 // 0x0040(0x0004)
    float                                         SpeedDampingScale;                                            // 0x0044(0x0004)
    float                                         SlideScreenSpeedDamp;                                         // 0x0048(0x0004)
    float                                         FireCount2SpeedScale;                                         // 0x004C(0x0004)
    float                                         SelfMovePenaltyScale;                                         // 0x0050(0x0004)
    float                                         TargetMovePenaltyScale;                                       // 0x0054(0x0004)
    float                                         ModifiedAngularSpeedH;                                        // 0x0058(0x0004)
    float                                         ModifiedAngularSpeedV;                                        // 0x005C(0x0004)
    FVector                                       TargetVelocity;                                               // 0x0060(0x000C)
    float                                         MoveCompensateRatioScale;                                     // 0x006C(0x0004)
    float                                         TargetMovingCompensateRatioScaled;                            // 0x0070(0x0004)
    FVector                                       MoveCompensateVelocityScaled;                                 // 0x0074(0x000C)
    float                                         MoveCompensateAngularSpeedH;                                  // 0x0080(0x0004)
};


// ScriptStruct  SGFramework.AutoAimRangeCheckResult
// Struct Size::0x0008
struct FAutoAimRangeCheckResult
{
    enum class ETargetNotInRangeReason            TargetNotInFollowRangeReason;                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MoveCompensateScale;                                          // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.AutoAimTargetBoneList
// Struct Size::0x0028
struct FAutoAimTargetBoneList
{
    TArray<FAutoAimTargetBone>                    BaseConfigs;                                                  // 0x0000(0x0010)
    TArray<FAutoAimTargetBone>                    FireStateConfigs;                                             // 0x0010(0x0010)
    bool                                          bFireStateOverride;                                           // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  SGFramework.AutoAimTargetBone
// Struct Size::0x002C
struct FAutoAimTargetBone
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    float                                         RadiusBias;                                                   // 0x0008(0x0004)
    float                                         HalfLengthBias;                                               // 0x000C(0x0004)
    FAutoAimFloat                                 StartRange;                                                   // 0x0010(0x001C)
};


// ScriptStruct  SGFramework.AutoAimFloat
// Struct Size::0x001C
struct FAutoAimFloat
{
    float                                         BaseValue;                                                    // 0x0000(0x0004)
    float                                         FireStateValue;                                               // 0x0004(0x0004)
    bool                                          bFireStateOverride;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SlideScreenValue;                                             // 0x000C(0x0004)
    bool                                          bSlideScreenOverride;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         AdsValue;                                                     // 0x0014(0x0004)
    bool                                          bAdsOverride;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  SGFramework.AutoAimFloatCurve
// Struct Size::0x0038
struct FAutoAimFloatCurve
{
    UCurveFloat*                                  BaseCurve;                                                    // 0x0000(0x0008)
    UCurveFloat*                                  FireCurve;                                                    // 0x0008(0x0008)
    bool                                          bFireStateOverride;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UCurveFloat*                                  SlideScreenCurve;                                             // 0x0018(0x0008)
    bool                                          bSlideScreenOverride;                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UCurveFloat*                                  AdsCurve;                                                     // 0x0028(0x0008)
    bool                                          bAdsOverride;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SGFramework.AutoAimContext
// Struct Size::0x002C
struct FAutoAimContext
{
    bool                                          bFiring;                                                      // 0x0000(0x0001)
    bool                                          bADS;                                                         // 0x0001(0x0001)
    bool                                          bSlidingScreen;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector2D                                     SlideScreenDirAvg;                                            // 0x0004(0x0008)
    FVector                                       ViewLocation;                                                 // 0x000C(0x000C)
    FVector                                       ViewDirection;                                                // 0x0018(0x000C)
    float                                         CurrentTime;                                                  // 0x0024(0x0004)
    float                                         CurrentFOV;                                                   // 0x0028(0x0004)
};


// ScriptStruct  SGFramework.BehaviorControlData
// Struct Size::0x0002
struct FBehaviorControlData
{
    bool                                          bLockInput;                                                   // 0x0000(0x0001)
    bool                                          bLockMove;                                                    // 0x0001(0x0001)
};


// ScriptStruct  SGFramework.CombatTargetInfo
// Struct Size::0x0018
struct FCombatTargetInfo
{
    FName                                         TargetName;                                                   // 0x0000(0x0008)
    int32_t                                       FireCount;                                                    // 0x0008(0x0004)
    int32_t                                       HitCount;                                                     // 0x000C(0x0004)
    float                                         FirstHitTime;                                                 // 0x0010(0x0004)
    float                                         DeadlyHitTime;                                                // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.CombatRecord
// Struct Size::0x0110
struct FCombatRecord
{
    FSGFireRepInfo                                FireInfo;                                                     // 0x0000(0x0060)
    float                                         Timestamp;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FCombatDamageInfo                             DamageInfo;                                                   // 0x0068(0x0050)
    FCombatDamageInfo                             ThroughBodyDamageInfo;                                        // 0x00B8(0x0050)
    bool                                          bValidationFailed;                                            // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
};


// ScriptStruct  SGFramework.CombatDamageInfo
// Struct Size::0x0050
struct FCombatDamageInfo
{
    FSGBulletID                                   BulletID;                                                     // 0x0000(0x0010)
    FName                                         TargetName;                                                   // 0x0010(0x0008)
    bool                                          bTargetDead;                                                  // 0x0018(0x0001)
    enum class EHitGroupType                      HitGroup;                                                     // 0x0019(0x0001)
    enum class EHeadHitSubGroupType               HeadHitSubGroup;                                              // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    int32_t                                       ArmorLevel;                                                   // 0x001C(0x0004)
    float                                         ArmorDurability;                                              // 0x0020(0x0004)
    float                                         ArmorDurabilityMax;                                           // 0x0024(0x0004)
    bool                                          bPenetrateArmor;                                              // 0x0028(0x0001)
    bool                                          bBrokenBullet;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         Damage;                                                       // 0x002C(0x0004)
    float                                         HeadEndurance;                                                // 0x0030(0x0004)
    float                                         ChestEndurance;                                               // 0x0034(0x0004)
    float                                         StomachEndurance;                                             // 0x0038(0x0004)
    float                                         LeftArmEndurance;                                             // 0x003C(0x0004)
    float                                         RightArmEndurance;                                            // 0x0040(0x0004)
    float                                         LeftLegEndurance;                                             // 0x0044(0x0004)
    float                                         RightLegEndurance;                                            // 0x0048(0x0004)
    bool                                          bThroughBody;                                                 // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  SGFramework.SGInputControlStruct
// Struct Size::0x0003
struct FSGInputControlStruct
{
    bool                                          BCanMove;                                                     // 0x0000(0x0001)
    bool                                          bCanTurn;                                                     // 0x0001(0x0001)
    bool                                          bCanSprint;                                                   // 0x0002(0x0001)
};


// ScriptStruct  SGFramework.CAActionBlockingSettingUnit
// Struct Size::0x0018
struct FCAActionBlockingSettingUnit
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.PCReportStatisInfo
// Struct Size::0x0024
struct FPCReportStatisInfo
{
    int32_t                                       ClientReconnectTimes;                                         // 0x0000(0x0004)
    int32_t                                       ClientMaxFps;                                                 // 0x0004(0x0004)
    int32_t                                       ClientMinFps;                                                 // 0x0008(0x0004)
    int32_t                                       ClientAverFps;                                                // 0x000C(0x0004)
    int32_t                                       ClientPingTimes;                                              // 0x0010(0x0004)
    int32_t                                       ClientPingLoseTimes;                                          // 0x0014(0x0004)
    int32_t                                       ClientPullTimes;                                              // 0x0018(0x0004)
    int32_t                                       ClientPullDiffDistance;                                       // 0x001C(0x0004)
    int32_t                                       ClientPullAvgPing;                                            // 0x0020(0x0004)
};


// ScriptStruct  SGFramework.StatisDefaultParams
// Struct Size::0x0018
struct FStatisDefaultParams
{
    float                                         FrameRateJitterThreshold;                                     // 0x0000(0x0004)
    float                                         APMReportPeriod;                                              // 0x0004(0x0004)
    float                                         MaxLocDiff;                                                   // 0x0008(0x0004)
    float                                         Max3PLocDiff;                                                 // 0x000C(0x0004)
    float                                         FrameRateJitterLagerWaveRate;                                 // 0x0010(0x0004)
    float                                         SpawnActorMaxMilliseconds;                                    // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGWatchGameSettleData
// Struct Size::0x00A0
struct FSGWatchGameSettleData
{
    FString                                       MurderName;                                                   // 0x0000(0x0010)
    uint64_t                                      MurderID;                                                     // 0x0010(0x0008)
    bool                                          MurderIsAI;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       Result;                                                       // 0x001C(0x0004)
    int32_t                                       TeamType;                                                     // 0x0020(0x0004)
    int32_t                                       GameTime;                                                     // 0x0024(0x0004)
    int32_t                                       game;                                                         // 0x0028(0x0004)
    bool                                          bHas;                                                         // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    int32_t                                       KillerTeamtype;                                               // 0x0030(0x0004)
    int32_t                                       MurderNationalFlagIso;                                        // 0x0034(0x0004)
    int32_t                                       KillerWeaponId;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FSGWatchShowData                              WatchShowData;                                                // 0x0040(0x0060)
};


// ScriptStruct  SGFramework.SGWatchShowData
// Struct Size::0x0060
struct FSGWatchShowData
{
    int32_t                                       KillPMCNum;                                                   // 0x0000(0x0004)
    int32_t                                       KillEnemyNum;                                                 // 0x0004(0x0004)
    int32_t                                       TakeOutValue;                                                 // 0x0008(0x0004)
    enum class ECharacterType                     MurderCharacterType;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FSGPlayerIconInfo                             MurderIconInfo;                                               // 0x0010(0x0048)
    enum class EPlayerAliveState                  AliveState;                                                   // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  SGFramework.SGPickupSingleParams
// Struct Size::0x0010
struct FSGPickupSingleParams
{
    ASGPickup*                                    PickUp;                                                       // 0x0000(0x0008)
    int32_t                                       Probability;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGPickupGroupParams
// Struct Size::0x0010
struct FSGPickupGroupParams
{
    ASGPickup*                                    PickUp;                                                       // 0x0000(0x0008)
    int32_t                                       Weight;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.MagFOVRaw
// Struct Size::0x0008
struct FMagFOVRaw
{
    enum class ESGMagType                         MagType;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FOV;                                                          // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.MagnificationSensitivitySetting
// Struct Size::0x00F0
struct FMagnificationSensitivitySetting
{
    TMap<enum class ESGMagType,float>             SensitivityNormal;                                            // 0x0000(0x0050)
    TMap<enum class ESGMagType,float>             SensitivityOnFire;                                            // 0x0050(0x0050)
    TMap<enum class ESGMagType,float>             SensitivityGyro;                                              // 0x00A0(0x0050)
};


// ScriptStruct  SGFramework.PlayerTags
// Struct Size::0x0050
struct FPlayerTags
{
    TSet<USGPlayerTag*>                           Tags;                                                         // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.GuranteedItemLimitInfo
// Struct Size::0x0008
struct FGuranteedItemLimitInfo
{
    int32_t                                       GuranteedTotalNum;                                            // 0x0000(0x0004)
    int32_t                                       CurGuranteedProgress;                                         // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.BrilliantTimeReplayInfo
// Struct Size::0x0030
struct FBrilliantTimeReplayInfo
{
    TArray<int32_t>                               TypeIndexList;                                                // 0x0000(0x0010)
    TArray<FDateTime>                             StartTimeList;                                                // 0x0010(0x0010)
    TArray<FDateTime>                             EndTimeList;                                                  // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.OwnedActivityInventoryInfo
// Struct Size::0x0028
struct FOwnedActivityInventoryInfo
{
    TArray<ASGInventory*>                         Inventories;                                                  // 0x0000(0x0010)
    TArray<int32_t>                               InventoryHandles;                                             // 0x0010(0x0010)
    int32_t                                       LastReportInventoryCount;                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.ActivityInventoryStateChangeInfo
// Struct Size::0x0002
struct FActivityInventoryStateChangeInfo
{
    enum class EActivityInventoryState            PreviousState;                                                // 0x0000(0x0001)
    enum class EActivityInventoryState            CurrentState;                                                 // 0x0001(0x0001)
};


// ScriptStruct  SGFramework.ActivityReportConfigArray
// Struct Size::0x0010
struct FActivityReportConfigArray
{
    TArray<FActivityReportConfig>                 ReportInfos;                                                  // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.ActivityReportConfig
// Struct Size::0x0028
struct FActivityReportConfig
{
    enum class EReportType                        ReportType;                                                   // 0x0000(0x0001)
    enum class EChaseActivityReportCondition      ReportCondition;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       OptionalMessageID;                                            // 0x0004(0x0004)
    FText                                         OptionalText;                                                 // 0x0008(0x0018)
    int32_t                                       CheckServerTimeIndex;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.PlayerInvDetectInfo
// Struct Size::0x0018
struct FPlayerInvDetectInfo
{
    TArray<FVector>                               PlayerDetectedInvPosList;                                     // 0x0000(0x0010)
    bool                                          IsInvDetecting;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  SGFramework.MonitorToggleInputSimple
// Struct Size::0x0070
struct FMonitorToggleInputSimple
{
    FString                                       ToggleSprint;                                                 // 0x0000(0x0010)
    FString                                       ToggleCrouch;                                                 // 0x0010(0x0010)
    FString                                       ToggleProne;                                                  // 0x0020(0x0010)
    FString                                       ToggleJump;                                                   // 0x0030(0x0010)
    FString                                       ToggleLean;                                                   // 0x0040(0x0010)
    FString                                       ToggleUseItem;                                                // 0x0050(0x0010)
    FString                                       ToggleAds;                                                    // 0x0060(0x0010)
};


// ScriptStruct  SGFramework.MonitorToggleInputAfterThrow
// Struct Size::0x0070
struct FMonitorToggleInputAfterThrow
{
    TArray<int32_t>                               ToggleSprint;                                                 // 0x0000(0x0010)
    TArray<int32_t>                               ToggleCrouch;                                                 // 0x0010(0x0010)
    TArray<int32_t>                               ToggleProne;                                                  // 0x0020(0x0010)
    TArray<int32_t>                               ToggleJump;                                                   // 0x0030(0x0010)
    TArray<int32_t>                               ToggleLean;                                                   // 0x0040(0x0010)
    TArray<int32_t>                               ToggleUseItem;                                                // 0x0050(0x0010)
    TArray<int32_t>                               ToggleAds;                                                    // 0x0060(0x0010)
};


// ScriptStruct  SGFramework.HitStatis
// Struct Size::0x0018
struct FHitStatis
{
    float                                         HitTime;                                                      // 0x0000(0x0004)
    int32_t                                       HitCount;                                                     // 0x0004(0x0004)
    bool                                          IsAI;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    uint64_t                                      TakerId;                                                      // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.KillStatis
// Struct Size::0x0008
struct FKillStatis
{
    float                                         KillTime;                                                     // 0x0000(0x0004)
    bool                                          IsAI;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  SGFramework.DBNOStatis
// Struct Size::0x0020
struct FDBNOStatis
{
    int32_t                                       DBNOCount;                                                    // 0x0000(0x0004)
    int32_t                                       RescuedCount;                                                 // 0x0004(0x0004)
    int32_t                                       RescueCount;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint64_t>                              RescuerGIDList;                                               // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.SGBusinessmanInfo
// Struct Size::0x0014
struct FSGBusinessmanInfo
{
    int32_t                                       BusinessmanID;                                                // 0x0000(0x0004)
    int32_t                                       Reputation;                                                   // 0x0004(0x0004)
    int32_t                                       Level;                                                        // 0x0008(0x0004)
    bool                                          bisUnlock;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       StageId;                                                      // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.SGZonePlayerInfo
// Struct Size::0x0140
struct FSGZonePlayerInfo
{
    uint64_t                                      PlayerId;                                                     // 0x0000(0x0008)
    uint64_t                                      roomid;                                                       // 0x0008(0x0008)
    uint32_t                                      TeamIndex;                                                    // 0x0010(0x0004)
    uint32_t                                      TeamPos;                                                      // 0x0014(0x0004)
    FString                                       PlayerName;                                                   // 0x0018(0x0010)
    uint32_t                                      Level;                                                        // 0x0028(0x0004)
    uint32_t                                      ZoneId;                                                       // 0x002C(0x0004)
    bool                                          HasEscapeSaveEquip;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FSGPlayerEquipInfo                            PlayerEquipInfo;                                              // 0x0038(0x0040)
    FZoneSettleSiteInfo                           SettleSiteInfo;                                               // 0x0078(0x0028)
    uint32_t                                      HeadEndurance;                                                // 0x00A0(0x0004)
    uint32_t                                      ChestEndurance;                                               // 0x00A4(0x0004)
    uint32_t                                      StomchEndurance;                                              // 0x00A8(0x0004)
    uint32_t                                      LeftArmEndurance;                                             // 0x00AC(0x0004)
    uint32_t                                      RightArmEndurance;                                            // 0x00B0(0x0004)
    uint32_t                                      LeftLegEndurance;                                             // 0x00B4(0x0004)
    uint32_t                                      RightLegEndurance;                                            // 0x00B8(0x0004)
    uint32_t                                      Food;                                                         // 0x00BC(0x0004)
    uint32_t                                      Water;                                                        // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<USGPlayerDebuffInfoBase*>              BuffList;                                                     // 0x00C8(0x0010)
    uint64_t                                      CliVersion;                                                   // 0x00D8(0x0008)
    uint32_t                                      ranked;                                                       // 0x00E0(0x0004)
    uint32_t                                      ranked;                                                       // 0x00E4(0x0004)
    uint32_t                                      ranking;                                                      // 0x00E8(0x0004)
    uint32_t                                      pranking;                                                     // 0x00EC(0x0004)
    uint32_t                                      ranked;                                                       // 0x00F0(0x0004)
    uint32_t                                      Rank;                                                         // 0x00F4(0x0004)
    uint32_t                                      PrivilegeLevel;                                               // 0x00F8(0x0004)
    uint32_t                                      PlatPrivilegeType;                                            // 0x00FC(0x0004)
    TArray<FSGWishListItemInfo>                   PlayerWishList;                                               // 0x0100(0x0010)
    TArray<int32_t>                               NewInspectedItemIDs;                                          // 0x0110(0x0010)
    int32_t                                       DogTagType;                                                   // 0x0120(0x0004)
    int32_t                                       HeadBoxID;                                                    // 0x0124(0x0004)
    uint32_t                                      title;                                                        // 0x0128(0x0004)
    uint32_t                                      title;                                                        // 0x012C(0x0004)
    uint32_t                                      title;                                                        // 0x0130(0x0004)
    uint32_t                                      NationalFlagIso;                                              // 0x0134(0x0004)
    uint32_t                                      EnterDsZone;                                                  // 0x0138(0x0004)
    uint32_t                                      IdealDsZone;                                                  // 0x013C(0x0004)
};


// ScriptStruct  SGFramework.SGWishListItemInfo
// Struct Size::0x0018
struct FSGWishListItemInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       HaveNum;                                                      // 0x0004(0x0004)
    int32_t                                       RequireNum;                                                   // 0x0008(0x0004)
    int32_t                                       CurrentOwnedNum;                                              // 0x000C(0x0004)
    int32_t                                       SellItemID;                                                   // 0x0010(0x0004)
    int32_t                                       LastReduceFromFulfillFrame;                                   // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.ZoneSettleSiteInfo
// Struct Size::0x0028
struct FZoneSettleSiteInfo
{
    uint64_t                                      svr;                                                          // 0x0000(0x0008)
    uint32_t                                      cmd;                                                          // 0x0008(0x0004)
    uint32_t                                      cmd;                                                          // 0x000C(0x0004)
    uint32_t                                      business;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    uint64_t                                      GID;                                                          // 0x0018(0x0008)
    uint32_t                                      ZoneId;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerEquipInfo
// Struct Size::0x0040
struct FSGPlayerEquipInfo
{
    TArray<USGPlayerItemInfoBase*>                EquipPlayeritemList;                                          // 0x0000(0x0010)
    enum class ECharacterSex                      AvatarGender;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FSGAvatarInfo>                         AvatarItems;                                                  // 0x0018(0x0010)
    uint32_t                                      bBodyStatus;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FSGBadgeInfo>                          BadgeItems;                                                   // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.HighOutput
// Struct Size::0x00B0
struct FHighOutput
{
    TArray<APawn*>                                TeamMate;                                                     // 0x0000(0x0010)
    TArray<float>                                 DistanceToOthers;                                             // 0x0010(0x0010)
    FVector                                       StartLoc;                                                     // 0x0020(0x000C)
    bool                                          HasWeapon;                                                    // 0x002C(0x0001)
    enum class ENPCCourierOrderState              ScripState;                                                   // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    int32_t                                       DistanceState;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TMap<enum class ENPCCourierCourierType,enum class ENPCCourierOrderState>CourierMap;                         // 0x0038(0x0050)
    float                                         LootScore;                                                    // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    TArray<int32_t>                               PathIDsIn5m;                                                  // 0x0090(0x0010)
    TArray<int32_t>                               PathIDsIn10m;                                                 // 0x00A0(0x0010)
};


// ScriptStruct  SGFramework.TeamPlayerOrderInfo
// Struct Size::0x0020
struct FTeamPlayerOrderInfo
{
    APlayerState*                                 PlayerState;                                                  // 0x0000(0x0008)
    FString                                       Name;                                                         // 0x0008(0x0010)
    char                                          Order;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.DamageBlackborad
// Struct Size::0x0080
struct FDamageBlackborad
{
    AActor*                                       DamageCauser;                                                 // 0x0000(0x0008)
    enum class EHitGroupType                      HitGroup;                                                     // 0x0008(0x0001)
    enum class EHeadHitSubGroupType               HitHeadPart;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FVector                                       Momentum;                                                     // 0x000C(0x000C)
    FVector                                       HitLocation;                                                  // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    int64_t                                       FireCounter;                                                  // 0x0028(0x0008)
    AActor*                                       HitArmor;                                                     // 0x0030(0x0008)
    FName                                         HitBoneName;                                                  // 0x0038(0x0008)
    bool                                          bPenetrateArmor;                                              // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         PenetrateArmorProbability;                                    // 0x0044(0x0004)
    float                                         Damage;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    int64_t                                       BulletID;                                                     // 0x0050(0x0008)
    int32_t                                       DamageCauserType;                                             // 0x0058(0x0004)
    int8_t                                        bHitFace;                                                     // 0x005C(0x0001)
    char                                          pa_005D[0x000B]                                               // 0x005D(0x000B)
    FString                                       BullentName;                                                  // 0x0068(0x0010)
    uint32_t                                      BulletItemID;                                                 // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  SGFramework.RoomSettleSiteInfo
// Struct Size::0x0030
struct FRoomSettleSiteInfo
{
    uint64_t                                      svr;                                                          // 0x0000(0x0008)
    uint32_t                                      cmd;                                                          // 0x0008(0x0004)
    uint32_t                                      cmd;                                                          // 0x000C(0x0004)
    uint32_t                                      room;                                                         // 0x0010(0x0004)
    uint32_t                                      room;                                                         // 0x0014(0x0004)
    uint32_t                                      team;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    uint64_t                                      GID;                                                          // 0x0020(0x0008)
    uint32_t                                      ZoneId;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerRoomSettleSiteInfo
// Struct Size::0x0020
struct FSGPlayerRoomSettleSiteInfo
{
    uint32_t                                      room;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    uint64_t                                      room;                                                         // 0x0008(0x0008)
    uint32_t                                      room;                                                         // 0x0010(0x0004)
    uint32_t                                      room;                                                         // 0x0014(0x0004)
    uint32_t                                      cmd;                                                          // 0x0018(0x0004)
    uint32_t                                      cmd;                                                          // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerZoneSettleSiteInfo
// Struct Size::0x0018
struct FSGPlayerZoneSettleSiteInfo
{
    uint32_t                                      business;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    uint64_t                                      svr;                                                          // 0x0008(0x0008)
    uint32_t                                      cmd;                                                          // 0x0010(0x0004)
    uint32_t                                      cmd;                                                          // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGPlayerSeparatedItemInfos
// Struct Size::0x0030
struct FSGPlayerSeparatedItemInfos
{
    TArray<USGPlayerItemInfoBase*>                SelfItemList;                                                 // 0x0000(0x0010)
    TArray<FSGBringOutTeamItemInfo>               TeammateItemList;                                             // 0x0010(0x0010)
    TArray<USGPlayerItemInfoBase*>                SelfSeparatedItemList;                                        // 0x0020(0x0010)
};


// ScriptStruct  SGFramework.SGBringOutTeamItemInfo
// Struct Size::0x0018
struct FSGBringOutTeamItemInfo
{
    uint64_t                                      TeammateGID;                                                  // 0x0000(0x0008)
    TArray<USGPlayerItemInfoBase*>                EquipPlayeritemList;                                          // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.CharacterDeathVictimStatics
// Struct Size::0x02F0
struct FCharacterDeathVictimStatics
{
    int32_t                                       VictimGID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       VictimName;                                                   // 0x0008(0x0010)
    int32_t                                       DieTimestamp;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FBulletHolesInfo>                      BulletHoles;                                                  // 0x0020(0x0010)
    FCharacterDeathStatics                        DeathStatics;                                                 // 0x0030(0x0168)
    TArray<FCharacterHealthStaticsWhenDead>       AllHealthStaticsWhenDead;                                     // 0x0198(0x0010)
    FSGPlayerIconInfo                             VictimIconInfo;                                               // 0x01A8(0x0048)
    FSGPlayerShowInfo                             PlayerShowInfo;                                               // 0x01F0(0x0040)
    FCharacterDeathMurderStatics                  MurderInfo;                                                   // 0x0230(0x00C0)
};


// ScriptStruct  SGFramework.CharacterDeathMurderStatics
// Struct Size::0x00C0
struct FCharacterDeathMurderStatics
{
    ASGPlayerState*                               MurderPS;                                                     // 0x0000(0x0008)
    int32_t                                       MurderTeamType;                                               // 0x0008(0x0004)
    int32_t                                       MurderTeamIndex;                                              // 0x000C(0x0004)
    FString                                       MurderName;                                                   // 0x0010(0x0010)
    int64_t                                       MurderID;                                                     // 0x0020(0x0008)
    int32_t                                       MurderLevel;                                                  // 0x0028(0x0004)
    int32_t                                       MurderRanking;                                                // 0x002C(0x0004)
    int32_t                                       MurderPRanking;                                               // 0x0030(0x0004)
    int32_t                                       MurderRanked;                                                 // 0x0034(0x0004)
    int32_t                                       MurderRankLevel;                                              // 0x0038(0x0004)
    int32_t                                       MurderRankScore;                                              // 0x003C(0x0004)
    int32_t                                       MurderRank;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    int64_t                                       MurderWeaponId;                                               // 0x0048(0x0008)
    TArray<FSGClientShowItemInfo>                 MurderWeapon;                                                 // 0x0050(0x0010)
    bool                                          MurderIsAI;                                                   // 0x0060(0x0001)
    enum class ECharacterType                     MurderCharacterType;                                          // 0x0061(0x0001)
    char                                          pa_0062[0x0002]                                               // 0x0062(0x0002)
    int32_t                                       MurderNetGUIDForReplay;                                       // 0x0064(0x0004)
    FVector                                       MurderPos;                                                    // 0x0068(0x000C)
    uint32_t                                      MurderNationalFlagIso;                                        // 0x0074(0x0004)
    FSGPlayerIconInfo                             MurderIconInfo;                                               // 0x0078(0x0048)
};


// ScriptStruct  SGFramework.SGVaultRepInfo
// Struct Size::0x0034
struct FSGVaultRepInfo
{
    FSGVaultType                                  TargetVaultType;                                              // 0x0000(0x0002)
    enum class EClimbVaultChoice                  TargetVaultChoice;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       TargetWallFaceDir;                                            // 0x0004(0x000C)
    FVector                                       TargetVaultStartPoint;                                        // 0x0010(0x000C)
    FVector                                       TargetVaultApexPoint;                                         // 0x001C(0x000C)
    FVector                                       TargetVaultEndPoint;                                          // 0x0028(0x000C)
};


// ScriptStruct  SGFramework.SGVaultType
// Struct Size::0x0002
struct FSGVaultType
{
    enum class EObstacleHeightType                VaultHeightType;                                              // 0x0000(0x0001)
    enum class EVaultAnimType                     VaultAnimType;                                                // 0x0001(0x0001)
};


// ScriptStruct  SGFramework.SGPredictCamDistNode
// Struct Size::0x0008
struct FSGPredictCamDistNode
{
    float                                         PredictCameraDistance;                                        // 0x0000(0x0004)
    float                                         PredictTime;                                                  // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.SGVaultInfo
// Struct Size::0x0030
struct FSGVaultInfo
{
    FSGVaultType                                  VaultType;                                                    // 0x0000(0x0002)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    UAnimSequence*                                VaultAnimation;                                               // 0x0008(0x0008)
    float                                         VaultAnimationPlayRate;                                       // 0x0010(0x0004)
    float                                         AnimLengthToApex;                                             // 0x0014(0x0004)
    float                                         AnimLengthToActualLand;                                       // 0x0018(0x0004)
    float                                         AnimLengthToFalling;                                          // 0x001C(0x0004)
    float                                         HoriMoveDistancePreApex;                                      // 0x0020(0x0004)
    float                                         HoriMoveDistancePostApex;                                     // 0x0024(0x0004)
    float                                         VerticalMoveDistanceApex;                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.CharacterBuffInfo
// Struct Size::0x0018
struct FCharacterBuffInfo
{
    int32_t                                       EnduranceType;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               BuffList;                                                     // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.SGCharacterRescuedByTeammateInfo
// Struct Size::0x0010
struct FSGCharacterRescuedByTeammateInfo
{
    double                                        StartRescueTime;                                              // 0x0000(0x0008)
    ASGCharacter*                                 KindlyTeammate;                                               // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGCharacterDBNOInfo
// Struct Size::0x0004
struct FSGCharacterDBNOInfo
{
    float                                         InitialDBNOHealth;                                            // 0x0000(0x0004)
};


// ScriptStruct  SGFramework.StunGrenadeEffectInfo
// Struct Size::0x0010
struct FStunGrenadeEffectInfo
{
    char                                          bHasDeafEffect;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DeafDuration;                                                 // 0x0004(0x0004)
    char                                          bHasFlashedEffect;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         FlashedDuration;                                              // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.WeaponMergeMeshShareInfo
// Struct Size::0x0048
struct FWeaponMergeMeshShareInfo
{
    TArray<FString>                               ModularMeshList;                                              // 0x0000(0x0010)
    TArray<FString>                               SpecialMeshNameList;                                          // 0x0010(0x0010)
    UStaticMesh*                                  MergedWeaponMesh;                                             // 0x0020(0x0008)
    FString                                       DebugInfo;                                                    // 0x0028(0x0010)
    int32_t                                       SharedCount;                                                  // 0x0038(0x0004)
    bool                                          bValid;                                                       // 0x003C(0x0001)
    char                                          MergeStatus;                                                  // 0x003D(0x0001)
    char                                          pa_003E[0x000A]                                               // 0x003E(0x000A)
};


// ScriptStruct  SGFramework.AvatarMergeMeshShareInfo
// Struct Size::0x0048
struct FAvatarMergeMeshShareInfo
{
    TArray<FString>                               ModularMeshList;                                              // 0x0000(0x0010)
    USkeletalMesh*                                MergedMesh;                                                   // 0x0010(0x0008)
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
};


// ScriptStruct  SGFramework.HitPartInfo
// Struct Size::0x0010
struct FHitPartInfo
{
    UPhysicalMaterial*                            HitMaterial;                                                  // 0x0000(0x0008)
    float                                         DamageScale;                                                  // 0x0008(0x0004)
    enum class EHitGroupType                      HitGroup;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  SGFramework.BloodDecalInfo
// Struct Size::0x0018
struct FBloodDecalInfo
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    FVector2D                                     BaseScale;                                                    // 0x0008(0x0008)
    FVector2D                                     ScaleMultRange;                                               // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.InteractionTriggerPosInfo
// Struct Size::0x002C
struct FInteractionTriggerPosInfo
{
    FVector                                       StartPos;                                                     // 0x0000(0x000C)
    FVector                                       EndPos;                                                       // 0x000C(0x000C)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
    FName                                         LineTraceHitBoneName;                                         // 0x0024(0x0008)
};


// ScriptStruct  SGFramework.SGFireShot
// Struct Size::0x0018
struct FSGFireShot
{
    FVector                                       ShotLocation;                                                 // 0x0000(0x000C)
    FVector                                       ShotDirection;                                                // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.BulletTraceParams
// Struct Size::0x0010
struct FBulletTraceParams
{
    float                                         BaseTraceRadius;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCurveFloat*                                  TraceRadiusScaleByDistanceCurve;                              // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.CachedDamageInfo
// Struct Size::0x0018
struct FCachedDamageInfo
{
    AActor*                                       DamageTaker;                                                  // 0x0000(0x0008)
    float                                         HitDistance;                                                  // 0x0008(0x0004)
    FVector                                       ProjileLocation;                                              // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.LongEffectInfo
// Struct Size::0x0018
struct FLongEffectInfo
{
    UFXSystemComponent*                           GrenadeFXSC;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.ExplosionInfoContainer
// Struct Size::0x0128
struct FExplosionInfoContainer : public FFastArraySerializer
{
    TArray<FExplosionInfoItem>                    Items;                                                        // 0x0110(0x0010)
    USGProjectileExplosionManager*                OwnerComponent;                                               // 0x0120(0x0008)
};


// ScriptStruct  SGFramework.ExplosionInfoItem
// Struct Size::0x0028
struct FExplosionInfoItem : public FFastArraySerializerItem
{
    int32_t                                       ItemId;                                                       // 0x000C(0x0004)
    FVector                                       ExplodeLocation;                                              // 0x0010(0x000C)
    float                                         ServerStartTime;                                              // 0x001C(0x0004)
    float                                         LifeTime;                                                     // 0x0020(0x0004)
    bool                                          bAirBlast;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  SGFramework.FlashDisConf
// Struct Size::0x0018
struct FFlashDisConf
{
    float                                         MinDistance;                                                  // 0x0000(0x0004)
    float                                         MaxDistance;                                                  // 0x0004(0x0004)
    float                                         DurationTime;                                                 // 0x0008(0x0004)
    float                                         FadeoutTime;                                                  // 0x000C(0x0004)
    float                                         FlashLightCircleFadeoutTime;                                  // 0x0010(0x0004)
    float                                         DistortionFadeoutTime;                                        // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.irePositionPair
// Struct Size::0x0018
struct FirePositionPair
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FVector                                       ImpactNormal;                                                 // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.BeamSegmentData
// Struct Size::0x0018
struct FBeamSegmentData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.EffectDistanceConfArray
// Struct Size::0x0018
struct FEffectDistanceConfArray
{
    float                                         MinDistance;                                                  // 0x0000(0x0004)
    float                                         MaxDistance;                                                  // 0x0004(0x0004)
    UMaterialInstance*                            StunEffectIns;                                                // 0x0008(0x0008)
    float                                         DurationTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SGSingleChatContent
// Struct Size::0x0020
struct FSGSingleChatContent
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Content;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.RadialDamageEvent
// Struct Size::0x0040
struct FRadialDamageEvent : public FDamageEvent
{
    FRadialDamageParams                           Params;                                                       // 0x0010(0x0014)
    FVector                                       Origin;                                                       // 0x0024(0x000C)
    TArray<FHitResult>                            ComponentHits;                                                // 0x0030(0x0010)
};


// ScriptStruct  Engine.RadialDamageParams
// Struct Size::0x0014
struct FRadialDamageParams
{
    float                                         BaseDamage;                                                   // 0x0000(0x0004)
    float                                         MinimumDamage;                                                // 0x0004(0x0004)
    float                                         InnerRadius;                                                  // 0x0008(0x0004)
    float                                         OuterRadius;                                                  // 0x000C(0x0004)
    float                                         DamageFalloff;                                                // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.SGRadialDamageEvent
// Struct Size::0x0050
struct FSGRadialDamageEvent : public FRadialDamageEvent
{
    float                                         BaseMomentumMag;                                              // 0x0040(0x0004)
    bool                                          bScaleMomentum;                                               // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    uint32_t                                      SceneItemID;                                                  // 0x0048(0x0004)
    float                                         ProjectilePenetrationFactor;                                  // 0x004C(0x0004)
};


// ScriptStruct  SGFramework.SGLocalFileKillCamInfo
// Struct Size::0x0070
struct FSGLocalFileKillCamInfo
{
    float                                         DeathDemoTime;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       VictimGID;                                                    // 0x0008(0x0008)
    FString                                       VictimName;                                                   // 0x0010(0x0010)
    int64_t                                       KillerGID;                                                    // 0x0020(0x0008)
    FString                                       KillerName;                                                   // 0x0028(0x0010)
    int32_t                                       VictimNetGUID;                                                // 0x0038(0x0004)
    FVector                                       VictimLocation;                                               // 0x003C(0x000C)
    int32_t                                       KillerNetGUID;                                                // 0x0048(0x0004)
    FVector                                       KillerLocation;                                               // 0x004C(0x000C)
    float                                         ReplayDemoStartTime;                                          // 0x0058(0x0004)
    float                                         ReplayDemoEndTime;                                            // 0x005C(0x0004)
    FString                                       ReplayFileName;                                               // 0x0060(0x0010)
};


// ScriptStruct  SGFramework.SGKillCamInfo
// Struct Size::0x0018
struct FSGKillCamInfo
{
    float                                         RecordStartTime;                                              // 0x0000(0x0004)
    float                                         TimeOfDeath;                                                  // 0x0004(0x0004)
    float                                         PlaybackStart;                                                // 0x0008(0x0004)
    float                                         PlaybackLength;                                               // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.SGReplayInfo
// Struct Size::0x0048
struct FSGReplayInfo
{
    FName                                         ReplayType;                                                   // 0x0000(0x0008)
    float                                         StartTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       OnFinish;                                                     // 0x0010(0x0010)
    ASGReplayController*                          ObserverControllerClass;                                      // 0x0020(0x0008)
    int32_t                                       ObserverPlayerControllerId;                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       ReplayFileName;                                               // 0x0030(0x0010)
    bool                                          bIsInBattleDownload;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  SGFramework.SkeletalMeshMergeParams
// Struct Size::0x00A0
struct FSkeletalMeshMergeParams
{
    TArray<FSkelMeshMergeSectionMapping>          MeshSectionMappings;                                          // 0x0000(0x0010)
    TArray<FSkelMeshMergeUVTransformMappingTK>    UVTransformsPerMesh;                                          // 0x0010(0x0010)
    TArray<USkeletalMesh*>                        MeshesToMerge;                                                // 0x0020(0x0010)
    int32_t                                       StripTopLODS;                                                 // 0x0030(0x0004)
    char                                          bNeedsCpuAccess;                                              // 0x0034(0x0001)
    char                                          bSkeletonBefore;                                              // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    USkeleton*                                    Skeleton;                                                     // 0x0038(0x0008)
    USkeletalMesh*                                ReferenceSkeletalMesh;                                        // 0x0040(0x0008)
    FName                                         MergedMeshName;                                               // 0x0048(0x0008)
    bool                                          bNeverStream;                                                 // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    UMaterialInterface*                           CommonMaterial;                                               // 0x0058(0x0008)
    FLinearColor                                  SkinType;                                                     // 0x0060(0x0010)
    bool                                          b1PUse;                                                       // 0x0070(0x0001)
    bool                                          bMergeMorphTarget;                                            // 0x0071(0x0001)
    bool                                          bUseSingleUVMultiSectionUVTransform;                          // 0x0072(0x0001)
    char                                          pa_0073[0x0005]                                               // 0x0073(0x0005)
    UTexture2D*                                   MergedBMTexture;                                              // 0x0078(0x0008)
    UTexture2D*                                   MergedORNTexture;                                             // 0x0080(0x0008)
    char                                          pa_0088[0x0010]                                               // 0x0088(0x0010)
    UMaterialInterface*                           CommonParentMaterial;                                         // 0x0098(0x0008)
};


// ScriptStruct  SGFramework.SkelMeshMergeUVTransformMappingTK
// Struct Size::0x0010
struct FSkelMeshMergeUVTransformMappingTK
{
    TArray<FSkelMeshMergeUVTransform>             UVTransformsPerMesh;                                          // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SkelMeshMergeUVTransform
// Struct Size::0x0010
struct FSkelMeshMergeUVTransform
{
    TArray<FTransform>                            UVTransforms;                                                 // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SkelMeshMergeSectionMapping
// Struct Size::0x0010
struct FSkelMeshMergeSectionMapping
{
    TArray<int32_t>                               SectionIDs;                                                   // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SmoothDamper
// Struct Size::0x0028
struct FSmoothDamper
{
    float                                         SmoothTime;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0024]                                               // 0x0004(0x0024)
};


// ScriptStruct  SGFramework.ValueTracker
// Struct Size::0x0028
struct FValueTracker
{
    int32_t                                       TrackSize;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0024]                                               // 0x0004(0x0024)
};


// ScriptStruct  SGFramework.SinRandom
// Struct Size::0x0010
struct FSinRandom
{
    FValueNoiseInRange                            Amplitude;                                                    // 0x0000(0x000C)
    float                                         Period;                                                       // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.ValueNoiseInRange
// Struct Size::0x000C
struct FValueNoiseInRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.ValueNoise
// Struct Size::0x000C
struct FValueNoise
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         FrequencyScale;                                               // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.SGTextureMerge
// Struct Size::0x00F0
struct FSGTextureMerge
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UTexture2D*>                           InputTextures;                                                // 0x0008(0x0010)
    UTexture2D*                                   PackedTexture;                                                // 0x0018(0x0008)
    char                                          pa_0020[0x00D0]                                               // 0x0020(0x00D0)
};


// ScriptStruct  SGFramework.SGTextureMergeNode
// Struct Size::0x0028
struct FSGTextureMergeNode
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  SGFramework.SGThrowableProjectileInfo
// Struct Size::0x00D8
struct FSGThrowableProjectileInfo
{
    ASGWeapon*                                    OwnerWeapon;                                                  // 0x0000(0x0008)
    FVector                                       InitSpeed;                                                    // 0x0008(0x000C)
    float                                         MaxSpeed;                                                     // 0x0014(0x0004)
    float                                         LifeSpan;                                                     // 0x0018(0x0004)
    float                                         PlayEffectTime;                                               // 0x001C(0x0004)
    bool                                          bFiredByOvertime;                                             // 0x0020(0x0001)
    bool                                          bGoThrowBody;                                                 // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    int32_t                                       Count;                                                        // 0x0024(0x0004)
    bool                                          bHasPlayedEffect;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    ACharacter*                                   SpawnCharacter;                                               // 0x0030(0x0008)
    FHitResult                                    ImpactResult;                                                 // 0x0038(0x0098)
    float                                         ZWhenGenrated;                                                // 0x00D0(0x0004)
    float                                         ServerSpawnTime;                                              // 0x00D4(0x0004)
};


// ScriptStruct  SGFramework.ImpactResultWrapper
// Struct Size::0x00A0
struct FImpactResultWrapper
{
    FHitResult                                    HitResult;                                                    // 0x0000(0x0098)
    bool                                          bFirstCreate;                                                 // 0x0098(0x0001)
    bool                                          bEffectLifeExpired;                                           // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  SGFramework.TripMineReplaceInfo
// Struct Size::0x0010
struct FTripMineReplaceInfo
{
    ASGTripMineBase*                              ReplacedTripMineClass;                                        // 0x0000(0x0008)
    float                                         Probability;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.TripMineStateInfo
// Struct Size::0x0034
struct FTripMineStateInfo
{
    bool                                          bIsReadyForExplode;                                           // 0x0000(0x0001)
    bool                                          bIsLootead;                                                   // 0x0001(0x0001)
    bool                                          bNeedReplcaceInit;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       WorldPos;                                                     // 0x0004(0x000C)
    FRotator                                      WorldRot;                                                     // 0x0010(0x000C)
    FVector                                       Pillar1Pos;                                                   // 0x001C(0x000C)
    FVector                                       Pillar2Pos;                                                   // 0x0028(0x000C)
};


// ScriptStruct  SGFramework.CachedPose
// Struct Size::0x0050
struct FCachedPose
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.GMCommandMap
// Struct Size::0x00F0
struct FGMCommandMap
{
    TMap<FString,FString>                         CommandMap;                                                   // 0x0000(0x0050)
    TMap<FString,FString>                         TooltipMap;                                                   // 0x0050(0x0050)
    TMap<FString,FString>                         OptionalParamsMap;                                            // 0x00A0(0x0050)
};


// ScriptStruct  SGFramework.WheelDustTypeByPhysicsMaterial
// Struct Size::0x0020
struct FWheelDustTypeByPhysicsMaterial
{
    enum class EPhysicalSurface                   PhysMaterial;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UParticleSystem*                              WheelEffect;                                                  // 0x0008(0x0008)
    float                                         ActiveThresholdSpeed;                                         // 0x0010(0x0004)
    FName                                         MaterialName;                                                 // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGVehicleParams
// Struct Size::0x0308
struct FSGVehicleParams : public FTableRowBase
{
    FString                                       VehicleName;                                                  // 0x0008(0x0010)
    bool                                          bUseBPDefault;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         MaxHealth;                                                    // 0x001C(0x0004)
    float                                         ExplodeDamage;                                                // 0x0020(0x0004)
    float                                         ExplodeDamageRadius;                                          // 0x0024(0x0004)
    float                                         HitPawnDamageVelocityThreshold;                               // 0x0028(0x0004)
    float                                         HitWallDamageVelocityThreshold;                               // 0x002C(0x0004)
    FRuntimeFloatCurve                            HitWallPassengerHurtDamageCurve;                              // 0x0030(0x0088)
    FRuntimeFloatCurve                            HitWallVehicleHurtDamageCurve;                                // 0x00B8(0x0088)
    float                                         HitWallDamageMaxPitch;                                        // 0x0140(0x0004)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
    FRuntimeFloatCurve                            OverlapCarForceCurve;                                         // 0x0148(0x0088)
    FRuntimeFloatCurve                            OverlapCarDamageCurve;                                        // 0x01D0(0x0088)
    FRuntimeFloatCurve                            JumpCarDamageCurve;                                           // 0x0258(0x0088)
    float                                         FuelAmountMax;                                                // 0x02E0(0x0004)
    float                                         FuelConsumeNormalPerMinute;                                   // 0x02E4(0x0004)
    float                                         FuelConsumeAccelPerMinute;                                    // 0x02E8(0x0004)
    float                                         RandFuelRateMin;                                              // 0x02EC(0x0004)
    float                                         RandFuelRateMax;                                              // 0x02F0(0x0004)
    float                                         Broken1WheelSpeedFactor;                                      // 0x02F4(0x0004)
    float                                         Broken2WheelSpeedFactor;                                      // 0x02F8(0x0004)
    float                                         Broken3WheelSpeedFactor;                                      // 0x02FC(0x0004)
    float                                         Broken4WheelSpeedFactor;                                      // 0x0300(0x0004)
    float                                         FinalRatio;                                                   // 0x0304(0x0004)
};


// ScriptStruct  SGFramework.VehicleHitRepInfo
// Struct Size::0x0010
struct FVehicleHitRepInfo
{
    bool                                          bHitPlayer;                                                   // 0x0000(0x0001)
    bool                                          bTurnOver;                                                    // 0x0001(0x0001)
    bool                                          ToggleRep;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    AActor*                                       OtherActor;                                                   // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.VehicleHitSoundConfig
// Struct Size::0x0010
struct FVehicleHitSoundConfig
{
    UAkAudioEvent*                                GrassSoundAk;                                                 // 0x0000(0x0008)
    UAkAudioEvent*                                ConcreteSoundAk;                                              // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.VehicleSpawnWeightData
// Struct Size::0x0008
struct FVehicleSpawnWeightData
{
    enum class ESGVehicleType                     VehicleType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  SGFramework.SGAdapterInfo
// Struct Size::0x0030
struct FSGAdapterInfo
{
    FName                                         AdapterItemID;                                                // 0x0000(0x0008)
    FSGWeaponAdapterInfo                          AdapterType;                                                  // 0x0008(0x0020)
    USGWeaponAdapterItem*                         AdapterClass;                                                 // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.SGWeaponAdapterInfo
// Struct Size::0x0020
struct FSGWeaponAdapterInfo
{
    enum class EAdapterType                       AdapterSocketType;                                            // 0x0000(0x0001)
    enum class ESGWeapAdapterItemType             AdapterSubType;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       AdapterString;                                                // 0x0008(0x0010)
    bool                                          bDisplaySocket;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SGFramework.WeaponAdapterAttchingInfo
// Struct Size::0x0010
struct FWeaponAdapterAttchingInfo
{
    USGWeaponAdapterItem*                         AdapterClass;                                                 // 0x0000(0x0008)
    float                                         AttachingScale;                                               // 0x0008(0x0004)
    float                                         AttachingScale;                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponInventoryTagToGripType
// Struct Size::0x000C
struct FSGWeaponInventoryTagToGripType
{
    FGameplayTag                                  InventoryTag;                                                 // 0x0000(0x0008)
    enum class ESGWeaponForegripType              GripType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  SGFramework.SGWeaponSwayADSInfo
// Struct Size::0x0058
struct FSGWeaponSwayADSInfo
{
    float                                         SmoothAngularVelocityInterpSpeed;                             // 0x0000(0x0004)
    FVector2D                                     AngularVelocityNormalizedRange;                               // 0x0004(0x0008)
    FVector2D                                     AngularVelocityNormalizedRange;                               // 0x000C(0x0008)
    FVector2D                                     ADSWeaponSwayClamp;                                           // 0x0014(0x0008)
    FVector2D                                     ADSWeaponSwayClamp;                                           // 0x001C(0x0008)
    float                                         WeaponSwayDelay;                                              // 0x0024(0x0004)
    float                                         WeaponSwayDelay;                                              // 0x0028(0x0004)
    float                                         WeaponSwayOffsetScaler;                                       // 0x002C(0x0004)
    UCurveFloat*                                  WeaponSwayADSScaler;                                          // 0x0030(0x0008)
    UCurveFloat*                                  WeaponSwayADSScaler;                                          // 0x0038(0x0008)
    UCurveFloat*                                  WeaponSwayADSScaler;                                          // 0x0040(0x0008)
    UCurveFloat*                                  WeaponSwayClampCurve;                                         // 0x0048(0x0008)
    UCurveFloat*                                  WeaponSwayClampCurve;                                         // 0x0050(0x0008)
};


// ScriptStruct  SGFramework.SGWeaponSwaySpringInfo
// Struct Size::0x0024
struct FSGWeaponSwaySpringInfo
{
    float                                         SpringStiffness;                                              // 0x0000(0x0004)
    float                                         SpringDamping;                                                // 0x0004(0x0004)
    float                                         SpringClamp;                                                  // 0x0008(0x0004)
    float                                         SpringAlpha;                                                  // 0x000C(0x0004)
    float                                         SpringInterpSpeed;                                            // 0x0010(0x0004)
    FVector                                       SpringPivotOffset;                                            // 0x0014(0x000C)
    float                                         AngularVelocityToMaxWeaponShake;                              // 0x0020(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponRepStopAnimInfo
// Struct Size::0x0098
struct FSGWeaponRepStopAnimInfo
{
    FSGMontagePlayParams                          CharacterMontageParams;                                       // 0x0000(0x0048)
    FSGMontagePlayParams                          WeaponMontageParams;                                          // 0x0048(0x0048)
    float                                         Timestamp;                                                    // 0x0090(0x0004)
    float                                         BlendOutTime;                                                 // 0x0094(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponRepAnimInfo
// Struct Size::0x00B0
struct FSGWeaponRepAnimInfo
{
    FSGMontagePlayParams                          CharacterMontageParams;                                       // 0x0000(0x0048)
    FSGMontagePlayParams                          WeaponMontageParams;                                          // 0x0048(0x0048)
    float                                         Timestamp;                                                    // 0x0090(0x0004)
    float                                         BlendOutTime;                                                 // 0x0094(0x0004)
    char                                          PlayBit;                                                      // 0x0098(0x0001)
    char                                          bJumpSection;                                                 // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FSGMontagePlayConfig                          PlayConfig;                                                   // 0x009C(0x0010)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponLocalAnimInfo
// Struct Size::0x0098
struct FSGWeaponLocalAnimInfo
{
    FSGMontagePlayParams                          CharacterMontageParams;                                       // 0x0000(0x0048)
    FSGMontagePlayParams                          WeaponMontageParams;                                          // 0x0048(0x0048)
    bool                                          PlayBit;                                                      // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  SGFramework.SGWeaponAnimInstanceProxy
// Struct Size::0x08E0
struct FSGWeaponAnimInstanceProxy : public FAnimInstanceProxy
{
    USGWeaponAnimInstance*                        AnimInstance;                                                 // 0x0860(0x0008)
    bool                                          bAutoFireMode;                                                // 0x0868(0x0001)
    bool                                          bBurstFireMode;                                               // 0x0869(0x0001)
    bool                                          bIsHammerReady;                                               // 0x086A(0x0001)
    char                                          pa_086B[0x0001]                                               // 0x086B(0x0001)
    float                                         HammerStateBlendWeight;                                       // 0x086C(0x0004)
    float                                         HoldOpenAlpha;                                                // 0x0870(0x0004)
    float                                         LostCatchAlpha;                                               // 0x0874(0x0004)
    float                                         UnloadedAlpha;                                                // 0x0878(0x0004)
    float                                         ChamberingAlpha;                                              // 0x087C(0x0004)
    bool                                          bIs1PWeapon;                                                  // 0x0880(0x0001)
    bool                                          bIsOwnerCharacterProne;                                       // 0x0881(0x0001)
    char                                          pa_0882[0x0002]                                               // 0x0882(0x0002)
    float                                         Enalbe;                                                       // 0x0884(0x0004)
    FVector                                       Translation;                                                  // 0x0888(0x000C)
    FRotator                                      Rotation;                                                     // 0x0894(0x000C)
    bool                                          bCharacterOwnerIs1P;                                          // 0x08A0(0x0001)
    char                                          pa_08A1[0x0003]                                               // 0x08A1(0x0003)
    FVector                                       Translation;                                                  // 0x08A4(0x000C)
    FRotator                                      Rotation;                                                     // 0x08B0(0x000C)
    bool                                          Enable;                                                       // 0x08BC(0x0001)
    char                                          pa_08BD[0x0003]                                               // 0x08BD(0x0003)
    FSGWeaponAnimReducer                          AnimReducer;                                                  // 0x08C0(0x0018)
    char                                          pa_08D8[0x0008]                                               // 0x08D8(0x0008)
};


// ScriptStruct  SGFramework.SGWeaponAnimReducer
// Struct Size::0x0018
struct FSGWeaponAnimReducer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         BoreOpenRatio;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.ShellEffectInfo
// Struct Size::0x0034
struct FShellEffectInfo
{
    FVector                                       InitVelocityMin;                                              // 0x0000(0x000C)
    FVector                                       InitVelocityMax;                                              // 0x000C(0x000C)
    FVector                                       InitAngularVelocityMin;                                       // 0x0018(0x000C)
    FVector                                       InitAngularVelocityMax;                                       // 0x0024(0x000C)
    float                                         LifeSpan;                                                     // 0x0030(0x0004)
};


// ScriptStruct  SGFramework.ShellParticleInfo
// Struct Size::0x00A0
struct FShellParticleInfo
{
    FVector                                       ShellParticleAccMin;                                          // 0x0000(0x000C)
    FVector                                       ShellParticleAccMax;                                          // 0x000C(0x000C)
    FVector                                       ShellParticleVelocityMin;                                     // 0x0018(0x000C)
    FVector                                       ShellParticleVelocityMax;                                     // 0x0024(0x000C)
    FVector                                       ShellParticleRateMin;                                         // 0x0030(0x000C)
    FVector                                       ShellParticleRateMax;                                         // 0x003C(0x000C)
    FVector                                       ShellParticleLocationMin;                                     // 0x0048(0x000C)
    FVector                                       ShellParticleLocationMax;                                     // 0x0054(0x000C)
    FVector                                       ShellParticleRotaMin;                                         // 0x0060(0x000C)
    FVector                                       ShellParticleRotaMax;                                         // 0x006C(0x000C)
    FVector                                       ShellParticleSizeMin;                                         // 0x0078(0x000C)
    FVector                                       ShellParticleSizeMax;                                         // 0x0084(0x000C)
    float                                         ShellParticleLifeTimeMin;                                     // 0x0090(0x0004)
    float                                         ShellParticleLifeTimeMax;                                     // 0x0094(0x0004)
    float                                         ShellParticleDragMin;                                         // 0x0098(0x0004)
    float                                         ShellParticleDragMax;                                         // 0x009C(0x0004)
};


// ScriptStruct  SGFramework.CachePooledEffectActorQueueInfo
// Struct Size::0x0010
struct FCachePooledEffectActorQueueInfo
{
    TArray<ASGPooledFireEffect*>                  AlivePooledEffectActorsQueue;                                 // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGBulletTranInfo
// Struct Size::0x0018
struct FSGBulletTranInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.SGWeaponMeshRes
// Struct Size::0x0060
struct FSGWeaponMeshRes
{
    FName                                         MeshAttachSocket;                                             // 0x0000(0x0008)
    FName                                         MeshAttachSocket;                                             // 0x0008(0x0008)
    FName                                         MeshAttachSocket;                                             // 0x0010(0x0008)
    FSoftObjectPath                               MeshResouceRef;                                               // 0x0018(0x0018)
    UAnimInstance*                                MeshAnimClass;                                                // 0x0030(0x0008)
    bool                                          bNeedBlockBullet;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<UMaterialInterface*>                   Material1P;                                                   // 0x0040(0x0010)
    TArray<UMaterialInterface*>                   Material3P;                                                   // 0x0050(0x0010)
};


// ScriptStruct  SGFramework.SightGroup
// Struct Size::0x0020
struct FSightGroup
{
    int32_t                                       MostNegativeErgonomic;                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    ASGInventory*                                 RootSight;                                                    // 0x0008(0x0008)
    TArray<ASGInventory*>                         SightList;                                                    // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.FireRequireInfo
// Struct Size::0x0010
struct FFireRequireInfo
{
    FGameplayTag                                  FireTag;                                                      // 0x0000(0x0008)
    ASGInventory*                                 TagInv;                                                       // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGWeaponCaptureSizeTableRow
// Struct Size::0x0028
struct FSGWeaponCaptureSizeTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    int32_t                                       Column;                                                       // 0x0010(0x0004)
    int32_t                                       Row;                                                          // 0x0014(0x0004)
    float                                         Width;                                                        // 0x0018(0x0004)
    float                                         Height;                                                       // 0x001C(0x0004)
    float                                         ColumnWidthRatio;                                             // 0x0020(0x0004)
    float                                         RowHeightRatio;                                               // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.CachedRTInfo
// Struct Size::0x0010
struct FCachedRTInfo
{
    UMaterialInstanceDynamic*                     MaterialInst;                                                 // 0x0000(0x0008)
    int32_t                                       ReferenceCount;                                               // 0x0008(0x0004)
    float                                         LastAddReferenceTime;                                         // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.ImageToSet
// Struct Size::0x0020
struct FImageToSet
{
    UImage*                                       TargetImage;                                                  // 0x0000(0x0008)
    UObject*                                      LocalTexture;                                                 // 0x0008(0x0008)
    FString                                       UniqueID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.ImageWaitCap
// Struct Size::0x0028
struct FImageWaitCap
{
    TArray<UObject*>                              Images;                                                       // 0x0000(0x0010)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    FRotator                                      TargetRot;                                                    // 0x0014(0x000C)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.FocusPartConfig
// Struct Size::0x0034
struct FFocusPartConfig
{
    FRotator                                      FocusRot;                                                     // 0x0000(0x000C)
    float                                         TouchRotateSpeed;                                             // 0x000C(0x0004)
    float                                         MaxPitch;                                                     // 0x0010(0x0004)
    float                                         MaxYaw;                                                       // 0x0014(0x0004)
    float                                         MaxRoll;                                                      // 0x0018(0x0004)
    float                                         MinPitch;                                                     // 0x001C(0x0004)
    float                                         MinYaw;                                                       // 0x0020(0x0004)
    float                                         MinRoll;                                                      // 0x0024(0x0004)
    float                                         PinchSpeed;                                                   // 0x0028(0x0004)
    float                                         MinPinchDisPercent;                                           // 0x002C(0x0004)
    float                                         MaxPinchDisPercent;                                           // 0x0030(0x0004)
};


// ScriptStruct  SGFramework.PreviewAdapterInfo
// Struct Size::0x0018
struct FPreviewAdapterInfo
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Y;                                                            // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.SGWeaponRepInfo
// Struct Size::0x0018
struct FSGWeaponRepInfo
{
    float                                         RepCount;                                                     // 0x0000(0x0004)
    enum class ESGInnerWeaponEvent                EventType;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    UObject*                                      EventObject;                                                  // 0x0008(0x0008)
    float                                         RepTime;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.BoreInfo
// Struct Size::0x0028
struct FBoreInfo
{
    AActor*                                       BoreBullet;                                                   // 0x0000(0x0008)
    bool                                          bCurrent;                                                     // 0x0008(0x0001)
    bool                                          bTriggered;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FStackableItemSourceInfo                      FromPlayerInfo;                                               // 0x0010(0x0018)
};


// ScriptStruct  SGFramework.BulletContainerInfo
// Struct Size::0x0010
struct FBulletContainerInfo
{
    uint64_t                                      BulletItemID;                                                 // 0x0000(0x0008)
    int32_t                                       StackCount;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.WeaponDamageInfo
// Struct Size::0x0058
struct FWeaponDamageInfo
{
    enum class ESGWeaponFireMode                  FireModeType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Damage;                                                       // 0x0004(0x0004)
    int32_t                                       DamageMin;                                                    // 0x0008(0x0004)
    float                                         DamageModifyZeroDistance;                                     // 0x000C(0x0004)
    float                                         DamageDistanceModifier;                                       // 0x0010(0x0004)
    float                                         BulletBeginDropDistance;                                      // 0x0014(0x0004)
    float                                         DistanceBulletDropZ;                                          // 0x0018(0x0004)
    float                                         DamageScale;                                                  // 0x001C(0x0004)
    float                                         DamageScale;                                                  // 0x0020(0x0004)
    float                                         DamageScale;                                                  // 0x0024(0x0004)
    float                                         DamageScale;                                                  // 0x0028(0x0004)
    float                                         DamageScale;                                                  // 0x002C(0x0004)
    float                                         TraceRange;                                                   // 0x0030(0x0004)
    float                                         TraceHalfAngle;                                               // 0x0034(0x0004)
    UDamageType*                                  DamageType;                                                   // 0x0038(0x0008)
    float                                         Momentum;                                                     // 0x0040(0x0004)
    FVector                                       ImpluseRange;                                                 // 0x0044(0x000C)
    int32_t                                       SubWeaponWallID;                                              // 0x0050(0x0004)
    float                                         BleedTriggerChance;                                           // 0x0054(0x0004)
};


// ScriptStruct  SGFramework.JamBreakSoundConfig
// Struct Size::0x0010
struct FJamBreakSoundConfig
{
    enum class ESGGunWeaponSubType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAkAudioEvent*                                SoundEvent;                                                   // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.ExtraHitDeltaRotators
// Struct Size::0x0010
struct FExtraHitDeltaRotators
{
    TArray<FRotator>                              Rotators;                                                     // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.WeaponMeleeHitInfo
// Struct Size::0x0030
struct FWeaponMeleeHitInfo
{
    TArray<float>                                 Damage;                                                       // 0x0000(0x0010)
    float                                         TraceRange;                                                   // 0x0010(0x0004)
    float                                         TraceHalfAngle;                                               // 0x0014(0x0004)
    UDamageType*                                  DamageType;                                                   // 0x0018(0x0008)
    float                                         Momentum;                                                     // 0x0020(0x0004)
    int32_t                                       SubWeaponType;                                                // 0x0024(0x0004)
    FVector2D                                     CheckRangeYZ;                                                 // 0x0028(0x0008)
};


// ScriptStruct  SGFramework.MeleeTraceConf
// Struct Size::0x0010
struct FMeleeTraceConf
{
    float                                         TraceDis;                                                     // 0x0000(0x0004)
    FRotator                                      TraceRotationAdjustment;                                      // 0x0004(0x000C)
};


// ScriptStruct  SGFramework.SGServerHitInfo
// Struct Size::0x00A0
struct FSGServerHitInfo
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSGBulletID                                   BulletID;                                                     // 0x0008(0x0010)
    FVector                                       ShotDirection;                                                // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    AActor*                                       HitActor;                                                     // 0x0028(0x0008)
    UPrimitiveComponent*                          Component;                                                    // 0x0030(0x0008)
    FVector                                       HitActorLocation;                                             // 0x0038(0x000C)
    FVector                                       FireEndLocation;                                              // 0x0044(0x000C)
    FVector                                       ImpactNormal;                                                 // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    UPhysicalMaterial*                            PhysMaterial;                                                 // 0x0060(0x0008)
    enum class EHitGroupType                      HitGroup;                                                     // 0x0068(0x0001)
    enum class EHeadHitSubGroupType               HeadHitSubGroup;                                              // 0x0069(0x0001)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    FName                                         BoneName;                                                     // 0x006C(0x0008)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FVector>                               ImportantLocations;                                           // 0x0078(0x0010)
    enum class ESGZoomType                        CaptureWeaponZoomType;                                        // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    ASGInventory*                                 HitMovableArmor;                                              // 0x0090(0x0008)
    char                                          HitFlags;                                                     // 0x0098(0x0001)
    char                                          bIsBestHit;                                                   // 0x0099(0x0001)
    char                                          bTakerIsCrouchClient;                                         // 0x0099(0x0001)
    char                                          bTakerIsProneClient;                                          // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  SGFramework.SGFireRepInfo3P
// Struct Size::0x0050
struct FSGFireRepInfo3P
{
    int64_t                                       FireID;                                                       // 0x0000(0x0008)
    FSGFireShots                                  Shots;                                                        // 0x0008(0x0028)
    AActor*                                       AmmoClass;                                                    // 0x0030(0x0008)
    char                                          FireMode;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         ExpiredTimeOnServer;                                          // 0x003C(0x0004)
    char                                          bFireEnd;                                                     // 0x0040(0x0001)
    char                                          bIsReadyForNextFire;                                          // 0x0040(0x0001)
    enum class ESGWeaponShootingMode              ShootingMode;                                                 // 0x0041(0x0001)
    char                                          FireIntervalShotNum;                                          // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
    ASGThrowableProjectile*                       ProjcetileClass;                                              // 0x0048(0x0008)
};


// ScriptStruct  SGFramework.ImapctRepInfo
// Struct Size::0x00A0
struct FImapctRepInfo
{
    FHitResult                                    Hit;                                                          // 0x0000(0x0098)
    float                                         DecalRollOffset;                                              // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  SGFramework.MeleeImpactProperty
// Struct Size::0x00A8
struct FMeleeImpactProperty
{
    FHitResult                                    MeleeHitTargetResult;                                         // 0x0000(0x0098)
    FVector                                       MeleeHitVector;                                               // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  SGFramework.ImpactMaterialAndAudioEvent
// Struct Size::0x0018
struct FImpactMaterialAndAudioEvent
{
    FText                                         MaterialName;                                                 // 0x0000(0x0018)
};


// ScriptStruct  SGFramework.SGWeaponParamsTable
// Struct Size::0x00DC
struct FSGWeaponParamsTable
{
    FSGWeaponMovingRatioParams                    SpreadAccuracyRatios;                                         // 0x0000(0x0030)
    FSGWeaponMovingRatioParams                    CrosshairAccuracyRatios;                                      // 0x0030(0x0030)
    FSGWeaponSpreadParams                         SpreadParamTable;                                             // 0x0060(0x0028)
    FSGWeaponRecoilParams                         RecoilParamTable;                                             // 0x0088(0x0024)
    FSGWeaponCameraParams                         CameraRecoilParamTable;                                       // 0x00AC(0x0030)
};


// ScriptStruct  SGFramework.SGWeaponCameraParams
// Struct Size::0x0030
struct FSGWeaponCameraParams
{
    float                                         CameraRecoilExpandTime;                                       // 0x0000(0x0004)
    float                                         CameraRecoilRecoverTime;                                      // 0x0004(0x0004)
    float                                         CameraRecoilBase;                                             // 0x0008(0x0004)
    float                                         CameraRecoilModifier;                                         // 0x000C(0x0004)
    float                                         CameraRecoilMax;                                              // 0x0010(0x0004)
    float                                         CameraRecoilZoomInitSpeed;                                    // 0x0014(0x0004)
    float                                         CameraRecoilZoomDampingRate;                                  // 0x0018(0x0004)
    float                                         CameraRecoilZoomFrictionRate;                                 // 0x001C(0x0004)
    float                                         CameraStretchMin;                                             // 0x0020(0x0004)
    float                                         CameraStretchMax;                                             // 0x0024(0x0004)
    float                                         CameraStretchMin;                                             // 0x0028(0x0004)
    float                                         CameraStretchMax;                                             // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponRecoilParams
// Struct Size::0x0024
struct FSGWeaponRecoilParams
{
    float                                         RecoilTime;                                                   // 0x0000(0x0004)
    float                                         RecoilUpMin;                                                  // 0x0004(0x0004)
    float                                         RecoilUpModifier;                                             // 0x0008(0x0004)
    float                                         RecoilUpMax;                                                  // 0x000C(0x0004)
    float                                         RecoilUpTotalMax;                                             // 0x0010(0x0004)
    float                                         RecoilSideMin;                                                // 0x0014(0x0004)
    float                                         RecoilSideModifier;                                           // 0x0018(0x0004)
    float                                         RecoilSideMax;                                                // 0x001C(0x0004)
    float                                         RecoilSideRange;                                              // 0x0020(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponSpreadParams
// Struct Size::0x0028
struct FSGWeaponSpreadParams
{
    float                                         SpreadMin;                                                    // 0x0000(0x0004)
    float                                         SpreadMax;                                                    // 0x0004(0x0004)
    float                                         SpreadModifierBase;                                           // 0x0008(0x0004)
    float                                         SpreadModifierInc;                                            // 0x000C(0x0004)
    float                                         SpreadModifierMax;                                            // 0x0010(0x0004)
    float                                         SpreadIncreaseSpeed;                                          // 0x0014(0x0004)
    float                                         SpreadIncreaseSpeed;                                          // 0x0018(0x0004)
    float                                         SpreadDecreaseSpeed;                                          // 0x001C(0x0004)
    float                                         SpreadDecreaseSpeed;                                          // 0x0020(0x0004)
    float                                         SpreadDelayRecoverTime;                                       // 0x0024(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponMovingRatioParams
// Struct Size::0x0030
struct FSGWeaponMovingRatioParams
{
    float                                         AccuracyRatio;                                                // 0x0000(0x0004)
    float                                         AccuracyRatio;                                                // 0x0004(0x0004)
    float                                         AccuracyRatio;                                                // 0x0008(0x0004)
    float                                         AccuracyRatio;                                                // 0x000C(0x0004)
    float                                         AccuracyRatio;                                                // 0x0010(0x0004)
    float                                         AccuracyRatio;                                                // 0x0014(0x0004)
    float                                         AccuracyRatio;                                                // 0x0018(0x0004)
    float                                         AccuracyRatio;                                                // 0x001C(0x0004)
    float                                         AccuracyRatio;                                                // 0x0020(0x0004)
    float                                         AccuracyRatio;                                                // 0x0024(0x0004)
    float                                         AccuracyRatio;                                                // 0x0028(0x0004)
    float                                         AccuracyRatio;                                                // 0x002C(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponPostAnimInstanceProxy
// Struct Size::0x0870
struct FSGWeaponPostAnimInstanceProxy : public FAnimInstanceProxy
{
    USGWeaponPostAnimInstance*                    AnimInstance;                                                 // 0x0860(0x0008)
    char                                          pa_0868[0x0008]                                               // 0x0868(0x0008)
};


// ScriptStruct  SGFramework.WeaponRecoilRecoverParams
// Struct Size::0x0028
struct FWeaponRecoilRecoverParams
{
    float                                         BeginRecoverTime;                                             // 0x0000(0x0004)
    enum class ESGRecoilRecoverAlgorithm          RecoverAlgorithm;                                             // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         ConfigDisturbRecoverSpeed;                                    // 0x0008(0x0004)
    float                                         RecoverScale;                                                 // 0x000C(0x0004)
    float                                         ConfigRecoverTime;                                            // 0x0010(0x0004)
    float                                         MinBeginRecoverSpeed;                                         // 0x0014(0x0004)
    float                                         MinBeginRecoverSpeed;                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  RecoverSpeedCurve;                                            // 0x0020(0x0008)
};


// ScriptStruct  SGFramework.WeaponRecoilRepInfo
// Struct Size::0x0030
struct FWeaponRecoilRepInfo
{
    int32_t                                       ShotNum;                                                      // 0x0000(0x0004)
    FRotator                                      FireRecoil;                                                   // 0x0004(0x000C)
    float                                         BulletHorzRecoil;                                             // 0x0010(0x0004)
    float                                         BulletVertRecoil;                                             // 0x0014(0x0004)
    FRotator                                      RotatorDelta;                                                 // 0x0018(0x000C)
    FRotator                                      TargetRecoil;                                                 // 0x0024(0x000C)
};


// ScriptStruct  SGFramework.WeaponRecoilAnimConfigInstance
// Struct Size::0x0018
struct FWeaponRecoilAnimConfigInstance
{
    TArray<FWeaponRecoilAnimParamsInstance>       RecoilAnimParamInstances;                                     // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  SGFramework.WeaponRecoilAnimParamsInstance
// Struct Size::0x0060
struct FWeaponRecoilAnimParamsInstance
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  SGFramework.WeaponRecoilAnimConfig
// Struct Size::0x0048
struct FWeaponRecoilAnimConfig
{
    TArray<FWeaponRecoilAnimParams>               RecoilAnimParams;                                             // 0x0000(0x0010)
    FName                                         PivotSocket;                                                  // 0x0010(0x0008)
    FVector                                       PivotSocketOffset;                                            // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UCurveFloat*                                  Curve;                                                        // 0x0028(0x0008)
    float                                         WAR;                                                          // 0x0030(0x0004)
    float                                         WAR;                                                          // 0x0034(0x0004)
    float                                         WAR;                                                          // 0x0038(0x0004)
    float                                         WAR;                                                          // 0x003C(0x0004)
    float                                         WAR;                                                          // 0x0040(0x0004)
    float                                         WAR;                                                          // 0x0044(0x0004)
};


// ScriptStruct  SGFramework.WeaponRecoilAnimParams
// Struct Size::0x0098
struct FWeaponRecoilAnimParams
{
    bool                                          bSingleInstance;                                              // 0x0000(0x0001)
    bool                                          bKeepCurrentValueOnReset;                                     // 0x0001(0x0001)
    bool                                          bSkipFirstShot;                                               // 0x0002(0x0001)
    enum class EWeapAnimRecoil                    WeapAnimRecoilType;                                           // 0x0003(0x0001)
    enum class EAnimOffsetType                    AnimOffsetType;                                               // 0x0004(0x0001)
    enum class EAxis                              Axis;                                                         // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    UCurveVector*                                 WeaponAnimRecoilCurve;                                        // 0x0008(0x0008)
    FRandomNumberGenerationParam                  RandomRecoilValueGenerationParam;                             // 0x0010(0x0010)
    enum class EInitialOscillatorOffset           InitialOffsetType;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Duration;                                                     // 0x0024(0x0004)
    enum class EOscillatorWaveform                Waveform;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         WaveAmplitude;                                                // 0x002C(0x0004)
    float                                         WavePeriod;                                                   // 0x0030(0x0004)
    float                                         PowerBaseValue;                                               // 0x0034(0x0004)
    float                                         PowerFrequency;                                               // 0x0038(0x0004)
    float                                         BlendInTime;                                                  // 0x003C(0x0004)
    UCurveFloat*                                  BlendInProgressCurve;                                         // 0x0040(0x0008)
    float                                         BlendOutTime;                                                 // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    UCurveFloat*                                  BlendOutProgressCurve;                                        // 0x0050(0x0008)
    bool                                          bTimeSyncWithFire;                                            // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    UCurveFloat*                                  Curve;                                                        // 0x0060(0x0008)
    float                                         InterpSpeed;                                                  // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    UCurveFloat*                                  Curve;                                                        // 0x0070(0x0008)
    float                                         MaxSpringSpeed;                                               // 0x0078(0x0004)
    float                                         SpringAccel;                                                  // 0x007C(0x0004)
    float                                         SpeedDecay;                                                   // 0x0080(0x0004)
    float                                         StaticDecay;                                                  // 0x0084(0x0004)
    float                                         ResetMinSpeedThresh;                                          // 0x0088(0x0004)
    float                                         MinKickValue;                                                 // 0x008C(0x0004)
    float                                         MaxKickValue;                                                 // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  SGFramework.RandomNumberGenerationParam
// Struct Size::0x0010
struct FRandomNumberGenerationParam
{
    float                                         FlipSideChance;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCurveFloat*                                  Seed2DistributionMap;                                         // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.AdapterInfo
// Struct Size::0x0018
struct FAdapterInfo
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Y;                                                            // 0x0008(0x0010)
};


// ScriptStruct  SGFramework.TakeDamageRecord
// Struct Size::0x0018
struct FTakeDamageRecord
{
    int64_t                                       PlayerGID;                                                    // 0x0000(0x0008)
    float                                         Damage;                                                       // 0x0008(0x0004)
    char                                          HitGroup;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         ServerTime;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.BulletDisplayInfoOB
// Struct Size::0x0018
struct FBulletDisplayInfoOB
{
    FString                                       SimpleDisplayName;                                            // 0x0000(0x0010)
    int32_t                                       PenetrateLevel;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.BulletPassStruct
// Struct Size::0x0050
struct FBulletPassStruct
{
    FVector                                       PassDir;                                                      // 0x0000(0x000C)
    FVector                                       PassLocation;                                                 // 0x000C(0x000C)
    float                                         BulletPassAngle;                                              // 0x0018(0x0004)
    float                                         TimeToReach;                                                  // 0x001C(0x0004)
    FVector                                       EnterPoint;                                                   // 0x0020(0x000C)
    FVector                                       LeavePoint;                                                   // 0x002C(0x000C)
    TArray<int64_t>                               SoundEmitterIDs;                                              // 0x0038(0x0010)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  SGFramework.CachePSCQueueInfo
// Struct Size::0x0010
struct FCachePSCQueueInfo
{
    TArray<UParticleSystemComponent*>             AlivePSCQueue;                                                // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.EffectParticleInfo
// Struct Size::0x0050
struct FEffectParticleInfo
{
    TSoftObjectPtr<UFXSystemAsset>                PSTemplate;                                                   // 0x0000(0x0028)
    FName                                         SocketName;                                                   // 0x0028(0x0008)
    FRotator                                      PSRotation;                                                   // 0x0030(0x000C)
    float                                         PSScale;                                                      // 0x003C(0x0004)
    UCurveFloat*                                  PSScaleCurveByDistance;                                       // 0x0040(0x0008)
    float                                         PSLifeTime;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  SGFramework.ProjectileHitInfo
// Struct Size::0x0010
struct FProjectileHitInfo
{
    float                                         MinDamage;                                                    // 0x0000(0x0004)
    float                                         MaxDamage;                                                    // 0x0004(0x0004)
    float                                         DamageRange;                                                  // 0x0008(0x0004)
    float                                         Momentum;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.FireIdInfo
// Struct Size::0x0010
struct FFireIdInfo
{
    TArray<int64_t>                               FireIds;                                                      // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.SGMagazinedAmmoInfo
// Struct Size::0x0010
struct FSGMagazinedAmmoInfo
{
    ASGInventory*                                 RelatedMagazine;                                              // 0x0000(0x0008)
    ASGInventory*                                 AmmoInventory;                                                // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SGWeaponOverrideRecoilInfo
// Struct Size::0x000C
struct FSGWeaponOverrideRecoilInfo
{
    char                                          ShotCount;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ModifyRecoil;                                                 // 0x0004(0x0004)
    float                                         ModifyRecoil;                                                 // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.WeaponRepInfo
// Struct Size::0x0020
struct FWeaponRepInfo
{
    FSGWeaponRepInfoInner                         WeaponRepInfoInner;                                           // 0x0000(0x0018)
    int32_t                                       Count;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  SGFramework.SGWeaponRepInfoInner
// Struct Size::0x0018
struct FSGWeaponRepInfoInner
{
    bool                                          bShouldReserveLastWeapon;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    ASGInventory*                                 CurrentWeapon;                                                // 0x0008(0x0008)
    int32_t                                       Count;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.WeaponDamageStruct
// Struct Size::0x01A0
struct FWeaponDamageStruct
{
    FString                                       WeaponName;                                                   // 0x0000(0x0010)
    FString                                       BulletName;                                                   // 0x0010(0x0010)
    uint32_t                                      BulletID;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       WeaponType;                                                   // 0x0028(0x0010)
    int32_t                                       VestLevel;                                                    // 0x0038(0x0004)
    int32_t                                       VestId;                                                       // 0x003C(0x0004)
    int32_t                                       HelmetId;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       VestName;                                                     // 0x0048(0x0010)
    int32_t                                       HelmetLevel;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       HelmetName;                                                   // 0x0060(0x0010)
    FString                                       DamageHitType;                                                // 0x0070(0x0010)
    int32_t                                       DamageHitTypeInt;                                             // 0x0080(0x0004)
    float                                         ShootDistance;                                                // 0x0084(0x0004)
    float                                         BaseDamage;                                                   // 0x0088(0x0004)
    float                                         PenetrateDamage;                                              // 0x008C(0x0004)
    float                                         ResultDamage;                                                 // 0x0090(0x0004)
    float                                         ArmorConsume;                                                 // 0x0094(0x0004)
    bool                                          bPenetrateArmor;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    float                                         PenetrationProbability;                                       // 0x009C(0x0004)
    bool                                          bBrokenBullet;                                                // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    float                                         CharacterAllEndurance;                                        // 0x00A4(0x0004)
    FString                                       HitArmorName;                                                 // 0x00A8(0x0010)
    float                                         CurWeaponADSTime;                                             // 0x00B8(0x0004)
    float                                         CurWeaponFireInterval;                                        // 0x00BC(0x0004)
    float                                         ValidAimTime;                                                 // 0x00C0(0x0004)
    float                                         ArmorReduceDamage;                                            // 0x00C4(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    int64_t                                       HitArmorId;                                                   // 0x00D0(0x0008)
    float                                         VerticalRecoil;                                               // 0x00D8(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00DC(0x0004)
    FString                                       SightName;                                                    // 0x00E0(0x0010)
    int32_t                                       WeaponId;                                                     // 0x00F0(0x0004)
    int32_t                                       MapID;                                                        // 0x00F4(0x0004)
    int32_t                                       Weatherid;                                                    // 0x00F8(0x0004)
    int32_t                                       EnemyRoleType;                                                // 0x00FC(0x0004)
    FString                                       EnemyRoleID;                                                  // 0x0100(0x0010)
    FString                                       EnemyUserName;                                                // 0x0110(0x0010)
    int32_t                                       HurtTime;                                                     // 0x0120(0x0004)
    int32_t                                       HurtType;                                                     // 0x0124(0x0004)
    int32_t                                       DamageStart;                                                  // 0x0128(0x0004)
    int32_t                                       DamageReduce;                                                 // 0x012C(0x0004)
    int32_t                                       HPstart;                                                      // 0x0130(0x0004)
    int32_t                                       HPEnd;                                                        // 0x0134(0x0004)
    int32_t                                       HelmetHPStart;                                                // 0x0138(0x0004)
    int32_t                                       HelmetHPEnd;                                                  // 0x013C(0x0004)
    int32_t                                       ArmorHPStart;                                                 // 0x0140(0x0004)
    int32_t                                       ArmorHPEnd;                                                   // 0x0144(0x0004)
    int32_t                                       FallHeight;                                                   // 0x0148(0x0004)
    int32_t                                       PlayerKilled;                                                 // 0x014C(0x0004)
    FString                                       DebuffStartList;                                              // 0x0150(0x0010)
    FString                                       DebuffEndList;                                                // 0x0160(0x0010)
    FVector                                       HitPosition;                                                  // 0x0170(0x000C)
    char                                          pa_017C[0x0004]                                               // 0x017C(0x0004)
    int64_t                                       HitMovableArmorID;                                            // 0x0180(0x0008)
    float                                         MovableArmorConsume;                                          // 0x0188(0x0004)
    float                                         MovableArmorBlockDamage;                                      // 0x018C(0x0004)
    uint32_t                                      TargetVestArmorID;                                            // 0x0190(0x0004)
    uint32_t                                      TargetHelmetArmorID;                                          // 0x0194(0x0004)
    uint32_t                                      TargetFaceShieldID;                                           // 0x0198(0x0004)
    uint32_t                                      TargetThighArmorID;                                           // 0x019C(0x0004)
};


// ScriptStruct  SGFramework.WeapAdapterRepInfo
// Struct Size::0x0005
struct FWeapAdapterRepInfo
{
    char                                          AdapterSocketRep;                                             // 0x0000(0x0001)
    char                                          AdapterSocketRep;                                             // 0x0001(0x0001)
    char                                          AdapterSocketRep;                                             // 0x0002(0x0001)
    char                                          AdapterSocketRep;                                             // 0x0003(0x0001)
    char                                          AdapterSocketRep;                                             // 0x0004(0x0001)
};


// ScriptStruct  SGFramework.WeaponEventRepInfo
// Struct Size::0x0002
struct FWeaponEventRepInfo
{
    char                                          WeaponRepStateEventType;                                      // 0x0000(0x0001)
    char                                          WeapRepContTimes;                                             // 0x0001(0x0001)
};


// ScriptStruct  SGFramework.ZoomingState
// Struct Size::0x0014
struct FZoomingState
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  SGFramework.WeaponSwitchScopeParams
// Struct Size::0x0020
struct FWeaponSwitchScopeParams
{
    enum class EAnimOffsetType                    AnimOffsetType;                                               // 0x0000(0x0001)
    enum class EAxis                              Axis;                                                         // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         MinValue;                                                     // 0x0004(0x0004)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UCurveFloat*                                  Curve;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.VehicleColorData
// Struct Size::0x0014
struct FVehicleColorData
{
    FLinearColor                                  VehicleColor;                                                 // 0x0000(0x0010)
    float                                         RandomWeight;                                                 // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.InventoryLoadQueueInfoStruct
// Struct Size::0x0020
struct FInventoryLoadQueueInfoStruct
{
    ASGInventory*                                 Inventory;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  SGFramework.TimedImpactEffect
// Struct Size::0x0018
struct FTimedImpactEffect
{
    USceneComponent*                              EffectComp;                                                   // 0x0000(0x0008)
    float                                         CreationTime;                                                 // 0x0008(0x0004)
    float                                         LifetimeScaling;                                              // 0x000C(0x0004)
    float                                         FadeMultiplier;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.SimpHelicopterMovementRepData
// Struct Size::0x0014
struct FSimpHelicopterMovementRepData
{
    FVector                                       Acceleration;                                                 // 0x0000(0x000C)
    float                                         YawAcceleration;                                              // 0x000C(0x0004)
    float                                         YawVelocity;                                                  // 0x0010(0x0004)
};


// ScriptStruct  SGFramework.WearableMeshAssetData
// Struct Size::0x0020
struct FWearableMeshAssetData
{
    TArray<FWearableMorphTarget>                  UnderMorphTargets;                                            // 0x0000(0x0010)
    TArray<FName>                                 UnderHiddenTags;                                              // 0x0010(0x0010)
};


// ScriptStruct  SGFramework.AlternativeMaterialInfo
// Struct Size::0x00A0
struct FAlternativeMaterialInfo
{
    TMap<FName,TSoftObjectPtr<UMaterialInterface>>SoftRefMaterialList;                                          // 0x0000(0x0050)
    TMap<FName,UMaterialInterface*>               MaterialList;                                                 // 0x0050(0x0050)
};


// ScriptStruct  SGFramework.MorphTargetPositionOffsetInfo
// Struct Size::0x0058
struct FMorphTargetPositionOffsetInfo
{
    int32_t                                       BadgeIndex;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FName,FMorphDeltaInfo>                   MorphTargetDeltaList;                                         // 0x0008(0x0050)
};


// ScriptStruct  SGFramework.MorphDeltaInfo
// Struct Size::0x0018
struct FMorphDeltaInfo
{
    FVector                                       PositionOffset;                                               // 0x0000(0x000C)
    FVector                                       TangentZDelta;                                                // 0x000C(0x000C)
};


// ScriptStruct  SGFramework.SoundIndicatorTLogData
// Struct Size::0x000C
struct FSoundIndicatorTLogData
{
    float                                         Score;                                                        // 0x0000(0x0004)
    float                                         Distance;                                                     // 0x0004(0x0004)
    bool                                          bIsDead;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  SGFramework.SoundIndicatorReportInfo
// Struct Size::0x0068
struct FSoundIndicatorReportInfo
{
    float                                         TriggerTime;                                                  // 0x0000(0x0004)
    float                                         CurrentTime;                                                  // 0x0004(0x0004)
    float                                         CurrentScore;                                                 // 0x0008(0x0004)
    float                                         Distance;                                                     // 0x000C(0x0004)
    AActor*                                       SourceActor;                                                  // 0x0010(0x0008)
    TSet<enum class ESoundIndicatorReportScoreType>BehaviorCachedSet;                                           // 0x0018(0x0050)
};


// ScriptStruct  SGFramework.SoundDiffusionFactorConfTableRow
// Struct Size::0x0018
struct FSoundDiffusionFactorConfTableRow : public FTableRowBase
{
    float                                         SoundDiffusionLevelFactor;                                    // 0x0008(0x0004)
    float                                         SoundDiffusionMaxDistanceFactor;                              // 0x000C(0x0004)
    float                                         SuppressorSoundScale;                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SGFramework.GunSilencerInfluenceParamsArray
// Struct Size::0x0010
struct FGunSilencerInfluenceParamsArray
{
    TArray<FGunSilencerInfluenceParams>           GunSilencerInfluenceArray;                                    // 0x0000(0x0010)
};


// ScriptStruct  SGFramework.GunSilencerInfluenceParams
// Struct Size::0x000C
struct FGunSilencerInfluenceParams
{
    enum class ESGGunSilencerType                 SilencerType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FSoundInfluenceFactor                         InfluenceFactor;                                              // 0x0004(0x0008)
};


// ScriptStruct  SGFramework.SoundInfluenceAdditiveParams
// Struct Size::0x00A0
struct FSoundInfluenceAdditiveParams
{
    TSet<enum class ESoundSourceType>             SoundSourceTypeSet;                                           // 0x0000(0x0050)
    TMap<enum class ESGGunWeaponSubType,FSoundIndicatorAdditive>SoundInfluenceAdditiveMap;                      // 0x0050(0x0050)
};


// ScriptStruct  SGFramework.SoundIndicatorAdditive
// Struct Size::0x0010
struct FSoundIndicatorAdditive
{
    float                                         BaseLevelAdditive;                                            // 0x0000(0x0004)
    float                                         DurationAdditive;                                             // 0x0004(0x0004)
    float                                         FadeTimeAdditive;                                             // 0x0008(0x0004)
    float                                         MaxDistanceAdditive;                                          // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.SoundSourceTypeSet
// Struct Size::0x0050
struct FSoundSourceTypeSet
{
    TSet<enum class ESoundSourceType>             SoundSourceTypeSet;                                           // 0x0000(0x0050)
};


// ScriptStruct  SGFramework.SoundIndicatorIntervalAdditive
// Struct Size::0x0058
struct FSoundIndicatorIntervalAdditive
{
    TSet<enum class ESoundSourceType>             SoundTypes;                                                   // 0x0000(0x0050)
    float                                         Factor;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  SGFramework.SoundSourceActorParam
// Struct Size::0x0010
struct FSoundSourceActorParam
{
    enum class ESoundSourceActorType              ActorType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    AActor*                                       SourceActor;                                                  // 0x0008(0x0008)
};


// ScriptStruct  SGFramework.SoundIndicatorConfig
// Struct Size::0x0078
struct FSoundIndicatorConfig
{
    float                                         BaseLevel;                                                    // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
    float                                         FadeTime;                                                     // 0x0008(0x0004)
    int32_t                                       IconIndex;                                                    // 0x000C(0x0004)
    float                                         Interval;                                                     // 0x0010(0x0004)
    float                                         MaxDistance;                                                  // 0x0014(0x0004)
    float                                         Frequency;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  OpacityCurve;                                                 // 0x0020(0x0008)
    UCurveFloat*                                  AnimSpeedCurve;                                               // 0x0028(0x0008)
    UCurveFloat*                                  SoundWaveHeightCurve;                                         // 0x0030(0x0008)
    UCurveFloat*                                  HeightSideContrast;                                           // 0x0038(0x0008)
    UCurveFloat*                                  LevelFactor;                                                  // 0x0040(0x0008)
    UMaterialInterface*                           MatUpper;                                                     // 0x0048(0x0008)
    UMaterialInterface*                           MatMiddle;                                                    // 0x0050(0x0008)
    UMaterialInterface*                           MatLower;                                                     // 0x0058(0x0008)
    FLinearColor                                  WaveColor;                                                    // 0x0060(0x0010)
    int32_t                                       Priority;                                                     // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  SGFramework.VehicleLowHealthEffect
// Struct Size::0x0020
struct FVehicleLowHealthEffect
{
    float                                         HealthPercent;                                                // 0x0000(0x0004)
    bool                                          IsTriggered;                                                  // 0x0004(0x0001)
    bool                                          IsAttached;                                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FName                                         BoneNmae;                                                     // 0x0008(0x0008)
    UParticleSystem*                              PS;                                                           // 0x0010(0x0008)
    USoundCue*                                    Sound;                                                        // 0x0018(0x0008)
};


// ScriptStruct  SGFramework.VehicleTireData
// Struct Size::0x0010
struct FVehicleTireData
{
    int32_t                                       FLTireHP;                                                     // 0x0000(0x0004)
    int32_t                                       FRTireHP;                                                     // 0x0004(0x0004)
    int32_t                                       RLTireHP;                                                     // 0x0008(0x0004)
    int32_t                                       RRTireHP;                                                     // 0x000C(0x0004)
};


// ScriptStruct  SGFramework.VehicleSeatRepData
// Struct Size::0x0038
struct FVehicleSeatRepData
{
    ASGCharacter*                                 FirstSeatChar;                                                // 0x0000(0x0008)
    ASGCharacter*                                 SecondSeatChar;                                               // 0x0008(0x0008)
    ASGCharacter*                                 ThirdSeatChar;                                                // 0x0010(0x0008)
    ASGCharacter*                                 ForthSeatChar;                                                // 0x0018(0x0008)
    ASGCharacter*                                 FiveSeatChar;                                                 // 0x0020(0x0008)
    ASGCharacter*                                 SixSeatChar;                                                  // 0x0028(0x0008)
    int32_t                                       CurrentPlayerCount;                                           // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  SGFramework.CharacterVehicleRepData
// Struct Size::0x0038
struct FCharacterVehicleRepData
{
    APawn*                                        Vehicle;                                                      // 0x0000(0x0008)
    int32_t                                       SeatIndex;                                                    // 0x0008(0x0004)
    FVector                                       ExitLocation;                                                 // 0x000C(0x000C)
    FRotator                                      ExitFaceRotation;                                             // 0x0018(0x000C)
    bool                                          bIsSwitchSeatSync;                                            // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    APawn*                                        LastVehicle;                                                  // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  SGFramework.VehicleSeatData
// Struct Size::0x0040
struct FVehicleSeatData
{
    TArray<FOneSeatData>                          SeatDataList;                                                 // 0x0000(0x0010)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    int32_t                                       MaxSeatCount;                                                 // 0x0014(0x0004)
    bool                                          bSeatPlayerVisible;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<FName>                                 SeatSockets;                                                  // 0x0020(0x0010)
    TArray<FName>                                 LeaveVehicleSockets;                                          // 0x0030(0x0010)
};


// ScriptStruct  SGFramework.OneSeatData
// Struct Size::0x0008
struct FOneSeatData
{
    ASGCharacter*                                 SeatCharacter;                                                // 0x0000(0x0008)
};


// ScriptStruct  SGFramework.VehicleDamageScale
// Struct Size::0x000C
struct FVehicleDamageScale
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    float                                         DamageScale;                                                  // 0x0008(0x0004)
};


// ScriptStruct  SGFramework.SyncVehilceStopData
// Struct Size::0x001C
struct FSyncVehilceStopData
{
    FVector                                       ServerLocation;                                               // 0x0000(0x000C)
    FRotator                                      ServerRotation;                                               // 0x000C(0x000C)
    bool                                          bVehicleStopped;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MFNPCAI.AIRuntimeMonitorStatInfo
// Struct Size::0x002C
struct FAIRuntimeMonitorStatInfo
{
    float                                         HistoryIncAvg;                                                // 0x0000(0x0004)
    float                                         HistoryIncMax;                                                // 0x0004(0x0004)
    int32_t                                       HistoryMaxCallCount;                                          // 0x0008(0x0004)
    float                                         HistoryAvgCallCount;                                          // 0x000C(0x0004)
    int32_t                                       TotalIncCount;                                                // 0x0010(0x0004)
    float                                         TotalIncExeTime;                                              // 0x0014(0x0004)
    int32_t                                       TotalSavedNum;                                                // 0x0018(0x0004)
    uint32_t                                      NowFrame32;                                                   // 0x001C(0x0004)
    int32_t                                       NowFrameCallCount;                                            // 0x0020(0x0004)
    float                                         NowFrameExeUseTime;                                           // 0x0024(0x0004)
    float                                         WarningTopCost;                                               // 0x0028(0x0004)
};


// ScriptStruct  MFNPCAI.AISGDoorUsed
// Struct Size::0x0020
struct FAISGDoorUsed
{
    AActor*                                       SGDoor;                                                       // 0x0000(0x0008)
    ACharacter*                                   AIPawn;                                                       // 0x0008(0x0008)
    double                                        UsedTime;                                                     // 0x0010(0x0008)
    char                                          WaitPersons;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MFNPCAI.NPCAIActivityAIIDModifierTableRow
// Struct Size::0x0040
struct FNPCAIActivityAIIDModifierTableRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    int64_t                                       ActivityID;                                                   // 0x0010(0x0008)
    int32_t                                       Priority;                                                     // 0x0018(0x0004)
    int32_t                                       SourceCategory;                                               // 0x001C(0x0004)
    int32_t                                       SourceCareer;                                                 // 0x0020(0x0004)
    int32_t                                       SourceTendency;                                               // 0x0024(0x0004)
    int32_t                                       SourceDifficulty;                                             // 0x0028(0x0004)
    int32_t                                       TargetCategory;                                               // 0x002C(0x0004)
    int32_t                                       TargetCareer;                                                 // 0x0030(0x0004)
    int32_t                                       TargetTendency;                                               // 0x0034(0x0004)
    int32_t                                       TargetDifficulty;                                             // 0x0038(0x0004)
    int32_t                                       TargetEquipPoolID;                                            // 0x003C(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAIAsyncTask
// Struct Size::0x0018
struct FNPCAIAsyncTask
{
    AActor*                                       AIPawn;                                                       // 0x0000(0x0008)
    enum class ENPCAIAsyncTaskType                Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UNPCAIAsyncTaskBase*                          AsyncTask;                                                    // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderValue
// Struct Size::0x0020
struct FAIDataProviderValue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UAIDataProvider*                              DataBinding;                                                  // 0x0010(0x0008)
    FName                                         DataField;                                                    // 0x0018(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderTypedValue
// Struct Size::0x0030
struct FAIDataProviderTypedValue : public FAIDataProviderValue
{
    UObject*                                      PropertyType;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  MFNPCAI.AIDataProviderFVectorValue
// Struct Size::0x0040
struct FAIDataProviderFVectorValue : public FAIDataProviderTypedValue
{
    FVector                                       DefaultValue;                                                 // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  MFNPCAI.AIDoorSingleSafetyPoint
// Struct Size::0x0010
struct FAIDoorSingleSafetyPoint
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         DangerValue;                                                  // 0x000C(0x0004)
};


// ScriptStruct  MFNPCAI.AISafetyOpenDoorResp
// Struct Size::0x0020
struct FAISafetyOpenDoorResp
{
    AActor*                                       SGDoor;                                                       // 0x0000(0x0008)
    FVector                                       NavLinkPoint;                                                 // 0x0008(0x000C)
    FVector                                       SafetyWaitPoint;                                              // 0x0014(0x000C)
};


// ScriptStruct  MFNPCAI.NPCAIProfileCover
// Struct Size::0x0028
struct FNPCAIProfileCover
{
    TArray<char>                                  Ars;                                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    FString                                       CoverName;                                                    // 0x0018(0x0010)
};


// ScriptStruct  MFNPCAI.NPCAIProfileCoverTag
// Struct Size::0x0018
struct FNPCAIProfileCoverTag
{
    UNPCAIPropertyProfile*                        ProfileClass;                                                 // 0x0000(0x0008)
    enum class EAIProfileType                     ProfileType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FName                                         VarName;                                                      // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MFNPCAI.AIProtectTreasureBox
// Struct Size::0x0060
struct FAIProtectTreasureBox
{
    AActor*                                       BoxInstance;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0058]                                               // 0x0008(0x0058)
};


// ScriptStruct  MFNPCAI.AIEnemyInfo
// Struct Size::0x0020
struct FAIEnemyInfo
{
    float                                         FireTime;                                                     // 0x0000(0x0004)
    float                                         TimeInterval;                                                 // 0x0004(0x0004)
    FVector                                       FireLocation;                                                 // 0x0008(0x000C)
    FVector                                       FireDirection;                                                // 0x0014(0x000C)
};


// ScriptStruct  MFNPCAI.AIGlobalCacheActors
// Struct Size::0x0018
struct FAIGlobalCacheActors
{
    float                                         LastTimeSeconds;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<TWeakObjectPtr<AActor>>                CacheActors;                                                  // 0x0008(0x0010)
};


// ScriptStruct  MFNPCAI.GraphAStarPolicy
// Struct Size::0x0010
struct FGraphAStarPolicy
{
    int32_t                                       NodePoolSize;                                                 // 0x0000(0x0004)
    int32_t                                       OpenSetSize;                                                  // 0x0004(0x0004)
    int32_t                                       MaxPathNodeCount;                                             // 0x0008(0x0004)
    bool                                          bReuseNodePoolInSubsequentSearches;                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  MFNPCAI.HNavSearchInfo
// Struct Size::0x0060
struct FHNavSearchInfo
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MFNPCAI.HNavSettings
// Struct Size::0x003C
struct FHNavSettings
{
    bool                                          bAutoBuildAfterNavigationGenerationFinished;                  // 0x0000(0x0001)
    bool                                          bBuildIntermediateGraph;                                      // 0x0001(0x0001)
    bool                                          bRemoveIntermediateGraph;                                     // 0x0002(0x0001)
    bool                                          bIntraPathOnlyInSelfNode;                                     // 0x0003(0x0001)
    bool                                          bCombineMultiEdges;                                           // 0x0004(0x0001)
    bool                                          bEnableEdgeWeight;                                            // 0x0005(0x0001)
    bool                                          bBreakNavLinkConnection;                                      // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    int32_t                                       MaxGraphLevel;                                                // 0x0008(0x0004)
    int32_t                                       PartitionSize;                                                // 0x000C(0x0004)
    int32_t                                       ForceBuildForTopK;                                            // 0x0010(0x0004)
    int32_t                                       MinNodeCountToBuild;                                          // 0x0014(0x0004)
    int32_t                                       MaxSearchNode;                                                // 0x0018(0x0004)
    FMetisOptions                                 MetisOptions;                                                 // 0x001C(0x0020)
};


// ScriptStruct  MFNPCAI.MetisOptions
// Struct Size::0x0020
struct FMetisOptions
{
    bool                                          bUseDefault;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    enum class EMETIS                             ObjectiveType;                                                // 0x0004(0x0004)
    enum class EMETIS                             CoarsenType;                                                  // 0x0008(0x0004)
    enum class EMETIS                             InitialPartitioningType;                                      // 0x000C(0x0004)
    enum class EMETIS                             RifinementType;                                               // 0x0010(0x0004)
    int32_t                                       NCuts;                                                        // 0x0014(0x0004)
    int32_t                                       IterateTimes;                                                 // 0x0018(0x0004)
    bool                                          bMinimizeMaximumConnectivity;                                 // 0x001C(0x0001)
    bool                                          bNo2Hop;                                                      // 0x001D(0x0001)
    bool                                          bForcesContiguousPartitions;                                  // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
};


// ScriptStruct  MFNPCAI.HNavGraph
// Struct Size::0x0150
struct FHNavGraph
{
    int32_t                                       Level;                                                        // 0x0000(0x0004)
    int32_t                                       NodeCount;                                                    // 0x0004(0x0004)
    bool                                          bIntermediate;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<int32_t>                               ParentIndices;                                                // 0x0010(0x0010)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
    TArray<int32_t>                               ChildIndexOffsets;                                            // 0x0040(0x0010)
    TArray<int32_t>                               ChildIndices;                                                 // 0x0050(0x0010)
    TArray<int32_t>                               PortalEdgeOffsets;                                            // 0x0060(0x0010)
    TArray<FPortalEdge>                           PortalEdges;                                                  // 0x0070(0x0010)
    TArray<int32_t>                               IntraPathOffsets;                                             // 0x0080(0x0010)
    TArray<FIntraPath>                            IntraPaths;                                                   // 0x0090(0x0010)
    TArray<int32_t>                               IntraPathSourceIndexOffsets;                                  // 0x00A0(0x0010)
    TArray<int32_t>                               IntraPathSourceIndices;                                       // 0x00B0(0x0010)
    TArray<int32_t>                               IntraPathTargetIndexOffsets;                                  // 0x00C0(0x0010)
    char                                          pa_00D0[0x0010]                                               // 0x00D0(0x0010)
    TArray<uint64_t>                              IntraPathCounts;                                              // 0x00E0(0x0010)
    TArray<int32_t>                               IntraPathPolyRefOffsets;                                      // 0x00F0(0x0010)
    TArray<uint64_t>                              IntraPathPolyRefs;                                            // 0x0100(0x0010)
    TArray<float>                                 IntraPathCosts;                                               // 0x0110(0x0010)
    TArray<float>                                 IntraPathLengths;                                             // 0x0120(0x0010)
    char                                          pa_0130[0x0020]                                               // 0x0130(0x0020)
};


// ScriptStruct  MFNPCAI.IntraPath
// Struct Size::0x0020
struct FIntraPath
{
    uint64_t                                      PackedData;                                                   // 0x0000(0x0008)
    TArray<uint64_t>                              Nodes;                                                        // 0x0008(0x0010)
    float                                         Length;                                                       // 0x0018(0x0004)
    float                                         Cost;                                                         // 0x001C(0x0004)
};


// ScriptStruct  MFNPCAI.PortalEdge
// Struct Size::0x0008
struct FPortalEdge
{
    uint64_t                                      PackedData;                                                   // 0x0000(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAIIDModifierTableRow
// Struct Size::0x0010
struct FNPCAIIDModifierTableRow : public FTableRowBase
{
    int64_t                                       TargetAIID;                                                   // 0x0008(0x0008)
};


// ScriptStruct  MFNPCAI.AIRoundPathFindingNodes
// Struct Size::0x0080
struct FAIRoundPathFindingNodes
{
    float                                         LastTimeCheckUpdate;                                          // 0x0000(0x0004)
    int32_t                                       CheckUpdateCount;                                             // 0x0004(0x0004)
    float                                         RoundPathLength;                                              // 0x0008(0x0004)
    float                                         RadiusReCalcRoundPathNodes;                                   // 0x000C(0x0004)
    int64_t                                       CurrentPolyId;                                                // 0x0010(0x0008)
    FVector                                       LastLocationCalcRoundPathNodes;                               // 0x0018(0x000C)
    char                                          pa_0024[0x005C]                                               // 0x0024(0x005C)
};


// ScriptStruct  MFNPCAI.AIArmorAttributeModifier
// Struct Size::0x0014
struct FAIArmorAttributeModifier
{
    float                                         DurabilityConsumeScale;                                       // 0x0000(0x0004)
    float                                         DurabilityConsumeScale;                                       // 0x0004(0x0004)
    float                                         AntiPenetrationFactor;                                        // 0x0008(0x0004)
    float                                         DamageScaleForPenetration;                                    // 0x000C(0x0004)
    float                                         DamageScaleForBlock;                                          // 0x0010(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonBuildStage
// Struct Size::0x0020
struct FNPCAINavSkeletonBuildStage
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonAddRegionConnectionStage
// Struct Size::0x0020
struct FNPCAINavSkeletonAddRegionConnectionStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonBuilder
// Struct Size::0x0480
struct FNPCAINavSkeletonBuilder
{
    UObject*                                      WorldContextObject;                                           // 0x0000(0x0008)
    char                                          pa_0008[0x00B0]                                               // 0x0008(0x00B0)
    UWorld*                                       World;                                                        // 0x00B8(0x0008)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
    ARecastNavMesh*                               MainNavData;                                                  // 0x00C8(0x0008)
    ANPCAINavMeshManager*                         NavMeshManager;                                               // 0x00D0(0x0008)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    TArray<ANPCAINavLinkProxy*>                   LinkProxies;                                                  // 0x00E0(0x0010)
    char                                          pa_00F0[0x0390]                                               // 0x00F0(0x0390)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateCoverageStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateCoverageStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateDivergenceStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateDivergenceStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateGradientStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateGradientStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateSymmetricAttributeStage
// Struct Size::0x0028
struct FNPCAINavSkeletonCalculateSymmetricAttributeStage : public FNPCAINavSkeletonBuildStage
{
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateMovingStage
// Struct Size::0x0028
struct FNPCAINavSkeletonCalculateMovingStage : public FNPCAINavSkeletonCalculateSymmetricAttributeStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateOutdoorsStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateOutdoorsStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateProtectionStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateProtectionStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateThrowingStage
// Struct Size::0x0028
struct FNPCAINavSkeletonCalculateThrowingStage : public FNPCAINavSkeletonCalculateSymmetricAttributeStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateVisibilityStage
// Struct Size::0x00A8
struct FNPCAINavSkeletonCalculateVisibilityStage : public FNPCAINavSkeletonCalculateSymmetricAttributeStage
{
    char                                          pa_0028[0x0080]                                               // 0x0028(0x0080)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCalculateWallDistanceStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCalculateWallDistanceStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCheckEdgeOnNavMeshStage
// Struct Size::0x0028
struct FNPCAINavSkeletonCheckEdgeOnNavMeshStage : public FNPCAINavSkeletonBuildStage
{
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCollectConnectionInfoStage
// Struct Size::0x0020
struct FNPCAINavSkeletonCollectConnectionInfoStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonCollectNeighbourInfoStage
// Struct Size::0x0028
struct FNPCAINavSkeletonCollectNeighbourInfoStage : public FNPCAINavSkeletonBuildStage
{
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonFindPathForUnstableSegmentStage
// Struct Size::0x0020
struct FNPCAINavSkeletonFindPathForUnstableSegmentStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonFindWallsInNeighbourhoodStage
// Struct Size::0x0020
struct FNPCAINavSkeletonFindWallsInNeighbourhoodStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonGeneratePolylineStage
// Struct Size::0x0020
struct FNPCAINavSkeletonGeneratePolylineStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonGenerateRawPointStage
// Struct Size::0x0020
struct FNPCAINavSkeletonGenerateRawPointStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NavSkeletonPathFindingQueue
// Struct Size::0x0088
struct FNavSkeletonPathFindingQueue
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    TMap<TWeakObjectPtr<UObject>,FNavSkeletonPathFindingRequest>QuerierToRequest;                               // 0x0018(0x0050)
    char                                          pa_0068[0x0020]                                               // 0x0068(0x0020)
};


// ScriptStruct  MFNPCAI.NavSkeletonPathFindingRequest
// Struct Size::0x0198
struct FNavSkeletonPathFindingRequest
{
    char                                          pa_0000[0x0198]                                               // 0x0000(0x0198)
};


// ScriptStruct  MFNPCAI.NavSkeletonGraphAStarFilter
// Struct Size::0x00C0
struct FNavSkeletonGraphAStarFilter
{
    TWeakObjectPtr<UObject>                       WeakOwner;                                                    // 0x0000(0x0008)
    int32_t                                       MaxSearchNodes;                                               // 0x0008(0x0004)
    float                                         CostLimit;                                                    // 0x000C(0x0004)
    float                                         TimeLimit;                                                    // 0x0010(0x0004)
    bool                                          bShouldIncludeStartNodeInPath;                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TSet<int32_t>                                 UnreachablePointIDs;                                          // 0x0018(0x0050)
    bool                                          bOnTryBestToIncludePointIDs;                                  // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    TSet<int32_t>                                 TryBestToIncludePointIDs;                                     // 0x0070(0x0050)
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonInitializePointExtraAttributeStage
// Struct Size::0x0020
struct FNPCAINavSkeletonInitializePointExtraAttributeStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonLabelNavMeshStage
// Struct Size::0x0020
struct FNPCAINavSkeletonLabelNavMeshStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonPrunePointStage
// Struct Size::0x0020
struct FNPCAINavSkeletonPrunePointStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonRemoveIsolatedPointStage
// Struct Size::0x0020
struct FNPCAINavSkeletonRemoveIsolatedPointStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonRemoveTriangleConnectionStage
// Struct Size::0x0020
struct FNPCAINavSkeletonRemoveTriangleConnectionStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonSavePointStage
// Struct Size::0x0020
struct FNPCAINavSkeletonSavePointStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonSetupPointBattleIntensityExpectation
// Struct Size::0x0020
struct FNPCAINavSkeletonSetupPointBattleIntensityExpectation : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonSetupPointBattleVolumeStage
// Struct Size::0x0020
struct FNPCAINavSkeletonSetupPointBattleVolumeStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonSetupPointKindStage
// Struct Size::0x0020
struct FNPCAINavSkeletonSetupPointKindStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NPCAINavSkeletonSimplifyPolylineStage
// Struct Size::0x0020
struct FNPCAINavSkeletonSimplifyPolylineStage : public FNPCAINavSkeletonBuildStage
{
};


// ScriptStruct  MFNPCAI.NavSkeletonMoveSettings
// Struct Size::0x0001
struct FNavSkeletonMoveSettings
{
    bool                                          bWantPathOptimization;                                        // 0x0000(0x0001)
};


// ScriptStruct  MFNPCAI.NavSkeletonData
// Struct Size::0x0060
struct FNavSkeletonData
{
    TArray<FNavSkeletonPoint>                     Points;                                                       // 0x0000(0x0010)
    TMap<uint64_t,FNavSkeletonPatchedPath>        UnstableSegmentPatchPaths;                                    // 0x0010(0x0050)
};


// ScriptStruct  MFNPCAI.NavSkeletonPatchedPath
// Struct Size::0x0010
struct FNavSkeletonPatchedPath
{
    TArray<FNavSkeletonPathPoint>                 PathPoints;                                                   // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.NavSkeletonPathPoint
// Struct Size::0x0028
struct FNavSkeletonPathPoint
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      NodeRef;                                                      // 0x0010(0x0008)
    uint32_t                                      Flags;                                                        // 0x0018(0x0004)
    uint32_t                                      CustomLinkId;                                                 // 0x001C(0x0004)
    FNavLinkId                                    CustomNavLinkId;                                              // 0x0020(0x0008)
};


// ScriptStruct  Engine.NavLinkId
// Struct Size::0x0008
struct FNavLinkId
{
    uint64_t                                      ID;                                                           // 0x0000(0x0008)
};


// ScriptStruct  MFNPCAI.NavSkeletonPoint
// Struct Size::0x00A0
struct FNavSkeletonPoint : public FActionPointData
{
    bool                                          Outdoors;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Radius;                                                       // 0x0014(0x0004)
    float                                         EffectiveRange;                                               // 0x0018(0x0004)
    int32_t                                       LinkID;                                                       // 0x001C(0x0004)
    uint64_t                                      AtPolyRef;                                                    // 0x0020(0x0008)
    FVector                                       ProtectionDirection;                                          // 0x0028(0x000C)
    float                                         ProtectionHalfAngle;                                          // 0x0034(0x0004)
    int32_t                                       BattleIntensityExpectation;                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               NeighbourIndices;                                             // 0x0040(0x0010)
    TArray<float>                                 NeighbourDistances;                                           // 0x0050(0x0010)
    TArray<int32_t>                               VisibleIndices;                                               // 0x0060(0x0010)
    TArray<int32_t>                               ThrowableIndices;                                             // 0x0070(0x0010)
    TArray<int32_t>                               MovableIndices;                                               // 0x0080(0x0010)
    TArray<int32_t>                               FriendIndices;                                                // 0x0090(0x0010)
};


// ScriptStruct  MFNPCAI.NavSkeletonPolyline
// Struct Size::0x0018
struct FNavSkeletonPolyline
{
    TArray<int32_t>                               PointIDs;                                                     // 0x0000(0x0010)
    float                                         PolylineLength;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MFNPCAI.NavSkeletonBuildSettings
// Struct Size::0x008C
struct FNavSkeletonBuildSettings
{
    FVector                                       NavQueryExtent;                                               // 0x0000(0x000C)
    float                                         SampleSpacing;                                                // 0x000C(0x0004)
    float                                         DeltaLength;                                                  // 0x0010(0x0004)
    int32_t                                       GradientNeighbourRadius;                                      // 0x0014(0x0004)
    float                                         DivergenceFilterThreshold;                                    // 0x0018(0x0004)
    float                                         DivergenceNeighbourRadius;                                    // 0x001C(0x0004)
    float                                         CoarseCoverageNeighbourRadius;                                // 0x0020(0x0004)
    float                                         RefinedCoverageNeighbourRadius;                               // 0x0024(0x0004)
    float                                         PolylineSimplificationDistanceThreshold;                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    bool                                          bUseNewBuilder;                                               // 0x0030(0x0001)
    bool                                          bCheckEdgeOnNavMesh;                                          // 0x0031(0x0001)
    bool                                          bRemoveUnreachablePoints;                                     // 0x0032(0x0001)
    bool                                          bHintProjection2D;                                            // 0x0033(0x0001)
    bool                                          bAddRegionConnection;                                         // 0x0034(0x0001)
    bool                                          bEnableCollapseShortPolylines;                                // 0x0035(0x0001)
    bool                                          bEnableParallelFindWallsInNeighbourhood;                      // 0x0036(0x0001)
    bool                                          bEnableParallelCalculateWallDistance;                         // 0x0037(0x0001)
    bool                                          bEnableParallelGenerateRawPoints;                             // 0x0038(0x0001)
    bool                                          bEnableParallelCalculateGradient;                             // 0x0039(0x0001)
    bool                                          bEnableParallelCalculateDivergence;                           // 0x003A(0x0001)
    bool                                          bEnableParallelCalculateOutdoors;                             // 0x003B(0x0001)
    bool                                          bEnableParallelPruneSamplePoints;                             // 0x003C(0x0001)
    bool                                          bEnableParallelCalculateProtection;                           // 0x003D(0x0001)
    bool                                          bEnableParallelCalculateVisibility;                           // 0x003E(0x0001)
    bool                                          bEnableParallelCalculateThrowing;                             // 0x003F(0x0001)
    bool                                          bEnableParallelCalculateMoving;                               // 0x0040(0x0001)
    bool                                          bEnablePruneSamplePoints;                                     // 0x0041(0x0001)
    bool                                          bEnableRemoveTooCloseMainPointAtCoverageStage;                // 0x0042(0x0001)
    bool                                          bEnableRefineCoverage;                                        // 0x0043(0x0001)
    bool                                          bEnablePruneEndBranch;                                        // 0x0044(0x0001)
    bool                                          bEnableCalculateVisibilityStage;                              // 0x0045(0x0001)
    bool                                          bEnableCalculateThrowingStage;                                // 0x0046(0x0001)
    enum class ENavSkeletonDivergenceMethod       DivergenceMethod;                                             // 0x0047(0x0001)
    float                                         FindWallInRadius;                                             // 0x0048(0x0004)
    int32_t                                       MaxWallCount;                                                 // 0x004C(0x0004)
    float                                         PolylineLengthLowerBound;                                     // 0x0050(0x0004)
    float                                         RegionConnectionDistanceTolerance;                            // 0x0054(0x0004)
    float                                         VisiblityQueryZExtent;                                        // 0x0058(0x0004)
    float                                         VisiblityTraceZOffset;                                        // 0x005C(0x0004)
    float                                         VisiblityMaxRange;                                            // 0x0060(0x0004)
    float                                         ProtectionTraceAngleStep;                                     // 0x0064(0x0004)
    float                                         ProtectionTraceZOffset;                                       // 0x0068(0x0004)
    float                                         ProtectionTraceMaxRange;                                      // 0x006C(0x0004)
    float                                         EndpointProtectionLowerBound;                                 // 0x0070(0x0004)
    float                                         ThrowingInitialSpeed;                                         // 0x0074(0x0004)
    float                                         ThrowingMaxRange;                                             // 0x0078(0x0004)
    float                                         MovingMaxRange;                                               // 0x007C(0x0004)
    char                                          pa_0080[0x0004]                                               // 0x0080(0x0004)
    float                                         CheckOutdoorsRadius;                                          // 0x0084(0x0004)
    float                                         CheckOutdoorsHeight;                                          // 0x0088(0x0004)
};


// ScriptStruct  MFNPCAI.NavSkeletonSamplePoint
// Struct Size::0x0058
struct FNavSkeletonSamplePoint
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MFNPCAI.NavSkeletonSamplePolyline
// Struct Size::0x0040
struct FNavSkeletonSamplePolyline
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  MFNPCAI.NavCostModifierSharedPointer
// Struct Size::0x0010
struct FNavCostModifierSharedPointer
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.NavCostModifier
// Struct Size::0x0040
struct FNavCostModifier
{
    enum class ENPCAIPerceptibleTile              Kind;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    TWeakObjectPtr<UObject>                       Instigator;                                                   // 0x0004(0x0008)
    float                                         BeginTime;                                                    // 0x000C(0x0004)
    float                                         EndTime;                                                      // 0x0010(0x0004)
    FBox                                          Boundary;                                                     // 0x0014(0x001C)
    TArray<uint64_t>                              AffectedPolyRefs;                                             // 0x0030(0x0010)
};


// ScriptStruct  MFNPCAI.NavCostDescriptor
// Struct Size::0x0010
struct FNavCostDescriptor
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.NavPolyRefArray
// Struct Size::0x0010
struct FNavPolyRefArray
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.NavConnectivityInfo
// Struct Size::0x0058
struct FNavConnectivityInfo
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MFNPCAI.SoAStorage
// Struct Size::0x0010
struct FSoAStorage
{
    TArray<int32_t>                               Offsets;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.PortalEdgeStorage
// Struct Size::0x0020
struct FPortalEdgeStorage : public FSoAStorage
{
    TArray<FPortalEdge>                           Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.UInt64Storage
// Struct Size::0x0020
struct FUInt64Storage : public FSoAStorage
{
    TArray<uint64_t>                              Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.Int32Storage
// Struct Size::0x0020
struct FInt32Storage : public FSoAStorage
{
    TArray<int32_t>                               Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.NavLinkInfo
// Struct Size::0x001C
struct FNavLinkInfo
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    bool                                          bEnabled;                                                     // 0x0001(0x0001)
    char                                          Direction;                                                    // 0x0002(0x0001)
    enum class ENavLinkType                       LinkType;                                                     // 0x0003(0x0001)
    uint32_t                                      LinkID;                                                       // 0x0004(0x0004)
    int32_t                                       LinkIndex;                                                    // 0x0008(0x0004)
    int32_t                                       LeftIndex;                                                    // 0x000C(0x0004)
    int32_t                                       RightIndex;                                                   // 0x0010(0x0004)
    int32_t                                       LeftRegionIndex;                                              // 0x0014(0x0004)
    int32_t                                       RightRegionIndex;                                             // 0x0018(0x0004)
};


// ScriptStruct  MFNPCAI.CoverPointPathLengthResult
// Struct Size::0x0008
struct FCoverPointPathLengthResult
{
    int32_t                                       PointID;                                                      // 0x0000(0x0004)
    float                                         PathLength;                                                   // 0x0004(0x0004)
};


// ScriptStruct  MFNPCAI.AICandidateStandPosition
// Struct Size::0x0010
struct FAICandidateStandPosition
{
    float                                         PathLength;                                                   // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
};


// ScriptStruct  MFNPCAI.AIGrassOctreeElement
// Struct Size::0x0030
struct FAIGrassOctreeElement
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MFNPCAI.AIGrassOctreeData
// Struct Size::0x0010
struct FAIGrassOctreeData
{
    int32_t                                       GrassBlockIndex;                                              // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
};


// ScriptStruct  MFNPCAI.AINearGrassBounds
// Struct Size::0x0020
struct FAINearGrassBounds
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    TArray<int32_t>                               GrassIndexs;                                                  // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.AIGrassClusterInfo
// Struct Size::0x0030
struct FAIGrassClusterInfo
{
    FBox                                          Bounds;                                                       // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FBox>                                  BoxList;                                                      // 0x0020(0x0010)
};


// ScriptStruct  MFNPCAI.AIGrassGrayBMP
// Struct Size::0x0050
struct FAIGrassGrayBMP
{
    int32_t                                       BMPWidth;                                                     // 0x0000(0x0004)
    int32_t                                       BMPHeight;                                                    // 0x0004(0x0004)
    TArray<FColor>                                Colors;                                                       // 0x0008(0x0010)
    FVector2D                                     ZeroPoint;                                                    // 0x0018(0x0008)
    float                                         ScaleValue;                                                   // 0x0020(0x0004)
    int32_t                                       MinLine;                                                      // 0x0024(0x0004)
    int32_t                                       MaxLine;                                                      // 0x0028(0x0004)
    int32_t                                       MinRow;                                                       // 0x002C(0x0004)
    int32_t                                       MaxRow;                                                       // 0x0030(0x0004)
    FBox                                          OriginBoundBox;                                               // 0x0034(0x001C)
};


// ScriptStruct  MFNPCAI.AILandscapeGrassBlock
// Struct Size::0x0028
struct FAILandscapeGrassBlock
{
    FBox                                          Bounds;                                                       // 0x0000(0x001C)
    FVector                                       Location;                                                     // 0x001C(0x000C)
};


// ScriptStruct  MFNPCAI.AIGrassBlock
// Struct Size::0x0078
struct FAIGrassBlock : public FAILandscapeGrassBlock
{
    FName                                         AIGrassName;                                                  // 0x0028(0x0008)
    char                                          Density;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    TArray<FAIGrassBox>                           GrassBoxList;                                                 // 0x0038(0x0010)
    TArray<FAIGrassCylinder>                      GrassCylinderList;                                            // 0x0048(0x0010)
    bool                                          bSlowDownCharacter;                                           // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    FBox                                          SlowDownBounds;                                               // 0x005C(0x001C)
};


// ScriptStruct  MFNPCAI.AIGrassCylinder
// Struct Size::0x0020
struct FAIGrassCylinder
{
    float                                         ZCenter;                                                      // 0x0000(0x0004)
    float                                         HalfHeight;                                                   // 0x0004(0x0004)
    float                                         Radius;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<char>                                  PartsDensities;                                               // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.AIGrassBox
// Struct Size::0x001C
struct FAIGrassBox
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       Extent;                                                       // 0x000C(0x000C)
    float                                         Density;                                                      // 0x0018(0x0004)
};


// ScriptStruct  MFNPCAI.AIGrassEditorBlock
// Struct Size::0x0080
struct FAIGrassEditorBlock : public FAIGrassBlock
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0078(0x0008)
};


// ScriptStruct  MFNPCAI.AIFoliageGrassBlock
// Struct Size::0x003C
struct FAIFoliageGrassBlock
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    FBox                                          Bounds;                                                       // 0x0004(0x001C)
    FVector                                       Location;                                                     // 0x0020(0x000C)
    float                                         RotatonYaw;                                                   // 0x002C(0x0004)
    char                                          Density;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ScaleValue;                                                   // 0x0034(0x0004)
    bool                                          bSlowDownCharacter;                                           // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  MFNPCAI.AIGrassMapInfo
// Struct Size::0x0088
struct FAIGrassMapInfo
{
    FString                                       MapName;                                                      // 0x0000(0x0010)
    float                                         MapTopX;                                                      // 0x0010(0x0004)
    float                                         MapTopY;                                                      // 0x0014(0x0004)
    float                                         MapSizeX;                                                     // 0x0018(0x0004)
    float                                         MapSizeY;                                                     // 0x001C(0x0004)
    int32_t                                       MapLandscapeGrassCellCountX;                                  // 0x0020(0x0004)
    int32_t                                       MapLandscapeGrassCellCountY;                                  // 0x0024(0x0004)
    float                                         LandscapeGrassCellSize;                                       // 0x0028(0x0004)
    int32_t                                       MinLandscapeGrassCountInCell;                                 // 0x002C(0x0004)
    float                                         MinCellCoverPercent;                                          // 0x0030(0x0004)
    float                                         MinLandscapeGrassHeight;                                      // 0x0034(0x0004)
    float                                         LandscapeGrassZGapLimit;                                      // 0x0038(0x0004)
    float                                         MinGrassHeight;                                               // 0x003C(0x0004)
    float                                         AverageDensityLimit;                                          // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       IgnoreFoliageTags;                                            // 0x0048(0x0010)
    bool                                          bIsGenerateMeshGrass;                                         // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FString                                       MeshGrassTags;                                                // 0x0060(0x0010)
    FString                                       SaveLevelName;                                                // 0x0070(0x0010)
    bool                                          bShouldSkipMainLevel;                                         // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
};


// ScriptStruct  MFNPCAI.AISenseFlashBlock
// Struct Size::0x0044
struct FAISenseFlashBlock
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FVector                                       StartPos;                                                     // 0x0008(0x000C)
    FVector                                       Dir;                                                          // 0x0014(0x000C)
    float                                         FarDim;                                                       // 0x0020(0x0004)
    float                                         NearDim;                                                      // 0x0024(0x0004)
    float                                         ZoneAngle;                                                    // 0x0028(0x0004)
    float                                         FaceAngle;                                                    // 0x002C(0x0004)
    float                                         SevereDebuffDistance;                                         // 0x0030(0x0004)
    float                                         ModerateDebuffDistance;                                       // 0x0034(0x0004)
    float                                         MildDebuffDistance;                                           // 0x0038(0x0004)
    float                                         Height;                                                       // 0x003C(0x0004)
    float                                         MaxHeight;                                                    // 0x0040(0x0004)
};


// ScriptStruct  MFNPCAI.AIBlockArea
// Struct Size::0x0060
struct FAIBlockArea
{
    enum class ENPCAIPerceptibleTile              TileType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FBox                                          BlockBox;                                                     // 0x0004(0x001C)
    FBox                                          EffectiveBox;                                                 // 0x0020(0x001C)
    FVector                                       Center;                                                       // 0x003C(0x000C)
    float                                         Radius;                                                       // 0x0048(0x0004)
    float                                         Heigh;                                                        // 0x004C(0x0004)
    float                                         StartTime;                                                    // 0x0050(0x0004)
    float                                         EndTime;                                                      // 0x0054(0x0004)
    float                                         BlockStartTime;                                               // 0x0058(0x0004)
    float                                         BlockEndTime;                                                 // 0x005C(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAIPortraitToIDTableRow
// Struct Size::0x0038
struct FNPCAIPortraitToIDTableRow : public FTableRowBase
{
    TSoftClassPtr<UObject>                        PortraitClass;                                                // 0x0008(0x0028)
    int64_t                                       AIID;                                                         // 0x0030(0x0008)
};


// ScriptStruct  MFNPCAI.AIMindGoalEnemyAngleMultiple
// Struct Size::0x000C
struct FAIMindGoalEnemyAngleMultiple
{
    float                                         Angle;                                                        // 0x0000(0x0004)
    float                                         ScoreMultiple;                                                // 0x0004(0x0004)
    float                                         AngleCos;                                                     // 0x0008(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAISceneEventInfo
// Struct Size::0x0040
struct FNPCAISceneEventInfo
{
    int32_t                                       UniqueID;                                                     // 0x0000(0x0004)
    enum class ENPCAISceneEventID                 eventId;                                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         StartTime;                                                    // 0x0008(0x0004)
    float                                         EndTime;                                                      // 0x000C(0x0004)
    float                                         ValidScope;                                                   // 0x0010(0x0004)
    FVector                                       TriggerLocation;                                              // 0x0014(0x000C)
    TArray<int64_t>                               AIIDs;                                                        // 0x0020(0x0010)
    TArray<int64_t>                               AIPathGroupIDs;                                               // 0x0030(0x0010)
};


// ScriptStruct  MFNPCAI.NPCAISceneEventTableRow
// Struct Size::0x0048
struct FNPCAISceneEventTableRow : public FTableRowBase
{
    enum class ENPCAISceneEventID                 eventId;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ValidTime;                                                    // 0x000C(0x0004)
    float                                         ValidScope;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int64_t>                               AIIDs;                                                        // 0x0018(0x0010)
    TArray<int64_t>                               PathGroupIDs;                                                 // 0x0028(0x0010)
    FString                                       Comments;                                                     // 0x0038(0x0010)
};


// ScriptStruct  MFNPCAI.NPCAIComingExplosionEvent
// Struct Size::0x0030
struct FNPCAIComingExplosionEvent
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FVector                                       ExplosionLocation;                                            // 0x0004(0x000C)
    float                                         Damage;                                                       // 0x0010(0x0004)
    float                                         MaxRange;                                                     // 0x0014(0x0004)
    AActor*                                       Instigator;                                                   // 0x0018(0x0008)
    FName                                         Tag;                                                          // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AIModule.AIDamageEvent
// Struct Size::0x0038
struct FAIDamageEvent
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       HitLocation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    AActor*                                       DamagedActor;                                                 // 0x0020(0x0008)
    AActor*                                       Instigator;                                                   // 0x0028(0x0008)
    FName                                         Tag;                                                          // 0x0030(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAIDamageEvent
// Struct Size::0x0038
struct FNPCAIDamageEvent : public FAIDamageEvent
{
};


// ScriptStruct  AIModule.AINoiseEvent
// Struct Size::0x0038
struct FAINoiseEvent
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FVector                                       NoiseLocation;                                                // 0x0004(0x000C)
    float                                         Loudness;                                                     // 0x0010(0x0004)
    float                                         MaxRange;                                                     // 0x0014(0x0004)
    AActor*                                       Instigator;                                                   // 0x0018(0x0008)
    AActor*                                       NoiseRelator;                                                 // 0x0020(0x0008)
    FName                                         Tag;                                                          // 0x0028(0x0008)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAINoiseEvent
// Struct Size::0x0038
struct FNPCAINoiseEvent : public FAINoiseEvent
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneDeleteStage
// Struct Size::0x0010
struct FNPCAISteepZoneDeleteStage
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneCalculatePointNormalStage
// Struct Size::0x0010
struct FNPCAISteepZoneCalculatePointNormalStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneCalculatePointSteepDensityStage
// Struct Size::0x0010
struct FNPCAISteepZoneCalculatePointSteepDensityStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneCalculatePolyNormalStage
// Struct Size::0x0010
struct FNPCAISteepZoneCalculatePolyNormalStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneCollectNavMeshPolyStage
// Struct Size::0x0010
struct FNPCAISteepZoneCollectNavMeshPolyStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneDeleter
// Struct Size::0x0180
struct FNPCAISteepZoneDeleter
{
    UObject*                                      WorldContextObject;                                           // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
    UWorld*                                       World;                                                        // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    ARecastNavMesh*                               MainNavData;                                                  // 0x0030(0x0008)
    ANPCAINavMeshManager*                         NavMeshManager;                                               // 0x0038(0x0008)
    char                                          pa_0040[0x0140]                                               // 0x0040(0x0140)
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneGenerateSamplePointStage
// Struct Size::0x0010
struct FNPCAISteepZoneGenerateSamplePointStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneModifyTileCacheStage
// Struct Size::0x0010
struct FNPCAISteepZoneModifyTileCacheStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.NPCAISteepZoneRebuildNavMeshStage
// Struct Size::0x0010
struct FNPCAISteepZoneRebuildNavMeshStage : public FNPCAISteepZoneDeleteStage
{
};


// ScriptStruct  MFNPCAI.SteepZoneSamplePoint
// Struct Size::0x0050
struct FSteepZoneSamplePoint
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  MFNPCAI.SteepZoneNavMeshPoly
// Struct Size::0x0048
struct FSteepZoneNavMeshPoly
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  MFNPCAI.SteepZoneDetailTriangle
// Struct Size::0x0070
struct FSteepZoneDetailTriangle
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  MFNPCAI.SteepZoneDeleteSettings
// Struct Size::0x0034
struct FSteepZoneDeleteSettings
{
    FVector                                       NavQueryExtent;                                               // 0x0000(0x000C)
    bool                                          bHintProjection2D;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SampleSpacing;                                                // 0x0010(0x0004)
    float                                         TraceRadius;                                                  // 0x0014(0x0004)
    float                                         IncludedAngleTolerance;                                       // 0x0018(0x0004)
    float                                         WalkableFloorAngle;                                           // 0x001C(0x0004)
    float                                         DensityQuerySize;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x002C(0x0001)
    bool                                          bTraceComplex;                                                // 0x002D(0x0001)
    bool                                          bParallelCollectNavMeshPoly;                                  // 0x002E(0x0001)
    bool                                          bParallelCalculatePolyNormal;                                 // 0x002F(0x0001)
    bool                                          bParallelGenerateSamplePoint;                                 // 0x0030(0x0001)
    bool                                          bParallelCalculatePointNormal;                                // 0x0031(0x0001)
    bool                                          bParallelCalculateSteepDensity;                               // 0x0032(0x0001)
    bool                                          bParallelModifyTileCache;                                     // 0x0033(0x0001)
};


// ScriptStruct  MFNPCAI.AIGroupAllyDeathInfo
// Struct Size::0x001C
struct FAIGroupAllyDeathInfo
{
    float                                         DeathTime;                                                    // 0x0000(0x0004)
    FVector                                       DeathLocation;                                                // 0x0004(0x000C)
    FVector                                       KillerLocation;                                               // 0x0010(0x000C)
};


// ScriptStruct  MFNPCAI.AITrackLOGTemplateForDataTable
// Struct Size::0x0020
struct FAITrackLOGTemplateForDataTable : public FTableRowBase
{
    enum class EAITrackLOGType                    LogType;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       Template;                                                     // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.AITrackLOG
// Struct Size::0x0020
struct FAITrackLOG
{
    enum class EAITrackLOGType                    LogType;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    int64_t                                       LOGTime;                                                      // 0x0008(0x0008)
    FString                                       LOGKValues;                                                   // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.AILocationMonitor
// Struct Size::0x0020
struct FAILocationMonitor
{
    TWeakObjectPtr<APawn>                         Target;                                                       // 0x0000(0x0008)
    float                                         MonitoringInterval;                                           // 0x0008(0x0004)
    float                                         MaxTimeAllowOutOfNavmesh;                                     // 0x000C(0x0004)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  MFNPCAI.AILocationRecord
// Struct Size::0x0014
struct FAILocationRecord
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  MFNPCAI.AIDebugLineStruct
// Struct Size::0x0028
struct FAIDebugLineStruct
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    FVector                                       StartLocation;                                                // 0x0004(0x000C)
    FVector                                       EndLocation;                                                  // 0x0010(0x000C)
    FColor                                        Color;                                                        // 0x001C(0x0004)
    float                                         DurationTime;                                                 // 0x0020(0x0004)
    float                                         EndTime;                                                      // 0x0024(0x0004)
};


// ScriptStruct  MFNPCAI.AIDebugDrawSphereInfo
// Struct Size::0x0024
struct FAIDebugDrawSphereInfo
{
    FVector                                       Loc;                                                          // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    FLinearColor                                  LineColor;                                                    // 0x0010(0x0010)
    float                                         Duration;                                                     // 0x0020(0x0004)
};


// ScriptStruct  MFNPCAI.AIDebugDrawLineInfo
// Struct Size::0x0030
struct FAIDebugDrawLineInfo
{
    FVector                                       StartLoc;                                                     // 0x0000(0x000C)
    FVector                                       EndLoc;                                                       // 0x000C(0x000C)
    FLinearColor                                  LineColor;                                                    // 0x0018(0x0010)
    float                                         Duration;                                                     // 0x0028(0x0004)
    float                                         Thickness;                                                    // 0x002C(0x0004)
};


// ScriptStruct  MFNPCAI.AIShotCountStat
// Struct Size::0x0010
struct FAIShotCountStat
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    float                                         LastTime;                                                     // 0x0004(0x0004)
    float                                         FirstTime;                                                    // 0x0008(0x0004)
    float                                         IntervalToClear;                                              // 0x000C(0x0004)
};


// ScriptStruct  MFNPCAI.PMCAISpawnInfo
// Struct Size::0x0010
struct FPMCAISpawnInfo
{
    AActor*                                       SourcePoint;                                                  // 0x0000(0x0008)
    float                                         TotalCost;                                                    // 0x0008(0x0004)
    bool                                          Checked;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  MFNPCAI.CheckCoverPointFinder
// Struct Size::0x0028
struct FCheckCoverPointFinder
{
    AActor*                                       AIPawn;                                                       // 0x0000(0x0008)
    float                                         CheckPathLength;                                              // 0x0008(0x0004)
    int32_t                                       IndexFind;                                                    // 0x000C(0x0004)
    float                                         LastTimestamp;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FCoverPointOctreeElement>              Elements;                                                     // 0x0018(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.CoverPointOctreeElement
// Struct Size::0x0030
struct FCoverPointOctreeElement
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MFNPCAI.AIBackUpCoverPointFinder
// Struct Size::0x001C
struct FAIBackUpCoverPointFinder
{
    FVector                                       AIPosistion;                                                  // 0x0000(0x000C)
    FVector                                       EnemyPosition;                                                // 0x000C(0x000C)
    float                                         LastTime;                                                     // 0x0018(0x0004)
};


// ScriptStruct  MFNPCAI.AICoverPointInfo
// Struct Size::0x0048
struct FAICoverPointInfo
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    bool                                          IsFree;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    AActor*                                       OwnerActor;                                                   // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       ToWallVector;                                                 // 0x001C(0x000C)
    enum class EAIPose                            ProtectedStance;                                              // 0x0028(0x0001)
    bool                                          IsSafe;                                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         LastSpottedTime;                                              // 0x002C(0x0004)
    FVector                                       FirePosition;                                                 // 0x0030(0x000C)
    enum class EAIPose                            FireStance;                                                   // 0x003C(0x0001)
    enum class EAILeanType                        TiltType;                                                     // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    float                                         BaseWeight;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MFNPCAI.AICharacterConfig
// Struct Size::0x0008
struct FAICharacterConfig
{
    float                                         FireInterval;                                                 // 0x0000(0x0004)
    float                                         PerBurstReduce;                                               // 0x0004(0x0004)
};


// ScriptStruct  MFNPCAI.AIIDSegInfo
// Struct Size::0x0040
struct FAIIDSegInfo
{
    FAIIDSegInfoData                              MainCategory;                                                 // 0x0000(0x0010)
    FAIIDSegInfoData                              Career;                                                       // 0x0010(0x0010)
    FAIIDSegInfoData                              Tendency;                                                     // 0x0020(0x0010)
    FAIIDSegInfoData                              Difficulty;                                                   // 0x0030(0x0010)
};


// ScriptStruct  MFNPCAI.AIIDSegInfoData
// Struct Size::0x0010
struct FAIIDSegInfoData
{
    int64_t                                       Div;                                                          // 0x0000(0x0008)
    int64_t                                       Mod;                                                          // 0x0008(0x0008)
};


// ScriptStruct  MFNPCAI.AIStackGunRecord
// Struct Size::0x0044
struct FAIStackGunRecord
{
    bool                                          CanStackGun;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       MyPosition;                                                   // 0x0004(0x000C)
    FVector                                       EnemyPosition;                                                // 0x0010(0x000C)
    enum class EAILeanType                        AILean;                                                       // 0x001C(0x0001)
    enum class EAIPose                            AIPose;                                                       // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    FVector                                       GunPoint;                                                     // 0x0020(0x000C)
    FVector                                       EeyPoint;                                                     // 0x002C(0x000C)
    FVector                                       ShootPoint;                                                   // 0x0038(0x000C)
};


// ScriptStruct  MFNPCAI.NPCAIRollDecisionStruct
// Struct Size::0x0018
struct FNPCAIRollDecisionStruct : public FTableRowBase
{
    enum class ENPCAIDecision                     Decision;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         BaseTendency;                                                 // 0x000C(0x0004)
    float                                         BasePerceive;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AIModule.AIMoveRequest
// Struct Size::0x0040
struct FAIMoveRequest
{
    AActor*                                       GoalActor;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  MFNPCAI.NPCAIMoveRequest
// Struct Size::0x0048
struct FNPCAIMoveRequest : public FAIMoveRequest
{
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAIFireSetting
// Struct Size::0x0040
struct FNPCAIFireSetting
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    AActor*                                       EnemyTarget;                                                  // 0x0010(0x0008)
    bool                                          bCalcSight;                                                   // 0x0018(0x0001)
    bool                                          bCalcShoot;                                                   // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         FireInterval;                                                 // 0x001C(0x0004)
    bool                                          bIgnoreAimingTime;                                            // 0x0020(0x0001)
    bool                                          bEnabledHitRateControl;                                       // 0x0021(0x0001)
    bool                                          bEnabledRecoilControl;                                        // 0x0022(0x0001)
    enum class EAIBodyPartType                    ShootPartID;                                                  // 0x0023(0x0001)
    enum class EAIBodyPartType                    LastShootPartID;                                              // 0x0024(0x0001)
    bool                                          bPressureAim;                                                 // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    float                                         WaitEndtime;                                                  // 0x0028(0x0004)
    FVector                                       LastFireLocation;                                             // 0x002C(0x000C)
    UNPCAITargetInfo*                             EnemyInfo;                                                    // 0x0038(0x0008)
};


// ScriptStruct  MFNPCAI.NPCAIFireOrder
// Struct Size::0x0018
struct FNPCAIFireOrder
{
    bool                                          bValidOrder;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       FirePoint;                                                    // 0x0004(0x000C)
    enum class EAIBodyPartType                    HitPart;                                                      // 0x0010(0x0001)
    bool                                          IsUsingPredestined;                                           // 0x0011(0x0001)
    bool                                          IsHit;                                                        // 0x0012(0x0001)
    bool                                          bShotLimited;                                                 // 0x0013(0x0001)
    bool                                          bFakeShot;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  MFNPCAI.AIBodyPartVisibilityInfo
// Struct Size::0x0014
struct FAIBodyPartVisibilityInfo
{
    enum class EAIBodyPartType                    BodyPartType;                                                 // 0x0000(0x0001)
    bool                                          bIsVisible;                                                   // 0x0001(0x0001)
    bool                                          bCanShoot;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         LastCanSeeTime;                                               // 0x0004(0x0004)
    int32_t                                       GrassWeight;                                                  // 0x0008(0x0004)
    int32_t                                       ShootCalculateCount;                                          // 0x000C(0x0004)
    enum class ENPCAISenseBarrier                 Barrier;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MFNPCAI.AIBodyPartHitInfo
// Struct Size::0x0014
struct FAIBodyPartHitInfo
{
    enum class EAIBodyPartType                    BodyPartType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HitDurationStartTime;                                         // 0x0004(0x0004)
    float                                         HitDurationValues;                                            // 0x0008(0x0004)
    float                                         FirstHitTime;                                                 // 0x000C(0x0004)
    float                                         LastHitTime;                                                  // 0x0010(0x0004)
};


// ScriptStruct  MFNPCAI.AIBodyBulkAimingChoice
// Struct Size::0x0018
struct FAIBodyBulkAimingChoice
{
    enum class EAIBodyBulkType                    BodyBulk;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
    TArray<FAIBodyPartAimingChoice>               BodyParts;                                                    // 0x0008(0x0010)
};


// ScriptStruct  MFNPCAI.AIBodyPartAimingChoice
// Struct Size::0x0008
struct FAIBodyPartAimingChoice
{
    enum class EAIBodyPartType                    BodyPart;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  MFNPCAI.AINoiseMakerInfo
// Struct Size::0x0010
struct FAINoiseMakerInfo
{
    float                                         lasttime;                                                     // 0x0000(0x0004)
    float                                         lasttime;                                                     // 0x0004(0x0004)
    float                                         lasttime;                                                     // 0x0008(0x0004)
    float                                         lasttime;                                                     // 0x000C(0x0004)
};


// ScriptStruct  MFNPCAI.AIVisibleResult
// Struct Size::0x000C
struct FAIVisibleResult
{
    bool                                          IsVisible;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       BlockWeight;                                                  // 0x0004(0x0004)
    enum class ENPCAISenseBarrier                 Barrier;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MFNPCAI.AISenseSightNormal
// Struct Size::0x0018
struct FAISenseSightNormal
{
    float                                         Angle;                                                        // 0x0000(0x0004)
    float                                         VisionRadius;                                                 // 0x0004(0x0004)
    float                                         LostVisionRadius;                                             // 0x0008(0x0004)
    float                                         AngleCos;                                                     // 0x000C(0x0004)
    float                                         VisionRadiusSqr;                                              // 0x0010(0x0004)
    float                                         LostVisionRadiusSqr;                                          // 0x0014(0x0004)
};


// ScriptStruct  MFNPCAI.NPCAIWeaponConfigTableRow
// Struct Size::0x0018
struct FNPCAIWeaponConfigTableRow : public FTableRowBase
{
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    float                                         FireIntervalMin;                                              // 0x0010(0x0004)
    float                                         FireIntervalMax;                                              // 0x0014(0x0004)
};


// ScriptStruct  MFNPCAI.ComponentInfo
// Struct Size::0x0018
struct FComponentInfo
{
    UActorComponent*                              Component;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.DoorPointTmpBuildData
// Struct Size::0x0018
struct FDoorPointTmpBuildData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    bool                                          IsSafety;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       RelevanceIndex;                                               // 0x0010(0x0004)
    int32_t                                       DangerValue;                                                  // 0x0014(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.CoverPointOctreeData
// Struct Size::0x0050
struct FCoverPointOctreeData
{
    int32_t                                       CoverID;                                                      // 0x0000(0x0004)
    enum class EActionPointType                   PointType;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       Direction;                                                    // 0x001C(0x000C)
    FVector                                       RightDirection;                                               // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FCoverPoseData>                        PoseData;                                                     // 0x0038(0x0010)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  AIActionPointGeneratorRuntime.CoverPoseData
// Struct Size::0x0028
struct FCoverPoseData
{
    enum class ENPCPoseType                       PoseType;                                                     // 0x0000(0x0001)
    char                                          bLShootable;                                                  // 0x0001(0x0001)
    char                                          bRShootable;                                                  // 0x0001(0x0001)
    char                                          bMShootable;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       Direction;                                                    // 0x0010(0x000C)
    float                                         DefenceRatio;                                                 // 0x001C(0x0004)
    float                                         LDefenceAngle;                                                // 0x0020(0x0004)
    float                                         RDefenceAngle;                                                // 0x0024(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.TakeCoverPointIDListInfo
// Struct Size::0x0010
struct FTakeCoverPointIDListInfo
{
    TArray<int32_t>                               List;                                                         // 0x0000(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.CoverPointRuntimeInfo
// Struct Size::0x0014
struct FCoverPointRuntimeInfo
{
    TWeakObjectPtr<AActor>                        TakenActor;                                                   // 0x0000(0x0008)
    float                                         TakenBeginTime;                                               // 0x0008(0x0004)
    float                                         NextAvailableTime;                                            // 0x000C(0x0004)
    float                                         LastSpottedTime;                                              // 0x0010(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshCoverPointPoseSamplingConfig
// Struct Size::0x001C
struct FNavMeshCoverPointPoseSamplingConfig
{
    enum class ENPCPoseType                       PoseType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DefenceHeight;                                                // 0x0004(0x0004)
    float                                         DefenceRatio;                                                 // 0x0008(0x0004)
    float                                         FireHeight;                                                   // 0x000C(0x0004)
    float                                         RequiredMinimumDefenceAngle;                                  // 0x0010(0x0004)
    float                                         LimitedMaximumDefenceAngle;                                   // 0x0014(0x0004)
    char                                          pa_0018[0x0004]                                               // 0x0018(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.DebugArrow
// Struct Size::0x0020
struct FDebugArrow
{
    FVector                                       Start;                                                        // 0x0000(0x000C)
    FVector                                       End;                                                          // 0x000C(0x000C)
    FColor                                        Color;                                                        // 0x0018(0x0004)
    bool                                          bGenericOrUnitDebugData;                                      // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AIActionPointGeneratorRuntime.DebugPoint
// Struct Size::0x0014
struct FDebugPoint
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FColor                                        Color;                                                        // 0x000C(0x0004)
    bool                                          bGenericOrUnitDebugData;                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshEdgeCoverDataEditor
// Struct Size::0x0001
struct FNavMeshEdgeCoverDataEditor
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AIActionPointGeneratorRuntime.DTOCoverDataEditor
// Struct Size::0x0001
struct FDTOCoverDataEditor
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AIActionPointGeneratorRuntime.DTOCoverData
// Struct Size::0x0050
struct FDTOCoverData : public FActionPointData
{
    uint64_t                                      NavPolyRef;                                                   // 0x0010(0x0008)
    int32_t                                       EdgeIndex;                                                    // 0x0018(0x0004)
    char                                          bCustomized;                                                  // 0x001C(0x0001)
    char                                          bMarked;                                                      // 0x001C(0x0001)
    char                                          bAddable;                                                     // 0x001C(0x0001)
    char                                          bLMovable;                                                    // 0x001C(0x0001)
    char                                          bRMovable;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         BaseWeight;                                                   // 0x0020(0x0004)
    FRotator                                      Rotation;                                                     // 0x0024(0x000C)
    FVector                                       RightDir;                                                     // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FCoverPoseData>                        PoseData;                                                     // 0x0040(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointSampleData
// Struct Size::0x0058
struct FNavMeshTacticPointSampleData : public FDTOCoverData
{
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  AIActionPointGeneratorRuntime.KeyRouteSkeletonEditPoint
// Struct Size::0x0030
struct FKeyRouteSkeletonEditPoint
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int32_t                                       UniqueID;                                                     // 0x0008(0x0004)
    FVector                                       Location;                                                     // 0x000C(0x000C)
    float                                         DistanceToWall;                                               // 0x0018(0x0004)
    bool                                          bDistanceToWallSmall;                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    int32_t                                       ConnectionCount;                                              // 0x0020(0x0004)
    float                                         Score;                                                        // 0x0024(0x0004)
    bool                                          IsJunction;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointBuilder
// Struct Size::0x0078
struct FNavMeshTacticPointBuilder
{
    ACoverSystemActor*                            CoverSystemActor;                                             // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
    UWorld*                                       World;                                                        // 0x0028(0x0008)
    ARecastNavMesh*                               MainNavData;                                                  // 0x0030(0x0008)
    char                                          pa_0038[0x0040]                                               // 0x0038(0x0040)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointBuildStage
// Struct Size::0x0010
struct FNavMeshTacticPointBuildStage
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointCalculatePointDefenceAngleStage
// Struct Size::0x0010
struct FNavMeshTacticPointCalculatePointDefenceAngleStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointCalculatePointDefenceRatioStage
// Struct Size::0x0010
struct FNavMeshTacticPointCalculatePointDefenceRatioStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointCollectBoundaryEdgeStage
// Struct Size::0x0010
struct FNavMeshTacticPointCollectBoundaryEdgeStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointGenerateEdgeDefenceMapStage
// Struct Size::0x0010
struct FNavMeshTacticPointGenerateEdgeDefenceMapStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointGenerateSamplePointStage
// Struct Size::0x0018
struct FNavMeshTacticPointGenerateSamplePointStage : public FNavMeshTacticPointBuildStage
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointMergeParallelEdgeStage
// Struct Size::0x0010
struct FNavMeshTacticPointMergeParallelEdgeStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointRemoveTooClosePointStage
// Struct Size::0x0010
struct FNavMeshTacticPointRemoveTooClosePointStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.NavMeshTacticPointSetupEdgeDataStage
// Struct Size::0x0010
struct FNavMeshTacticPointSetupEdgeDataStage : public FNavMeshTacticPointBuildStage
{
};


// ScriptStruct  AIActionPointGeneratorRuntime.SeekANode
// Struct Size::0x0014
struct FSeekANode
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    int32_t                                       ParentIndex;                                                  // 0x0004(0x0004)
    float                                         NowCost;                                                      // 0x0008(0x0004)
    float                                         CostFromBot;                                                  // 0x000C(0x0004)
    float                                         CostEstimate;                                                 // 0x0010(0x0004)
};


// ScriptStruct  AIActionPointGeneratorRuntime.TacticPointData
// Struct Size::0x0070
struct FTacticPointData : public FActionPointData
{
    enum class ETacticPointType                   TacticPointType;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       PointID;                                                      // 0x0014(0x0004)
    float                                         Interval;                                                     // 0x0018(0x0004)
    bool                                          AlwaysActivated;                                              // 0x001C(0x0001)
    bool                                          ShouldCrouch;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    TArray<FTacticPointGuardTargetAndDirection>   GuardTargetAndDirections;                                     // 0x0020(0x0010)
    bool                                          FieldTrace;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Radius;                                                       // 0x0034(0x0004)
    char                                          bCustomized;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      ActorID;                                                      // 0x003C(0x0004)
    int8_t                                        IndRelatedToActor;                                            // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         CustomValue;                                                  // 0x0044(0x0004)
    FVector                                       CustomVector;                                                 // 0x0048(0x000C)
    FRotator                                      Rotation;                                                     // 0x0054(0x000C)
    TArray<FActionPointRadianSafe>                OrientSafetys;                                                // 0x0060(0x0010)
};


// ScriptStruct  AIActionPointGeneratorRuntime.TacticPointGuardTargetAndDirection
// Struct Size::0x0018
struct FTacticPointGuardTargetAndDirection
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Direction;                                                    // 0x000C(0x000C)
};


// ScriptStruct  AIActionPointGeneratorRuntime.TacticPointTypeColor
// Struct Size::0x00D0
struct FTacticPointTypeColor
{
    FLinearColor                                  None;                                                         // 0x0000(0x0010)
    FLinearColor                                  FlashBag;                                                     // 0x0010(0x0010)
    FLinearColor                                  Smoke;                                                        // 0x0020(0x0010)
    FLinearColor                                  HighValue;                                                    // 0x0030(0x0010)
    FLinearColor                                  FatalGate;                                                    // 0x0040(0x0010)
    FLinearColor                                  Escape;                                                       // 0x0050(0x0010)
    FLinearColor                                  Trap;                                                         // 0x0060(0x0010)
    FLinearColor                                  OverWatch;                                                    // 0x0070(0x0010)
    FLinearColor                                  Prone;                                                        // 0x0080(0x0010)
    FLinearColor                                  Window;                                                       // 0x0090(0x0010)
    FLinearColor                                  Door;                                                         // 0x00A0(0x0010)
    FLinearColor                                  Retreat;                                                      // 0x00B0(0x0010)
    FLinearColor                                  Transfer;                                                     // 0x00C0(0x0010)
};


// ScriptStruct  MFQuestSystem.QuestState
// Struct Size::0x0002
struct FQuestState
{
    enum class EQuestStatus                       CurrQuestStatus;                                              // 0x0000(0x0001)
    enum class EQuestStatus                       OldQuestStatus;                                               // 0x0001(0x0001)
};


// ScriptStruct  MFQuestSystem.QuestContextPairConfig
// Struct Size::0x0010
struct FQuestContextPairConfig
{
    UMFQuestContextSourceBase*                    ContextSourceClass;                                           // 0x0000(0x0008)
    UMFQuestContextBase*                          ContextClass;                                                 // 0x0008(0x0008)
};


// ScriptStruct  MFQuestSystem.QuestDistributerBlackboard
// Struct Size::0x0140
struct FQuestDistributerBlackboard
{
    TMap<FGameplayTag,int32_t>                    IntMap;                                                       // 0x0000(0x0050)
    TMap<FGameplayTag,FNestedIntArray>            IntArrayMap;                                                  // 0x0050(0x0050)
    TMap<FGameplayTag,FNestedObjectArray>         ObjectArrayMap;                                               // 0x00A0(0x0050)
    TMap<FGameplayTag,UObject*>                   ObjectMap;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  MFQuestSystem.NestedObjectArray
// Struct Size::0x0010
struct FNestedObjectArray
{
    TArray<UObject*>                              ObjectArray;                                                  // 0x0000(0x0010)
};


// ScriptStruct  MFQuestSystem.NestedIntArray
// Struct Size::0x0010
struct FNestedIntArray
{
    TArray<int32_t>                               IntArray;                                                     // 0x0000(0x0010)
};


// ScriptStruct  MFQuestSystem.QuestGraphConnection
// Struct Size::0x0008
struct FQuestGraphConnection
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MFPropsDestruction.GlassBoxCollisionInfo
// Struct Size::0x0001
struct FGlassBoxCollisionInfo
{
    bool                                          bBroken;                                                      // 0x0000(0x0001)
};


// ScriptStruct  MFPropsDestruction.MFGlassCachedImpact
// Struct Size::0x0020
struct FMFGlassCachedImpact
{
    int32_t                                       ColorID;                                                      // 0x0000(0x0004)
    int8_t                                        WeaponType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
};


// ScriptStruct  MFPropsDestruction.MFGlassImpact
// Struct Size::0x001C
struct FMFGlassImpact
{
    int8_t                                        WeaponType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       Normal;                                                       // 0x0010(0x000C)
};


// ScriptStruct  MFPropsDestruction.GlassHitEffectInfo
// Struct Size::0x0038
struct FGlassHitEffectInfo
{
    TArray<int32_t>                               IDList;                                                       // 0x0000(0x0010)
    TArray<FVector>                               DirList;                                                      // 0x0010(0x0010)
    TArray<int32_t>                               WeaponTypeList;                                               // 0x0020(0x0010)
    int32_t                                       Count;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MFDestructionCommon.GlassBreakParam
// Struct Size::0x0050
struct FGlassBreakParam
{
    FVector                                       Pos;                                                          // 0x0000(0x000C)
    FVector                                       Dir;                                                          // 0x000C(0x000C)
    FVector                                       Size;                                                         // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UObject*                                      StaticMesh;                                                   // 0x0028(0x0008)
    int32_t                                       TriStartIndex;                                                // 0x0030(0x0004)
    int32_t                                       TriEndIndex;                                                  // 0x0034(0x0004)
    FVector                                       VelocityDir;                                                  // 0x0038(0x000C)
    int8_t                                        EffectType;                                                   // 0x0044(0x0001)
    int8_t                                        WeaponType;                                                   // 0x0045(0x0001)
    char                                          pa_0046[0x0002]                                               // 0x0046(0x0002)
    UPhysicalMaterial*                            PhysMat;                                                      // 0x0048(0x0008)
};


// ScriptStruct  MFDestructionCommon.DestructibleObjParamBind
// Struct Size::0x0018
struct FDestructibleObjParamBind
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FDestructibleObjParam                         Param;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MFDestructionCommon.DestructibleObjParam
// Struct Size::0x000C
struct FDestructibleObjParam
{
    int32_t                                       DestructibleLevel;                                            // 0x0000(0x0004)
    float                                         ChunkLife;                                                    // 0x0004(0x0004)
    float                                         ChunkLife5;                                                   // 0x0008(0x0004)
};


// ScriptStruct  MFMobileJoystick.InputRotationInfo
// Struct Size::0x00C0
struct FInputRotationInfo
{
    char                                          pa_0000[0x00C0]                                               // 0x0000(0x00C0)
};


// ScriptStruct  MFPreload.ObjPool
// Struct Size::0x0018
struct FObjPool
{
    TArray<UObject*>                              ObjPool;                                                      // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  MFReplaySystem.ReplayEvent
// Struct Size::0x0030
struct FReplayEvent
{
    FString                                       eventId;                                                      // 0x0000(0x0010)
    FString                                       Group;                                                        // 0x0010(0x0010)
    int32_t                                       TimeInMs;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UReplayDataObject*                            Data;                                                         // 0x0028(0x0008)
};


// ScriptStruct  MFReplaySystem.ReplayFragmentServerSendInfo
// Struct Size::0x0038
struct FReplayFragmentServerSendInfo
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MFReplaySystem.ReplayObjectData
// Struct Size::0x0018
struct FReplayObjectData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    UObject*                                      Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  MFReplaySystem.ReplayTransformData
// Struct Size::0x0040
struct FReplayTransformData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
};


// ScriptStruct  MFReplaySystem.ReplayRotatorData
// Struct Size::0x0020
struct FReplayRotatorData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FRotator                                      Value;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MFReplaySystem.ReplayVectorData
// Struct Size::0x0020
struct FReplayVectorData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FVector                                       Value;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MFReplaySystem.ReplayTextData
// Struct Size::0x0028
struct FReplayTextData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FText                                         Value;                                                        // 0x0010(0x0018)
};


// ScriptStruct  MFReplaySystem.ReplayStringData
// Struct Size::0x0020
struct FReplayStringData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  MFReplaySystem.ReplayNameData
// Struct Size::0x0018
struct FReplayNameData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FName                                         Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  MFReplaySystem.ReplayFloatData
// Struct Size::0x0018
struct FReplayFloatData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MFReplaySystem.ReplayInt64Data
// Struct Size::0x0018
struct FReplayInt64Data
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int64_t                                       Value;                                                        // 0x0010(0x0008)
};


// ScriptStruct  MFReplaySystem.ReplayIntData
// Struct Size::0x0018
struct FReplayIntData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  MFReplaySystem.ReplayByteData
// Struct Size::0x0020
struct FReplayByteData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TArray<char>                                  Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  MFReplaySystem.ReplayBoolData
// Struct Size::0x0018
struct FReplayBoolData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    bool                                          Value;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  MFReplaySystem.BlendSettings
// Struct Size::0x0010
struct FBlendSettings
{
    float                                         BlendTime;                                                    // 0x0000(0x0004)
    enum class EViewTargetBlendFunction           BlendFunction;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BlendExponent;                                                // 0x0008(0x0004)
    bool                                          bLockOutgoing;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  MFReplaySystem.ReplayInfo
// Struct Size::0x0030
struct FReplayInfo
{
    FString                                       FriendlyName;                                                 // 0x0000(0x0010)
    FString                                       ActualName;                                                   // 0x0010(0x0010)
    FDateTime                                     RecordDate;                                                   // 0x0020(0x0008)
    int32_t                                       LengthInMS;                                                   // 0x0028(0x0004)
    float                                         SizeInMb;                                                     // 0x002C(0x0004)
};


// ScriptStruct  MFSceneryRuntime.MFSceneryStreamingAsset
// Struct Size::0x0010
struct FMFSceneryStreamingAsset
{
    UTextureRenderTarget2DArray*                  StreamingTexture;                                             // 0x0000(0x0008)
    ULandscapeComponentDataBase*                  StreamingTextureType;                                         // 0x0008(0x0008)
};


// ScriptStruct  MFVoxelReflectionRuntime.ReflectionVoxel
// Struct Size::0x0020
struct FReflectionVoxel
{
    TArray<int32_t>                               ReflectionCaptureIDs;                                         // 0x0000(0x0010)
    uint32_t                                      CornerNeighbourFlags;                                         // 0x0010(0x0004)
    uint32_t                                      CornerInteriorFlags;                                          // 0x0014(0x0004)
    uint32_t                                      CornerSkyLightFlags;                                          // 0x0018(0x0004)
    uint32_t                                      CornerInteriorFlagsAmbientGI;                                 // 0x001C(0x0004)
};


// ScriptStruct  MFVoxelReflectionRuntime.ReflectionVoxelTreeNode
// Struct Size::0x000C
struct FReflectionVoxelTreeNode
{
    uint32_t                                      ChildMaskL;                                                   // 0x0000(0x0004)
    uint32_t                                      ChildMaskH;                                                   // 0x0004(0x0004)
    uint32_t                                      ChildStartIndex;                                              // 0x0008(0x0004)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvCoverLocation
// Struct Size::0x0020
struct FMFVoxelEnvCoverLocation
{
    AActor*                                       Actor;                                                        // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvPathPointFindingConfig
// Struct Size::0x0010
struct FMFVoxelEnvPathPointFindingConfig
{
    float                                         EstimateWeight;                                               // 0x0000(0x0004)
    float                                         NodeSizePreference;                                           // 0x0004(0x0004)
    enum class EMFVoxelEnvHeuristic               Heuristic;                                                    // 0x0008(0x0001)
    enum class EMFVoxelEnvPathPruning             PathPruning;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       PathSmoothing;                                                // 0x000C(0x0004)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvDebugLocation
// Struct Size::0x0014
struct FMFVoxelEnvDebugLocation
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FColor                                        Colour;                                                       // 0x000C(0x0004)
    float                                         LineScale;                                                    // 0x0010(0x0004)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvDebugPath
// Struct Size::0x0018
struct FMFVoxelEnvDebugPath
{
    TArray<FVector>                               Points;                                                       // 0x0000(0x0010)
    FColor                                        Colour;                                                       // 0x0010(0x0004)
    float                                         LineScale;                                                    // 0x0014(0x0004)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvPath
// Struct Size::0x0010
struct FMFVoxelEnvPath
{
    TArray<FMFVoxelEnvPathPoint>                  Points;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MFVoxelEnv.MFVoxelEnvPathPoint
// Struct Size::0x0010
struct FMFVoxelEnvPathPoint
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    int32_t                                       Layer;                                                        // 0x000C(0x0004)
};


// ScriptStruct  SpinePlugin.SpineEvent
// Struct Size::0x0030
struct FSpineEvent
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       StringValue;                                                  // 0x0010(0x0010)
    int32_t                                       IntValue;                                                     // 0x0020(0x0004)
    float                                         FloatValue;                                                   // 0x0024(0x0004)
    float                                         Time;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SpinePlugin.SpineAnimationStateMixData
// Struct Size::0x0028
struct FSpineAnimationStateMixData
{
    FString                                       From;                                                         // 0x0000(0x0010)
    FString                                       To;                                                           // 0x0010(0x0010)
    float                                         Mix;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UFix.UStructLog
// Struct Size::0x0048
struct FUStructLog
{
    FName                                         SocketName;                                                   // 0x0000(0x0008)
    bool                                          bDisplaySocket;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector                                       UIStartOffest;                                                // 0x000C(0x000C)
    FVector                                       UIEndOffest;                                                  // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         UIPartName;                                                   // 0x0028(0x0018)
    bool                                          bPlaceHolderInventory;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    uint32_t                                      FakeID;                                                       // 0x0044(0x0004)
};


// ScriptStruct  UAGraphicsCommonRuntime.VectorParameterSetting
// Struct Size::0x0030
struct FVectorParameterSetting
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FLinearColor                                  Value;                                                        // 0x0010(0x0010)
    FLinearColor                                  ResetValue;                                                   // 0x0020(0x0010)
};


// ScriptStruct  UAGraphicsCommonRuntime.ScalarParameterSetting
// Struct Size::0x0018
struct FScalarParameterSetting
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    float                                         ResetValue;                                                   // 0x0014(0x0004)
};


// ScriptStruct  UAMFClimateRuntime.CubemapDataCollection
// Struct Size::0x0018
struct FCubemapDataCollection
{
    int32_t                                       ConfigID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCubemapData>                          DataArray;                                                    // 0x0008(0x0010)
};


// ScriptStruct  UAMFClimateRuntime.CubemapData
// Struct Size::0x00E0
struct FCubemapData
{
    float                                         TODTime;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TSoftObjectPtr<UTextureCube>                  CubemapTexture;                                               // 0x0008(0x0028)
    float                                         AverageBrightness;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<float>                                 IrradianceEnvironmentMapFloats;                               // 0x0038(0x0010)
    char                                          pa_0048[0x0098]                                               // 0x0048(0x0098)
};


// ScriptStruct  Dawn20RuntimeComponents.Dawn20InteriorVolumePlaneGroup
// Struct Size::0x0050
struct FDawn20InteriorVolumePlaneGroup
{
    TArray<FDawn20InteriorVolumePlane>            Planes;                                                       // 0x0000(0x0010)
    TArray<FVector>                               LocalVertices;                                                // 0x0010(0x0010)
    TArray<int32_t>                               Indices;                                                      // 0x0020(0x0010)
    FBox                                          LocalBounds;                                                  // 0x0030(0x001C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Dawn20RuntimeComponents.Dawn20InteriorVolumePlane
// Struct Size::0x0018
struct FDawn20InteriorVolumePlane
{
    int32_t                                       Index0;                                                       // 0x0000(0x0004)
    int32_t                                       Index1;                                                       // 0x0004(0x0004)
    int32_t                                       Index2;                                                       // 0x0008(0x0004)
    float                                         ExtraBrickTextureUVBias;                                      // 0x000C(0x0004)
    float                                         BrickTextureUVBias;                                           // 0x0010(0x0004)
    enum class EDawn20InteriorVolumePlaneBiasMode OverrideBiasMode;                                             // 0x0014(0x0001)
    char                                          bEnableBias;                                                  // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  DawnRuntimeComponents.DawnInteriorVolumePlaneGroup
// Struct Size::0x0050
struct FDawnInteriorVolumePlaneGroup
{
    TArray<FDawnInteriorVolumePlane>              Planes;                                                       // 0x0000(0x0010)
    TArray<FVector>                               LocalVertices;                                                // 0x0010(0x0010)
    TArray<int32_t>                               Indices;                                                      // 0x0020(0x0010)
    FBox                                          LocalBounds;                                                  // 0x0030(0x001C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  DawnRuntimeComponents.DawnInteriorVolumePlane
// Struct Size::0x0018
struct FDawnInteriorVolumePlane
{
    int32_t                                       Index0;                                                       // 0x0000(0x0004)
    int32_t                                       Index1;                                                       // 0x0004(0x0004)
    int32_t                                       Index2;                                                       // 0x0008(0x0004)
    float                                         ExtraBrickTextureUVBias;                                      // 0x000C(0x0004)
    float                                         BrickTextureUVBias;                                           // 0x0010(0x0004)
    enum class EDawnInteriorVolumePlaneBiasMode   OverrideBiasMode;                                             // 0x0014(0x0001)
    char                                          bEnableBias;                                                  // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  MotoSynth.MotoSynthRuntimeSettings
// Struct Size::0x0068
struct FMotoSynthRuntimeSettings
{
    bool                                          bSynthToneEnabled;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         SynthToneVolume;                                              // 0x0004(0x0004)
    float                                         SynthToneFilterFrequency;                                     // 0x0008(0x0004)
    int32_t                                       SynthOctaveShift;                                             // 0x000C(0x0004)
    bool                                          bGranularEngineEnabled;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         GranularEngineVolume;                                         // 0x0014(0x0004)
    float                                         GranularEnginePitchScale;                                     // 0x0018(0x0004)
    int32_t                                       NumSamplesToCrossfadeBetweenGrains;                           // 0x001C(0x0004)
    int32_t                                       NumGrainTableEntriesPerGrain;                                 // 0x0020(0x0004)
    int32_t                                       GrainTableRandomOffsetForConstantRPMs;                        // 0x0024(0x0004)
    int32_t                                       GrainCrossfadeSamplesForConstantRPMs;                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UMotoSynthSource*                             AccelerationSource;                                           // 0x0030(0x0008)
    UMotoSynthSource*                             DecelerationSource;                                           // 0x0038(0x0008)
    bool                                          bStereoWidenerEnabled;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         StereoDelayMsec;                                              // 0x0044(0x0004)
    float                                         StereoFeedback;                                               // 0x0048(0x0004)
    float                                         StereoWidenerWetlevel;                                        // 0x004C(0x0004)
    float                                         StereoWidenerDryLevel;                                        // 0x0050(0x0004)
    float                                         StereoWidenerDelayRatio;                                      // 0x0054(0x0004)
    bool                                          bStereoWidenerFilterEnabled;                                  // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    float                                         StereoWidenerFilterFrequency;                                 // 0x005C(0x0004)
    float                                         StereoWidenerFilterQ;                                         // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  MotoSynth.GrainTableEntry
// Struct Size::0x0008
struct FGrainTableEntry
{
    int32_t                                       SampleIndex;                                                  // 0x0000(0x0004)
    float                                         RPM;                                                          // 0x0004(0x0004)
};


// ScriptStruct  LandscapeGrassHDRuntime.GrassHDCompKey
// Struct Size::0x0028
struct FGrassHDCompKey
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  MagicLeapARPin.MagicLeapARPinQuery
// Struct Size::0x0068
struct FMagicLeapARPinQuery
{
    TSet<enum class EMagicLeapARPinType>          Types;                                                        // 0x0000(0x0050)
    int32_t                                       MaxResults;                                                   // 0x0050(0x0004)
    FVector                                       TargetPoint;                                                  // 0x0054(0x000C)
    float                                         Radius;                                                       // 0x0060(0x0004)
    bool                                          bSorted;                                                      // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  MagicLeapARPin.MagicLeapARPinObjectIdList
// Struct Size::0x0050
struct FMagicLeapARPinObjectIdList
{
    TSet<FString>                                 ObjectIdList;                                                 // 0x0000(0x0050)
};


// ScriptStruct  MagicLeapSharedWorld.MagicLeapSharedWorldSharedData
// Struct Size::0x0010
struct FMagicLeapSharedWorldSharedData
{
    TArray<FGuid>                                 PinIDs;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MagicLeapSharedWorld.MagicLeapSharedWorldAlignmentTransforms
// Struct Size::0x0010
struct FMagicLeapSharedWorldAlignmentTransforms
{
    TArray<FTransform>                            AlignmentTransforms;                                          // 0x0000(0x0010)
};


// ScriptStruct  MagicLeapSharedWorld.MagicLeapSharedWorldLocalData
// Struct Size::0x0010
struct FMagicLeapSharedWorldLocalData
{
    TArray<FMagicLeapSharedWorldPinData>          LocalPins;                                                    // 0x0000(0x0010)
};


// ScriptStruct  MagicLeapSharedWorld.MagicLeapSharedWorldPinData
// Struct Size::0x0024
struct FMagicLeapSharedWorldPinData
{
    FGuid                                         PinId;                                                        // 0x0000(0x0010)
    FMagicLeapARPinState                          PinState;                                                     // 0x0010(0x0014)
};


// ScriptStruct  ActorLayerUtilities.ActorLayer
// Struct Size::0x0008
struct FActorLayer
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  PhysXVehicles.AnimNode
// Struct Size::0x00E8
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0018]                                               // 0x00D0(0x0018)
};


// ScriptStruct  PhysXVehicles.TireConfigMaterialFriction
// Struct Size::0x0010
struct FTireConfigMaterialFriction
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    float                                         FrictionScale;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleAnimInstanceProxy
// Struct Size::0x0870
struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x0010]                                               // 0x0860(0x0010)
};


// ScriptStruct  PhysXVehicles.VehicleInputRate
// Struct Size::0x0008
struct FVehicleInputRate
{
    float                                         RiseRate;                                                     // 0x0000(0x0004)
    float                                         FallRate;                                                     // 0x0004(0x0004)
};


// ScriptStruct  PhysXVehicles.ReplicatedVehicleState
// Struct Size::0x0014
struct FReplicatedVehicleState
{
    float                                         SteeringInput;                                                // 0x0000(0x0004)
    float                                         ThrottleInput;                                                // 0x0004(0x0004)
    float                                         BrakeInput;                                                   // 0x0008(0x0004)
    float                                         HandbrakeInput;                                               // 0x000C(0x0004)
    int32_t                                       CurrentGear;                                                  // 0x0010(0x0004)
};


// ScriptStruct  PhysXVehicles.WheelSetup
// Struct Size::0x0020
struct FWheelSetup
{
    UVehicleWheel*                                WheelClass;                                                   // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    FVector                                       AdditionalOffset;                                             // 0x0010(0x000C)
    bool                                          bDisableSteering;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  PhysXVehicles.VehicleTransmissionData
// Struct Size::0x0030
struct FVehicleTransmissionData
{
    bool                                          bUseGearAutoBox;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         GearSwitchTime;                                               // 0x0004(0x0004)
    float                                         GearAutoBoxLatency;                                           // 0x0008(0x0004)
    float                                         FinalRatio;                                                   // 0x000C(0x0004)
    TArray<FVehicleGearData>                      ForwardGears;                                                 // 0x0010(0x0010)
    float                                         ReverseGearRatio;                                             // 0x0020(0x0004)
    float                                         NeutralGearUpRatio;                                           // 0x0024(0x0004)
    float                                         ClutchStrength;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleGearData
// Struct Size::0x000C
struct FVehicleGearData
{
    float                                         Ratio;                                                        // 0x0000(0x0004)
    float                                         DownRatio;                                                    // 0x0004(0x0004)
    float                                         UpRatio;                                                      // 0x0008(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleEngineData
// Struct Size::0x00A0
struct FVehicleEngineData
{
    FRuntimeFloatCurve                            TorqueCurve;                                                  // 0x0000(0x0088)
    float                                         MaxRPM;                                                       // 0x0088(0x0004)
    float                                         MOI;                                                          // 0x008C(0x0004)
    float                                         DampingRateFullThrottle;                                      // 0x0090(0x0004)
    float                                         DampingRateZeroThrottleClutchEngaged;                         // 0x0094(0x0004)
    float                                         DampingRateZeroThrottleClutchDisengaged;                      // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleDifferential4WData
// Struct Size::0x001C
struct FVehicleDifferential4WData
{
    enum class EVehicleDifferential4W             DifferentialType;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FrontRearSplit;                                               // 0x0004(0x0004)
    float                                         FrontLeftRightSplit;                                          // 0x0008(0x0004)
    float                                         RearLeftRightSplit;                                           // 0x000C(0x0004)
    float                                         CentreBias;                                                   // 0x0010(0x0004)
    float                                         FrontBias;                                                    // 0x0014(0x0004)
    float                                         RearBias;                                                     // 0x0018(0x0004)
};


// ScriptStruct  UADataTableModule.WxGameShareConfTableRow
// Struct Size::0x0028
struct FWxGameShareConfTableRow : public FTableRowBase
{
    uint32_t                                      sys;                                                          // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      act;                                                          // 0x0010(0x0004)
    uint32_t                                      content;                                                      // 0x0014(0x0004)
    TArray<FWxGameShareRewardConf>                share;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.WxGameShareRewardConf
// Struct Size::0x000C
struct FWxGameShareRewardConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.WhiteListConfTableRow
// Struct Size::0x0018
struct FWhiteListConfTableRow : public FTableRowBase
{
    uint64_t                                      GOpenID;                                                      // 0x0008(0x0008)
    uint32_t                                      Type;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WeeklyTaskRefreshConfTableRow
// Struct Size::0x0020
struct FWeeklyTaskRefreshConfTableRow : public FTableRowBase
{
    uint32_t                                      week;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FWeeklyTaskSet>                        task;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.WeeklyTaskSet
// Struct Size::0x0010
struct FWeeklyTaskSet
{
    TArray<uint32_t>                              task;                                                         // 0x0000(0x0010)
};


// ScriptStruct  UADataTableModule.WeeklyTakeOutItemConfTableRow
// Struct Size::0x00A8
struct FWeeklyTakeOutItemConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    TArray<uint32_t>                              mode;                                                         // 0x0010(0x0010)
    TArray<uint32_t>                              map;                                                          // 0x0020(0x0010)
    TArray<uint32_t>                              rule;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              difficulties;                                                 // 0x0040(0x0010)
    uint32_t                                      instigator;                                                   // 0x0050(0x0004)
    uint32_t                                      CountDownStartSeconds;                                        // 0x0054(0x0004)
    uint32_t                                      ChangeValueToCount;                                           // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              TakeOutItemIDs;                                               // 0x0060(0x0010)
    uint32_t                                      Istakein;                                                     // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         instigator;                                                   // 0x0078(0x0018)
    uint32_t                                      EquipItemType;                                                // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    TArray<uint32_t>                              EquipItemIDs;                                                 // 0x0098(0x0010)
};


// ScriptStruct  UADataTableModule.WeeklyKillTargetConfTableRow
// Struct Size::0x00F0
struct FWeeklyKillTargetConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    TArray<uint32_t>                              mode;                                                         // 0x0010(0x0010)
    TArray<uint32_t>                              map;                                                          // 0x0020(0x0010)
    TArray<uint32_t>                              rule;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              difficulties;                                                 // 0x0040(0x0010)
    uint32_t                                      instigator;                                                   // 0x0050(0x0004)
    uint32_t                                      CountDownStartSeconds;                                        // 0x0054(0x0004)
    TArray<uint32_t>                              killedplayer;                                                 // 0x0058(0x0010)
    FText                                         instigator;                                                   // 0x0068(0x0018)
    FText                                         killedplayer;                                                 // 0x0080(0x0018)
    TArray<uint32_t>                              KillerWeaponIDs;                                              // 0x0098(0x0010)
    TArray<uint32_t>                              RequireAdaptersIDs;                                           // 0x00A8(0x0010)
    uint32_t                                      EquipItemType;                                                // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<uint32_t>                              EquipItemIDs;                                                 // 0x00C0(0x0010)
    uint32_t                                      MinDistance;                                                  // 0x00D0(0x0004)
    uint32_t                                      MaxDistance;                                                  // 0x00D4(0x0004)
    TArray<uint32_t>                              EnduranceTypes;                                               // 0x00D8(0x0010)
    uint32_t                                      WeaponZoomTpye;                                               // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  UADataTableModule.WeeklyCollectItemConfTableRow
// Struct Size::0x00A8
struct FWeeklyCollectItemConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    TArray<uint32_t>                              mode;                                                         // 0x0010(0x0010)
    TArray<uint32_t>                              map;                                                          // 0x0020(0x0010)
    TArray<uint32_t>                              rule;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              difficulties;                                                 // 0x0040(0x0010)
    uint32_t                                      instigator;                                                   // 0x0050(0x0004)
    uint32_t                                      CountDownStartSeconds;                                        // 0x0054(0x0004)
    uint32_t                                      CollectionType;                                               // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              CollectItemIDs;                                               // 0x0060(0x0010)
    uint32_t                                      Istakein;                                                     // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         instigator;                                                   // 0x0078(0x0018)
    uint32_t                                      EquipItemType;                                                // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    TArray<uint32_t>                              EquipItemIDs;                                                 // 0x0098(0x0010)
};


// ScriptStruct  UADataTableModule.WeeklyClearVirtualItemConfTableRow
// Struct Size::0x0010
struct FWeeklyClearVirtualItemConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      remain;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponSkinConfTableRow
// Struct Size::0x0088
struct FWeaponSkinConfTableRow : public FTableRowBase
{
    uint32_t                                      SkinID;                                                       // 0x0008(0x0004)
    uint32_t                                      ItemId;                                                       // 0x000C(0x0004)
    uint32_t                                      SkinAssemble;                                                 // 0x0010(0x0004)
    bool                                          IsStaticMesh;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FSoftObjectPath                               MeshPathGame;                                                 // 0x0018(0x0018)
    FSoftObjectPath                               MeshPathLobby;                                                // 0x0030(0x0018)
    TArray<FSkinMaterialInfo>                     OverrideMaterials;                                            // 0x0048(0x0010)
    FSoftObjectPath                               OverrideCheckWeaponHand;                                      // 0x0058(0x0018)
    FSoftObjectPath                               OverrideCheckWeaponGun;                                       // 0x0070(0x0018)
};


// ScriptStruct  UADataTableModule.SkinMaterialInfo
// Struct Size::0x0020
struct FSkinMaterialInfo
{
    uint32_t                                      Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoftObjectPath                               OverrideMaterial;                                             // 0x0008(0x0018)
};


// ScriptStruct  UADataTableModule.WeaponRuleWDCFTableRow
// Struct Size::0x01C0
struct FWeaponRuleWDCFTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         BulletSize;                                                   // 0x0010(0x0018)
    uint32_t                                      AmmoCapacity;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint32_t>                              size;                                                         // 0x0030(0x0010)
    uint32_t                                      CanFold;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       AssembleTag;                                                  // 0x0048(0x0010)
    FString                                       SubAssembleTag;                                               // 0x0058(0x0010)
    uint64_t                                      slot;                                                         // 0x0068(0x0008)
    uint64_t                                      sub;                                                          // 0x0070(0x0008)
    TArray<FWeaponSocket>                         Sockets;                                                      // 0x0078(0x0010)
    TArray<uint32_t>                              ConflictedItemIds;                                            // 0x0088(0x0010)
    float                                         Engonomics;                                                   // 0x0098(0x0004)
    float                                         Accuracy;                                                     // 0x009C(0x0004)
    float                                         MoaScale;                                                     // 0x00A0(0x0004)
    float                                         AdsMoaX;                                                      // 0x00A4(0x0004)
    float                                         AdsMoaY;                                                      // 0x00A8(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00AC(0x0004)
    float                                         VerticalRecoil;                                               // 0x00B0(0x0004)
    float                                         SightRange;                                                   // 0x00B4(0x0004)
    float                                         MuzzleVelocity;                                               // 0x00B8(0x0004)
    uint32_t                                      RaceStrategy;                                                 // 0x00BC(0x0004)
    float                                         MaxCount;                                                     // 0x00C0(0x0004)
    float                                         Recoil;                                                       // 0x00C4(0x0004)
    float                                         ZeroDropDistance;                                             // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FText                                         TypesOfFire;                                                  // 0x00D0(0x0018)
    FText                                         Caliber;                                                      // 0x00E8(0x0018)
    FString                                       FireRate;                                                     // 0x0100(0x0010)
    FString                                       EffectiveDistance;                                            // 0x0110(0x0010)
    TArray<FString>                               FireRequireTags;                                              // 0x0120(0x0010)
    TArray<FWeaponTag>                            fi;                                                           // 0x0130(0x0010)
    TArray<FString>                               AdapterFireRequireTags;                                       // 0x0140(0x0010)
    TArray<FWeaponTag>                            ad;                                                           // 0x0150(0x0010)
    FString                                       FireRequireTagsDecrease;                                      // 0x0160(0x0010)
    TArray<FWeaponTag>                            de;                                                           // 0x0170(0x0010)
    int8_t                                        ShouldReloadByOne;                                            // 0x0180(0x0001)
    char                                          pa_0181[0x0007]                                               // 0x0181(0x0007)
    FString                                       AccessoryType;                                                // 0x0188(0x0010)
    float                                         AdapterAdjustDamage;                                          // 0x0198(0x0004)
    char                                          pa_019C[0x0004]                                               // 0x019C(0x0004)
    FString                                       Scope;                                                        // 0x01A0(0x0010)
    float                                         ReloadSpeedRatio;                                             // 0x01B0(0x0004)
    float                                         ADSMoveSpeedRatio;                                            // 0x01B4(0x0004)
    float                                         MoveSpeedRatio;                                               // 0x01B8(0x0004)
    char                                          pa_01BC[0x0004]                                               // 0x01BC(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponTag
// Struct Size::0x0020
struct FWeaponTag
{
    TArray<uint64_t>                              masks;                                                        // 0x0000(0x0010)
    TArray<uint64_t>                              Types;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponSocket
// Struct Size::0x0058
struct FWeaponSocket
{
    FString                                       SocketName;                                                   // 0x0000(0x0010)
    FText                                         PartName;                                                     // 0x0010(0x0018)
    TArray<FString>                               SupportAdapterTagList;                                        // 0x0028(0x0010)
    TArray<uint64_t>                              masks;                                                        // 0x0038(0x0010)
    TArray<uint64_t>                              Types;                                                        // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponRuleWDCTableRow
// Struct Size::0x01C0
struct FWeaponRuleWDCTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         BulletSize;                                                   // 0x0010(0x0018)
    uint32_t                                      AmmoCapacity;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint32_t>                              size;                                                         // 0x0030(0x0010)
    uint32_t                                      CanFold;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       AssembleTag;                                                  // 0x0048(0x0010)
    FString                                       SubAssembleTag;                                               // 0x0058(0x0010)
    uint64_t                                      slot;                                                         // 0x0068(0x0008)
    uint64_t                                      sub;                                                          // 0x0070(0x0008)
    TArray<FWeaponSocket>                         Sockets;                                                      // 0x0078(0x0010)
    TArray<uint32_t>                              ConflictedItemIds;                                            // 0x0088(0x0010)
    float                                         Engonomics;                                                   // 0x0098(0x0004)
    float                                         Accuracy;                                                     // 0x009C(0x0004)
    float                                         MoaScale;                                                     // 0x00A0(0x0004)
    float                                         AdsMoaX;                                                      // 0x00A4(0x0004)
    float                                         AdsMoaY;                                                      // 0x00A8(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00AC(0x0004)
    float                                         VerticalRecoil;                                               // 0x00B0(0x0004)
    float                                         SightRange;                                                   // 0x00B4(0x0004)
    float                                         MuzzleVelocity;                                               // 0x00B8(0x0004)
    uint32_t                                      RaceStrategy;                                                 // 0x00BC(0x0004)
    float                                         MaxCount;                                                     // 0x00C0(0x0004)
    float                                         Recoil;                                                       // 0x00C4(0x0004)
    float                                         ZeroDropDistance;                                             // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FText                                         TypesOfFire;                                                  // 0x00D0(0x0018)
    FText                                         Caliber;                                                      // 0x00E8(0x0018)
    FString                                       FireRate;                                                     // 0x0100(0x0010)
    FString                                       EffectiveDistance;                                            // 0x0110(0x0010)
    TArray<FString>                               FireRequireTags;                                              // 0x0120(0x0010)
    TArray<FWeaponTag>                            fi;                                                           // 0x0130(0x0010)
    TArray<FString>                               AdapterFireRequireTags;                                       // 0x0140(0x0010)
    TArray<FWeaponTag>                            ad;                                                           // 0x0150(0x0010)
    FString                                       FireRequireTagsDecrease;                                      // 0x0160(0x0010)
    TArray<FWeaponTag>                            de;                                                           // 0x0170(0x0010)
    int8_t                                        ShouldReloadByOne;                                            // 0x0180(0x0001)
    char                                          pa_0181[0x0007]                                               // 0x0181(0x0007)
    FString                                       AccessoryType;                                                // 0x0188(0x0010)
    float                                         AdapterAdjustDamage;                                          // 0x0198(0x0004)
    char                                          pa_019C[0x0004]                                               // 0x019C(0x0004)
    FString                                       Scope;                                                        // 0x01A0(0x0010)
    float                                         ReloadSpeedRatio;                                             // 0x01B0(0x0004)
    float                                         ADSMoveSpeedRatio;                                            // 0x01B4(0x0004)
    float                                         MoveSpeedRatio;                                               // 0x01B8(0x0004)
    char                                          pa_01BC[0x0004]                                               // 0x01BC(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponRuleConfTableRow
// Struct Size::0x0020
struct FWeaponRuleConfTableRow : public FTableRowBase
{
    uint32_t                                      base;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRuleConf>                             rules;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RuleConf
// Struct Size::0x0018
struct FRuleConf
{
    uint32_t                                      cond;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<uint32_t>                              cond;                                                         // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponRecommendWeaponConfTableRow
// Struct Size::0x0010
struct FWeaponRecommendWeaponConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      max;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponRecommendConfTableRow
// Struct Size::0x0020
struct FWeaponRecommendConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRecommendWeaponItemConf>              Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RecommendWeaponItemConf
// Struct Size::0x0014
struct FRecommendWeaponItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      slot;                                                         // 0x0008(0x0004)
    uint32_t                                      Parent;                                                       // 0x000C(0x0004)
    uint32_t                                      parent;                                                       // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponRecommendArgConfTableRow
// Struct Size::0x0028
struct FWeaponRecommendArgConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              Blacklist;                                                    // 0x0010(0x0010)
    uint32_t                                      design;                                                       // 0x0020(0x0004)
    uint32_t                                      ds;                                                           // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponPresetConfTableRow
// Struct Size::0x0030
struct FWeaponPresetConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      isSuper;                                                      // 0x0028(0x0004)
    uint32_t                                      baseId;                                                       // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponNumConfTableRow
// Struct Size::0x0008
struct FWeaponNumConfTableRow : public FTableRowBase
{
};


// ScriptStruct  UADataTableModule.WeaponFilterItemsConfTableRow
// Struct Size::0x0038
struct FWeaponFilterItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    TArray<uint32_t>                              arr;                                                          // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponDetailValueToAttributeTableRow
// Struct Size::0x0030
struct FWeaponDetailValueToAttributeTableRow : public FTableRowBase
{
    FString                                       DetailValueName;                                              // 0x0008(0x0010)
    FString                                       AttributeName;                                                // 0x0018(0x0010)
    uint32_t                                      ModOp;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponDetailConfTableRow
// Struct Size::0x0258
struct FWeaponDetailConfTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         BulletSize;                                                   // 0x0010(0x0018)
    TArray<uint32_t>                              size;                                                         // 0x0028(0x0010)
    FText                                         TypesOfFire;                                                  // 0x0038(0x0018)
    FString                                       FireRate;                                                     // 0x0050(0x0010)
    float                                         MuzzleVelocity;                                               // 0x0060(0x0004)
    float                                         AdapterAdjustDamage;                                          // 0x0064(0x0004)
    FText                                         FiringPowerDisplay;                                           // 0x0068(0x0018)
    float                                         Engonomics;                                                   // 0x0080(0x0004)
    float                                         Accuracy;                                                     // 0x0084(0x0004)
    float                                         ZeroDropDistance;                                             // 0x0088(0x0004)
    float                                         MoaScale;                                                     // 0x008C(0x0004)
    float                                         AdsMoaX;                                                      // 0x0090(0x0004)
    float                                         AdsMoaY;                                                      // 0x0094(0x0004)
    float                                         HorizontalRecoil;                                             // 0x0098(0x0004)
    float                                         VerticalRecoil;                                               // 0x009C(0x0004)
    float                                         Recoil;                                                       // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    FString                                       EffectiveDistance;                                            // 0x00A8(0x0010)
    float                                         ADSMoveSpeedRatio;                                            // 0x00B8(0x0004)
    float                                         MoveSpeedRatio;                                               // 0x00BC(0x0004)
    float                                         CheckMagRatio;                                                // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    FText                                         SuppressorSoundShow;                                          // 0x00C8(0x0018)
    char                                          SilencerType;                                                 // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    float                                         RunSpeedRatio;                                                // 0x00E4(0x0004)
    float                                         SprintSpeedRatio;                                             // 0x00E8(0x0004)
    float                                         SilentWalkSpeedRatio;                                         // 0x00EC(0x0004)
    float                                         AccuracyPunishRatio;                                          // 0x00F0(0x0004)
    float                                         LeanRatio;                                                    // 0x00F4(0x0004)
    int8_t                                        ShouldReloadByOne;                                            // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    uint32_t                                      CanFold;                                                      // 0x00FC(0x0004)
    FString                                       Scope;                                                        // 0x0100(0x0010)
    uint32_t                                      AmmoCapacity;                                                 // 0x0110(0x0004)
    uint32_t                                      RaceStrategy;                                                 // 0x0114(0x0004)
    FString                                       LightIntensityDisplay;                                        // 0x0118(0x0010)
    float                                         EnergyCostPerFire;                                            // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    FString                                       AdapterArmorLevel;                                            // 0x0130(0x0010)
    FText                                         Caliber;                                                      // 0x0140(0x0018)
    FString                                       AccessoryType;                                                // 0x0158(0x0010)
    float                                         ReloadSpeedRatio;                                             // 0x0168(0x0004)
    float                                         MaxCount;                                                     // 0x016C(0x0004)
    float                                         SightRange;                                                   // 0x0170(0x0004)
    float                                         SprintToIdle;                                                 // 0x0174(0x0004)
    TArray<FString>                               FireRequireTags;                                              // 0x0178(0x0010)
    TArray<FWeaponTag>                            fi;                                                           // 0x0188(0x0010)
    TArray<FString>                               AdapterFireRequireTags;                                       // 0x0198(0x0010)
    TArray<FWeaponTag>                            ad;                                                           // 0x01A8(0x0010)
    FString                                       FireRequireTagsDecrease;                                      // 0x01B8(0x0010)
    TArray<FWeaponTag>                            de;                                                           // 0x01C8(0x0010)
    FString                                       AssembleTag;                                                  // 0x01D8(0x0010)
    FString                                       SubAssembleTag;                                               // 0x01E8(0x0010)
    TArray<uint32_t>                              ConflictedItemIds;                                            // 0x01F8(0x0010)
    uint64_t                                      slot;                                                         // 0x0208(0x0008)
    uint64_t                                      sub;                                                          // 0x0210(0x0008)
    FString                                       DurabilityAccuracyCurvePath;                                  // 0x0218(0x0010)
    FString                                       DurabilityMalfunctionCurvePath;                               // 0x0228(0x0010)
    FString                                       DurabilityMoaCurvePath;                                       // 0x0238(0x0010)
    TArray<FWeaponSocket>                         Sockets;                                                      // 0x0248(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponClassifyConfTableRow
// Struct Size::0x0040
struct FWeaponClassifyConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       iconPath;                                                     // 0x0010(0x0010)
    FText                                         Name;                                                         // 0x0020(0x0018)
    uint32_t                                      ItemType;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponBulletMatchConfTableRow
// Struct Size::0x0020
struct FWeaponBulletMatchConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBulletTag>                            bullet;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BulletTag
// Struct Size::0x0010
struct FBulletTag
{
    FString                                       bullet;                                                       // 0x0000(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponAvatarSetCfgTableRow
// Struct Size::0x0028
struct FWeaponAvatarSetCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              avatar;                                                       // 0x0010(0x0010)
    uint32_t                                      SkinAssemble;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.WeaponAssembleConfTableRow
// Struct Size::0x0040
struct FWeaponAssembleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      col;                                                          // 0x000C(0x0004)
    uint32_t                                      row;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       unique;                                                       // 0x0018(0x0010)
    uint32_t                                      can;                                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FWeaponItemConf>                       Items;                                                        // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponItemConf
// Struct Size::0x0018
struct FWeaponItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      slot;                                                         // 0x0008(0x0004)
    uint32_t                                      Parent;                                                       // 0x000C(0x0004)
    uint32_t                                      parent;                                                       // 0x0010(0x0004)
    uint32_t                                      spray;                                                        // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WealthTagConfTableRow
// Struct Size::0x0020
struct FWealthTagConfTableRow : public FTableRowBase
{
    uint32_t                                      wealth;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Param;                                                        // 0x0010(0x0008)
    int32_t                                       possibility;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.WarmScoreConfTableRow
// Struct Size::0x0010
struct FWarmScoreConfTableRow : public FTableRowBase
{
    uint32_t                                      score;                                                        // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.WarmProfitConfTableRow
// Struct Size::0x0018
struct FWarmProfitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    int32_t                                       profit;                                                       // 0x000C(0x0004)
    int32_t                                       profit;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WarmLossConfTableRow
// Struct Size::0x0018
struct FWarmLossConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    int32_t                                       loss;                                                         // 0x000C(0x0004)
    int32_t                                       loss;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WarmLevelConfTableRow
// Struct Size::0x0018
struct FWarmLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      add;                                                          // 0x0010(0x0004)
    uint32_t                                      del;                                                          // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WarmExpConfTableRow
// Struct Size::0x0018
struct FWarmExpConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Exp;                                                          // 0x000C(0x0004)
    uint32_t                                      add;                                                          // 0x0010(0x0004)
    uint32_t                                      del;                                                          // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.WarmContinuousLoseConfTableRow
// Struct Size::0x0020
struct FWarmContinuousLoseConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      continuous;                                                   // 0x000C(0x0004)
    uint32_t                                      add;                                                          // 0x0010(0x0004)
    uint32_t                                      del;                                                          // 0x0014(0x0004)
    int32_t                                       extra;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.VoiceIconSoundTableRow
// Struct Size::0x0088
struct FVoiceIconSoundTableRow : public FTableRowBase
{
    int32_t                                       ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       VoiceIconPath;                                                // 0x0010(0x0010)
    FText                                         VoiceDescription;                                             // 0x0020(0x0018)
    TArray<FString>                               VoiceSoundPaths;                                              // 0x0038(0x0010)
    TArray<FString>                               WanderVoiceSoundPaths;                                        // 0x0048(0x0010)
    TArray<uint32_t>                              jump;                                                         // 0x0058(0x0010)
    FText                                         no;                                                           // 0x0068(0x0018)
    uint32_t                                      ActiveStatus;                                                 // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  UADataTableModule.ValueDistributionConfTableRow
// Struct Size::0x0028
struct FValueDistributionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Inclination;                                                  // 0x000C(0x0004)
    uint32_t                                      Gun;                                                          // 0x0010(0x0004)
    uint32_t                                      ContainerArmor;                                               // 0x0014(0x0004)
    uint32_t                                      head;                                                         // 0x0018(0x0004)
    uint32_t                                      Bullet;                                                       // 0x001C(0x0004)
    uint32_t                                      Consumables;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.UserTagVarParamTableRow
// Struct Size::0x0030
struct FUserTagVarParamTableRow : public FTableRowBase
{
    FText                                         ID;                                                           // 0x0008(0x0018)
    uint32_t                                      Param;                                                        // 0x0020(0x0004)
    uint32_t                                      Param;                                                        // 0x0024(0x0004)
    uint32_t                                      Param;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.UserTagTableRow
// Struct Size::0x0040
struct FUserTagTableRow : public FTableRowBase
{
    uint32_t                                      tag;                                                          // 0x0008(0x0004)
    uint32_t                                      tag;                                                          // 0x000C(0x0004)
    FText                                         tag;                                                          // 0x0010(0x0018)
    uint32_t                                      tag;                                                          // 0x0028(0x0004)
    uint32_t                                      tag;                                                          // 0x002C(0x0004)
    TArray<FConditionItem>                        Conditions;                                                   // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.ConditionItem
// Struct Size::0x0020
struct FConditionItem
{
    FText                                         expresion;                                                    // 0x0000(0x0018)
    uint32_t                                      Op;                                                           // 0x0018(0x0004)
    uint32_t                                      Value;                                                        // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.UpgradeUnlockTableRow
// Struct Size::0x00D0
struct FUpgradeUnlockTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      function;                                                     // 0x0010(0x0004)
    uint32_t                                      preview;                                                      // 0x0014(0x0004)
    uint32_t                                      sort;                                                         // 0x0018(0x0004)
    uint32_t                                      sys;                                                          // 0x001C(0x0004)
    FText                                         unlock;                                                       // 0x0020(0x0018)
    FText                                         preview;                                                      // 0x0038(0x0018)
    FText                                         preview;                                                      // 0x0050(0x0018)
    FText                                         label;                                                        // 0x0068(0x0018)
    FText                                         desc1;                                                        // 0x0080(0x0018)
    FString                                       image;                                                        // 0x0098(0x0010)
    FString                                       small;                                                        // 0x00A8(0x0010)
    FText                                         robot;                                                        // 0x00B8(0x0018)
};


// ScriptStruct  UADataTableModule.TrialCardConfTableRow
// Struct Size::0x0018
struct FTrialCardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      avatar;                                                       // 0x000C(0x0004)
    uint32_t                                      expire;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.TraderScaleConfTableRow
// Struct Size::0x0010
struct FTraderScaleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         DistancePercentA;                                             // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.TradeItemClassifyConfTableRow
// Struct Size::0x0060
struct FTradeItemClassifyConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      bussinessman;                                                 // 0x000C(0x0004)
    FText                                         icon;                                                         // 0x0010(0x0018)
    FText                                         Name;                                                         // 0x0028(0x0018)
    TArray<uint64_t>                              item;                                                         // 0x0040(0x0010)
    uint32_t                                      classify;                                                     // 0x0050(0x0004)
    uint32_t                                      is;                                                           // 0x0054(0x0004)
    uint32_t                                      show;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UADataTableModule.TradeHeadIconTableRow
// Struct Size::0x0030
struct FTradeHeadIconTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    FString                                       BusinessHead;                                                 // 0x0010(0x0010)
    TArray<FBusinessHeadConf>                     stage;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.BusinessHeadConf
// Struct Size::0x00F0
struct FBusinessHeadConf
{
    FString                                       Path;                                                         // 0x0000(0x0010)
    FString                                       Path;                                                         // 0x0010(0x0010)
    FString                                       Path;                                                         // 0x0020(0x0010)
    FString                                       Path;                                                         // 0x0030(0x0010)
    FString                                       Path;                                                         // 0x0040(0x0010)
    FString                                       Path;                                                         // 0x0050(0x0010)
    FString                                       Path;                                                         // 0x0060(0x0010)
    FString                                       Path;                                                         // 0x0070(0x0010)
    FString                                       Path;                                                         // 0x0080(0x0010)
    FString                                       Path;                                                         // 0x0090(0x0010)
    FString                                       Path;                                                         // 0x00A0(0x0010)
    FString                                       Path;                                                         // 0x00B0(0x0010)
    FString                                       Path;                                                         // 0x00C0(0x0010)
    FString                                       Path;                                                         // 0x00D0(0x0010)
    FString                                       Path;                                                         // 0x00E0(0x0010)
};


// ScriptStruct  UADataTableModule.TradeDialogVoiceConfTableRow
// Struct Size::0x0030
struct FTradeDialogVoiceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    FString                                       DialogTypeDef;                                                // 0x0010(0x0010)
    FString                                       AudioSourceName;                                              // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.TradeConfTableRow
// Struct Size::0x00A0
struct FTradeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    uint32_t                                      classify;                                                     // 0x0010(0x0004)
    uint32_t                                      Seq;                                                          // 0x0014(0x0004)
    uint32_t                                      loyalty;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         lock;                                                         // 0x0020(0x0018)
    uint32_t                                      is;                                                           // 0x0038(0x0004)
    uint32_t                                      task;                                                         // 0x003C(0x0004)
    uint32_t                                      businessman;                                                  // 0x0040(0x0004)
    uint32_t                                      Level;                                                        // 0x0044(0x0004)
    uint32_t                                      have;                                                         // 0x0048(0x0004)
    uint32_t                                      buy;                                                          // 0x004C(0x0004)
    FDateTime                                     refresh;                                                      // 0x0050(0x0008)
    uint32_t                                      refresh;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FDateTime                                     limit;                                                        // 0x0060(0x0008)
    uint32_t                                      limit;                                                        // 0x0068(0x0004)
    uint32_t                                      sell;                                                         // 0x006C(0x0004)
    uint32_t                                      sell;                                                         // 0x0070(0x0004)
    uint32_t                                      is;                                                           // 0x0074(0x0004)
    FText                                         sellItemName;                                                 // 0x0078(0x0018)
    TArray<FExchangeItemConf>                     exchange;                                                     // 0x0090(0x0010)
};


// ScriptStruct  UADataTableModule.ExchangeItemConf
// Struct Size::0x0008
struct FExchangeItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.TpnsPushConfTableRow
// Struct Size::0x0040
struct FTpnsPushConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Title;                                                        // 0x0010(0x0010)
    FString                                       Content;                                                      // 0x0020(0x0010)
    FString                                       ios;                                                          // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.TitleItemConfTableRow
// Struct Size::0x0070
struct FTitleItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     start;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    uint32_t                                      JumpId;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         JumpDesc;                                                     // 0x0028(0x0018)
    FText                                         CannotGetDesc;                                                // 0x0040(0x0018)
    uint32_t                                      MaxAddStarNum;                                                // 0x0058(0x0004)
    uint32_t                                      ShowNormalGetPanel;                                           // 0x005C(0x0004)
    uint32_t                                      is;                                                           // 0x0060(0x0004)
    uint32_t                                      can;                                                          // 0x0064(0x0004)
    uint32_t                                      show;                                                         // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  UADataTableModule.TicketConfTableRow
// Struct Size::0x0018
struct FTicketConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      cast;                                                         // 0x0010(0x0004)
    int32_t                                       tip;                                                          // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ThrowableWeaponDetailTableRow
// Struct Size::0x00A0
struct FThrowableWeaponDetailTableRow : public FTableRowBase
{
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
    TArray<float>                                 DelayEffect;                                                  // 0x0010(0x0010)
    FText                                         EffectRange;                                                  // 0x0020(0x0018)
    float                                         EffectTime;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FText                                         ArmorDamage;                                                  // 0x0040(0x0018)
    FText                                         Penetration;                                                  // 0x0058(0x0018)
    FText                                         PieceCount;                                                   // 0x0070(0x0018)
    FText                                         PieceType;                                                    // 0x0088(0x0018)
};


// ScriptStruct  UADataTableModule.TeamVoiceTableRow
// Struct Size::0x0078
struct FTeamVoiceTableRow : public FTableRowBase
{
    int32_t                                       ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         VoiceDesc;                                                    // 0x0010(0x0018)
    FString                                       VoicePath;                                                    // 0x0028(0x0010)
    FText                                         VoiceContent;                                                 // 0x0038(0x0018)
    FString                                       WanderPath;                                                   // 0x0050(0x0010)
    FString                                       WanderContent;                                                // 0x0060(0x0010)
    int32_t                                       VoiceType;                                                    // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  UADataTableModule.TeamVersionConfTableRow
// Struct Size::0x0020
struct FTeamVersionConfTableRow : public FTableRowBase
{
    uint32_t                                      env;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FTeamConfVersionRange>                 version;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.TeamConfVersionRange
// Struct Size::0x0020
struct FTeamConfVersionRange
{
    FString                                       min;                                                          // 0x0000(0x0010)
    FString                                       max;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.TeamTargetConfTableRow
// Struct Size::0x0028
struct FTeamTargetConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         target;                                                       // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.TeamStyleConfTableRow
// Struct Size::0x0028
struct FTeamStyleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         style;                                                        // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.TeamRatingCommConfTableRow
// Struct Size::0x0018
struct FTeamRatingCommConfTableRow : public FTableRowBase
{
    uint32_t                                      conf;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
};


// ScriptStruct  UADataTableModule.TeamRatingBattleConfTableRow
// Struct Size::0x0038
struct FTeamRatingBattleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int64_t                                       rating;                                                       // 0x0018(0x0008)
    int64_t                                       rating;                                                       // 0x0020(0x0008)
    TArray<FRatingConditionConf>                  Conditions;                                                   // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.RatingConditionConf
// Struct Size::0x0028
struct FRatingConditionConf
{
    FText                                         expression;                                                   // 0x0000(0x0018)
    uint32_t                                      Op;                                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       Val;                                                          // 0x0020(0x0008)
};


// ScriptStruct  UADataTableModule.TeamPlayerEnterConfTableRow
// Struct Size::0x0018
struct FTeamPlayerEnterConfTableRow : public FTableRowBase
{
    uint32_t                                      team;                                                         // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
    int32_t                                       tip;                                                          // 0x0010(0x0004)
    uint32_t                                      Priority;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.TeamOptionTableRow
// Struct Size::0x0030
struct FTeamOptionTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      DefaultValue;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.TeamListTableRow
// Struct Size::0x0038
struct FTeamListTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      Type;                                                         // 0x0028(0x0004)
    uint32_t                                      DefaultValue;                                                 // 0x002C(0x0004)
    uint32_t                                      Param1;                                                       // 0x0030(0x0004)
    uint32_t                                      Param2;                                                       // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.TeamLendConfTableRow
// Struct Size::0x0020
struct FTeamLendConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
    TArray<uint32_t>                              ary;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.TeamDegreeConfTableRow
// Struct Size::0x0018
struct FTeamDegreeConfTableRow : public FTableRowBase
{
    uint32_t                                      hall;                                                         // 0x0008(0x0004)
    uint32_t                                      ID;                                                           // 0x000C(0x0004)
    int32_t                                       Val;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.TeamConvenientMacthTableRow
// Struct Size::0x0038
struct FTeamConvenientMacthTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      Type;                                                         // 0x0028(0x0004)
    uint32_t                                      DefaultValue;                                                 // 0x002C(0x0004)
    uint32_t                                      Param1;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.TaskTargetGroupConfTableRow
// Struct Size::0x0018
struct FTaskTargetGroupConfTableRow : public FTableRowBase
{
    uint32_t                                      group;                                                        // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    uint32_t                                      Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.TaskTargetConfTableRow
// Struct Size::0x00A8
struct FTaskTargetConfTableRow : public FTableRowBase
{
    uint32_t                                      target;                                                       // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    FText                                         desc;                                                         // 0x0010(0x0018)
    uint32_t                                      jump;                                                         // 0x0028(0x0004)
    uint32_t                                      Progress;                                                     // 0x002C(0x0004)
    int64_t                                       Param1;                                                       // 0x0030(0x0008)
    int64_t                                       Param2;                                                       // 0x0038(0x0008)
    int64_t                                       param3;                                                       // 0x0040(0x0008)
    uint32_t                                      team;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    int64_t                                       icon;                                                         // 0x0050(0x0008)
    TArray<int64_t>                               item;                                                         // 0x0058(0x0010)
    uint32_t                                      big;                                                          // 0x0068(0x0004)
    uint32_t                                      mid;                                                          // 0x006C(0x0004)
    uint32_t                                      sub;                                                          // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FCommonItemConfItem>                   rewards;                                                      // 0x0078(0x0010)
    TArray<uint32_t>                              prev;                                                         // 0x0088(0x0010)
    uint32_t                                      prev;                                                         // 0x0098(0x0004)
    uint32_t                                      fail;                                                         // 0x009C(0x0004)
    uint32_t                                      node;                                                         // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  UADataTableModule.CommonItemConfItem
// Struct Size::0x0008
struct FCommonItemConfItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.TaskReportConfTableRow
// Struct Size::0x0068
struct FTaskReportConfTableRow : public FTableRowBase
{
    uint32_t                                      report;                                                       // 0x0008(0x0004)
    uint32_t                                      target;                                                       // 0x000C(0x0004)
    uint32_t                                      State;                                                        // 0x0010(0x0004)
    uint32_t                                      businessman;                                                  // 0x0014(0x0004)
    FText                                         Title;                                                        // 0x0018(0x0018)
    FText                                         Content;                                                      // 0x0030(0x0018)
    float                                         report;                                                       // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FText                                         sound;                                                        // 0x0050(0x0018)
};


// ScriptStruct  UADataTableModule.TaskLinkConfTableRow
// Struct Size::0x0020
struct FTaskLinkConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FActLink>                              Links;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActLink
// Struct Size::0x0008
struct FActLink
{
    uint32_t                                      link;                                                         // 0x0000(0x0004)
    uint32_t                                      Index;                                                        // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.TaskDialogueTableRow
// Struct Size::0x0058
struct FTaskDialogueTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         conversation;                                                 // 0x0010(0x0018)
    FText                                         Title;                                                        // 0x0028(0x0018)
    uint32_t                                      NPC;                                                          // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FCommonItemConfItem>                   gifts;                                                        // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.TaskConfTableRow
// Struct Size::0x0170
struct FTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      label;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         disp;                                                         // 0x0018(0x0018)
    uint32_t                                      season;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FText                                         chapter;                                                      // 0x0038(0x0018)
    uint32_t                                      disp;                                                         // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FText                                         disp;                                                         // 0x0058(0x0018)
    FText                                         disp;                                                         // 0x0070(0x0018)
    uint32_t                                      disp;                                                         // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FText                                         chapter;                                                      // 0x0090(0x0018)
    FDateTime                                     unlock;                                                       // 0x00A8(0x0008)
    TArray<FUnlockCondtionRef>                    unlock;                                                       // 0x00B0(0x0010)
    TArray<uint32_t>                              pre;                                                          // 0x00C0(0x0010)
    uint32_t                                      pre;                                                          // 0x00D0(0x0004)
    uint32_t                                      source;                                                       // 0x00D4(0x0004)
    uint32_t                                      source;                                                       // 0x00D8(0x0004)
    uint32_t                                      faction;                                                      // 0x00DC(0x0004)
    uint32_t                                      Faction;                                                      // 0x00E0(0x0004)
    uint32_t                                      show;                                                         // 0x00E4(0x0004)
    uint32_t                                      businessman;                                                  // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    TArray<FTaskTargetRefItem>                    Targets;                                                      // 0x00F0(0x0010)
    uint32_t                                      need;                                                         // 0x0100(0x0004)
    uint32_t                                      hide;                                                         // 0x0104(0x0004)
    FText                                         kw;                                                           // 0x0108(0x0018)
    uint32_t                                      gift;                                                         // 0x0120(0x0004)
    uint32_t                                      gift;                                                         // 0x0124(0x0004)
    TArray<FAwardItemConf>                        rewards;                                                      // 0x0128(0x0010)
    uint32_t                                      prev;                                                         // 0x0138(0x0004)
    uint32_t                                      reaccept;                                                     // 0x013C(0x0004)
    uint32_t                                      accept;                                                       // 0x0140(0x0004)
    uint32_t                                      finish;                                                       // 0x0144(0x0004)
    uint32_t                                      task;                                                         // 0x0148(0x0004)
    bool                                          complete;                                                     // 0x014C(0x0001)
    char                                          pa_014D[0x0003]                                               // 0x014D(0x0003)
    uint32_t                                      sort;                                                         // 0x0150(0x0004)
    uint32_t                                      activity;                                                     // 0x0154(0x0004)
    TArray<int32_t>                               reports;                                                      // 0x0158(0x0010)
    bool                                          gradually;                                                    // 0x0168(0x0001)
    char                                          pa_0169[0x0007]                                               // 0x0169(0x0007)
};


// ScriptStruct  UADataTableModule.AwardItemConf
// Struct Size::0x0010
struct FAwardItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.TaskTargetRefItem
// Struct Size::0x000C
struct FTaskTargetRefItem
{
    uint32_t                                      target;                                                       // 0x0000(0x0004)
    uint32_t                                      group;                                                        // 0x0004(0x0004)
    uint32_t                                      Property;                                                     // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.UnlockCondtionRef
// Struct Size::0x0008
struct FUnlockCondtionRef
{
    uint32_t                                      cond;                                                         // 0x0000(0x0004)
    uint32_t                                      cond;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.TaskCommitTargetConfTableRow
// Struct Size::0x0158
struct FTaskCommitTargetConfTableRow : public FTableRowBase
{
    uint32_t                                      target;                                                       // 0x0008(0x0004)
    uint32_t                                      commit;                                                       // 0x000C(0x0004)
    uint32_t                                      item;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0018(0x0010)
    uint32_t                                      big;                                                          // 0x0028(0x0004)
    uint32_t                                      mid;                                                          // 0x002C(0x0004)
    uint32_t                                      sub;                                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<uint32_t>                              size;                                                         // 0x0038(0x0010)
    TArray<uint32_t>                              size;                                                         // 0x0048(0x0010)
    TArray<uint32_t>                              size;                                                         // 0x0058(0x0010)
    uint32_t                                      is;                                                           // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<uint32_t>                              Durability;                                                   // 0x0070(0x0010)
    TArray<uint32_t>                              durability;                                                   // 0x0080(0x0010)
    TArray<uint32_t>                              Engonomics;                                                   // 0x0090(0x0010)
    TArray<uint32_t>                              Accuracy;                                                     // 0x00A0(0x0010)
    TArray<uint32_t>                              ads;                                                          // 0x00B0(0x0010)
    TArray<uint32_t>                              horizontal;                                                   // 0x00C0(0x0010)
    TArray<uint32_t>                              vertical;                                                     // 0x00D0(0x0010)
    TArray<uint32_t>                              sight;                                                        // 0x00E0(0x0010)
    TArray<uint32_t>                              muzzle;                                                       // 0x00F0(0x0010)
    TArray<uint32_t>                              max;                                                          // 0x0100(0x0010)
    TArray<uint32_t>                              Recoil;                                                       // 0x0110(0x0010)
    uint32_t                                      fire;                                                         // 0x0120(0x0004)
    uint32_t                                      Caliber;                                                      // 0x0124(0x0004)
    TArray<uint32_t>                              fire;                                                         // 0x0128(0x0010)
    TArray<uint32_t>                              effect;                                                       // 0x0138(0x0010)
    TArray<uint32_t>                              Components;                                                   // 0x0148(0x0010)
};


// ScriptStruct  UADataTableModule.TaskActTargetDescParamConfTableRow
// Struct Size::0x0028
struct FTaskActTargetDescParamConfTableRow : public FTableRowBase
{
    int64_t                                       ID;                                                           // 0x0008(0x0008)
    FText                                         desc;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.TaskActTargetDescConfTableRow
// Struct Size::0x0028
struct FTaskActTargetDescConfTableRow : public FTableRowBase
{
    uint32_t                                      target;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         target;                                                       // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.TaskActDescConfTableRow
// Struct Size::0x0058
struct FTaskActDescConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         task;                                                         // 0x0010(0x0018)
    FText                                         task;                                                         // 0x0028(0x0018)
    TArray<FAwardItemConf>                        rewards;                                                      // 0x0040(0x0010)
    uint32_t                                      need;                                                         // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.TaskActConfTableRow
// Struct Size::0x0090
struct FTaskActConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         task;                                                         // 0x0010(0x0018)
    uint32_t                                      begin;                                                        // 0x0028(0x0004)
    uint32_t                                      end;                                                          // 0x002C(0x0004)
    FString                                       begin;                                                        // 0x0030(0x0010)
    FString                                       end;                                                          // 0x0040(0x0010)
    FDateTime                                     abs;                                                          // 0x0050(0x0008)
    FDateTime                                     abs;                                                          // 0x0058(0x0008)
    TArray<FActTargetRef>                         Targets;                                                      // 0x0060(0x0010)
    TArray<FAwardItemConf>                        rewards;                                                      // 0x0070(0x0010)
    uint32_t                                      need;                                                         // 0x0080(0x0004)
    uint32_t                                      reissue;                                                      // 0x0084(0x0004)
    uint32_t                                      map;                                                          // 0x0088(0x0004)
    uint32_t                                      show;                                                         // 0x008C(0x0004)
};


// ScriptStruct  UADataTableModule.ActTargetRef
// Struct Size::0x0050
struct FActTargetRef
{
    uint32_t                                      target;                                                       // 0x0000(0x0004)
    uint32_t                                      max;                                                          // 0x0004(0x0004)
    int64_t                                       Param1;                                                       // 0x0008(0x0008)
    int64_t                                       Param2;                                                       // 0x0010(0x0008)
    int64_t                                       param3;                                                       // 0x0018(0x0008)
    int64_t                                       param4;                                                       // 0x0020(0x0008)
    FString                                       param5;                                                       // 0x0028(0x0010)
    FDateTime                                     param6;                                                       // 0x0038(0x0008)
    int64_t                                       param7;                                                       // 0x0040(0x0008)
    uint32_t                                      Difficulty;                                                   // 0x0048(0x0004)
    uint32_t                                      jump;                                                         // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.TargetArmorTableRow
// Struct Size::0x0018
struct FTargetArmorTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      unlock;                                                       // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.TagSheet2TableRow
// Struct Size::0x0038
struct FTagSheet2TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SocketName;                                                   // 0x0010(0x0010)
    FText                                         PartName;                                                     // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.TagSheet1TableRow
// Struct Size::0x0020
struct FTagSheet1TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Tag;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.TagMatchedConfTableRow
// Struct Size::0x0028
struct FTagMatchedConfTableRow : public FTableRowBase
{
    FString                                       Tag;                                                          // 0x0008(0x0010)
    TArray<uint32_t>                              matchedItemIDs;                                               // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.SurveyConfTableRow
// Struct Size::0x00C8
struct FSurveyConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Priority;                                                     // 0x000C(0x0004)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Content;                                                      // 0x0028(0x0018)
    FDateTime                                     begin;                                                        // 0x0040(0x0008)
    FDateTime                                     end;                                                          // 0x0048(0x0008)
    uint32_t                                      vaild;                                                        // 0x0050(0x0004)
    uint32_t                                      TaskId;                                                       // 0x0054(0x0004)
    FText                                         sid;                                                          // 0x0058(0x0018)
    FText                                         URL;                                                          // 0x0070(0x0018)
    FText                                         Code;                                                         // 0x0088(0x0018)
    uint32_t                                      Type;                                                         // 0x00A0(0x0004)
    uint32_t                                      cirle;                                                        // 0x00A4(0x0004)
    uint32_t                                      Limit;                                                        // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    TArray<Fitem>                                 gifts;                                                        // 0x00B0(0x0010)
    uint32_t                                      svr;                                                          // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
};


// ScriptStruct  UADataTableModule.item
// Struct Size::0x0008
struct Fitem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      item;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.SupplyCardRewardConfTableRow
// Struct Size::0x0040
struct FSupplyCardRewardConfTableRow : public FTableRowBase
{
    uint32_t                                      reward;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         reward;                                                       // 0x0010(0x0018)
    uint32_t                                      buy;                                                          // 0x0028(0x0004)
    uint32_t                                      reward;                                                       // 0x002C(0x0004)
    TArray<FRewardItem>                           immediate;                                                    // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.RewardItem
// Struct Size::0x000C
struct FRewardItem
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.SupplyCardConfTableRow
// Struct Size::0x0018
struct FSupplyCardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      reward;                                                       // 0x000C(0x0004)
    uint32_t                                      effective;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.SubsBlacklistConfTableRow
// Struct Size::0x0010
struct FSubsBlacklistConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.StreakExpTableRow
// Struct Size::0x0010
struct FStreakExpTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Exp;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.StashSlotConfTableRow
// Struct Size::0x0018
struct FStashSlotConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      money;                                                        // 0x000C(0x0004)
    uint32_t                                      money;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.StandaloneWeatherTableRow
// Struct Size::0x0028
struct FStandaloneWeatherTableRow : public FTableRowBase
{
    uint32_t                                      PlaymModeID;                                                  // 0x0008(0x0004)
    uint32_t                                      Weather1;                                                     // 0x000C(0x0004)
    uint32_t                                      Weather2;                                                     // 0x0010(0x0004)
    uint32_t                                      Weather3;                                                     // 0x0014(0x0004)
    uint32_t                                      Weather4;                                                     // 0x0018(0x0004)
    uint32_t                                      Weather5;                                                     // 0x001C(0x0004)
    uint32_t                                      Weather6;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.SprayIconTextureTableRow
// Struct Size::0x0060
struct FSprayIconTextureTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SprayIconPath;                                                // 0x0010(0x0010)
    FString                                       SprayTexture;                                                 // 0x0020(0x0010)
    TArray<uint32_t>                              jump;                                                         // 0x0030(0x0010)
    FText                                         no;                                                           // 0x0040(0x0018)
    uint32_t                                      ActiveStatus;                                                 // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UADataTableModule.SpeechConfTableRow
// Struct Size::0x0088
struct FSpeechConfTableRow : public FTableRowBase
{
    uint32_t                                      SpeechID;                                                     // 0x0008(0x0004)
    uint32_t                                      NPCID;                                                        // 0x000C(0x0004)
    TArray<uint32_t>                              Npc;                                                          // 0x0010(0x0010)
    uint32_t                                      SpeechType;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         SpeechText;                                                   // 0x0028(0x0018)
    TArray<uint32_t>                              Level;                                                        // 0x0040(0x0010)
    uint32_t                                      QuestID;                                                      // 0x0050(0x0004)
    uint32_t                                      QspeechType;                                                  // 0x0054(0x0004)
    FText                                         AudioEvent;                                                   // 0x0058(0x0018)
    FText                                         BNK;                                                          // 0x0070(0x0018)
};


// ScriptStruct  UADataTableModule.SpecialGroupIdConfTableRow
// Struct Size::0x0010
struct FSpecialGroupIdConfTableRow : public FTableRowBase
{
    uint32_t                                      Kind;                                                         // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.SoundConfTableRow
// Struct Size::0x0050
struct FSoundConfTableRow : public FTableRowBase
{
    FName                                         sound;                                                        // 0x0008(0x0008)
    FText                                         chn;                                                          // 0x0010(0x0018)
    FText                                         desc;                                                         // 0x0028(0x0018)
    FString                                       sound;                                                        // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.SkipTutorialTableRow
// Struct Size::0x0068
struct FSkipTutorialTableRow : public FTableRowBase
{
    uint32_t                                      QuestionId;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Question;                                                     // 0x0010(0x0010)
    FString                                       Option1;                                                      // 0x0020(0x0010)
    FString                                       Option2;                                                      // 0x0030(0x0010)
    FString                                       Option3;                                                      // 0x0040(0x0010)
    FString                                       Option4;                                                      // 0x0050(0x0010)
    uint32_t                                      Answer;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  UADataTableModule.SideClashConfTableRow
// Struct Size::0x0040
struct FSideClashConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    FText                                         Content;                                                      // 0x0010(0x0018)
    uint32_t                                      per;                                                          // 0x0028(0x0004)
    uint32_t                                      Limit;                                                        // 0x002C(0x0004)
    uint32_t                                      win;                                                          // 0x0030(0x0004)
    uint32_t                                      win;                                                          // 0x0034(0x0004)
    uint32_t                                      lose;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.ShowExtendConfTableRow
// Struct Size::0x0020
struct FShowExtendConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Lower;                                                        // 0x000C(0x0004)
    uint32_t                                      Upper;                                                        // 0x0010(0x0004)
    uint32_t                                      Lower;                                                        // 0x0014(0x0004)
    uint32_t                                      Upper;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.ShowDetailTableRow
// Struct Size::0x0028
struct FShowDetailTableRow : public FTableRowBase
{
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
    uint32_t                                      ShowDetailType;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ResourcePath;                                                 // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.ShockConfTableRow
// Struct Size::0x0038
struct FShockConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ShockPath;                                                    // 0x0010(0x0010)
    float                                         Duration;                                                     // 0x0020(0x0004)
    uint32_t                                      Amplitude;                                                    // 0x0024(0x0004)
    float                                         CoolDownTime;                                                 // 0x0028(0x0004)
    uint32_t                                      Default;                                                      // 0x002C(0x0004)
    uint32_t                                      Loop;                                                         // 0x0030(0x0004)
    uint32_t                                      Interval;                                                     // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.ShareTextTableRow
// Struct Size::0x0028
struct FShareTextTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    FText                                         Text;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.ShareTableRow
// Struct Size::0x0038
struct FShareTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         pic;                                                          // 0x0010(0x0018)
    FString                                       pic;                                                          // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.SetItemDuraConfTableRow
// Struct Size::0x0028
struct FSetItemDuraConfTableRow : public FTableRowBase
{
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      class;                                                        // 0x0010(0x0004)
    uint32_t                                      item;                                                         // 0x0014(0x0004)
    uint32_t                                      max;                                                          // 0x0018(0x0004)
    uint32_t                                      min;                                                          // 0x001C(0x0004)
    uint32_t                                      max;                                                          // 0x0020(0x0004)
    uint32_t                                      min;                                                          // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.ServerLimitConfTableRow
// Struct Size::0x0040
struct FServerLimitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              hourly;                                                       // 0x0010(0x0010)
    uint32_t                                      hourly;                                                       // 0x0020(0x0004)
    uint32_t                                      daily;                                                        // 0x0024(0x0004)
    uint32_t                                      weekly;                                                       // 0x0028(0x0004)
    uint32_t                                      monthly;                                                      // 0x002C(0x0004)
    uint32_t                                      season;                                                       // 0x0030(0x0004)
    uint32_t                                      permanent;                                                    // 0x0034(0x0004)
    uint32_t                                      num;                                                          // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.ServerKey2TextTableRow
// Struct Size::0x0030
struct FServerKey2TextTableRow : public FTableRowBase
{
    FString                                       ServerKey;                                                    // 0x0008(0x0010)
    FText                                         ServerText;                                                   // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.ServerInfoTableRow
// Struct Size::0x0028
struct FServerInfoTableRow : public FTableRowBase
{
    uint32_t                                      ServerCode;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Describe;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.SeasonShopConfTableRow
// Struct Size::0x0038
struct FSeasonShopConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      sell;                                                         // 0x000C(0x0004)
    uint32_t                                      sell;                                                         // 0x0010(0x0004)
    uint32_t                                      cost;                                                         // 0x0014(0x0004)
    uint32_t                                      buy;                                                          // 0x0018(0x0004)
    uint32_t                                      buy;                                                          // 0x001C(0x0004)
    uint32_t                                      ranked;                                                       // 0x0020(0x0004)
    uint32_t                                      bind;                                                         // 0x0024(0x0004)
    FDateTime                                     unlock;                                                       // 0x0028(0x0008)
    uint32_t                                      sort;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.SeasonPublicityTableRow
// Struct Size::0x0090
struct FSeasonPublicityTableRow : public FTableRowBase
{
    uint32_t                                      info;                                                         // 0x0008(0x0004)
    uint32_t                                      info;                                                         // 0x000C(0x0004)
    FString                                       info;                                                         // 0x0010(0x0010)
    FText                                         info;                                                         // 0x0020(0x0018)
    FText                                         info;                                                         // 0x0038(0x0018)
    FText                                         info;                                                         // 0x0050(0x0018)
    FText                                         info;                                                         // 0x0068(0x0018)
    FString                                       info;                                                         // 0x0080(0x0010)
};


// ScriptStruct  UADataTableModule.ScreenEffectPaddingTableRow
// Struct Size::0x0038
struct FScreenEffectPaddingTableRow : public FTableRowBase
{
    FString                                       AssetName;                                                    // 0x0008(0x0010)
    float                                         Left;                                                         // 0x0018(0x0004)
    float                                         Top;                                                          // 0x001C(0x0004)
    float                                         Right;                                                        // 0x0020(0x0004)
    float                                         Bottom;                                                       // 0x0024(0x0004)
    float                                         MarginLeft;                                                   // 0x0028(0x0004)
    float                                         MarginTop;                                                    // 0x002C(0x0004)
    float                                         MarginRight;                                                  // 0x0030(0x0004)
    float                                         MarginBottom;                                                 // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.ScopeScaleConfigTableRow
// Struct Size::0x0020
struct FScopeScaleConfigTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<FWeaponScopeScale>                     WeaponScopeScale;                                             // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.WeaponScopeScale
// Struct Size::0x0030
struct FWeaponScopeScale
{
    uint64_t                                      ID;                                                           // 0x0000(0x0008)
    FText                                         WeaponName;                                                   // 0x0008(0x0018)
    float                                         RoScale;                                                      // 0x0020(0x0004)
    float                                         LoScale;                                                      // 0x0024(0x0004)
    float                                         ADSGunKickScale;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060006TableRow
// Struct Size::0x0028
struct FScheme703060006TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060005TableRow
// Struct Size::0x0028
struct FScheme703060005TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060004TableRow
// Struct Size::0x0028
struct FScheme703060004TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060003TableRow
// Struct Size::0x0028
struct FScheme703060003TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060002TableRow
// Struct Size::0x0028
struct FScheme703060002TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.Scheme703060001TableRow
// Struct Size::0x0028
struct FScheme703060001TableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Vest;                                                         // 0x000C(0x0004)
    uint32_t                                      Armor;                                                        // 0x0010(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0014(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0018(0x0004)
    uint32_t                                      Visor;                                                        // 0x001C(0x0004)
    uint32_t                                      Headset;                                                      // 0x0020(0x0004)
    uint32_t                                      Mask;                                                         // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.ScavScoreMappingTableRow
// Struct Size::0x0010
struct FScavScoreMappingTableRow : public FTableRowBase
{
    int32_t                                       Score;                                                        // 0x0008(0x0004)
    int32_t                                       group;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ScavScoreConfTableRow
// Struct Size::0x0010
struct FScavScoreConfTableRow : public FTableRowBase
{
    uint32_t                                      score;                                                        // 0x0008(0x0004)
    int32_t                                       Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ScavExpFactorTableRow
// Struct Size::0x0020
struct FScavExpFactorTableRow : public FTableRowBase
{
    FString                                       ID;                                                           // 0x0008(0x0010)
    uint32_t                                      Factor;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.ScavEquipConfTableRow
// Struct Size::0x0030
struct FScavEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      class;                                                        // 0x0010(0x0004)
    uint32_t                                      slot;                                                         // 0x0014(0x0004)
    uint32_t                                      Weight;                                                       // 0x0018(0x0004)
    uint32_t                                      item;                                                         // 0x001C(0x0004)
    TArray<FExtEquipConf>                         exts;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ExtEquipConf
// Struct Size::0x000C
struct FExtEquipConf
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
    uint32_t                                      Type;                                                         // 0x0004(0x0004)
    uint32_t                                      Num;                                                          // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ScavContainerConfTableRow
// Struct Size::0x0020
struct FScavContainerConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Weight;                                                       // 0x000C(0x0004)
    TArray<FCntrItemConf>                         Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.CntrItemConf
// Struct Size::0x0010
struct FCntrItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      min;                                                          // 0x0008(0x0004)
    uint32_t                                      max;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ScavAIDynamicLimitTableRow
// Struct Size::0x0048
struct FScavAIDynamicLimitTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    int32_t                                       eventId;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 Weather;                                                      // 0x0028(0x0010)
    int32_t                                       ExpectedPMCPlayerNum;                                         // 0x0038(0x0004)
    float                                         ScavAIDynamicLimitStartTime;                                  // 0x003C(0x0004)
    int32_t                                       ScavLimitPerPMCPlayer;                                        // 0x0040(0x0004)
    int32_t                                       ScavLimitBase;                                                // 0x0044(0x0004)
};


// ScriptStruct  UADataTableModule.SafeLootLimitTableRow
// Struct Size::0x0020
struct FSafeLootLimitTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FLimitPoolConf>                        PoolLists;                                                    // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LimitPoolConf
// Struct Size::0x0014
struct FLimitPoolConf
{
    uint32_t                                      shield;                                                       // 0x0000(0x0004)
    uint32_t                                      sub;                                                          // 0x0004(0x0004)
    uint32_t                                      sub;                                                          // 0x0008(0x0004)
    uint32_t                                      Probability;                                                  // 0x000C(0x0004)
    uint32_t                                      pool;                                                         // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.SafeBoxConfTableRow
// Struct Size::0x0040
struct FSafeBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      container;                                                    // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    uint32_t                                      day;                                                          // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    uint32_t                                      group;                                                        // 0x0018(0x0004)
    uint32_t                                      is;                                                           // 0x001C(0x0004)
    FText                                         list;                                                         // 0x0020(0x0018)
    uint32_t                                      jump;                                                         // 0x0038(0x0004)
    uint32_t                                      price;                                                        // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.RookirTriggerSummaryConfTableRow
// Struct Size::0x0040
struct FRookirTriggerSummaryConfTableRow : public FTableRowBase
{
    uint32_t                                      trigger;                                                      // 0x0008(0x0004)
    uint32_t                                      repetition;                                                   // 0x000C(0x0004)
    FText                                         desc;                                                         // 0x0010(0x0018)
    TArray<uint32_t>                              check;                                                        // 0x0028(0x0010)
    uint32_t                                      trigger;                                                      // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.RookieTriggerTypeConfTableRow
// Struct Size::0x0060
struct FRookieTriggerTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      season;                                                       // 0x000C(0x0004)
    uint32_t                                      trigger;                                                      // 0x0010(0x0004)
    uint32_t                                      rookieTriggerType;                                            // 0x0014(0x0004)
    TArray<uint64_t>                              ItemId;                                                       // 0x0018(0x0010)
    TArray<uint32_t>                              tagid;                                                        // 0x0028(0x0010)
    uint32_t                                      traderid;                                                     // 0x0038(0x0004)
    uint32_t                                      AttachType;                                                   // 0x003C(0x0004)
    uint32_t                                      Priority;                                                     // 0x0040(0x0004)
    uint32_t                                      triggertimes;                                                 // 0x0044(0x0004)
    uint32_t                                      cdtimes;                                                      // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<uint32_t>                              List;                                                         // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.RookieTriggerIdConfTableRow
// Struct Size::0x0070
struct FRookieTriggerIdConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      season;                                                       // 0x000C(0x0004)
    uint32_t                                      trigger;                                                      // 0x0010(0x0004)
    uint32_t                                      trigger;                                                      // 0x0014(0x0004)
    uint32_t                                      is;                                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<uint64_t>                              cond;                                                         // 0x0020(0x0010)
    TArray<uint32_t>                              extra;                                                        // 0x0030(0x0010)
    char                                          trigger;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    uint32_t                                      Priority;                                                     // 0x0044(0x0004)
    uint32_t                                      triggertimes;                                                 // 0x0048(0x0004)
    uint32_t                                      cdtimes;                                                      // 0x004C(0x0004)
    FString                                       trigger;                                                      // 0x0050(0x0010)
    TArray<uint32_t>                              List;                                                         // 0x0060(0x0010)
};


// ScriptStruct  UADataTableModule.RookieTriggerConfTableRow
// Struct Size::0x0040
struct FRookieTriggerConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      arg;                                                          // 0x000C(0x0004)
    uint32_t                                      season;                                                       // 0x0010(0x0004)
    uint32_t                                      trigger;                                                      // 0x0014(0x0004)
    uint32_t                                      trigger;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    uint64_t                                      cond;                                                         // 0x0020(0x0008)
    uint32_t                                      sys;                                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FTriggerRookieItem>                    List;                                                         // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.TriggerRookieItem
// Struct Size::0x0020
struct FTriggerRookieItem
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
    uint32_t                                      break;                                                        // 0x0004(0x0004)
    TArray<uint32_t>                              get;                                                          // 0x0008(0x0010)
    uint32_t                                      ItemId;                                                       // 0x0018(0x0004)
    uint32_t                                      trade;                                                        // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.RookieTraderUnlockConfTableRow
// Struct Size::0x0028
struct FRookieTraderUnlockConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      traderid;                                                     // 0x000C(0x0004)
    uint32_t                                      season;                                                       // 0x0010(0x0004)
    uint32_t                                      trigger;                                                      // 0x0014(0x0004)
    TArray<uint32_t>                              List;                                                         // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.RookieTaskDoneConfTableRow
// Struct Size::0x0030
struct FRookieTaskDoneConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      TaskId;                                                       // 0x000C(0x0004)
    uint32_t                                      season;                                                       // 0x0010(0x0004)
    uint32_t                                      trigger;                                                      // 0x0014(0x0004)
    uint32_t                                      State;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<uint32_t>                              List;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.RookieStepConfTableRow
// Struct Size::0x0060
struct FRookieStepConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      pre;                                                          // 0x000C(0x0004)
    uint32_t                                      forceguildtype;                                               // 0x0010(0x0004)
    uint32_t                                      jump;                                                         // 0x0014(0x0004)
    uint32_t                                      break;                                                        // 0x0018(0x0004)
    uint32_t                                      protected;                                                    // 0x001C(0x0004)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    uint32_t                                      is;                                                           // 0x0024(0x0004)
    TArray<uint32_t>                              get;                                                          // 0x0028(0x0010)
    uint32_t                                      ItemId;                                                       // 0x0038(0x0004)
    uint32_t                                      trade;                                                        // 0x003C(0x0004)
    TArray<uint32_t>                              block;                                                        // 0x0040(0x0010)
    TArray<uint32_t>                              tips;                                                         // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.RookieSendItemBackConfTableRow
// Struct Size::0x0010
struct FRookieSendItemBackConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      Num;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.RookieMailReceiveConfTableRow
// Struct Size::0x0028
struct FRookieMailReceiveConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      mailType;                                                     // 0x000C(0x0004)
    uint32_t                                      season;                                                       // 0x0010(0x0004)
    uint32_t                                      trigger;                                                      // 0x0014(0x0004)
    TArray<uint32_t>                              List;                                                         // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.RookieItemPickConfTableRow
// Struct Size::0x0058
struct FRookieItemPickConfTableRow : public FTableRowBase
{
    uint32_t                                      ItemIdIndex;                                                  // 0x0008(0x0004)
    uint32_t                                      season;                                                       // 0x000C(0x0004)
    uint32_t                                      trigger;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<uint64_t>                              itemIdAndType;                                                // 0x0018(0x0010)
    uint32_t                                      classifytype;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint32_t>                              takescope;                                                    // 0x0030(0x0010)
    uint32_t                                      triggertimes;                                                 // 0x0040(0x0004)
    uint32_t                                      cdtimes;                                                      // 0x0044(0x0004)
    TArray<uint32_t>                              List;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.RookieGunCheckConfTableRow
// Struct Size::0x0028
struct FRookieGunCheckConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      ItemId;                                                       // 0x0010(0x0008)
    TArray<uint32_t>                              List;                                                         // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.RookieDetailConfTableRow
// Struct Size::0x0198
struct FRookieDetailConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         desc;                                                         // 0x0010(0x0018)
    FText                                         desc1;                                                        // 0x0028(0x0018)
    uint32_t                                      subtype;                                                      // 0x0040(0x0004)
    float                                         positionX;                                                    // 0x0044(0x0004)
    float                                         positionY;                                                    // 0x0048(0x0004)
    float                                         SizeX;                                                        // 0x004C(0x0004)
    float                                         SizeY;                                                        // 0x0050(0x0004)
    float                                         offsetX;                                                      // 0x0054(0x0004)
    uint32_t                                      unloadchecktype;                                              // 0x0058(0x0004)
    uint32_t                                      AttachType;                                                   // 0x005C(0x0004)
    uint32_t                                      CheckCondition;                                               // 0x0060(0x0004)
    float                                         EffectScale;                                                  // 0x0064(0x0004)
    uint32_t                                      buttonSizeX;                                                  // 0x0068(0x0004)
    uint32_t                                      buttonSizeY;                                                  // 0x006C(0x0004)
    FString                                       panelName;                                                    // 0x0070(0x0010)
    uint32_t                                      TaskId;                                                       // 0x0080(0x0004)
    uint32_t                                      businessId;                                                   // 0x0084(0x0004)
    uint32_t                                      classifyId;                                                   // 0x0088(0x0004)
    uint32_t                                      warehousesubid;                                               // 0x008C(0x0004)
    uint32_t                                      prepareid;                                                    // 0x0090(0x0004)
    uint32_t                                      prepareTab;                                                   // 0x0094(0x0004)
    uint32_t                                      mapRuleType;                                                  // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FString                                       btnName;                                                      // 0x00A0(0x0010)
    uint32_t                                      itemSpaceType;                                                // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FString                                       waitPanelName;                                                // 0x00B8(0x0010)
    FString                                       backPanelName;                                                // 0x00C8(0x0010)
    FString                                       waitSubPanelName;                                             // 0x00D8(0x0010)
    FString                                       waitClosePanelName;                                           // 0x00E8(0x0010)
    uint64_t                                      dragItemid;                                                   // 0x00F8(0x0008)
    uint64_t                                      ParentID;                                                     // 0x0100(0x0008)
    uint32_t                                      movieid;                                                      // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    TArray<uint32_t>                              pptid;                                                        // 0x0110(0x0010)
    uint32_t                                      pptemptyclose;                                                // 0x0120(0x0004)
    char                                          pa_0124[0x0004]                                               // 0x0124(0x0004)
    FText                                         DisplayName;                                                  // 0x0128(0x0018)
    uint32_t                                      displayType;                                                  // 0x0140(0x0004)
    char                                          pa_0144[0x0004]                                               // 0x0144(0x0004)
    FString                                       sound;                                                        // 0x0148(0x0010)
    uint32_t                                      attachCheckType;                                              // 0x0158(0x0004)
    uint32_t                                      passCheck;                                                    // 0x015C(0x0004)
    FText                                         floatTitle;                                                   // 0x0160(0x0018)
    TArray<FText>                                 floatContent;                                                 // 0x0178(0x0010)
    uint32_t                                      isfloating;                                                   // 0x0188(0x0004)
    uint32_t                                      isShowpromptly;                                               // 0x018C(0x0004)
    uint32_t                                      talkcharacter;                                                // 0x0190(0x0004)
    uint32_t                                      scrollAttachType;                                             // 0x0194(0x0004)
};


// ScriptStruct  UADataTableModule.RoleIdentityConfTableRow
// Struct Size::0x0028
struct FRoleIdentityConfTableRow : public FTableRowBase
{
    uint32_t                                      IdentityId;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Describe;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.RobotNamePoolTableRow
// Struct Size::0x0028
struct FRobotNamePoolTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Group;                                                        // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.RewardsConfTableRow
// Struct Size::0x0020
struct FRewardsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBlackItemConf>                        rewards;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BlackItemConf
// Struct Size::0x000C
struct FBlackItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.RewardShareConfTableRow
// Struct Size::0x0028
struct FRewardShareConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              avatar;                                                       // 0x0010(0x0010)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.ResourceTypeIconConfTableRow
// Struct Size::0x0028
struct FResourceTypeIconConfTableRow : public FTableRowBase
{
    uint32_t                                      typeId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       icon;                                                         // 0x0010(0x0010)
    uint32_t                                      IsDefault;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.ResourceListConfTableRow
// Struct Size::0x0050
struct FResourceListConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FString                                       icon;                                                         // 0x0028(0x0010)
    char                                          rare;                                                         // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<uint32_t>                              typeId;                                                       // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.ResourceAreaConfTableRow
// Struct Size::0x0050
struct FResourceAreaConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      MapID;                                                        // 0x000C(0x0004)
    uint32_t                                      tagid;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         TagName;                                                      // 0x0018(0x0018)
    uint32_t                                      MapVolumeId;                                                  // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<uint32_t>                              ShowLootVolumeId;                                             // 0x0038(0x0010)
    uint32_t                                      IsShowAll;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.ReportReasonConfTableRow
// Struct Size::0x0050
struct FReportReasonConfTableRow : public FTableRowBase
{
    uint32_t                                      reason;                                                       // 0x0008(0x0004)
    uint32_t                                      Category;                                                     // 0x000C(0x0004)
    TArray<uint32_t>                              use;                                                          // 0x0010(0x0010)
    FText                                         Content;                                                      // 0x0020(0x0018)
    FText                                         desc;                                                         // 0x0038(0x0018)
};


// ScriptStruct  UADataTableModule.RepairMaterialConfTableRow
// Struct Size::0x0090
struct FRepairMaterialConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         material;                                                     // 0x0010(0x0018)
    float                                         low;                                                          // 0x0028(0x0004)
    float                                         low;                                                          // 0x002C(0x0004)
    TArray<uint32_t>                              low;                                                          // 0x0030(0x0010)
    float                                         mid;                                                          // 0x0040(0x0004)
    float                                         mid;                                                          // 0x0044(0x0004)
    TArray<uint32_t>                              mid;                                                          // 0x0048(0x0010)
    float                                         high;                                                         // 0x0058(0x0004)
    float                                         high;                                                         // 0x005C(0x0004)
    TArray<uint32_t>                              high;                                                         // 0x0060(0x0010)
    float                                         unit;                                                         // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         repairability;                                                // 0x0078(0x0018)
};


// ScriptStruct  UADataTableModule.RepairDurabilityConfTableRow
// Struct Size::0x0020
struct FRepairDurabilityConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FDurabilityPriceConf>                  durability;                                                   // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DurabilityPriceConf
// Struct Size::0x0008
struct FDurabilityPriceConf
{
    uint32_t                                      armor;                                                        // 0x0000(0x0004)
    uint32_t                                      durability;                                                   // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.RegistWhiteListConfTableRow
// Struct Size::0x0018
struct FRegistWhiteListConfTableRow : public FTableRowBase
{
    uint64_t                                      GOpenID;                                                      // 0x0008(0x0008)
    uint32_t                                      ignore;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.RegistLimitConfTableRow
// Struct Size::0x0038
struct FRegistLimitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     begin;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    uint32_t                                      qq;                                                           // 0x0020(0x0004)
    uint32_t                                      qq;                                                           // 0x0024(0x0004)
    uint32_t                                      qq;                                                           // 0x0028(0x0004)
    uint32_t                                      wx;                                                           // 0x002C(0x0004)
    uint32_t                                      wx;                                                           // 0x0030(0x0004)
    uint32_t                                      wx;                                                           // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.RegistEquipConfTableRow
// Struct Size::0x0030
struct FRegistEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Index;                                                        // 0x000C(0x0004)
    uint32_t                                      item;                                                         // 0x0010(0x0004)
    uint32_t                                      Num;                                                          // 0x0014(0x0004)
    uint32_t                                      is;                                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FBlackItemConf>                        Items;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.RegionConfTableRow
// Struct Size::0x0010
struct FRegionConfTableRow : public FTableRowBase
{
    uint32_t                                      Region;                                                       // 0x0008(0x0004)
    uint32_t                                      Open;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.RedPointConfTableRow
// Struct Size::0x0028
struct FRedPointConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    TArray<uint32_t>                              sub;                                                          // 0x0010(0x0010)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.RedPacketConfTableRow
// Struct Size::0x00D0
struct FRedPacketConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      daily;                                                        // 0x000C(0x0004)
    FDateTime                                     start;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    FString                                       red;                                                          // 0x0020(0x0010)
    uint32_t                                      show;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       ntf;                                                          // 0x0038(0x0010)
    FString                                       show;                                                         // 0x0048(0x0010)
    FString                                       show;                                                         // 0x0058(0x0010)
    FString                                       show;                                                         // 0x0068(0x0010)
    uint32_t                                      show;                                                         // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       des;                                                          // 0x0080(0x0010)
    FString                                       jump;                                                         // 0x0090(0x0010)
    FString                                       Tips;                                                         // 0x00A0(0x0010)
    FString                                       msg;                                                          // 0x00B0(0x0010)
    FString                                       msg;                                                          // 0x00C0(0x0010)
};


// ScriptStruct  UADataTableModule.RechargeConfTableRow
// Struct Size::0x0018
struct FRechargeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      recharge;                                                     // 0x000C(0x0004)
    uint32_t                                      recharge;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.RankedWeekRewardConfTableRow
// Struct Size::0x0028
struct FRankedWeekRewardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      active;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FCommonItemConfItem>                   rewards;                                                      // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.RankedTopRankRewardConfTableRow
// Struct Size::0x0028
struct FRankedTopRankRewardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      start;                                                        // 0x000C(0x0004)
    uint32_t                                      end;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FCommonItemConfItem>                   rewards;                                                      // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.RankedTeamScoreConfTableRow
// Struct Size::0x0010
struct FRankedTeamScoreConfTableRow : public FTableRowBase
{
    uint32_t                                      Rank;                                                         // 0x0008(0x0004)
    uint32_t                                      Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedSettleScoreConfTableRow
// Struct Size::0x0038
struct FRankedSettleScoreConfTableRow : public FTableRowBase
{
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    uint32_t                                      kill;                                                         // 0x000C(0x0004)
    uint32_t                                      kill;                                                         // 0x0010(0x0004)
    uint32_t                                      loot;                                                         // 0x0014(0x0004)
    uint32_t                                      loot;                                                         // 0x0018(0x0004)
    uint32_t                                      survial;                                                      // 0x001C(0x0004)
    uint32_t                                      assist;                                                       // 0x0020(0x0004)
    uint32_t                                      assist;                                                       // 0x0024(0x0004)
    int32_t                                       penalty;                                                      // 0x0028(0x0004)
    int32_t                                       chall;                                                        // 0x002C(0x0004)
    int32_t                                       chall;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.RankedSeasonRewardConfTableRow
// Struct Size::0x0020
struct FRankedSeasonRewardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FCommonItemConfItem>                   rewards;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RankedSeasonConfTableRow
// Struct Size::0x0088
struct FRankedSeasonConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     begin;                                                        // 0x0010(0x0008)
    FDateTime                                     warmup;                                                       // 0x0018(0x0008)
    FDateTime                                     end;                                                          // 0x0020(0x0008)
    FDateTime                                     carnival;                                                     // 0x0028(0x0008)
    FDateTime                                     season;                                                       // 0x0030(0x0008)
    FText                                         desc;                                                         // 0x0038(0x0018)
    uint32_t                                      is;                                                           // 0x0050(0x0004)
    uint32_t                                      show;                                                         // 0x0054(0x0004)
    uint32_t                                      season;                                                       // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FDateTime                                     countdown;                                                    // 0x0060(0x0008)
    uint32_t                                      bp;                                                           // 0x0068(0x0004)
    uint32_t                                      ranked;                                                       // 0x006C(0x0004)
    uint32_t                                      badge;                                                        // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       background;                                                   // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.RankedRankingFactorConfTableRow
// Struct Size::0x0020
struct FRankedRankingFactorConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    uint32_t                                      ranking;                                                      // 0x0014(0x0004)
    uint32_t                                      ranking;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedRankingConfTableRow
// Struct Size::0x0010
struct FRankedRankingConfTableRow : public FTableRowBase
{
    uint32_t                                      conf;                                                         // 0x0008(0x0004)
    int32_t                                       Val;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedRankingBackConfTableRow
// Struct Size::0x0018
struct FRankedRankingBackConfTableRow : public FTableRowBase
{
    uint32_t                                      lower;                                                        // 0x0008(0x0004)
    uint32_t                                      upper;                                                        // 0x000C(0x0004)
    uint32_t                                      new;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.RankedMapConfTableRow
// Struct Size::0x0040
struct FRankedMapConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     begin;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    TArray<uint32_t>                              ranked;                                                       // 0x0020(0x0010)
    TArray<uint32_t>                              factor;                                                       // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.RankedLevelRangeConfTableRow
// Struct Size::0x0048
struct FRankedLevelRangeConfTableRow : public FTableRowBase
{
    uint32_t                                      rangeid;                                                      // 0x0008(0x0004)
    uint32_t                                      rangecount;                                                   // 0x000C(0x0004)
    uint32_t                                      StageId;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         main;                                                         // 0x0018(0x0018)
    FText                                         sub;                                                          // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.RankedLevelConfTableRow
// Struct Size::0x0040
struct FRankedLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    uint32_t                                      upgrade;                                                      // 0x000C(0x0004)
    FText                                         TitleDesc;                                                    // 0x0010(0x0018)
    uint32_t                                      ranking;                                                      // 0x0028(0x0004)
    uint32_t                                      icon;                                                         // 0x002C(0x0004)
    uint32_t                                      nextseason;                                                   // 0x0030(0x0004)
    uint32_t                                      dogtag;                                                       // 0x0034(0x0004)
    uint32_t                                      ranked;                                                       // 0x0038(0x0004)
    uint32_t                                      price;                                                        // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedLevelAwardConfTableRow
// Struct Size::0x0028
struct FRankedLevelAwardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      Level;                                                        // 0x0010(0x0004)
    uint32_t                                      task;                                                         // 0x0014(0x0004)
    uint32_t                                      task;                                                         // 0x0018(0x0004)
    uint32_t                                      task;                                                         // 0x001C(0x0004)
    uint32_t                                      task;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.RankedLeaderboardSaleConfTableRow
// Struct Size::0x0018
struct FRankedLeaderboardSaleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      lowindex;                                                     // 0x000C(0x0004)
    uint32_t                                      Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.RankedKillScoreConfTableRow
// Struct Size::0x0010
struct FRankedKillScoreConfTableRow : public FTableRowBase
{
    int32_t                                       ranked;                                                       // 0x0008(0x0004)
    int32_t                                       bonus;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedHistoryInfoConfTableRow
// Struct Size::0x0040
struct FRankedHistoryInfoConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         field;                                                        // 0x0010(0x0018)
    FString                                       Field;                                                        // 0x0028(0x0010)
    uint32_t                                      Type;                                                         // 0x0038(0x0004)
    uint32_t                                      Priority;                                                     // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.RankedCommonConfTableRow
// Struct Size::0x0020
struct FRankedCommonConfTableRow : public FTableRowBase
{
    uint32_t                                      Ranked;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Val;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RankedBoxConfTableRow
// Struct Size::0x0038
struct FRankedBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      equip;                                                        // 0x0010(0x0004)
    uint32_t                                      def;                                                          // 0x0014(0x0004)
    uint32_t                                      use;                                                          // 0x0018(0x0004)
    uint32_t                                      etc;                                                          // 0x001C(0x0004)
    FText                                         desc;                                                         // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.RandomForgeConfTableRow
// Struct Size::0x0020
struct FRandomForgeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
    TArray<uint32_t>                              ary;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RandClassConfTableRow
// Struct Size::0x0020
struct FRandClassConfTableRow : public FTableRowBase
{
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      class;                                                        // 0x0010(0x0004)
    uint32_t                                      Weight;                                                       // 0x0014(0x0004)
    uint32_t                                      weapon;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.QuickSortContainerPriorityTableRow
// Struct Size::0x0010
struct FQuickSortContainerPriorityTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Priority;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.QuickModeRefreshCostConfTableRow
// Struct Size::0x0058
struct FQuickModeRefreshCostConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      map;                                                          // 0x000C(0x0004)
    uint32_t                                      index;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         index;                                                        // 0x0018(0x0018)
    TArray<FRefreshCostVec>                       refresh;                                                      // 0x0030(0x0010)
    TArray<FEnterCostVec>                         enter;                                                        // 0x0040(0x0010)
    uint32_t                                      refresh;                                                      // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.EnterCostVec
// Struct Size::0x0008
struct FEnterCostVec
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      cost;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.RefreshCostVec
// Struct Size::0x0018
struct FRefreshCostVec
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<uint32_t>                              cost;                                                         // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.QuickGiveConfTableRow
// Struct Size::0x0018
struct FQuickGiveConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      sell;                                                         // 0x000C(0x0004)
    uint32_t                                      exchange;                                                     // 0x0010(0x0004)
    uint32_t                                      exchange;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.QuickChatDataStaticsTableRow
// Struct Size::0x0090
struct FQuickChatDataStaticsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Key;                                                          // 0x0010(0x0018)
    FText                                         BattleInfoTable;                                              // 0x0028(0x0018)
    FText                                         BattleInfoCalculate;                                          // 0x0040(0x0018)
    FText                                         Format;                                                       // 0x0058(0x0018)
    FText                                         Operation;                                                    // 0x0070(0x0018)
    uint32_t                                      Factor;                                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  UADataTableModule.QuickChatTableRow
// Struct Size::0x0048
struct FQuickChatTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Content;                                                      // 0x0010(0x0018)
    uint32_t                                      isLeader;                                                     // 0x0028(0x0004)
    uint32_t                                      isBattleInfo;                                                 // 0x002C(0x0004)
    FText                                         BattleInfoField;                                              // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.PurchaseConfTableRow
// Struct Size::0x00B0
struct FPurchaseConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       product;                                                      // 0x0018(0x0010)
    uint32_t                                      price;                                                        // 0x0028(0x0004)
    float                                         price;                                                        // 0x002C(0x0004)
    uint32_t                                      item;                                                         // 0x0030(0x0004)
    uint32_t                                      item;                                                         // 0x0034(0x0004)
    FText                                         item;                                                         // 0x0038(0x0018)
    FText                                         item;                                                         // 0x0050(0x0018)
    uint32_t                                      sell;                                                         // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FString                                       Style;                                                        // 0x0070(0x0010)
    FText                                         service;                                                      // 0x0080(0x0018)
    FText                                         service;                                                      // 0x0098(0x0018)
};


// ScriptStruct  UADataTableModule.ProvinceConfTableRow
// Struct Size::0x0020
struct FProvinceConfTableRow : public FTableRowBase
{
    uint32_t                                      ADCode;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ip;                                                           // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ProtectionTypeConfTableRow
// Struct Size::0x0018
struct FProtectionTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      ProtectionType;                                               // 0x0008(0x0004)
    uint32_t                                      ProtectionTime;                                               // 0x000C(0x0004)
    uint32_t                                      ProtectionDuraction;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.PrivilegeItemConfTableRow
// Struct Size::0x0060
struct FPrivilegeItemConfTableRow : public FTableRowBase
{
    uint32_t                                      active;                                                       // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         get;                                                          // 0x0010(0x0018)
    FText                                         season;                                                       // 0x0028(0x0018)
    FText                                         daily;                                                        // 0x0040(0x0018)
    uint32_t                                      Value;                                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UADataTableModule.PrivilegeDesConfTableRow
// Struct Size::0x0058
struct FPrivilegeDesConfTableRow : public FTableRowBase
{
    uint32_t                                      dataid;                                                       // 0x0008(0x0004)
    uint32_t                                      vip;                                                          // 0x000C(0x0004)
    uint32_t                                      vipsubitem;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         privilegedes;                                                 // 0x0018(0x0018)
    FText                                         bubbledes;                                                    // 0x0030(0x0018)
    FString                                       icon;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.PrivilegeConfTableRow
// Struct Size::0x0070
struct FPrivilegeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      cost;                                                         // 0x000C(0x0004)
    uint32_t                                      Duration;                                                     // 0x0010(0x0004)
    uint32_t                                      cost;                                                         // 0x0014(0x0004)
    uint32_t                                      duration2;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         icon;                                                         // 0x0020(0x0018)
    uint32_t                                      rest;                                                         // 0x0038(0x0004)
    uint32_t                                      active;                                                       // 0x003C(0x0004)
    FText                                         renewal;                                                      // 0x0040(0x0018)
    uint32_t                                      jumpgotoid;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0060(0x0010)
};


// ScriptStruct  UADataTableModule.PrivilegeBubbleConfTableRow
// Struct Size::0x0040
struct FPrivilegeBubbleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      vip;                                                          // 0x000C(0x0004)
    uint32_t                                      bubble;                                                       // 0x0010(0x0004)
    float                                         bubble;                                                       // 0x0014(0x0004)
    float                                         bubble;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         bubble;                                                       // 0x0020(0x0018)
    uint32_t                                      is;                                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.PriceConfTableRow
// Struct Size::0x0010
struct FPriceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      price;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.PoolLimitValueTableRow
// Struct Size::0x0010
struct FPoolLimitValueTableRow : public FTableRowBase
{
    uint32_t                                      pool;                                                         // 0x0008(0x0004)
    uint32_t                                      value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.PmcEquipConfTableRow
// Struct Size::0x0030
struct FPmcEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      class;                                                        // 0x0010(0x0004)
    uint32_t                                      slot;                                                         // 0x0014(0x0004)
    uint32_t                                      Weight;                                                       // 0x0018(0x0004)
    uint32_t                                      item;                                                         // 0x001C(0x0004)
    TArray<FExtEquipConf>                         exts;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.PmcContainerConfTableRow
// Struct Size::0x0020
struct FPmcContainerConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Weight;                                                       // 0x000C(0x0004)
    TArray<FCntrItemConf>                         Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.PmcAiScoreConfTableRow
// Struct Size::0x0010
struct FPmcAiScoreConfTableRow : public FTableRowBase
{
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    uint32_t                                      min;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.PmcAiLimitItemConfTableRow
// Struct Size::0x0010
struct FPmcAiLimitItemConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.PmcAiConfTableRow
// Struct Size::0x0030
struct FPmcAiConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      Openid;                                                       // 0x0010(0x0008)
    uint32_t                                      Level;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Name;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.PlayerNamePoolTableRow
// Struct Size::0x0028
struct FPlayerNamePoolTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Group;                                                        // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.PlayerListTableRow
// Struct Size::0x0058
struct FPlayerListTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      Type;                                                         // 0x0028(0x0004)
    uint32_t                                      DefaultValue;                                                 // 0x002C(0x0004)
    FString                                       Param1;                                                       // 0x0030(0x0010)
    FText                                         OptionsName;                                                  // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.PlayerAvatarPopupMenuButtonTableRow
// Struct Size::0x0060
struct FPlayerAvatarPopupMenuButtonTableRow : public FTableRowBase
{
    uint16_t                                      ID;                                                           // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    FString                                       IconName;                                                     // 0x0028(0x0010)
    char                                          displayType;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       ExecFunc;                                                     // 0x0040(0x0010)
    TArray<uint16_t>                              ForbiddenMode;                                                // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.PlayerAvatarPopupMenuTableRow
// Struct Size::0x0030
struct FPlayerAvatarPopupMenuTableRow : public FTableRowBase
{
    uint16_t                                      ID;                                                           // 0x0008(0x0002)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      sub;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<uint16_t>                              ButtonTypes;                                                  // 0x0018(0x0010)
    uint32_t                                      InviteTeamType;                                               // 0x0028(0x0004)
    uint32_t                                      AddFriendType;                                                // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.PlayModeTableRow
// Struct Size::0x0070
struct FPlayModeTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      mode;                                                         // 0x000C(0x0004)
    uint32_t                                      sub;                                                          // 0x0010(0x0004)
    uint32_t                                      map;                                                          // 0x0014(0x0004)
    uint32_t                                      rule;                                                         // 0x0018(0x0004)
    uint32_t                                      difficult;                                                    // 0x001C(0x0004)
    uint32_t                                      Time;                                                         // 0x0020(0x0004)
    uint32_t                                      base;                                                         // 0x0024(0x0004)
    uint32_t                                      day;                                                          // 0x0028(0x0004)
    uint32_t                                      day;                                                          // 0x002C(0x0004)
    uint32_t                                      time;                                                         // 0x0030(0x0004)
    uint32_t                                      min;                                                          // 0x0034(0x0004)
    uint32_t                                      max;                                                          // 0x0038(0x0004)
    uint32_t                                      max;                                                          // 0x003C(0x0004)
    uint32_t                                      pmc;                                                          // 0x0040(0x0004)
    uint32_t                                      scav;                                                         // 0x0044(0x0004)
    uint32_t                                      NormalBeginTime;                                              // 0x0048(0x0004)
    uint32_t                                      NormalBeginPersonNum;                                         // 0x004C(0x0004)
    uint32_t                                      LongTimeBeginTime;                                            // 0x0050(0x0004)
    uint32_t                                      LongTimeBeginPersonNum;                                       // 0x0054(0x0004)
    uint32_t                                      TimeoutTime;                                                  // 0x0058(0x0004)
    uint32_t                                      SpawnAIPersonPercent;                                         // 0x005C(0x0004)
    uint32_t                                      prefer;                                                       // 0x0060(0x0004)
    uint32_t                                      ds;                                                           // 0x0064(0x0004)
    uint32_t                                      Dynamic;                                                      // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  UADataTableModule.PersonalRadarMapTableRow
// Struct Size::0x0020
struct FPersonalRadarMapTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 score;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.PersonalRadarFactorTableRow
// Struct Size::0x0040
struct FPersonalRadarFactorTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         MapCoefficient;                                               // 0x000C(0x0004)
    uint32_t                                      IsSegment;                                                    // 0x0010(0x0004)
    uint32_t                                      RadarType;                                                    // 0x0014(0x0004)
    uint32_t                                      RadarDataSourceType;                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         AppendId;                                                     // 0x0020(0x0018)
    uint32_t                                      Coefficient;                                                  // 0x0038(0x0004)
    uint32_t                                      ConvertId;                                                    // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.PersonalBattleOverviewTableRow
// Struct Size::0x00B0
struct FPersonalBattleOverviewTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         ShowName;                                                     // 0x0010(0x0018)
    FString                                       Name;                                                         // 0x0028(0x0010)
    FString                                       Format;                                                       // 0x0038(0x0010)
    FText                                         Suffix;                                                       // 0x0048(0x0018)
    FText                                         desc;                                                         // 0x0060(0x0018)
    uint32_t                                      CaculateType;                                                 // 0x0078(0x0004)
    uint32_t                                      Show;                                                         // 0x007C(0x0004)
    uint32_t                                      Category;                                                     // 0x0080(0x0004)
    uint32_t                                      OuterWeight;                                                  // 0x0084(0x0004)
    uint32_t                                      SubCategory;                                                  // 0x0088(0x0004)
    uint32_t                                      Weight;                                                       // 0x008C(0x0004)
    TArray<uint64_t>                              AppendId;                                                     // 0x0090(0x0010)
    FString                                       ClientAppendId;                                               // 0x00A0(0x0010)
};


// ScriptStruct  UADataTableModule.PermitConfTableRow
// Struct Size::0x0028
struct FPermitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      check;                                                        // 0x000C(0x0004)
    uint32_t                                      check;                                                        // 0x0010(0x0004)
    uint32_t                                      check;                                                        // 0x0014(0x0004)
    TArray<uint32_t>                              env;                                                          // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.PaybackConfTableRow
// Struct Size::0x0030
struct FPaybackConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      payback;                                                      // 0x000C(0x0004)
    uint32_t                                      payback;                                                      // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    uint32_t                                      min;                                                          // 0x0018(0x0004)
    uint32_t                                      payback;                                                      // 0x001C(0x0004)
    TArray<FInflationRatio>                       inflation;                                                    // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.InflationRatio
// Struct Size::0x0008
struct FInflationRatio
{
    uint32_t                                      start;                                                        // 0x0000(0x0004)
    uint32_t                                      Ratio;                                                        // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.PPTPageConfTableRow
// Struct Size::0x0058
struct FPPTPageConfTableRow : public FTableRowBase
{
    uint32_t                                      pageID;                                                       // 0x0008(0x0004)
    uint32_t                                      umgPath;                                                      // 0x000C(0x0004)
    TArray<FString>                               animations;                                                   // 0x0010(0x0010)
    uint32_t                                      showDesc;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         Title;                                                        // 0x0028(0x0018)
    FText                                         desc;                                                         // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.OverSaleValueTableRow
// Struct Size::0x0058
struct FOverSaleValueTableRow : public FTableRowBase
{
    uint32_t                                      Item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         type;                                                         // 0x0010(0x0018)
    FText                                         sale;                                                         // 0x0028(0x0018)
    FText                                         sale;                                                         // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.OverSaleNewbieLevelTableRow
// Struct Size::0x0010
struct FOverSaleNewbieLevelTableRow : public FTableRowBase
{
    uint32_t                                      newbie;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.OverSaleLackFundTableRow
// Struct Size::0x0020
struct FOverSaleLackFundTableRow : public FTableRowBase
{
    uint32_t                                      lack;                                                         // 0x0008(0x0004)
    uint32_t                                      lack;                                                         // 0x000C(0x0004)
    uint32_t                                      lack;                                                         // 0x0010(0x0004)
    uint32_t                                      lack;                                                         // 0x0014(0x0004)
    uint32_t                                      lack;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.OverConsumptionValueTableRow
// Struct Size::0x0030
struct FOverConsumptionValueTableRow : public FTableRowBase
{
    uint32_t                                      Item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         type;                                                         // 0x0010(0x0018)
    uint32_t                                      over;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.OnShelfConfTableRow
// Struct Size::0x0010
struct FOnShelfConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      on;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ObResetEquipConfTableRow
// Struct Size::0x0028
struct FObResetEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      Num;                                                          // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    TArray<FBlackItemConf>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.ObRegistEquipConfTableRow
// Struct Size::0x0028
struct FObRegistEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      Num;                                                          // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    TArray<FBlackItemConf>                        Items;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.ObRegistBasicConfTableRow
// Struct Size::0x0020
struct FObRegistBasicConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      are;                                                          // 0x0010(0x0004)
    uint32_t                                      bullion;                                                      // 0x0014(0x0004)
    uint32_t                                      gold;                                                         // 0x0018(0x0004)
    uint32_t                                      whether;                                                      // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.ObBusinessmanBasicConfTableRow
// Struct Size::0x0010
struct FObBusinessmanBasicConfTableRow : public FTableRowBase
{
    uint32_t                                      businessman;                                                  // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.NotSubsItemConfTableRow
// Struct Size::0x0010
struct FNotSubsItemConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.NormalGachaConfTableRow
// Struct Size::0x0020
struct FNormalGachaConfTableRow : public FTableRowBase
{
    uint32_t                                      gacha;                                                        // 0x0008(0x0004)
    uint32_t                                      pool;                                                         // 0x000C(0x0004)
    uint32_t                                      cost;                                                         // 0x0010(0x0004)
    uint32_t                                      cost;                                                         // 0x0014(0x0004)
    uint32_t                                      show;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.NewbieLevelTableRow
// Struct Size::0x0010
struct FNewbieLevelTableRow : public FTableRowBase
{
    uint32_t                                      newbie;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.NewGachaConfTableRow
// Struct Size::0x0050
struct FNewGachaConfTableRow : public FTableRowBase
{
    uint32_t                                      gacha;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      Type;                                                         // 0x0028(0x0004)
    uint32_t                                      max;                                                          // 0x002C(0x0004)
    uint32_t                                      reset;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FText                                         icon;                                                         // 0x0038(0x0018)
};


// ScriptStruct  UADataTableModule.NationalFlagConfTableRow
// Struct Size::0x0040
struct FNationalFlagConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         country;                                                      // 0x0010(0x0018)
    FText                                         country;                                                      // 0x0028(0x0018)
};


// ScriptStruct  UADataTableModule.MultiModeWidgetTableRow
// Struct Size::0x0058
struct FMultiModeWidgetTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FString                                       sysIds;                                                       // 0x0028(0x0010)
    bool                                          isShowMode;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    uint32_t                                      use;                                                          // 0x003C(0x0004)
    uint32_t                                      need;                                                         // 0x0040(0x0004)
    uint32_t                                      default;                                                      // 0x0044(0x0004)
    uint32_t                                      use;                                                          // 0x0048(0x0004)
    uint32_t                                      use;                                                          // 0x004C(0x0004)
    uint32_t                                      show;                                                         // 0x0050(0x0004)
    uint32_t                                      block;                                                        // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.MomentTableRow
// Struct Size::0x0078
struct FMomentTableRow : public FTableRowBase
{
    uint32_t                                      MomentId;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         MomentTitle;                                                  // 0x0010(0x0018)
    uint32_t                                      Proportion;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FText                                         Describe;                                                     // 0x0030(0x0018)
    FText                                         UrlTitle;                                                     // 0x0048(0x0018)
    FText                                         UrlDescribe;                                                  // 0x0060(0x0018)
};


// ScriptStruct  UADataTableModule.MeticulousSmallGiftConfTableRow
// Struct Size::0x0070
struct FMeticulousSmallGiftConfTableRow : public FTableRowBase
{
    uint32_t                                      gift;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FText                                         desc;                                                         // 0x0028(0x0018)
    FText                                         pic;                                                          // 0x0040(0x0018)
    FText                                         reward;                                                       // 0x0058(0x0018)
};


// ScriptStruct  UADataTableModule.MeticulousLotteryConfTableRow
// Struct Size::0x0058
struct FMeticulousLotteryConfTableRow : public FTableRowBase
{
    uint32_t                                      gift;                                                         // 0x0008(0x0004)
    uint32_t                                      exist;                                                        // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FText                                         desc;                                                         // 0x0028(0x0018)
    FText                                         pic;                                                          // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.MeticulousGiftConfTableRow
// Struct Size::0x0078
struct FMeticulousGiftConfTableRow : public FTableRowBase
{
    uint32_t                                      gift;                                                         // 0x0008(0x0004)
    uint32_t                                      exist;                                                        // 0x000C(0x0004)
    uint32_t                                      trigger;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         Name;                                                         // 0x0018(0x0018)
    FText                                         desc;                                                         // 0x0030(0x0018)
    FText                                         pic;                                                          // 0x0048(0x0018)
    FText                                         reward;                                                       // 0x0060(0x0018)
};


// ScriptStruct  UADataTableModule.MeleeWeaponDetailTableRow
// Struct Size::0x00A8
struct FMeleeWeaponDetailTableRow : public FTableRowBase
{
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
    TArray<float>                                 BaseDamage;                                                   // 0x0010(0x0010)
    float                                         ArmorDamage;                                                  // 0x0020(0x0004)
    float                                         ArmorDamageRatio;                                             // 0x0024(0x0004)
    float                                         BleedChance;                                                  // 0x0028(0x0004)
    float                                         EnergyConsume;                                                // 0x002C(0x0004)
    FText                                         AttackSpeed;                                                  // 0x0030(0x0018)
    TArray<float>                                 DamageReduction;                                              // 0x0048(0x0010)
    float                                         TraceRange;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FText                                         BleedProbabilityDisplay;                                      // 0x0060(0x0018)
    FText                                         TraceRangeDisplay;                                            // 0x0078(0x0018)
    float                                         MeleeMoveSpeedRatio;                                          // 0x0090(0x0004)
    float                                         DamageScaleHead;                                              // 0x0094(0x0004)
    float                                         DamageScaleArms;                                              // 0x0098(0x0004)
    float                                         DamageScaleLegs;                                              // 0x009C(0x0004)
    float                                         DamageScaleStomach;                                           // 0x00A0(0x0004)
    float                                         DamageScaleChest;                                             // 0x00A4(0x0004)
};


// ScriptStruct  UADataTableModule.MedGuidePageConfTableRow
// Struct Size::0x0050
struct FMedGuidePageConfTableRow : public FTableRowBase
{
    uint32_t                                      IndexId;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       icon;                                                         // 0x0010(0x0010)
    FText                                         desc;                                                         // 0x0020(0x0018)
    TArray<uint64_t>                              CureItemId;                                                   // 0x0038(0x0010)
    uint32_t                                      ShowPage;                                                     // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.MatchRankScoreExpansionConfTableRow
// Struct Size::0x0020
struct FMatchRankScoreExpansionConfTableRow : public FTableRowBase
{
    uint32_t                                      rank;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              rank;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MatchPoolConfTableRow
// Struct Size::0x0128
struct FMatchPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      play;                                                         // 0x000C(0x0004)
    uint32_t                                      matchsvr;                                                     // 0x0010(0x0004)
    uint32_t                                      match;                                                        // 0x0014(0x0004)
    uint32_t                                      wander;                                                       // 0x0018(0x0004)
    uint32_t                                      time;                                                         // 0x001C(0x0004)
    TArray<uint32_t>                              min;                                                          // 0x0020(0x0010)
    TArray<uint32_t>                              min;                                                          // 0x0030(0x0010)
    uint32_t                                      max;                                                          // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<uint32_t>                              min;                                                          // 0x0048(0x0010)
    uint32_t                                      max;                                                          // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              min;                                                          // 0x0060(0x0010)
    uint32_t                                      max;                                                          // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<uint32_t>                              min;                                                          // 0x0078(0x0010)
    uint32_t                                      max;                                                          // 0x0088(0x0004)
    uint32_t                                      wait;                                                         // 0x008C(0x0004)
    uint32_t                                      is;                                                           // 0x0090(0x0004)
    uint32_t                                      join;                                                         // 0x0094(0x0004)
    uint32_t                                      join;                                                         // 0x0098(0x0004)
    uint32_t                                      max;                                                          // 0x009C(0x0004)
    uint32_t                                      max;                                                          // 0x00A0(0x0004)
    uint32_t                                      max;                                                          // 0x00A4(0x0004)
    uint32_t                                      min;                                                          // 0x00A8(0x0004)
    uint32_t                                      max;                                                          // 0x00AC(0x0004)
    uint32_t                                      min;                                                          // 0x00B0(0x0004)
    uint32_t                                      max;                                                          // 0x00B4(0x0004)
    TArray<uint32_t>                              rank;                                                         // 0x00B8(0x0010)
    uint32_t                                      match;                                                        // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<uint32_t>                              begin;                                                        // 0x00D0(0x0010)
    TArray<uint32_t>                              begin;                                                        // 0x00E0(0x0010)
    uint32_t                                      max;                                                          // 0x00F0(0x0004)
    uint32_t                                      max;                                                          // 0x00F4(0x0004)
    uint32_t                                      jump;                                                         // 0x00F8(0x0004)
    uint32_t                                      jump;                                                         // 0x00FC(0x0004)
    uint32_t                                      match;                                                        // 0x0100(0x0004)
    uint32_t                                      max;                                                          // 0x0104(0x0004)
    TArray<uint32_t>                              faction;                                                      // 0x0108(0x0010)
    TArray<FMatchFactionTeamConf>                 match;                                                        // 0x0118(0x0010)
};


// ScriptStruct  UADataTableModule.MatchFactionTeamConf
// Struct Size::0x0010
struct FMatchFactionTeamConf
{
    uint32_t                                      faction;                                                      // 0x0000(0x0004)
    uint32_t                                      role;                                                         // 0x0004(0x0004)
    uint32_t                                      min;                                                          // 0x0008(0x0004)
    uint32_t                                      max;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.MatchPoolConditionConfTableRow
// Struct Size::0x00A0
struct FMatchPoolConditionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      match;                                                        // 0x000C(0x0004)
    uint32_t                                      match;                                                        // 0x0010(0x0004)
    uint32_t                                      min;                                                          // 0x0014(0x0004)
    uint32_t                                      max;                                                          // 0x0018(0x0004)
    uint32_t                                      min;                                                          // 0x001C(0x0004)
    uint32_t                                      max;                                                          // 0x0020(0x0004)
    uint32_t                                      min;                                                          // 0x0024(0x0004)
    uint32_t                                      max;                                                          // 0x0028(0x0004)
    uint32_t                                      match;                                                        // 0x002C(0x0004)
    TArray<uint32_t>                              need;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              step;                                                         // 0x0040(0x0010)
    TArray<uint32_t>                              high;                                                         // 0x0050(0x0010)
    TArray<uint32_t>                              high;                                                         // 0x0060(0x0010)
    uint32_t                                      transfer;                                                     // 0x0070(0x0004)
    uint32_t                                      wealth;                                                       // 0x0074(0x0004)
    uint32_t                                      time;                                                         // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FDateTime                                     begin;                                                        // 0x0080(0x0008)
    FDateTime                                     end;                                                          // 0x0088(0x0008)
    TArray<FMatchDailyTimeConf>                   daily;                                                        // 0x0090(0x0010)
};


// ScriptStruct  UADataTableModule.MatchDailyTimeConf
// Struct Size::0x0020
struct FMatchDailyTimeConf
{
    FString                                       daily;                                                        // 0x0000(0x0010)
    FString                                       daily;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MatchMapReplaceConfTableRow
// Struct Size::0x0020
struct FMatchMapReplaceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FMatchMapReplaceItemConf>              map;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MatchMapReplaceItemConf
// Struct Size::0x0008
struct FMatchMapReplaceItemConf
{
    uint32_t                                      map;                                                          // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.MatchLineUpConfTableRow
// Struct Size::0x0020
struct FMatchLineUpConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      min;                                                          // 0x000C(0x0004)
    uint32_t                                      max;                                                          // 0x0010(0x0004)
    uint32_t                                      min;                                                          // 0x0014(0x0004)
    uint32_t                                      max;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.MatchHallTeamDegreeConfTableRow
// Struct Size::0x0018
struct FMatchHallTeamDegreeConfTableRow : public FTableRowBase
{
    uint32_t                                      match;                                                        // 0x0008(0x0004)
    uint32_t                                      ID;                                                           // 0x000C(0x0004)
    int32_t                                       Val;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.MatchFactionOpenConditionConfTableRow
// Struct Size::0x0030
struct FMatchFactionOpenConditionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              min;                                                          // 0x0010(0x0010)
    TArray<FMatchFactionOpenConf>                 match;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.MatchFactionOpenConf
// Struct Size::0x0018
struct FMatchFactionOpenConf
{
    uint32_t                                      faction;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<uint32_t>                              team;                                                         // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.MatchCommonConfTableRow
// Struct Size::0x0020
struct FMatchCommonConfTableRow : public FTableRowBase
{
    uint32_t                                      match;                                                        // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
    TArray<uint32_t>                              vec;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MarqueeConfTableRow
// Struct Size::0x0020
struct FMarqueeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Content;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MapWeatherTableRow
// Struct Size::0x0020
struct FMapWeatherTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      cur;                                                          // 0x000C(0x0004)
    TArray<FWeatherRateItem>                      weather;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.WeatherRateItem
// Struct Size::0x0008
struct FWeatherRateItem
{
    uint32_t                                      Weather;                                                      // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.MapUnlockTableRow
// Struct Size::0x0158
struct FMapUnlockTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      mode;                                                         // 0x000C(0x0004)
    uint32_t                                      sub;                                                          // 0x0010(0x0004)
    uint32_t                                      map;                                                          // 0x0014(0x0004)
    uint32_t                                      rule;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         ShowName;                                                     // 0x0020(0x0018)
    uint32_t                                      ShowIndex;                                                    // 0x0038(0x0004)
    uint32_t                                      helpJumpId;                                                   // 0x003C(0x0004)
    uint32_t                                      unlock;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<uint64_t>                              unlock;                                                       // 0x0048(0x0010)
    uint32_t                                      ticket;                                                       // 0x0058(0x0004)
    uint32_t                                      is;                                                           // 0x005C(0x0004)
    uint32_t                                      is;                                                           // 0x0060(0x0004)
    uint32_t                                      act;                                                          // 0x0064(0x0004)
    uint32_t                                      act;                                                          // 0x0068(0x0004)
    uint32_t                                      take;                                                         // 0x006C(0x0004)
    FString                                       sysIds;                                                       // 0x0070(0x0010)
    uint32_t                                      map;                                                          // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FString                                       typeIcon;                                                     // 0x0088(0x0010)
    uint32_t                                      map;                                                          // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FString                                       map;                                                          // 0x00A0(0x0010)
    uint32_t                                      ranked;                                                       // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FText                                         lockreason;                                                   // 0x00B8(0x0018)
    FText                                         lockreason;                                                   // 0x00D0(0x0018)
    TArray<uint32_t>                              all;                                                          // 0x00E8(0x0010)
    uint32_t                                      map;                                                          // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FDateTime                                     begin;                                                        // 0x0100(0x0008)
    FDateTime                                     end;                                                          // 0x0108(0x0008)
    TArray<FMapUnlockDailyTimeConf>               daily;                                                        // 0x0110(0x0010)
    TArray<uint32_t>                              all;                                                          // 0x0120(0x0010)
    uint32_t                                      map;                                                          // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    FDateTime                                     show;                                                         // 0x0138(0x0008)
    FDateTime                                     show;                                                         // 0x0140(0x0008)
    TArray<FMapShowDailyTimeConf>                 show;                                                         // 0x0148(0x0010)
};


// ScriptStruct  UADataTableModule.MapShowDailyTimeConf
// Struct Size::0x0020
struct FMapShowDailyTimeConf
{
    FString                                       daily;                                                        // 0x0000(0x0010)
    FString                                       daily;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MapUnlockDailyTimeConf
// Struct Size::0x0020
struct FMapUnlockDailyTimeConf
{
    FString                                       daily;                                                        // 0x0000(0x0010)
    FString                                       daily;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MapRuleRangeConfTableRow
// Struct Size::0x0070
struct FMapRuleRangeConfTableRow : public FTableRowBase
{
    uint32_t                                      rule;                                                         // 0x0008(0x0004)
    uint32_t                                      Index;                                                        // 0x000C(0x0004)
    uint32_t                                      show;                                                         // 0x0010(0x0004)
    uint32_t                                      rule;                                                         // 0x0014(0x0004)
    TArray<FMapUnlockDailyTimeConf>               daily;                                                        // 0x0018(0x0010)
    FText                                         rule;                                                         // 0x0028(0x0018)
    FText                                         rule;                                                         // 0x0040(0x0018)
    FText                                         rule;                                                         // 0x0058(0x0018)
};


// ScriptStruct  UADataTableModule.MapNewsInfoTableRow
// Struct Size::0x0070
struct FMapNewsInfoTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Title;                                                        // 0x0010(0x0010)
    FString                                       desc;                                                         // 0x0020(0x0010)
    FString                                       pic;                                                          // 0x0030(0x0010)
    FString                                       show;                                                         // 0x0040(0x0010)
    FString                                       show;                                                         // 0x0050(0x0010)
    uint32_t                                      Order;                                                        // 0x0060(0x0004)
    uint32_t                                      mapunlockId;                                                  // 0x0064(0x0004)
    bool                                          isPop;                                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    uint32_t                                      pop;                                                          // 0x006C(0x0004)
};


// ScriptStruct  UADataTableModule.MapLayoutTableRow
// Struct Size::0x0020
struct FMapLayoutTableRow : public FTableRowBase
{
    uint32_t                                      mapunlock;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       select;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MapGameModeConfTableRow
// Struct Size::0x0060
struct FMapGameModeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     begin;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    TArray<uint32_t>                              pmc;                                                          // 0x0020(0x0010)
    TArray<uint32_t>                              pmc;                                                          // 0x0030(0x0010)
    TArray<uint32_t>                              wander;                                                       // 0x0040(0x0010)
    TArray<uint32_t>                              wander;                                                       // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.MapDetailTableRow
// Struct Size::0x00B8
struct FMapDetailTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         map;                                                          // 0x0010(0x0018)
    FString                                       mobile;                                                       // 0x0028(0x0010)
    FText                                         Name;                                                         // 0x0038(0x0018)
    FString                                       level;                                                        // 0x0050(0x0010)
    FText                                         Picture;                                                      // 0x0060(0x0018)
    FText                                         desc;                                                         // 0x0078(0x0018)
    FVector2D                                     MapSize;                                                      // 0x0090(0x0008)
    TArray<FVector2D>                             SampleScenePoints;                                            // 0x0098(0x0010)
    TArray<FVector2D>                             SampleMapPoints;                                              // 0x00A8(0x0010)
};


// ScriptStruct  UADataTableModule.MallTagConfTableRow
// Struct Size::0x0028
struct FMallTagConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.MallSuitConfTableRow
// Struct Size::0x0058
struct FMallSuitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FText                                         desc;                                                         // 0x0028(0x0018)
    uint32_t                                      icon;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<uint32_t>                              sell;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.MallRecommendConfTableRow
// Struct Size::0x00B8
struct FMallRecommendConfTableRow : public FTableRowBase
{
    uint32_t                                      pic;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       pic;                                                          // 0x0010(0x0010)
    uint32_t                                      pic;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         pic;                                                          // 0x0028(0x0018)
    FString                                       banner;                                                       // 0x0040(0x0010)
    uint32_t                                      pic;                                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       pic;                                                          // 0x0058(0x0010)
    FString                                       video;                                                        // 0x0068(0x0010)
    FDateTime                                     pre;                                                          // 0x0078(0x0008)
    FDateTime                                     pre;                                                          // 0x0080(0x0008)
    FDateTime                                     begin;                                                        // 0x0088(0x0008)
    FDateTime                                     end;                                                          // 0x0090(0x0008)
    FString                                       item;                                                         // 0x0098(0x0010)
    uint32_t                                      item;                                                         // 0x00A8(0x0004)
    uint32_t                                      mall;                                                         // 0x00AC(0x0004)
    uint32_t                                      jump;                                                         // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  UADataTableModule.MallPrivilegeItemConfTableRow
// Struct Size::0x0010
struct FMallPrivilegeItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      privilege;                                                    // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.MallJumpConfTableRow
// Struct Size::0x0028
struct FMallJumpConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         jump;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.MallItemTagConfTableRow
// Struct Size::0x0028
struct FMallItemTagConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.MallItemQualityConfTableRow
// Struct Size::0x0020
struct FMallItemQualityConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              quality;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MallItemHighlightsConfTableRow
// Struct Size::0x0038
struct FMallItemHighlightsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FString                                       icon;                                                         // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.MallItemConfTableRow
// Struct Size::0x0138
struct FMallItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      jump;                                                         // 0x000C(0x0004)
    uint32_t                                      first;                                                        // 0x0010(0x0004)
    uint32_t                                      second;                                                       // 0x0014(0x0004)
    uint32_t                                      third;                                                        // 0x0018(0x0004)
    uint32_t                                      item;                                                         // 0x001C(0x0004)
    uint32_t                                      Seq;                                                          // 0x0020(0x0004)
    uint32_t                                      sell;                                                         // 0x0024(0x0004)
    uint32_t                                      sell;                                                         // 0x0028(0x0004)
    uint32_t                                      sell;                                                         // 0x002C(0x0004)
    uint32_t                                      sell;                                                         // 0x0030(0x0004)
    uint32_t                                      can;                                                          // 0x0034(0x0004)
    uint32_t                                      purchase;                                                     // 0x0038(0x0004)
    uint32_t                                      is;                                                           // 0x003C(0x0004)
    uint32_t                                      exchange;                                                     // 0x0040(0x0004)
    uint32_t                                      exchange;                                                     // 0x0044(0x0004)
    uint32_t                                      discount;                                                     // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     discount;                                                     // 0x0050(0x0008)
    FDateTime                                     discount;                                                     // 0x0058(0x0008)
    uint32_t                                      promotion;                                                    // 0x0060(0x0004)
    uint32_t                                      promotion;                                                    // 0x0064(0x0004)
    TArray<uint32_t>                              daily;                                                        // 0x0068(0x0010)
    TArray<uint32_t>                              daily;                                                        // 0x0078(0x0010)
    FDateTime                                     pre;                                                          // 0x0088(0x0008)
    FDateTime                                     pre;                                                          // 0x0090(0x0008)
    FDateTime                                     begin;                                                        // 0x0098(0x0008)
    FDateTime                                     end;                                                          // 0x00A0(0x0008)
    uint32_t                                      quality;                                                      // 0x00A8(0x0004)
    uint32_t                                      preview;                                                      // 0x00AC(0x0004)
    TArray<FTag>                                  tag;                                                          // 0x00B0(0x0010)
    uint32_t                                      first;                                                        // 0x00C0(0x0004)
    uint32_t                                      second;                                                       // 0x00C4(0x0004)
    uint32_t                                      third;                                                        // 0x00C8(0x0004)
    uint32_t                                      fourth;                                                       // 0x00CC(0x0004)
    uint32_t                                      buy;                                                          // 0x00D0(0x0004)
    uint32_t                                      buy;                                                          // 0x00D4(0x0004)
    uint32_t                                      need;                                                         // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FString                                       URL;                                                          // 0x00E0(0x0010)
    FString                                       need;                                                         // 0x00F0(0x0010)
    uint32_t                                      is;                                                           // 0x0100(0x0004)
    uint32_t                                      country;                                                      // 0x0104(0x0004)
    uint32_t                                      is;                                                           // 0x0108(0x0004)
    uint32_t                                      need;                                                         // 0x010C(0x0004)
    uint32_t                                      need;                                                         // 0x0110(0x0004)
    uint32_t                                      need;                                                         // 0x0114(0x0004)
    uint32_t                                      front;                                                        // 0x0118(0x0004)
    uint32_t                                      grade;                                                        // 0x011C(0x0004)
    uint32_t                                      sell;                                                         // 0x0120(0x0004)
    uint32_t                                      sell;                                                         // 0x0124(0x0004)
    FString                                       Style;                                                        // 0x0128(0x0010)
};


// ScriptStruct  UADataTableModule.Tag
// Struct Size::0x0028
struct FTag
{
    uint32_t                                      tag;                                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       tag;                                                          // 0x0008(0x0010)
    FDateTime                                     tag;                                                          // 0x0018(0x0008)
    FDateTime                                     tag;                                                          // 0x0020(0x0008)
};


// ScriptStruct  UADataTableModule.MallGradeDivisionConfTableRow
// Struct Size::0x0018
struct FMallGradeDivisionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      class;                                                        // 0x000C(0x0004)
    uint32_t                                      payment;                                                      // 0x0010(0x0004)
    uint32_t                                      grade;                                                        // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.MallClassConfTableRow
// Struct Size::0x0088
struct FMallClassConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      parent;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       icon;                                                         // 0x0030(0x0010)
    FString                                       PageType;                                                     // 0x0040(0x0010)
    uint32_t                                      parent;                                                       // 0x0050(0x0004)
    uint32_t                                      is;                                                           // 0x0054(0x0004)
    FDateTime                                     begin;                                                        // 0x0058(0x0008)
    FDateTime                                     end;                                                          // 0x0060(0x0008)
    uint32_t                                      show;                                                         // 0x0068(0x0004)
    uint32_t                                      red;                                                          // 0x006C(0x0004)
    uint32_t                                      display;                                                      // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FClassBanner>                          banner;                                                       // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.ClassBanner
// Struct Size::0x0020
struct FClassBanner
{
    FDateTime                                     begin;                                                        // 0x0000(0x0008)
    FDateTime                                     end;                                                          // 0x0008(0x0008)
    FString                                       cdn;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MailTypeConfTableRow
// Struct Size::0x0018
struct FMailTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    uint32_t                                      mail;                                                         // 0x0010(0x0004)
    uint32_t                                      extend;                                                       // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.MailConfTableRow
// Struct Size::0x0158
struct FMailConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Content;                                                      // 0x0028(0x0018)
    uint32_t                                      sender;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         sender;                                                       // 0x0048(0x0018)
    uint32_t                                      sender;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FText                                         sender;                                                       // 0x0068(0x0018)
    uint32_t                                      expire;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FDateTime                                     expire;                                                       // 0x0088(0x0008)
    uint32_t                                      auto;                                                         // 0x0090(0x0004)
    uint32_t                                      auto;                                                         // 0x0094(0x0004)
    uint32_t                                      auto;                                                         // 0x0098(0x0004)
    uint32_t                                      auto;                                                         // 0x009C(0x0004)
    uint32_t                                      through;                                                      // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    TArray<uint32_t>                              account;                                                      // 0x00A8(0x0010)
    TArray<uint32_t>                              client;                                                       // 0x00B8(0x0010)
    FString                                       client;                                                       // 0x00C8(0x0010)
    FString                                       client;                                                       // 0x00D8(0x0010)
    uint32_t                                      link;                                                         // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    FText                                         link;                                                         // 0x00F0(0x0018)
    FString                                       link;                                                         // 0x0108(0x0010)
    FText                                         link;                                                         // 0x0118(0x0018)
    TArray<FBlackItemConf>                        awards;                                                       // 0x0130(0x0010)
    FString                                       mutil;                                                        // 0x0140(0x0010)
    uint32_t                                      country;                                                      // 0x0150(0x0004)
    char                                          pa_0154[0x0004]                                               // 0x0154(0x0004)
};


// ScriptStruct  UADataTableModule.LuckyGachaConfTableRow
// Struct Size::0x0038
struct FLuckyGachaConfTableRow : public FTableRowBase
{
    uint32_t                                      gacha;                                                        // 0x0008(0x0004)
    uint32_t                                      cost;                                                         // 0x000C(0x0004)
    uint32_t                                      cost;                                                         // 0x0010(0x0004)
    uint32_t                                      ten;                                                          // 0x0014(0x0004)
    uint32_t                                      pool;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FLuckyPoolInfo>                        lucky;                                                        // 0x0020(0x0010)
    uint32_t                                      show;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.LuckyPoolInfo
// Struct Size::0x000C
struct FLuckyPoolInfo
{
    uint32_t                                      pool;                                                         // 0x0000(0x0004)
    uint32_t                                      Priority;                                                     // 0x0004(0x0004)
    uint32_t                                      lucky;                                                        // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.LotteryStepPriceConfTableRow
// Struct Size::0x0020
struct FLotteryStepPriceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              lottery;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LoseDropConfTableRow
// Struct Size::0x0010
struct FLoseDropConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LootResourceConfTableRow
// Struct Size::0x0018
struct FLootResourceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    char                                          rare;                                                         // 0x0010(0x0001)
    char                                          Priority;                                                     // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  UADataTableModule.LootReplaceConfTableRow
// Struct Size::0x0030
struct FLootReplaceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    uint32_t                                      shield;                                                       // 0x0010(0x0004)
    uint32_t                                      sub;                                                          // 0x0014(0x0004)
    uint32_t                                      sub;                                                          // 0x0018(0x0004)
    uint32_t                                      need;                                                         // 0x001C(0x0004)
    TArray<FCommonItemConfItem>                   sub;                                                          // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.LootProtectionItemsConfTableRow
// Struct Size::0x0010
struct FLootProtectionItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LootProtectionConfTableRow
// Struct Size::0x0010
struct FLootProtectionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ProtectionType;                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LootPoolConfTableRow
// Struct Size::0x0010
struct FLootPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      play;                                                         // 0x0008(0x0004)
    uint32_t                                      loot;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LootObjExpTableRow
// Struct Size::0x0018
struct FLootObjExpTableRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    int32_t                                       subtype;                                                      // 0x000C(0x0004)
    int32_t                                       loot;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.LootLimitConfTableRow
// Struct Size::0x0020
struct FLootLimitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         normal;                                                       // 0x000C(0x0004)
    float                                         redline;                                                      // 0x0010(0x0004)
    uint32_t                                      calc;                                                         // 0x0014(0x0004)
    uint32_t                                      loot;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.LootFactionItemConfTableRow
// Struct Size::0x0010
struct FLootFactionItemConfTableRow : public FTableRowBase
{
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
};


// ScriptStruct  UADataTableModule.LootDropPoolConfTableRow
// Struct Size::0x0020
struct FLootDropPoolConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<FLootDropPoolInfo>                     Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LootDropPoolInfo
// Struct Size::0x0010
struct FLootDropPoolInfo
{
    uint64_t                                      item;                                                         // 0x0000(0x0008)
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      Probability;                                                  // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LootDropOperationConfTableRow
// Struct Size::0x0020
struct FLootDropOperationConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<FActivityLootDropInfoConf>             Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActivityLootDropInfoConf
// Struct Size::0x0014
struct FActivityLootDropInfoConf
{
    uint32_t                                      activity;                                                     // 0x0000(0x0004)
    uint32_t                                      activity;                                                     // 0x0004(0x0004)
    uint32_t                                      in;                                                           // 0x0008(0x0004)
    uint32_t                                      Weather;                                                      // 0x000C(0x0004)
    uint32_t                                      pool;                                                         // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.LootDropControlConfTableRow
// Struct Size::0x0070
struct FLootDropControlConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      map;                                                          // 0x0010(0x0008)
    uint64_t                                      is;                                                           // 0x0018(0x0008)
    uint64_t                                      box;                                                          // 0x0020(0x0008)
    uint64_t                                      is;                                                           // 0x0028(0x0008)
    uint64_t                                      loot;                                                         // 0x0030(0x0008)
    uint32_t                                      activity;                                                     // 0x0038(0x0004)
    uint32_t                                      activity;                                                     // 0x003C(0x0004)
    uint32_t                                      in;                                                           // 0x0040(0x0004)
    uint32_t                                      Weather;                                                      // 0x0044(0x0004)
    TArray<uint32_t>                              commonitem;                                                   // 0x0048(0x0010)
    uint64_t                                      relace;                                                       // 0x0058(0x0008)
    TArray<uint32_t>                              pool;                                                         // 0x0060(0x0010)
};


// ScriptStruct  UADataTableModule.LootDropActivityPoolConfTableRow
// Struct Size::0x0020
struct FLootDropActivityPoolConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<FLootDropPoolInfo>                     Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LootDropActivityConfTableRow
// Struct Size::0x0050
struct FLootDropActivityConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      map;                                                          // 0x0010(0x0008)
    uint64_t                                      is;                                                           // 0x0018(0x0008)
    uint64_t                                      box;                                                          // 0x0020(0x0008)
    uint64_t                                      is;                                                           // 0x0028(0x0008)
    uint64_t                                      loot;                                                         // 0x0030(0x0008)
    uint32_t                                      activity;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FNewActivityLootDropInfoConf>          Items;                                                        // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.NewActivityLootDropInfoConf
// Struct Size::0x0020
struct FNewActivityLootDropInfoConf
{
    uint32_t                                      activity;                                                     // 0x0000(0x0004)
    uint32_t                                      activity;                                                     // 0x0004(0x0004)
    uint32_t                                      in;                                                           // 0x0008(0x0004)
    uint32_t                                      Weather;                                                      // 0x000C(0x0004)
    TArray<uint32_t>                              pool;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LootDropTableRow
// Struct Size::0x00A0
struct FLootDropTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    FString                                       desc;                                                         // 0x0010(0x0010)
    char                                          ItemType;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    uint64_t                                      ItemId;                                                       // 0x0028(0x0008)
    TArray<uint32_t>                              ItemNum;                                                      // 0x0030(0x0010)
    TArray<uint64_t>                              SubItemTable;                                                 // 0x0040(0x0010)
    uint32_t                                      Weight;                                                       // 0x0050(0x0004)
    float                                         Percent;                                                      // 0x0054(0x0004)
    float                                         RandTimes;                                                    // 0x0058(0x0004)
    float                                         WeightTimes;                                                  // 0x005C(0x0004)
    char                                          OperationType;                                                // 0x0060(0x0001)
    char                                          IsPermanent;                                                  // 0x0061(0x0001)
    char                                          pa_0062[0x0002]                                               // 0x0062(0x0002)
    uint32_t                                      ActID;                                                        // 0x0064(0x0004)
    TArray<uint64_t>                              LootPointWhite;                                               // 0x0068(0x0010)
    TArray<uint64_t>                              LootPointBlack;                                               // 0x0078(0x0010)
    FString                                       Describe;                                                     // 0x0088(0x0010)
    uint32_t                                      MaxRepeatRandomNum;                                           // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  UADataTableModule.LoginLoadingTipsTableRow
// Struct Size::0x0030
struct FLoginLoadingTipsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Tip;                                                          // 0x0010(0x0018)
    uint32_t                                      Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.LoginLoadingImageTableRow
// Struct Size::0x0028
struct FLoginLoadingImageTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Path;                                                         // 0x0010(0x0010)
    uint32_t                                      Weight;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.LoginControlConfTableRow
// Struct Size::0x0038
struct FLoginControlConfTableRow : public FTableRowBase
{
    uint32_t                                      env;                                                          // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    FDateTime                                     open;                                                         // 0x0010(0x0008)
    FDateTime                                     close;                                                        // 0x0018(0x0008)
    uint32_t                                      force;                                                        // 0x0020(0x0004)
    uint32_t                                      force;                                                        // 0x0024(0x0004)
    TArray<FConfVersionRange>                     version;                                                      // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.ConfVersionRange
// Struct Size::0x0020
struct FConfVersionRange
{
    FString                                       min;                                                          // 0x0000(0x0010)
    FString                                       max;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.LocalizationConf
// Struct Size::0x0008
struct FLocalizationConf : public FTableRowBase
{
};


// ScriptStruct  UADataTableModule.LocalizationConfTableRow
// Struct Size::0x0040
struct FLocalizationConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         EnumName;                                                     // 0x0010(0x0018)
    FText                                         LocalizedText;                                                // 0x0028(0x0018)
};


// ScriptStruct  UADataTableModule.LoadingTipsTableRow
// Struct Size::0x0048
struct FLoadingTipsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ModelID;                                                      // 0x000C(0x0004)
    uint32_t                                      MapID;                                                        // 0x0010(0x0004)
    uint32_t                                      RuleID;                                                       // 0x0014(0x0004)
    uint32_t                                      ActivityID;                                                   // 0x0018(0x0004)
    uint32_t                                      Activityweight;                                               // 0x001C(0x0004)
    float                                         MinWealthy;                                                   // 0x0020(0x0004)
    float                                         MaxWealthy;                                                   // 0x0024(0x0004)
    uint32_t                                      MinLevel;                                                     // 0x0028(0x0004)
    uint32_t                                      MaxLevel;                                                     // 0x002C(0x0004)
    float                                         MinEscapeProbability;                                         // 0x0030(0x0004)
    float                                         MaxEscapeProbability;                                         // 0x0034(0x0004)
    TArray<FTipItem>                              Tips;                                                         // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.TipItem
// Struct Size::0x0020
struct FTipItem
{
    FText                                         Tips;                                                         // 0x0000(0x0018)
    uint32_t                                      Weight;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.LoadingImageTableRow
// Struct Size::0x0030
struct FLoadingImageTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ModelID;                                                      // 0x000C(0x0004)
    uint32_t                                      MapID;                                                        // 0x0010(0x0004)
    uint32_t                                      RuleID;                                                       // 0x0014(0x0004)
    uint32_t                                      ActivityID;                                                   // 0x0018(0x0004)
    uint32_t                                      Activityweight;                                               // 0x001C(0x0004)
    TArray<FImageRefItem>                         ImageRef;                                                     // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ImageRefItem
// Struct Size::0x0018
struct FImageRefItem
{
    uint32_t                                      ImageType;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Path;                                                         // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.LevelConfTableRow
// Struct Size::0x0040
struct FLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      PMCExpPerLevel;                                               // 0x0010(0x0008)
    uint64_t                                      PMCExpTotal;                                                  // 0x0018(0x0008)
    uint32_t                                      PMCIcon;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    uint64_t                                      ScavExpPerLevel;                                              // 0x0028(0x0008)
    uint64_t                                      ScavExpTotal;                                                 // 0x0030(0x0008)
    uint32_t                                      ScavIcon;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.LeaderboardDesConfTableRow
// Struct Size::0x0080
struct FLeaderboardDesConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         titledes;                                                     // 0x0010(0x0018)
    FText                                         tipdes;                                                       // 0x0028(0x0018)
    uint32_t                                      Type;                                                         // 0x0040(0x0004)
    uint32_t                                      is;                                                           // 0x0044(0x0004)
    uint32_t                                      specialtype;                                                  // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FText                                         titlecountdes;                                                // 0x0050(0x0018)
    FText                                         nogetnumdes;                                                  // 0x0068(0x0018)
};


// ScriptStruct  UADataTableModule.LbsTitleConfTableRow
// Struct Size::0x0010
struct FLbsTitleConfTableRow : public FTableRowBase
{
    uint32_t                                      rank;                                                         // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.LackFundTableRow
// Struct Size::0x0020
struct FLackFundTableRow : public FTableRowBase
{
    uint32_t                                      lack;                                                         // 0x0008(0x0004)
    uint32_t                                      lack;                                                         // 0x000C(0x0004)
    uint32_t                                      lack;                                                         // 0x0010(0x0004)
    uint32_t                                      lack;                                                         // 0x0014(0x0004)
    uint32_t                                      lack;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.KeyContainerConfTableRow
// Struct Size::0x0040
struct FKeyContainerConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      container;                                                    // 0x000C(0x0004)
    uint32_t                                      show;                                                         // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    uint32_t                                      group;                                                        // 0x0018(0x0004)
    uint32_t                                      is;                                                           // 0x001C(0x0004)
    FText                                         list;                                                         // 0x0020(0x0018)
    uint32_t                                      jump;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.JumpGotoCfgTableRow
// Struct Size::0x00C0
struct FJumpGotoCfgTableRow : public FTableRowBase
{
    uint32_t                                      jump;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         jump;                                                         // 0x0010(0x0018)
    FText                                         jump;                                                         // 0x0028(0x0018)
    FText                                         Command;                                                      // 0x0040(0x0018)
    FText                                         jump;                                                         // 0x0058(0x0018)
    FText                                         Param;                                                        // 0x0070(0x0018)
    FText                                         open;                                                         // 0x0088(0x0018)
    uint32_t                                      display;                                                      // 0x00A0(0x0004)
    uint32_t                                      replace;                                                      // 0x00A4(0x0004)
    FText                                         display;                                                      // 0x00A8(0x0018)
};


// ScriptStruct  UADataTableModule.ItemValueLevelConfTableRow
// Struct Size::0x0010
struct FItemValueLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      value;                                                        // 0x0008(0x0004)
    uint32_t                                      min;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ItemStackFactionConfTableRow
// Struct Size::0x0010
struct FItemStackFactionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ItemSortTableRow
// Struct Size::0x0020
struct FItemSortTableRow : public FTableRowBase
{
    uint64_t                                      item;                                                         // 0x0008(0x0008)
    FString                                       icon;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ItemShareConfTableRow
// Struct Size::0x0048
struct FItemShareConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       iconUrl;                                                      // 0x0010(0x0010)
    FString                                       bgUrl;                                                        // 0x0020(0x0010)
    uint32_t                                      itemShareType;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FText>                                 extraDesc;                                                    // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.ItemPriceGearTableRow
// Struct Size::0x0018
struct FItemPriceGearTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      PriceRange;                                                   // 0x000C(0x0004)
    uint32_t                                      Step;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ItemInflationTypeTableRow
// Struct Size::0x0018
struct FItemInflationTypeTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      low;                                                          // 0x000C(0x0004)
    uint32_t                                      high;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ItemFactoryTableRow
// Struct Size::0x0038
struct FItemFactoryTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         factory;                                                      // 0x0010(0x0018)
    FString                                       iconPath;                                                     // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.ItemEffectConfTableRow
// Struct Size::0x0048
struct FItemEffectConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      effect;                                                       // 0x000C(0x0004)
    uint32_t                                      auto;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FExchangeEffect>                       exchange;                                                     // 0x0018(0x0010)
    uint32_t                                      privilege;                                                    // 0x0028(0x0004)
    uint32_t                                      privilege;                                                    // 0x002C(0x0004)
    uint32_t                                      bp;                                                           // 0x0030(0x0004)
    uint32_t                                      bp;                                                           // 0x0034(0x0004)
    uint32_t                                      auction;                                                      // 0x0038(0x0004)
    uint32_t                                      auction;                                                      // 0x003C(0x0004)
    uint32_t                                      auction;                                                      // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  UADataTableModule.ExchangeEffect
// Struct Size::0x0010
struct FExchangeEffect
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      change;                                                       // 0x0008(0x0004)
    uint32_t                                      change;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ItemDynamicPriceTableRow
// Struct Size::0x0018
struct FItemDynamicPriceTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      y;                                                            // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    uint32_t                                      inflation;                                                    // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ItemConfTableRow
// Struct Size::0x0120
struct FItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FText                                         ShortName;                                                    // 0x0028(0x0018)
    uint32_t                                      IconId;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         Describe;                                                     // 0x0048(0x0018)
    int32_t                                       SizeX;                                                        // 0x0060(0x0004)
    int32_t                                       SizeY;                                                        // 0x0064(0x0004)
    float                                         Weight;                                                       // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FString                                       pickup;                                                       // 0x0070(0x0010)
    FString                                       use;                                                          // 0x0080(0x0010)
    FString                                       drop;                                                         // 0x0090(0x0010)
    uint32_t                                      sell;                                                         // 0x00A0(0x0004)
    uint32_t                                      sell;                                                         // 0x00A4(0x0004)
    uint32_t                                      can;                                                          // 0x00A8(0x0004)
    uint32_t                                      standard;                                                     // 0x00AC(0x0004)
    uint32_t                                      StackMax;                                                     // 0x00B0(0x0004)
    int32_t                                       TakeInCount;                                                  // 0x00B4(0x0004)
    FDateTime                                     expire;                                                       // 0x00B8(0x0008)
    TArray<FCommonItemConfItem>                   compensate;                                                   // 0x00C0(0x0010)
    uint32_t                                      not;                                                          // 0x00D0(0x0004)
    uint32_t                                      Bind;                                                         // 0x00D4(0x0004)
    uint32_t                                      rarity;                                                       // 0x00D8(0x0004)
    uint32_t                                      Durability;                                                   // 0x00DC(0x0004)
    int32_t                                       UseExp;                                                       // 0x00E0(0x0004)
    int32_t                                       LootExp;                                                      // 0x00E4(0x0004)
    TArray<char>                                  RejectSlot;                                                   // 0x00E8(0x0010)
    TArray<uint32_t>                              RejectItems;                                                  // 0x00F8(0x0010)
    uint32_t                                      sort;                                                         // 0x0108(0x0004)
    uint32_t                                      jump;                                                         // 0x010C(0x0004)
    int32_t                                       PackageFlags;                                                 // 0x0110(0x0004)
    uint32_t                                      FactoryId;                                                    // 0x0114(0x0004)
    uint32_t                                      is;                                                           // 0x0118(0x0004)
    uint32_t                                      RarityColor;                                                  // 0x011C(0x0004)
};


// ScriptStruct  UADataTableModule.ItemComponentsIconTableRow
// Struct Size::0x0048
struct FItemComponentsIconTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         component;                                                    // 0x0010(0x0018)
    FString                                       icon;                                                         // 0x0028(0x0010)
    FString                                       icon;                                                         // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.ItemClassifyGroupConfTableRow
// Struct Size::0x0028
struct FItemClassifyGroupConfTableRow : public FTableRowBase
{
    char                                          ID;                                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<uint64_t>                              Types;                                                        // 0x0010(0x0010)
    char                                          SortOrder;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  UADataTableModule.ItemCheckWhiteListConfTableRow
// Struct Size::0x0010
struct FItemCheckWhiteListConfTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ItemCategoryIconPathTableRow
// Struct Size::0x0040
struct FItemCategoryIconPathTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         category;                                                     // 0x0010(0x0018)
    uint32_t                                      seg;                                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       icon;                                                         // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.IpListConfTableRow
// Struct Size::0x0038
struct FIpListConfTableRow : public FTableRowBase
{
    FText                                         ip;                                                           // 0x0008(0x0018)
    FText                                         ip;                                                           // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.IpAreaConfTableRow
// Struct Size::0x0010
struct FIpAreaConfTableRow : public FTableRowBase
{
    uint32_t                                      country;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.IpAlertListConfTableRow
// Struct Size::0x0038
struct FIpAlertListConfTableRow : public FTableRowBase
{
    FText                                         ip;                                                           // 0x0008(0x0018)
    FText                                         ip;                                                           // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.InsureTypeConfTableRow
// Struct Size::0x0018
struct FInsureTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      insuretime;                                                   // 0x000C(0x0004)
    uint32_t                                      insuretime;                                                   // 0x0010(0x0004)
    uint32_t                                      lootinglocktime;                                              // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.InsureQualityProbConfTableRow
// Struct Size::0x0010
struct FInsureQualityProbConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      prob;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.InsureCommonItemConfTableRow
// Struct Size::0x0020
struct FInsureCommonItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              price;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.InsureCommonAccConfTableRow
// Struct Size::0x0020
struct FInsureCommonAccConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              price;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.InsureCombineItemConfTableRow
// Struct Size::0x0020
struct FInsureCombineItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              price;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.InnerGameActConfTableRow
// Struct Size::0x00D0
struct FInnerGameActConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      is;                                                           // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FDateTime                                     begin;                                                        // 0x0030(0x0008)
    FDateTime                                     end;                                                          // 0x0038(0x0008)
    uint32_t                                      inner;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         json;                                                         // 0x0048(0x0018)
    FText                                         notice;                                                       // 0x0060(0x0018)
    FText                                         des;                                                          // 0x0078(0x0018)
    TArray<uint32_t>                              gameplay;                                                     // 0x0090(0x0010)
    TArray<uint32_t>                              weekly;                                                       // 0x00A0(0x0010)
    TArray<FDailyTimeConf>                        daily;                                                        // 0x00B0(0x0010)
    TArray<FOpenMapModeConf>                      open;                                                         // 0x00C0(0x0010)
};


// ScriptStruct  UADataTableModule.OpenMapModeConf
// Struct Size::0x0008
struct FOpenMapModeConf
{
    uint32_t                                      map;                                                          // 0x0000(0x0004)
    uint32_t                                      time;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.DailyTimeConf
// Struct Size::0x0030
struct FDailyTimeConf
{
    FText                                         daily;                                                        // 0x0000(0x0018)
    FText                                         daily;                                                        // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.IconScaleConfTableRow
// Struct Size::0x0010
struct FIconScaleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         DistancePercentA;                                             // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.HotUpdateGlobalConfTableRow
// Struct Size::0x0018
struct FHotUpdateGlobalConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
};


// ScriptStruct  UADataTableModule.HighRatioScavConfTableRow
// Struct Size::0x0048
struct FHighRatioScavConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    uint32_t                                      ID;                                                           // 0x000C(0x0004)
    uint32_t                                      conf;                                                         // 0x0010(0x0004)
    int32_t                                       conf;                                                         // 0x0014(0x0004)
    TArray<FHighRatioConfVector>                  conf;                                                         // 0x0018(0x0010)
    FDateTime                                     begin;                                                        // 0x0028(0x0008)
    FDateTime                                     end;                                                          // 0x0030(0x0008)
    TArray<FHighRatioScavDailyTimeConf>           daily;                                                        // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.HighRatioScavDailyTimeConf
// Struct Size::0x0020
struct FHighRatioScavDailyTimeConf
{
    FString                                       daily;                                                        // 0x0000(0x0010)
    FString                                       daily;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.HighRatioConfVector
// Struct Size::0x0008
struct FHighRatioConfVector
{
    uint32_t                                      Param1;                                                       // 0x0000(0x0004)
    int32_t                                       Param2;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.HelperConfTableRow
// Struct Size::0x0048
struct FHelperConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      Index;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         Title;                                                        // 0x0018(0x0018)
    FText                                         desc;                                                         // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.HelpRootTypeConfTableRow
// Struct Size::0x0028
struct FHelpRootTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.HelpEntryInfoConfTableRow
// Struct Size::0x0038
struct FHelpEntryInfoConfTableRow : public FTableRowBase
{
    uint32_t                                      entry;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         main;                                                         // 0x0010(0x0018)
    TArray<FTabDetailItem>                        tab;                                                          // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.TabDetailItem
// Struct Size::0x0020
struct FTabDetailItem
{
    FText                                         tab;                                                          // 0x0000(0x0018)
    uint32_t                                      ppt;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.HelpDialogConfTableRow
// Struct Size::0x0088
struct FHelpDialogConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         Title;                                                        // 0x0010(0x0018)
    uint32_t                                      rewardId;                                                     // 0x0028(0x0004)
    uint32_t                                      canGetTime;                                                   // 0x002C(0x0004)
    uint32_t                                      rootType;                                                     // 0x0030(0x0004)
    uint32_t                                      sortIndex;                                                    // 0x0034(0x0004)
    uint32_t                                      functioncontrolId;                                            // 0x0038(0x0004)
    uint32_t                                      unlockLevel;                                                  // 0x003C(0x0004)
    uint32_t                                      isHidden;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<uint32_t>                              triggerIds;                                                   // 0x0048(0x0010)
    TArray<uint32_t>                              mediaArray;                                                   // 0x0058(0x0010)
    TArray<FH5MediaItem>                          h5Media;                                                      // 0x0068(0x0010)
    TArray<FHelpDialogContentItem>                Content;                                                      // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.HelpDialogContentItem
// Struct Size::0x0038
struct FHelpDialogContentItem
{
    FText                                         contentTitle;                                                 // 0x0000(0x0018)
    uint32_t                                      pageIndex;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         contentText;                                                  // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.H5MediaItem
// Struct Size::0x0020
struct FH5MediaItem
{
    FString                                       h5BgIcon;                                                     // 0x0000(0x0010)
    FString                                       h5Url;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.HealthThresholdTableRow
// Struct Size::0x0058
struct FHealthThresholdTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         State;                                                        // 0x0010(0x0018)
    uint32_t                                      Hierarchy;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FText                                         Content;                                                      // 0x0030(0x0018)
    uint32_t                                      Parameter;                                                    // 0x0048(0x0004)
    uint32_t                                      Alert;                                                        // 0x004C(0x0004)
    uint32_t                                      Priority;                                                     // 0x0050(0x0004)
    uint32_t                                      LevelLimit;                                                   // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.HeadConfTableRow
// Struct Size::0x0020
struct FHeadConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      price;                                                        // 0x000C(0x0004)
    uint32_t                                      Helmet;                                                       // 0x0010(0x0004)
    uint32_t                                      Visor;                                                        // 0x0014(0x0004)
    uint32_t                                      Headset;                                                      // 0x0018(0x0004)
    uint32_t                                      Mask;                                                         // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.HeadBoxItemConfTableRow
// Struct Size::0x0048
struct FHeadBoxItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      Display;                                                      // 0x0010(0x0004)
    uint32_t                                      jump;                                                         // 0x0014(0x0004)
    FText                                         obtain;                                                       // 0x0018(0x0018)
    uint32_t                                      Order;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FDateTime                                     start;                                                        // 0x0038(0x0008)
    FDateTime                                     end;                                                          // 0x0040(0x0008)
};


// ScriptStruct  UADataTableModule.HardwareBenchmarkScoreTableRow
// Struct Size::0x0028
struct FHardwareBenchmarkScoreTableRow : public FTableRowBase
{
    uint32_t                                      HardwareId;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       HardwareName;                                                 // 0x0010(0x0010)
    float                                         CpuScore;                                                     // 0x0020(0x0004)
    float                                         GpuScore;                                                     // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.GuaranteedUseAttrTableRow
// Struct Size::0x0028
struct FGuaranteedUseAttrTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      guaranteed;                                                   // 0x000C(0x0004)
    int32_t                                       attr;                                                         // 0x0010(0x0004)
    int32_t                                       extra;                                                        // 0x0014(0x0004)
    TArray<FGuaranteedConditions>                 guaranteed;                                                   // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.GuaranteedConditions
// Struct Size::0x0018
struct FGuaranteedConditions
{
    uint32_t                                      tag;                                                          // 0x0000(0x0004)
    uint32_t                                      attr;                                                         // 0x0004(0x0004)
    int64_t                                       attr;                                                         // 0x0008(0x0008)
    int64_t                                       attr;                                                         // 0x0010(0x0008)
};


// ScriptStruct  UADataTableModule.GuaranteedPoolConfTableRow
// Struct Size::0x0020
struct FGuaranteedPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      guaranteed;                                                   // 0x0008(0x0004)
    uint32_t                                      defalut;                                                      // 0x000C(0x0004)
    uint32_t                                      max;                                                          // 0x0010(0x0004)
    uint32_t                                      min;                                                          // 0x0014(0x0004)
    uint32_t                                      stage;                                                        // 0x0018(0x0004)
    uint32_t                                      stage;                                                        // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.GuaranteedItemConfTableRow
// Struct Size::0x0020
struct FGuaranteedItemConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    TArray<FWeaponItemConf>                       guaranteed;                                                   // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GuaranteeLimitStrategyTableRow
// Struct Size::0x0028
struct FGuaranteeLimitStrategyTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      shield;                                                       // 0x000C(0x0004)
    uint32_t                                      sub;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<uint32_t>                              sub;                                                          // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.GuaranteeGenItemTableRow
// Struct Size::0x0028
struct FGuaranteeGenItemTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      gen;                                                          // 0x000C(0x0004)
    uint32_t                                      gen;                                                          // 0x0010(0x0004)
    uint32_t                                      Weight;                                                       // 0x0014(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.GuaranteeContainerTableRow
// Struct Size::0x0028
struct FGuaranteeContainerTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      play;                                                         // 0x000C(0x0004)
    uint32_t                                      lootpoint;                                                    // 0x0010(0x0004)
    uint32_t                                      guarantee;                                                    // 0x0014(0x0004)
    uint32_t                                      Value;                                                        // 0x0018(0x0004)
    uint32_t                                      check;                                                        // 0x001C(0x0004)
    uint32_t                                      gen;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.GuaranteeCheckItemTableRow
// Struct Size::0x0018
struct FGuaranteeCheckItemTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      check;                                                        // 0x000C(0x0004)
    uint32_t                                      check;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.GoldenScavConfTableRow
// Struct Size::0x0040
struct FGoldenScavConfTableRow : public FTableRowBase
{
    uint32_t                                      conf;                                                         // 0x0008(0x0004)
    int32_t                                       conf;                                                         // 0x000C(0x0004)
    TArray<FConfVector>                           conf;                                                         // 0x0010(0x0010)
    FDateTime                                     begin;                                                        // 0x0020(0x0008)
    FDateTime                                     end;                                                          // 0x0028(0x0008)
    TArray<FGoldenScavDailyTimeConf>              daily;                                                        // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.GoldenScavDailyTimeConf
// Struct Size::0x0020
struct FGoldenScavDailyTimeConf
{
    FString                                       daily;                                                        // 0x0000(0x0010)
    FString                                       daily;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ConfVector
// Struct Size::0x0008
struct FConfVector
{
    uint32_t                                      Param1;                                                       // 0x0000(0x0004)
    int32_t                                       Param2;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.GoldDogTagConfTableRow
// Struct Size::0x0020
struct FGoldDogTagConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    FString                                       bgUrl;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GlobalNumConfTableRow
// Struct Size::0x0008
struct FGlobalNumConfTableRow : public FTableRowBase
{
};


// ScriptStruct  UADataTableModule.GlobalConfTableRow
// Struct Size::0x0060
struct FGlobalConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
    TArray<uint64_t>                              ary;                                                          // 0x0018(0x0010)
    TArray<int64_t>                               iary;                                                         // 0x0028(0x0010)
    FText                                         Str;                                                          // 0x0038(0x0018)
    TArray<FGlobalDailyTimeConf>                  daily;                                                        // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.GlobalDailyTimeConf
// Struct Size::0x0018
struct FGlobalDailyTimeConf
{
    FText                                         daily;                                                        // 0x0000(0x0018)
};


// ScriptStruct  UADataTableModule.GiftPackageShowItemsConfTableRow
// Struct Size::0x0050
struct FGiftPackageShowItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      package;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0010(0x0010)
    TArray<uint32_t>                              is;                                                           // 0x0020(0x0010)
    TArray<uint32_t>                              item;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              Weight;                                                       // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.GiftPackageEquipConfTableRow
// Struct Size::0x0020
struct FGiftPackageEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      Key;                                                          // 0x0008(0x0004)
    uint32_t                                      ID;                                                           // 0x000C(0x0004)
    TArray<FGiftEquipItem>                        Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GiftEquipItem
// Struct Size::0x0020
struct FGiftEquipItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      Parent;                                                       // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    uint32_t                                      Index;                                                        // 0x0014(0x0004)
    uint32_t                                      pos;                                                          // 0x0018(0x0004)
    uint32_t                                      pos;                                                          // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.GiftPackageEquipTableRow
// Struct Size::0x0020
struct FGiftPackageEquipTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Equip;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GiftPackageConfTableRow
// Struct Size::0x0020
struct FGiftPackageConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    uint32_t                                      filter;                                                       // 0x0014(0x0004)
    uint32_t                                      self;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.GiftGroupItemsConfTableRow
// Struct Size::0x0028
struct FGiftGroupItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      item;                                                         // 0x0010(0x0004)
    uint32_t                                      item;                                                         // 0x0014(0x0004)
    uint32_t                                      is;                                                           // 0x0018(0x0004)
    uint32_t                                      exchange;                                                     // 0x001C(0x0004)
    uint32_t                                      exchange;                                                     // 0x0020(0x0004)
    uint32_t                                      discount;                                                     // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.GiftGroupDescConfTableRow
// Struct Size::0x0028
struct FGiftGroupDescConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Detail;                                                       // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.GiftGroupConfTableRow
// Struct Size::0x0050
struct FGiftGroupConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      desc;                                                         // 0x0028(0x0004)
    uint32_t                                      icon;                                                         // 0x002C(0x0004)
    FText                                         mutil;                                                        // 0x0030(0x0018)
    uint32_t                                      Type;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.GidAndMailAdressTableRow
// Struct Size::0x0030
struct FGidAndMailAdressTableRow : public FTableRowBase
{
    FText                                         Email;                                                        // 0x0008(0x0018)
    uint64_t                                      GID;                                                          // 0x0020(0x0008)
    uint64_t                                      recruiter;                                                    // 0x0028(0x0008)
};


// ScriptStruct  UADataTableModule.GestureIconMontageTableRow
// Struct Size::0x0070
struct FGestureIconMontageTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       GestureIconPath;                                              // 0x0010(0x0010)
    FText                                         GestureDescription;                                           // 0x0020(0x0018)
    uint32_t                                      GestureMontagesMapID;                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<uint32_t>                              jump;                                                         // 0x0040(0x0010)
    FText                                         no;                                                           // 0x0050(0x0018)
    uint32_t                                      ActiveStatus;                                                 // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  UADataTableModule.GenericShopTradeConfTableRow
// Struct Size::0x0060
struct FGenericShopTradeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      shop;                                                         // 0x000C(0x0004)
    uint32_t                                      tag;                                                          // 0x0010(0x0004)
    uint32_t                                      sell;                                                         // 0x0014(0x0004)
    uint32_t                                      should;                                                       // 0x0018(0x0004)
    uint32_t                                      sell;                                                         // 0x001C(0x0004)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    uint32_t                                      is;                                                           // 0x0024(0x0004)
    uint32_t                                      cost;                                                         // 0x0028(0x0004)
    uint32_t                                      cost;                                                         // 0x002C(0x0004)
    uint32_t                                      unlock;                                                       // 0x0030(0x0004)
    uint32_t                                      unlock;                                                       // 0x0034(0x0004)
    uint32_t                                      buy;                                                          // 0x0038(0x0004)
    uint32_t                                      buy;                                                          // 0x003C(0x0004)
    uint32_t                                      bind;                                                         // 0x0040(0x0004)
    uint32_t                                      preshelf;                                                     // 0x0044(0x0004)
    TArray<FGShopOnshelfTime>                     onshelf;                                                      // 0x0048(0x0010)
    uint32_t                                      sort;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UADataTableModule.GShopOnshelfTime
// Struct Size::0x0010
struct FGShopOnshelfTime
{
    FDateTime                                     start;                                                        // 0x0000(0x0008)
    FDateTime                                     end;                                                          // 0x0008(0x0008)
};


// ScriptStruct  UADataTableModule.GenericShopTagConfTableRow
// Struct Size::0x0050
struct FGenericShopTagConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         tag;                                                          // 0x0010(0x0018)
    FString                                       tag;                                                          // 0x0028(0x0010)
    uint32_t                                      sort;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       desc;                                                         // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.GenericShopConfTableRow
// Struct Size::0x0068
struct FGenericShopConfTableRow : public FTableRowBase
{
    uint32_t                                      shop;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         shop;                                                         // 0x0010(0x0018)
    TArray<FConfGShopGood>                        cost;                                                         // 0x0028(0x0010)
    FText                                         shop;                                                         // 0x0038(0x0018)
    uint32_t                                      red;                                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<uint32_t>                              red;                                                          // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.ConfGShopGood
// Struct Size::0x0004
struct FConfGShopGood
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UADataTableModule.GameSettingDescriptionTableRow
// Struct Size::0x0068
struct FGameSettingDescriptionTableRow : public FTableRowBase
{
    FText                                         GameSettingName;                                              // 0x0008(0x0018)
    uint32_t                                      PPTType;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         Title;                                                        // 0x0028(0x0018)
    FText                                         desc;                                                         // 0x0040(0x0018)
    FString                                       Img;                                                          // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.GalleryShowWeaponConfTableRow
// Struct Size::0x0030
struct FGalleryShowWeaponConfTableRow : public FTableRowBase
{
    uint32_t                                      weapon;                                                       // 0x0008(0x0004)
    uint32_t                                      kill;                                                         // 0x000C(0x0004)
    uint32_t                                      need;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FDateTime                                     abs;                                                          // 0x0018(0x0008)
    FDateTime                                     abs;                                                          // 0x0020(0x0008)
    uint32_t                                      assemble;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.GalleryMedalTaskConfTableRow
// Struct Size::0x0028
struct FGalleryMedalTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      medal;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FNeedItemRef>                          needitem;                                                     // 0x0010(0x0010)
    uint32_t                                      Season;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.NeedItemRef
// Struct Size::0x0030
struct FNeedItemRef
{
    TArray<uint32_t>                              has;                                                          // 0x0000(0x0010)
    FText                                         desc;                                                         // 0x0010(0x0018)
    uint32_t                                      need;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.GalleryGlobalConfTableRow
// Struct Size::0x0018
struct FGalleryGlobalConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
};


// ScriptStruct  UADataTableModule.GalleryCollectionTaskConfTableRow
// Struct Size::0x0030
struct FGalleryCollectionTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      collection;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     abs;                                                          // 0x0010(0x0008)
    FDateTime                                     abs;                                                          // 0x0018(0x0008)
    uint32_t                                      target;                                                       // 0x0020(0x0004)
    uint32_t                                      item;                                                         // 0x0024(0x0004)
    uint32_t                                      Num;                                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.GalleryCollectionExchangeConfTableRow
// Struct Size::0x0030
struct FGalleryCollectionExchangeConfTableRow : public FTableRowBase
{
    uint32_t                                      collection;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     abs;                                                          // 0x0010(0x0008)
    FDateTime                                     abs;                                                          // 0x0018(0x0008)
    TArray<FexchangeItem>                         exchange;                                                     // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.exchangeItem
// Struct Size::0x0008
struct FexchangeItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.GachaTicketConfTableRow
// Struct Size::0x0028
struct FGachaTicketConfTableRow : public FTableRowBase
{
    uint32_t                                      buy;                                                          // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      item;                                                         // 0x0010(0x0004)
    uint32_t                                      ticket;                                                       // 0x0014(0x0004)
    uint32_t                                      ticket;                                                       // 0x0018(0x0004)
    uint32_t                                      cost;                                                         // 0x001C(0x0004)
    uint32_t                                      cost;                                                         // 0x0020(0x0004)
    uint32_t                                      limit;                                                        // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.GachaShowItemsConfTableRow
// Struct Size::0x0020
struct FGachaShowItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      item;                                                         // 0x0010(0x0004)
    uint32_t                                      item;                                                         // 0x0014(0x0004)
    uint32_t                                      Weight;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.FunctionControlCfgTableRow
// Struct Size::0x00F0
struct FFunctionControlCfgTableRow : public FTableRowBase
{
    uint32_t                                      sys;                                                          // 0x0008(0x0004)
    uint32_t                                      sys;                                                          // 0x000C(0x0004)
    FString                                       sys;                                                          // 0x0010(0x0010)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<uint32_t>                              active;                                                       // 0x0028(0x0010)
    FString                                       Channel;                                                      // 0x0038(0x0010)
    uint32_t                                      ios;                                                          // 0x0048(0x0004)
    uint32_t                                      ios;                                                          // 0x004C(0x0004)
    uint32_t                                      android;                                                      // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       android;                                                      // 0x0058(0x0010)
    FString                                       ios;                                                          // 0x0068(0x0010)
    uint32_t                                      season;                                                       // 0x0078(0x0004)
    uint32_t                                      battle;                                                       // 0x007C(0x0004)
    uint32_t                                      Condition;                                                    // 0x0080(0x0004)
    uint32_t                                      open;                                                         // 0x0084(0x0004)
    uint32_t                                      history;                                                      // 0x0088(0x0004)
    uint32_t                                      open;                                                         // 0x008C(0x0004)
    uint32_t                                      open;                                                         // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FDateTime                                     open;                                                         // 0x0098(0x0008)
    FDateTime                                     cloe;                                                         // 0x00A0(0x0008)
    uint32_t                                      pre;                                                          // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FText                                         Tips;                                                         // 0x00B0(0x0018)
    FText                                         btn;                                                          // 0x00C8(0x0018)
    uint32_t                                      is;                                                           // 0x00E0(0x0004)
    uint32_t                                      lockstate;                                                    // 0x00E4(0x0004)
    uint32_t                                      country;                                                      // 0x00E8(0x0004)
    uint32_t                                      regist;                                                       // 0x00EC(0x0004)
};


// ScriptStruct  UADataTableModule.FriRecommTagsTableRow
// Struct Size::0x0040
struct FFriRecommTagsTableRow : public FTableRowBase
{
    uint32_t                                      recom;                                                        // 0x0008(0x0004)
    uint32_t                                      tag;                                                          // 0x000C(0x0004)
    uint32_t                                      tag;                                                          // 0x0010(0x0004)
    int32_t                                       Weight;                                                       // 0x0014(0x0004)
    uint32_t                                      Active;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         tag;                                                          // 0x0020(0x0018)
    uint32_t                                      need;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.FriRecommConfTableRow
// Struct Size::0x0088
struct FFriRecommConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    uint32_t                                      show;                                                         // 0x0010(0x0004)
    uint32_t                                      Val;                                                          // 0x0014(0x0004)
    FText                                         reason;                                                       // 0x0018(0x0018)
    FText                                         friendPanelDisplay;                                           // 0x0030(0x0018)
    FText                                         battleReulstDisplay;                                          // 0x0048(0x0018)
    FText                                         battleResultDesc;                                             // 0x0060(0x0018)
    TArray<uint32_t>                              battleResultDesc;                                             // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.FriInviteCodeRewardTableRow
// Struct Size::0x0020
struct FFriInviteCodeRewardTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FInviteRewardListConf>                 reward;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.InviteRewardListConf
// Struct Size::0x000C
struct FInviteRewardListConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ForbiddenVersionConfTableRow
// Struct Size::0x0030
struct FForbiddenVersionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       version;                                                      // 0x0010(0x0010)
    FString                                       version;                                                      // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.FactionalItemConfTableRow
// Struct Size::0x0010
struct FFactionalItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.FactionSelectConfTableRow
// Struct Size::0x0018
struct FFactionSelectConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      map;                                                          // 0x000C(0x0004)
    uint32_t                                      index;                                                        // 0x0010(0x0004)
    uint32_t                                      faction;                                                      // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.FactionConfTableRow
// Struct Size::0x0088
struct FFactionConfTableRow : public FTableRowBase
{
    uint32_t                                      faction;                                                      // 0x0008(0x0004)
    uint32_t                                      avatar;                                                       // 0x000C(0x0004)
    uint64_t                                      faction;                                                      // 0x0010(0x0008)
    FString                                       faction;                                                      // 0x0018(0x0010)
    FString                                       faction;                                                      // 0x0028(0x0010)
    FString                                       faction;                                                      // 0x0038(0x0010)
    FString                                       faction;                                                      // 0x0048(0x0010)
    FString                                       faction;                                                      // 0x0058(0x0010)
    FString                                       faction;                                                      // 0x0068(0x0010)
    FString                                       faction;                                                      // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.FactionChoiceConfTableRow
// Struct Size::0x0030
struct FFactionChoiceConfTableRow : public FTableRowBase
{
    uint32_t                                      choice;                                                       // 0x0008(0x0004)
    uint32_t                                      season;                                                       // 0x000C(0x0004)
    TArray<FPreTaskId>                            pre;                                                          // 0x0010(0x0010)
    TArray<FactionChoiceItem>                     faction;                                                      // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.actionChoiceItem
// Struct Size::0x0020
struct FactionChoiceItem
{
    uint32_t                                      faction;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         faction;                                                      // 0x0008(0x0018)
};


// ScriptStruct  UADataTableModule.PreTaskId
// Struct Size::0x0004
struct FPreTaskId
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UADataTableModule.FacePicConfTableRow
// Struct Size::0x00D0
struct FFacePicConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     begin;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    uint32_t                                      min;                                                          // 0x0020(0x0004)
    uint32_t                                      max;                                                          // 0x0024(0x0004)
    TArray<uint32_t>                              client;                                                       // 0x0028(0x0010)
    TArray<uint32_t>                              server;                                                       // 0x0038(0x0010)
    TArray<uint32_t>                              plat;                                                         // 0x0048(0x0010)
    uint32_t                                      white;                                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       client;                                                       // 0x0060(0x0010)
    FString                                       client;                                                       // 0x0070(0x0010)
    FString                                       URL;                                                          // 0x0080(0x0010)
    uint32_t                                      order;                                                        // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       Jump;                                                         // 0x0098(0x0010)
    FText                                         btn;                                                          // 0x00A8(0x0018)
    uint32_t                                      apear;                                                        // 0x00C0(0x0004)
    uint32_t                                      appear;                                                       // 0x00C4(0x0004)
    uint32_t                                      Type;                                                         // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  UADataTableModule.ExtraSkinConfTableRow
// Struct Size::0x0068
struct FExtraSkinConfTableRow : public FTableRowBase
{
    uint32_t                                      BaseItemID;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SocketName;                                                   // 0x0010(0x0010)
    uint32_t                                      AssembleItemID;                                               // 0x0020(0x0004)
    bool                                          IsStaticMesh;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FSoftObjectPath                               MeshPathGame;                                                 // 0x0028(0x0018)
    FSoftObjectPath                               MeshPathLobby;                                                // 0x0040(0x0018)
    TArray<FSkinMaterialInfo>                     OverrideMaterials;                                            // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.ExpConstantTableRow
// Struct Size::0x0040
struct FExpConstantTableRow : public FTableRowBase
{
    FString                                       ID;                                                           // 0x0008(0x0010)
    int64_t                                       Val;                                                          // 0x0018(0x0008)
    TArray<int32_t>                               ary;                                                          // 0x0020(0x0010)
    FString                                       Str;                                                          // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.ExchangeStashConfTableRow
// Struct Size::0x0018
struct FExchangeStashConfTableRow : public FTableRowBase
{
    uint32_t                                      stash;                                                        // 0x0008(0x0004)
    uint32_t                                      stash;                                                        // 0x000C(0x0004)
    float                                         middle;                                                       // 0x0010(0x0004)
    float                                         limit;                                                        // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ExchangeRarityConfTableRow
// Struct Size::0x0010
struct FExchangeRarityConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      rarity;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ExchangeFixConfTableRow
// Struct Size::0x0018
struct FExchangeFixConfTableRow : public FTableRowBase
{
    uint32_t                                      user;                                                         // 0x0008(0x0004)
    float                                         middle;                                                       // 0x000C(0x0004)
    float                                         limit;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.EventAIIDModifierDataTableTableRow
// Struct Size::0x0038
struct FEventAIIDModifierDataTableTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ActivityID;                                                   // 0x000C(0x0004)
    uint32_t                                      Priority;                                                     // 0x0010(0x0004)
    uint32_t                                      SourceCategory;                                               // 0x0014(0x0004)
    uint32_t                                      SourceCareer;                                                 // 0x0018(0x0004)
    uint32_t                                      SourceTendency;                                               // 0x001C(0x0004)
    uint32_t                                      SourceDifficulty;                                             // 0x0020(0x0004)
    uint32_t                                      TargetCategory;                                               // 0x0024(0x0004)
    uint32_t                                      TargetCareer;                                                 // 0x0028(0x0004)
    uint32_t                                      TargetTendency;                                               // 0x002C(0x0004)
    uint32_t                                      TargetDifficulty;                                             // 0x0030(0x0004)
    uint32_t                                      TargetEquipPoolID;                                            // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.EvaluationConfTableRow
// Struct Size::0x0060
struct FEvaluationConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         show;                                                         // 0x0010(0x0018)
    uint32_t                                      emotion;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       basic;                                                        // 0x0030(0x0008)
    TArray<int64_t>                               event;                                                        // 0x0038(0x0010)
    TArray<int64_t>                               event;                                                        // 0x0048(0x0010)
    uint32_t                                      is;                                                           // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UADataTableModule.EvaluationCommConfTableRow
// Struct Size::0x0028
struct FEvaluationCommConfTableRow : public FTableRowBase
{
    uint32_t                                      conf;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       event;                                                        // 0x0010(0x0008)
    int64_t                                       Val;                                                          // 0x0018(0x0008)
    int64_t                                       Score;                                                        // 0x0020(0x0008)
};


// ScriptStruct  UADataTableModule.ErrorCodeTableRow
// Struct Size::0x0030
struct FErrorCodeTableRow : public FTableRowBase
{
    int32_t                                       ErrorCode;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Describe;                                                     // 0x0010(0x0018)
    int8_t                                        ShowType;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  UADataTableModule.EquipmentSkinConfTableRow
// Struct Size::0x0068
struct FEquipmentSkinConfTableRow : public FTableRowBase
{
    uint32_t                                      SkinID;                                                       // 0x0008(0x0004)
    uint32_t                                      ItemId;                                                       // 0x000C(0x0004)
    bool                                          IsStaticMesh;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FSoftObjectPath                               MeshPathGame;                                                 // 0x0018(0x0018)
    FSoftObjectPath                               MeshPathLobby;                                                // 0x0030(0x0018)
    TArray<FSkinMaterialInfo>                     OverrideMaterialsGame;                                        // 0x0048(0x0010)
    TArray<FSkinMaterialInfo>                     OverrideMaterialsLobby;                                       // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.EquipSlotConfTableRow
// Struct Size::0x0028
struct FEquipSlotConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              MatchEquipType;                                               // 0x0010(0x0010)
    uint32_t                                      ShowIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.EquipReturnItemConfTableRow
// Struct Size::0x0020
struct FEquipReturnItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Low;                                                          // 0x000C(0x0004)
    uint32_t                                      Up;                                                           // 0x0010(0x0004)
    uint32_t                                      item;                                                         // 0x0014(0x0004)
    uint32_t                                      Num;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.EquipReturnConfTableRow
// Struct Size::0x0018
struct FEquipReturnConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    uint32_t                                      Low;                                                          // 0x000C(0x0004)
    uint32_t                                      Up;                                                           // 0x0010(0x0004)
    int32_t                                       prob;                                                         // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.EquipReturnCardConfTableRow
// Struct Size::0x0020
struct FEquipReturnCardConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    FString                                       icon;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.EquipAvatarSetCfgTableRow
// Struct Size::0x0028
struct FEquipAvatarSetCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              avatar;                                                       // 0x0010(0x0010)
    uint32_t                                      combined;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.EloChangeConfTableRow
// Struct Size::0x0028
struct FEloChangeConfTableRow : public FTableRowBase
{
    uint32_t                                      elo;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Param;                                                        // 0x0010(0x0008)
    int64_t                                       elo;                                                          // 0x0018(0x0008)
    uint32_t                                      ignore;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.EliteSuiteConfTableRow
// Struct Size::0x0038
struct FEliteSuiteConfTableRow : public FTableRowBase
{
    uint32_t                                      index;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       set;                                                          // 0x0010(0x0010)
    TArray<FEliteEnterCostVec>                    enter;                                                        // 0x0020(0x0010)
    uint32_t                                      refresh;                                                      // 0x0030(0x0004)
    uint32_t                                      set;                                                          // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.EliteEnterCostVec
// Struct Size::0x0008
struct FEliteEnterCostVec
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      cost;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.EliminationExpTableRow
// Struct Size::0x0018
struct FEliminationExpTableRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    int32_t                                       Level;                                                        // 0x000C(0x0004)
    int32_t                                       Exp;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.EAttachPositionTableRow
// Struct Size::0x0008
struct FEAttachPositionTableRow : public FTableRowBase
{
};


// ScriptStruct  UADataTableModule.DynamicLotteryConfTableRow
// Struct Size::0x0058
struct FDynamicLotteryConfTableRow : public FTableRowBase
{
    uint32_t                                      gacha;                                                        // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      ticket;                                                       // 0x0010(0x0004)
    uint32_t                                      mall;                                                         // 0x0014(0x0004)
    uint32_t                                      step;                                                         // 0x0018(0x0004)
    uint32_t                                      single;                                                       // 0x001C(0x0004)
    uint32_t                                      conseutive;                                                   // 0x0020(0x0004)
    uint32_t                                      consecutive;                                                  // 0x0024(0x0004)
    uint32_t                                      consecutive;                                                  // 0x0028(0x0004)
    uint32_t                                      max;                                                          // 0x002C(0x0004)
    uint32_t                                      first;                                                        // 0x0030(0x0004)
    uint32_t                                      first;                                                        // 0x0034(0x0004)
    uint32_t                                      first;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FLotteryPoolGuaranteeConf>             lottery;                                                      // 0x0040(0x0010)
    uint32_t                                      reward;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.LotteryPoolGuaranteeConf
// Struct Size::0x0008
struct FLotteryPoolGuaranteeConf
{
    uint32_t                                      pool;                                                         // 0x0000(0x0004)
    uint32_t                                      guarantee;                                                    // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.DurabilityChangeTableRow
// Struct Size::0x0010
struct FDurabilityChangeTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Version;                                                      // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.DsVersionConfTableRow
// Struct Size::0x0020
struct FDsVersionConfTableRow : public FTableRowBase
{
    uint32_t                                      env;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FDsConfVersionRange>                   version;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DsConfVersionRange
// Struct Size::0x0020
struct FDsConfVersionRange
{
    FText                                         ds;                                                           // 0x0000(0x0018)
    uint32_t                                      ds;                                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.DsGrayConfTableRow
// Struct Size::0x0040
struct FDsGrayConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      dsa;                                                          // 0x000C(0x0004)
    FText                                         ds;                                                           // 0x0010(0x0018)
    uint32_t                                      ds;                                                           // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint64_t>                              gid;                                                          // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.DsGameFunctionConfigTableRow
// Struct Size::0x0020
struct FDsGameFunctionConfigTableRow : public FTableRowBase
{
    uint32_t                                      play;                                                         // 0x0008(0x0004)
    uint32_t                                      use;                                                          // 0x000C(0x0004)
    uint32_t                                      use;                                                          // 0x0010(0x0004)
    uint32_t                                      poor;                                                         // 0x0014(0x0004)
    uint32_t                                      use;                                                          // 0x0018(0x0004)
    uint32_t                                      use;                                                          // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.DropPoolConfTableRow
// Struct Size::0x0028
struct FDropPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      drop;                                                         // 0x000C(0x0004)
    uint32_t                                      probability;                                                  // 0x0010(0x0004)
    uint32_t                                      pool;                                                         // 0x0014(0x0004)
    TArray<Fcolor>                                probability;                                                  // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.color
// Struct Size::0x0008
struct Fcolor
{
    uint32_t                                      Color;                                                        // 0x0000(0x0004)
    uint32_t                                      Probability;                                                  // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.DropPicShowConfTableRow
// Struct Size::0x0020
struct FDropPicShowConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       pic;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DropItemDuraConfTableRow
// Struct Size::0x0020
struct FDropItemDuraConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      max;                                                          // 0x000C(0x0004)
    uint32_t                                      min;                                                          // 0x0010(0x0004)
    uint32_t                                      max;                                                          // 0x0014(0x0004)
    uint32_t                                      min;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.DropItemConfTableRow
// Struct Size::0x00B0
struct FDropItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      pool;                                                         // 0x000C(0x0004)
    uint32_t                                      Seq;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         desc;                                                         // 0x0018(0x0018)
    uint32_t                                      Level;                                                        // 0x0030(0x0004)
    uint32_t                                      Type;                                                         // 0x0034(0x0004)
    uint32_t                                      item;                                                         // 0x0038(0x0004)
    uint32_t                                      item;                                                         // 0x003C(0x0004)
    uint32_t                                      item;                                                         // 0x0040(0x0004)
    uint32_t                                      real;                                                         // 0x0044(0x0004)
    uint32_t                                      is;                                                           // 0x0048(0x0004)
    uint32_t                                      is;                                                           // 0x004C(0x0004)
    uint32_t                                      Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<uint32_t>                              guaranteed;                                                   // 0x0058(0x0010)
    uint32_t                                      is;                                                           // 0x0068(0x0004)
    uint32_t                                      is;                                                           // 0x006C(0x0004)
    uint32_t                                      is;                                                           // 0x0070(0x0004)
    uint32_t                                      background;                                                   // 0x0074(0x0004)
    uint32_t                                      probability;                                                  // 0x0078(0x0004)
    uint32_t                                      server;                                                       // 0x007C(0x0004)
    FText                                         CDN;                                                          // 0x0080(0x0018)
    uint32_t                                      limit;                                                        // 0x0098(0x0004)
    uint32_t                                      show;                                                         // 0x009C(0x0004)
    TArray<int32_t>                               camerapos;                                                    // 0x00A0(0x0010)
};


// ScriptStruct  UADataTableModule.DispelExpTableRow
// Struct Size::0x0018
struct FDispelExpTableRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    int32_t                                       part;                                                         // 0x000C(0x0004)
    int32_t                                       dispel;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.DeviceWhiteListConfTableRow
// Struct Size::0x0020
struct FDeviceWhiteListConfTableRow : public FTableRowBase
{
    FText                                         device;                                                       // 0x0008(0x0018)
};


// ScriptStruct  UADataTableModule.DesignPageTableRow
// Struct Size::0x0008
struct FDesignPageTableRow : public FTableRowBase
{
};


// ScriptStruct  UADataTableModule.DeathDropReplacePoolTableRow
// Struct Size::0x0020
struct FDeathDropReplacePoolTableRow : public FTableRowBase
{
    uint32_t                                      pool;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DeathDropReplaceBTableRow
// Struct Size::0x0020
struct FDeathDropReplaceBTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FDeathDropReplacePoolInfo>             death;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DeathDropReplacePoolInfo
// Struct Size::0x0008
struct FDeathDropReplacePoolInfo
{
    uint32_t                                      pool;                                                         // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.DeathDropReplaceATableRow
// Struct Size::0x0020
struct FDeathDropReplaceATableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      pool;                                                         // 0x000C(0x0004)
    uint32_t                                      Weight;                                                       // 0x0010(0x0004)
    uint32_t                                      special;                                                      // 0x0014(0x0004)
    uint32_t                                      replace;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.DataPathTableRow
// Struct Size::0x0020
struct FDataPathTableRow : public FTableRowBase
{
    uint32_t                                      PathID;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       PathName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DailyTaskRefreshConfTableRow
// Struct Size::0x0020
struct FDailyTaskRefreshConfTableRow : public FTableRowBase
{
    uint32_t                                      season;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FDailyTaskSet>                         task;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DailyTaskSet
// Struct Size::0x0010
struct FDailyTaskSet
{
    TArray<uint32_t>                              task;                                                         // 0x0000(0x0010)
};


// ScriptStruct  UADataTableModule.DSCountryZoneConfTableRow
// Struct Size::0x0020
struct FDSCountryZoneConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ds;                                                           // 0x000C(0x0004)
    TArray<uint32_t>                              country;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DSCountryGroupConfTableRow
// Struct Size::0x0018
struct FDSCountryGroupConfTableRow : public FTableRowBase
{
    uint32_t                                      country;                                                      // 0x0008(0x0004)
    uint32_t                                      ds;                                                           // 0x000C(0x0004)
    uint32_t                                      ds;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.CustomizedExchangeRuleConfTableRow
// Struct Size::0x0030
struct FCustomizedExchangeRuleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    uint32_t                                      loyalty;                                                      // 0x0010(0x0004)
    uint32_t                                      Level;                                                        // 0x0014(0x0004)
    uint32_t                                      Num;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FDailyRefreshTimeConf>                 daily;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.DailyRefreshTimeConf
// Struct Size::0x0010
struct FDailyRefreshTimeConf
{
    FString                                       refresh;                                                      // 0x0000(0x0010)
};


// ScriptStruct  UADataTableModule.CustomizedExchangeConfTableRow
// Struct Size::0x0058
struct FCustomizedExchangeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    uint32_t                                      Seq;                                                          // 0x0010(0x0004)
    uint32_t                                      buy;                                                          // 0x0014(0x0004)
    uint32_t                                      is;                                                           // 0x0018(0x0004)
    uint32_t                                      sell;                                                         // 0x001C(0x0004)
    uint32_t                                      sell;                                                         // 0x0020(0x0004)
    uint32_t                                      is;                                                           // 0x0024(0x0004)
    TArray<FCustomizedExchangeItemConf>           exchange;                                                     // 0x0028(0x0010)
    uint32_t                                      loyalty;                                                      // 0x0038(0x0004)
    uint32_t                                      min;                                                          // 0x003C(0x0004)
    uint32_t                                      max;                                                          // 0x0040(0x0004)
    uint32_t                                      min;                                                          // 0x0044(0x0004)
    uint32_t                                      max;                                                          // 0x0048(0x0004)
    uint32_t                                      min;                                                          // 0x004C(0x0004)
    uint32_t                                      max;                                                          // 0x0050(0x0004)
    uint32_t                                      Weight;                                                       // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.CustomizedExchangeItemConf
// Struct Size::0x0008
struct FCustomizedExchangeItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.CurrencyExchangeConfTableRow
// Struct Size::0x0020
struct FCurrencyExchangeConfTableRow : public FTableRowBase
{
    FString                                       CurrencyName;                                                 // 0x0008(0x0010)
    float                                         CurrencyCount;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.CreditPaneltyConfTableRow
// Struct Size::0x0020
struct FCreditPaneltyConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Description;                                                  // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.CreditLevelConfTableRow
// Struct Size::0x0048
struct FCreditLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      credit;                                                       // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      daily;                                                        // 0x0010(0x0004)
    uint32_t                                      deduct;                                                       // 0x0014(0x0004)
    TArray<uint32_t>                              panelty;                                                      // 0x0018(0x0010)
    uint32_t                                      reward;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FText                                         desc;                                                         // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.CreditEventConfTableRow
// Struct Size::0x0038
struct FCreditEventConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         reason;                                                       // 0x0010(0x0018)
    int32_t                                       event;                                                        // 0x0028(0x0004)
    uint32_t                                      credit;                                                       // 0x002C(0x0004)
    uint32_t                                      max;                                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.CreditBehaviorDescConfTableRow
// Struct Size::0x0028
struct FCreditBehaviorDescConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      isPositive;                                                   // 0x000C(0x0004)
    FText                                         desc;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.CreateRoleAvatarShowConfTableRow
// Struct Size::0x0030
struct FCreateRoleAvatarShowConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              avatar;                                                       // 0x0010(0x0010)
    TArray<uint32_t>                              avatar;                                                       // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.CreateRoleAvatarConfTableRow
// Struct Size::0x0020
struct FCreateRoleAvatarConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FAvatarSet>                            avatar;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarSet
// Struct Size::0x0010
struct FAvatarSet
{
    TArray<uint32_t>                              avatars;                                                      // 0x0000(0x0010)
};


// ScriptStruct  UADataTableModule.CountryGroupConfTableRow
// Struct Size::0x0020
struct FCountryGroupConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              country;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.CountryCurrencyExchangeConfTableRow
// Struct Size::0x0028
struct FCountryCurrencyExchangeConfTableRow : public FTableRowBase
{
    uint32_t                                      CountryCode;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CurrencyName;                                                 // 0x0010(0x0010)
    float                                         CurrencyCount;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.CountryConfTableRow
// Struct Size::0x0028
struct FCountryConfTableRow : public FTableRowBase
{
    uint32_t                                      country;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         country;                                                      // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.ContextMenuPickUpConfTableRow
// Struct Size::0x0030
struct FContextMenuPickUpConfTableRow : public FTableRowBase
{
    uint16_t                                      ID;                                                           // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       PanelType;                                                    // 0x0010(0x0010)
    FString                                       PickUpType;                                                   // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ContextMenuLevel2ConfTableRow
// Struct Size::0x0070
struct FContextMenuLevel2ConfTableRow : public FTableRowBase
{
    uint16_t                                      ID;                                                           // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    char                                          ShowIndex;                                                    // 0x0028(0x0001)
    char                                          displayType;                                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FString                                       ExecFunc;                                                     // 0x0030(0x0010)
    TArray<uint64_t>                              ItemTypes;                                                    // 0x0040(0x0010)
    char                                          ItemTypeMode;                                                 // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    TArray<uint16_t>                              PickTypeIds;                                                  // 0x0058(0x0010)
    char                                          isEquiped;                                                    // 0x0068(0x0001)
    char                                          IsLendItem;                                                   // 0x0069(0x0001)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    uint32_t                                      SysId;                                                        // 0x006C(0x0004)
};


// ScriptStruct  UADataTableModule.ContextMenuLevel1ConfTableRow
// Struct Size::0x0080
struct FContextMenuLevel1ConfTableRow : public FTableRowBase
{
    uint16_t                                      ID;                                                           // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FText                                         DisplayName;                                                  // 0x0010(0x0018)
    char                                          ShowIndex;                                                    // 0x0028(0x0001)
    char                                          displayType;                                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FString                                       ExecFunc;                                                     // 0x0030(0x0010)
    TArray<uint64_t>                              ItemTypes;                                                    // 0x0040(0x0010)
    char                                          ItemTypeMode;                                                 // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    TArray<uint16_t>                              PickTypeIds;                                                  // 0x0058(0x0010)
    char                                          isEquiped;                                                    // 0x0068(0x0001)
    char                                          IsLendItem;                                                   // 0x0069(0x0001)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    uint32_t                                      SysId;                                                        // 0x006C(0x0004)
    uint32_t                                      IsHintMode;                                                   // 0x0070(0x0004)
    uint32_t                                      IsInspect;                                                    // 0x0074(0x0004)
    uint32_t                                      IsTraining;                                                   // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  UADataTableModule.ContestBattlePassLevelConfTableRow
// Struct Size::0x0030
struct FContestBattlePassLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    TArray<FContestBattlePassLevelItem>           award;                                                        // 0x0010(0x0010)
    TArray<FContestBattlePassLevelItem>           extra;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ContestBattlePassLevelItem
// Struct Size::0x0010
struct FContestBattlePassLevelItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ContainerRuleConfTableRow
// Struct Size::0x0030
struct FContainerRuleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      need;                                                         // 0x000C(0x0004)
    TArray<uint32_t>                              black;                                                        // 0x0010(0x0010)
    TArray<uint32_t>                              white;                                                        // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ContainerConfTableRow
// Struct Size::0x0050
struct FContainerConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    int32_t                                       rollup;                                                       // 0x000C(0x0004)
    int32_t                                       rollup;                                                       // 0x0010(0x0004)
    float                                         rollup;                                                       // 0x0014(0x0004)
    uint32_t                                      rule;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       open;                                                         // 0x0020(0x0010)
    FString                                       close;                                                        // 0x0030(0x0010)
    TArray<FContainerSizeConfItem>                sizes;                                                        // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.ContainerSizeConfItem
// Struct Size::0x0028
struct FContainerSizeConfItem
{
    TArray<float>                                 PosX;                                                         // 0x0000(0x0010)
    TArray<float>                                 PosY;                                                         // 0x0010(0x0010)
    uint32_t                                      col;                                                          // 0x0020(0x0004)
    uint32_t                                      Row;                                                          // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.ContainerArmorConfTableRow
// Struct Size::0x0020
struct FContainerArmorConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      price;                                                        // 0x000C(0x0004)
    uint32_t                                      Vest;                                                         // 0x0010(0x0004)
    uint32_t                                      Armor;                                                        // 0x0014(0x0004)
    uint32_t                                      Backpack;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.ConsumablesUseAwardConfTableRow
// Struct Size::0x0020
struct FConsumablesUseAwardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FConsumablesUseAward>                  awards;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ConsumablesUseAward
// Struct Size::0x000C
struct FConsumablesUseAward
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      prob;                                                         // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ConsumablesDetailConfTableRow
// Struct Size::0x0080
struct FConsumablesDetailConfTableRow : public FTableRowBase
{
    uint32_t                                      consumables;                                                  // 0x0008(0x0004)
    uint32_t                                      start;                                                        // 0x000C(0x0004)
    uint32_t                                      energy;                                                       // 0x0010(0x0004)
    int32_t                                       hydration;                                                    // 0x0014(0x0004)
    int32_t                                       food;                                                         // 0x0018(0x0004)
    float                                         Treat;                                                        // 0x001C(0x0004)
    int32_t                                       minus;                                                        // 0x0020(0x0004)
    int32_t                                       recover;                                                      // 0x0024(0x0004)
    FText                                         energy;                                                       // 0x0028(0x0018)
    uint32_t                                      remove;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FConsumeRemoveStatusConf>              remove;                                                       // 0x0048(0x0010)
    FText                                         buff;                                                         // 0x0058(0x0018)
    TArray<FConsumeBuffConf>                      buff;                                                         // 0x0070(0x0010)
};


// ScriptStruct  UADataTableModule.ConsumeBuffConf
// Struct Size::0x0008
struct FConsumeBuffConf
{
    uint32_t                                      buff;                                                         // 0x0000(0x0004)
    uint32_t                                      is;                                                           // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ConsumeRemoveStatusConf
// Struct Size::0x0008
struct FConsumeRemoveStatusConf
{
    uint32_t                                      remove;                                                       // 0x0000(0x0004)
    uint32_t                                      durability;                                                   // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ConsumablesConfTableRow
// Struct Size::0x0020
struct FConsumablesConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      price;                                                        // 0x000C(0x0004)
    TArray<FRecommandSuppliesPack>                RecommandSuppliesPackList;                                    // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RecommandSuppliesPack
// Struct Size::0x0008
struct FRecommandSuppliesPack
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ConsumablesBuffConfTableRow
// Struct Size::0x0078
struct FConsumablesBuffConfTableRow : public FTableRowBase
{
    uint32_t                                      buff;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       logic;                                                        // 0x0010(0x0010)
    FText                                         Name;                                                         // 0x0020(0x0018)
    FString                                       icon;                                                         // 0x0038(0x0010)
    uint64_t                                      delay;                                                        // 0x0048(0x0008)
    uint64_t                                      total;                                                        // 0x0050(0x0008)
    uint64_t                                      Value;                                                        // 0x0058(0x0008)
    FText                                         Describe;                                                     // 0x0060(0x0018)
};


// ScriptStruct  UADataTableModule.CompetitionDefaultTeamNameConfTableRow
// Struct Size::0x0028
struct FCompetitionDefaultTeamNameConfTableRow : public FTableRowBase
{
    uint32_t                                      team;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         default;                                                      // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.CompetitionAuthorityConfTableRow
// Struct Size::0x0018
struct FCompetitionAuthorityConfTableRow : public FTableRowBase
{
    uint64_t                                      GOpenID;                                                      // 0x0008(0x0008)
    uint32_t                                      authority;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.CommonCreditLimitSceneTableRow
// Struct Size::0x0040
struct FCommonCreditLimitSceneTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       scene;                                                        // 0x0010(0x0010)
    uint32_t                                      need;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FText                                         ntf;                                                          // 0x0028(0x0018)
};


// ScriptStruct  UADataTableModule.CommonCreditLimitConfTableRow
// Struct Size::0x0038
struct FCommonCreditLimitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    int32_t                                       group;                                                        // 0x0010(0x0004)
    int32_t                                       threshold;                                                    // 0x0014(0x0004)
    int32_t                                       threshold;                                                    // 0x0018(0x0004)
    int32_t                                       is;                                                           // 0x001C(0x0004)
    FString                                       tag;                                                          // 0x0020(0x0010)
    int32_t                                       tag;                                                          // 0x0030(0x0004)
    int32_t                                       tag;                                                          // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.CommonAffixsConfTableRow
// Struct Size::0x00C8
struct FCommonAffixsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       FieldName;                                                    // 0x0010(0x0010)
    int8_t                                        ShowIndex;                                                    // 0x0020(0x0001)
    int8_t                                        AccesoryShowIndex;                                            // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
    FText                                         DisplayName;                                                  // 0x0028(0x0018)
    uint32_t                                      Algorithm;                                                    // 0x0040(0x0004)
    uint32_t                                      IsWeaponBase;                                                 // 0x0044(0x0004)
    FString                                       AccesoryFormat;                                               // 0x0048(0x0010)
    FString                                       WeaponFormat;                                                 // 0x0058(0x0010)
    FText                                         WeaponUnit;                                                   // 0x0068(0x0018)
    FText                                         AccesoryUnit;                                                 // 0x0080(0x0018)
    float                                         Rato;                                                         // 0x0098(0x0004)
    uint32_t                                      LessIsBetter;                                                 // 0x009C(0x0004)
    int32_t                                       MaxValue;                                                     // 0x00A0(0x0004)
    uint32_t                                      displayType;                                                  // 0x00A4(0x0004)
    uint32_t                                      IsBaseAttr;                                                   // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    FText                                         AffixDiscription;                                             // 0x00B0(0x0018)
};


// ScriptStruct  UADataTableModule.CommercialSchemeConfTableRow
// Struct Size::0x0020
struct FCommercialSchemeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SchemeConf;                                                   // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ComebackConfTableRow
// Struct Size::0x0028
struct FComebackConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      afktime;                                                      // 0x000C(0x0004)
    uint32_t                                      afktime;                                                      // 0x0010(0x0004)
    uint32_t                                      rankedlv;                                                     // 0x0014(0x0004)
    uint32_t                                      rankedlv;                                                     // 0x0018(0x0004)
    uint32_t                                      Value;                                                        // 0x001C(0x0004)
    uint32_t                                      Tag;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UADataTableModule.CombatReadinessConfTableRow
// Struct Size::0x0040
struct FCombatReadinessConfTableRow : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              recommend;                                                    // 0x0010(0x0010)
    TArray<uint32_t>                              initializer;                                                  // 0x0020(0x0010)
    TArray<uint32_t>                              discard;                                                      // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.CityConfTableRow
// Struct Size::0x0010
struct FCityConfTableRow : public FTableRowBase
{
    uint32_t                                      ADCode;                                                       // 0x0008(0x0004)
    uint32_t                                      ID;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ChatDialogBubbleConfTableRow
// Struct Size::0x0040
struct FChatDialogBubbleConfTableRow : public FTableRowBase
{
    uint32_t                                      bubbleId;                                                     // 0x0008(0x0004)
    uint32_t                                      isListed;                                                     // 0x000C(0x0004)
    FText                                         getMethodDesc;                                                // 0x0010(0x0018)
    int32_t                                       bubbleLevel;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FDateTime                                     start;                                                        // 0x0030(0x0008)
    FDateTime                                     end;                                                          // 0x0038(0x0008)
};


// ScriptStruct  UADataTableModule.ChannelPromotionConfTableRow
// Struct Size::0x0048
struct FChannelPromotionConfTableRow : public FTableRowBase
{
    uint32_t                                      plat;                                                         // 0x0008(0x0004)
    uint32_t                                      channel;                                                      // 0x000C(0x0004)
    uint32_t                                      channel;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         desc;                                                         // 0x0018(0x0018)
    FText                                         jump;                                                         // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.CardConfTableRow
// Struct Size::0x0058
struct FCardConfTableRow : public FTableRowBase
{
    uint32_t                                      card;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     start;                                                        // 0x0010(0x0008)
    FDateTime                                     end;                                                          // 0x0018(0x0008)
    uint32_t                                      is;                                                           // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       asset;                                                        // 0x0028(0x0010)
    uint32_t                                      jump;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FText                                         get;                                                          // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.CaptureTableRow
// Struct Size::0x0020
struct FCaptureTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    int32_t                                       X;                                                            // 0x000C(0x0004)
    int32_t                                       Y;                                                            // 0x0010(0x0004)
    int32_t                                       Z;                                                            // 0x0014(0x0004)
    uint32_t                                      LightGroupType;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.CandidateItemPoolConfTableRow
// Struct Size::0x0020
struct FCandidateItemPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      pool;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FRandItemConf>                         candidate;                                                    // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.RandItemConf
// Struct Size::0x0008
struct FRandItemConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.CalExtendConfTableRow
// Struct Size::0x0020
struct FCalExtendConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Lower;                                                        // 0x000C(0x0004)
    uint32_t                                      Upper;                                                        // 0x0010(0x0004)
    uint32_t                                      Lower;                                                        // 0x0014(0x0004)
    uint32_t                                      Upper;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.BusinessmanStageConfTableRow
// Struct Size::0x0018
struct FBusinessmanStageConfTableRow : public FTableRowBase
{
    uint32_t                                      businessman;                                                  // 0x0008(0x0004)
    uint32_t                                      stage;                                                        // 0x000C(0x0004)
    uint32_t                                      cond;                                                         // 0x0010(0x0004)
    uint32_t                                      cond;                                                         // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.BusinessmanConfTableRow
// Struct Size::0x00A0
struct FBusinessmanConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      businessman;                                                  // 0x000C(0x0004)
    uint32_t                                      system;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FBusinessBaseInfoVec>                  base;                                                         // 0x0018(0x0010)
    FString                                       icon;                                                         // 0x0028(0x0010)
    uint32_t                                      init;                                                         // 0x0038(0x0004)
    uint32_t                                      init;                                                         // 0x003C(0x0004)
    FDateTime                                     refresh;                                                      // 0x0040(0x0008)
    uint32_t                                      refresh;                                                      // 0x0048(0x0004)
    uint32_t                                      refresh;                                                      // 0x004C(0x0004)
    uint32_t                                      act;                                                          // 0x0050(0x0004)
    uint32_t                                      money;                                                        // 0x0054(0x0004)
    uint32_t                                      total;                                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              loyalty;                                                      // 0x0060(0x0010)
    TArray<uint64_t>                              item;                                                         // 0x0070(0x0010)
    uint32_t                                      point;                                                        // 0x0080(0x0004)
    uint32_t                                      point;                                                        // 0x0084(0x0004)
    uint32_t                                      can;                                                          // 0x0088(0x0004)
    uint32_t                                      can;                                                          // 0x008C(0x0004)
    TArray<FShowTimeConf>                         show;                                                         // 0x0090(0x0010)
};


// ScriptStruct  UADataTableModule.ShowTimeConf
// Struct Size::0x0010
struct FShowTimeConf
{
    FDateTime                                     start;                                                        // 0x0000(0x0008)
    FDateTime                                     end;                                                          // 0x0008(0x0008)
};


// ScriptStruct  UADataTableModule.BusinessBaseInfoVec
// Struct Size::0x0030
struct FBusinessBaseInfoVec
{
    FText                                         Name;                                                         // 0x0000(0x0018)
    FText                                         Description;                                                  // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.BusinessGrateDescribeConfTableRow
// Struct Size::0x00C8
struct FBusinessGrateDescribeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         leveldescribe;                                                // 0x0010(0x0018)
    FText                                         selltype;                                                     // 0x0028(0x0018)
    FString                                       selltypeicon;                                                 // 0x0040(0x0010)
    FText                                         leveltextdes;                                                 // 0x0050(0x0018)
    FText                                         loyaltyonedata;                                               // 0x0068(0x0018)
    FText                                         loyaltytwodata;                                               // 0x0080(0x0018)
    FText                                         loyaltythreedata;                                             // 0x0098(0x0018)
    FText                                         loyaltyfourdata;                                              // 0x00B0(0x0018)
};


// ScriptStruct  UADataTableModule.BulletNumShrinkConfTableRow
// Struct Size::0x0018
struct FBulletNumShrinkConfTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      min;                                                          // 0x000C(0x0004)
    uint32_t                                      max;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.BulletDetailConfTableRow
// Struct Size::0x00B8
struct FBulletDetailConfTableRow : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    float                                         BaseDamage;                                                   // 0x000C(0x0004)
    float                                         BaseSpeed;                                                    // 0x0010(0x0004)
    float                                         PenetrationFactor;                                            // 0x0014(0x0004)
    int32_t                                       PenetrationLevel;                                             // 0x0018(0x0004)
    float                                         BrokenProbability;                                            // 0x001C(0x0004)
    float                                         BrokenDamageScale;                                            // 0x0020(0x0004)
    float                                         ArmorDamage;                                                  // 0x0024(0x0004)
    float                                         BleedProbabilityForPenetration;                               // 0x0028(0x0004)
    float                                         BleedProbabilityForBlock;                                     // 0x002C(0x0004)
    float                                         BleedProbabilityForBody;                                      // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FText                                         BleedProbabilityDisplay;                                      // 0x0038(0x0018)
    FString                                       AssembleTag;                                                  // 0x0050(0x0010)
    uint64_t                                      slot;                                                         // 0x0060(0x0008)
    int32_t                                       ShotsInOneBullet;                                             // 0x0068(0x0004)
    float                                         BodyHitThroughDamageFactor;                                   // 0x006C(0x0004)
    float                                         BodyHitThroughProbability;                                    // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       PrimaryHitBones;                                              // 0x0078(0x0010)
    FString                                       SecondaryHitBones;                                            // 0x0088(0x0010)
    float                                         MOA;                                                          // 0x0098(0x0004)
    float                                         MoaX;                                                         // 0x009C(0x0004)
    float                                         MoaY;                                                         // 0x00A0(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00A4(0x0004)
    float                                         VerticalRecoil;                                               // 0x00A8(0x0004)
    uint32_t                                      ZeroDropDistance;                                             // 0x00AC(0x0004)
    float                                         EnergyBreak;                                                  // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  UADataTableModule.BulletConfTableRow
// Struct Size::0x0020
struct FBulletConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      GunId;                                                        // 0x000C(0x0004)
    TArray<FMagazineBulletPack>                   MagazineBulletList;                                           // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.MagazineBulletPack
// Struct Size::0x0008
struct FMagazineBulletPack
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.BuffIconConfTableRow
// Struct Size::0x0100
struct FBuffIconConfTableRow : public FTableRowBase
{
    uint32_t                                      buff;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       buff;                                                         // 0x0010(0x0010)
    FString                                       icon;                                                         // 0x0020(0x0010)
    FString                                       inspecticon;                                                  // 0x0030(0x0010)
    FText                                         display;                                                      // 0x0040(0x0018)
    FText                                         Describe;                                                     // 0x0058(0x0018)
    uint32_t                                      Type;                                                         // 0x0070(0x0004)
    uint32_t                                      showicon;                                                     // 0x0074(0x0004)
    uint32_t                                      Priority;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FString                                       show;                                                         // 0x0080(0x0010)
    FString                                       part;                                                         // 0x0090(0x0010)
    FString                                       part;                                                         // 0x00A0(0x0010)
    FString                                       part;                                                         // 0x00B0(0x0010)
    FString                                       part;                                                         // 0x00C0(0x0010)
    FString                                       part;                                                         // 0x00D0(0x0010)
    FString                                       part;                                                         // 0x00E0(0x0010)
    FString                                       part;                                                         // 0x00F0(0x0010)
};


// ScriptStruct  UADataTableModule.BrokenImageConfTableRow
// Struct Size::0x0030
struct FBrokenImageConfTableRow : public FTableRowBase
{
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       FilePath;                                                     // 0x0010(0x0010)
    float                                         Left;                                                         // 0x0020(0x0004)
    float                                         Top;                                                          // 0x0024(0x0004)
    float                                         Right;                                                        // 0x0028(0x0004)
    float                                         Bottom;                                                       // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.BossTokenConfTableRow
// Struct Size::0x0010
struct FBossTokenConfTableRow : public FTableRowBase
{
    uint32_t                                      GroupID;                                                      // 0x0008(0x0004)
    uint32_t                                      ItemId;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.BodyPartsTableTableRow
// Struct Size::0x0028
struct FBodyPartsTableTableRow : public FTableRowBase
{
    uint64_t                                      PositionId;                                                   // 0x0008(0x0008)
    FText                                         Describe;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BodyDetailsPartsTableTableRow
// Struct Size::0x0030
struct FBodyDetailsPartsTableTableRow : public FTableRowBase
{
    uint64_t                                      PositionId;                                                   // 0x0008(0x0008)
    uint64_t                                      BodyPartId;                                                   // 0x0010(0x0008)
    FText                                         Describe;                                                     // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.BattleStatConfTableRow
// Struct Size::0x0010
struct FBattleStatConfTableRow : public FTableRowBase
{
    uint32_t                                      stat;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.BattleResultReferTableRow
// Struct Size::0x0028
struct FBattleResultReferTableRow : public FTableRowBase
{
    uint32_t                                      StatisticsId;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Describe;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultPointEventConfTableRow
// Struct Size::0x0098
struct FBattleResultPointEventConfTableRow : public FTableRowBase
{
    uint32_t                                      eventId;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         EventTypeDes;                                                 // 0x0010(0x0018)
    FText                                         EventTitle;                                                   // 0x0028(0x0018)
    FText                                         DescribeWord;                                                 // 0x0040(0x0018)
    uint32_t                                      Weight;                                                       // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<FDescribeArg>                          DescribeWordArgsList;                                         // 0x0060(0x0010)
    FText                                         CombinedDescribeWord;                                         // 0x0070(0x0018)
    TArray<FDescribeArg>                          CombinedDescribeWordArgsList;                                 // 0x0088(0x0010)
};


// ScriptStruct  UADataTableModule.DescribeArg
// Struct Size::0x0028
struct FDescribeArg
{
    FString                                       arg;                                                          // 0x0000(0x0010)
    uint32_t                                      ResolveMethod;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       LocalizationKey;                                              // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultMapTextureConfTableRow
// Struct Size::0x0038
struct FBattleResultMapTextureConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      MainModeID;                                                   // 0x000C(0x0004)
    uint32_t                                      SubModeID;                                                    // 0x0010(0x0004)
    uint32_t                                      MapID;                                                        // 0x0014(0x0004)
    uint32_t                                      SpecialID;                                                    // 0x0018(0x0004)
    uint32_t                                      Difficulty;                                                   // 0x001C(0x0004)
    FText                                         TexturePath;                                                  // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultLootBoxConfTableRow
// Struct Size::0x0038
struct FBattleResultLootBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       LootBoxKey;                                                   // 0x0010(0x0010)
    FText                                         LootBoxName;                                                  // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultLoadingTipsTableRow
// Struct Size::0x0030
struct FBattleResultLoadingTipsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Tip;                                                          // 0x0010(0x0018)
    uint32_t                                      Weight;                                                       // 0x0028(0x0004)
    uint32_t                                      BattleResult;                                                 // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.BattleResultLoadingImageTableRow
// Struct Size::0x0038
struct FBattleResultLoadingImageTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Path;                                                         // 0x0010(0x0010)
    uint32_t                                      Weight;                                                       // 0x0020(0x0004)
    uint32_t                                      BattleResult;                                                 // 0x0024(0x0004)
    FString                                       MapName;                                                      // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultInjuredRecordTableRow
// Struct Size::0x0038
struct FBattleResultInjuredRecordTableRow : public FTableRowBase
{
    uint32_t                                      InjuredId;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         InjuredRecordDescribe;                                        // 0x0010(0x0018)
    FString                                       InjuredFormType;                                              // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultEnemyTipsFuncTableRow
// Struct Size::0x0048
struct FBattleResultEnemyTipsFuncTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         CheckFunc;                                                    // 0x0010(0x0018)
    TArray<FText>                                 Params;                                                       // 0x0028(0x0010)
    TArray<FText>                                 ParamsType;                                                   // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultEnemyTipsTableRow
// Struct Size::0x0050
struct FBattleResultEnemyTipsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              CheckFuncIds;                                                 // 0x0010(0x0010)
    uint32_t                                      Priority;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<bool>                                  JudgeResults;                                                 // 0x0028(0x0010)
    FText                                         Tips;                                                         // 0x0038(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultEXPRatioTableRow
// Struct Size::0x0028
struct FBattleResultEXPRatioTableRow : public FTableRowBase
{
    uint32_t                                      ResultId;                                                     // 0x0008(0x0004)
    uint32_t                                      EXPRatio;                                                     // 0x000C(0x0004)
    FText                                         Describe;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultDieTypeTableRow
// Struct Size::0x0078
struct FBattleResultDieTypeTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      DieType;                                                      // 0x000C(0x0004)
    FString                                       DetailBodyPart;                                               // 0x0010(0x0010)
    FString                                       BodyPart;                                                     // 0x0020(0x0010)
    uint32_t                                      SpreadBodyPart;                                               // 0x0030(0x0004)
    uint32_t                                      HitArmor;                                                     // 0x0034(0x0004)
    uint32_t                                      IsThough;                                                     // 0x0038(0x0004)
    uint32_t                                      OverBulletKill;                                               // 0x003C(0x0004)
    TArray<uint32_t>                              DeathCauserIdList;                                            // 0x0040(0x0010)
    FText                                         ResultTitle;                                                  // 0x0050(0x0018)
    FString                                       TipsArray;                                                    // 0x0068(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultDieTipsTableRow
// Struct Size::0x0028
struct FBattleResultDieTipsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Tips;                                                         // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultConfTableRow
// Struct Size::0x0090
struct FBattleResultConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    uint32_t                                      AttributeType;                                                // 0x0010(0x0004)
    uint32_t                                      Proportion;                                                   // 0x0014(0x0004)
    FText                                         Describe;                                                     // 0x0018(0x0018)
    uint32_t                                      FromType;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<uint32_t>                              AppendId;                                                     // 0x0038(0x0010)
    FText                                         Scale;                                                        // 0x0048(0x0018)
    FString                                       Format;                                                       // 0x0060(0x0010)
    FText                                         Unit;                                                         // 0x0070(0x0018)
    uint32_t                                      RoundingType;                                                 // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  UADataTableModule.BattleResultAreaConfTableRow
// Struct Size::0x0028
struct FBattleResultAreaConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         AreaName;                                                     // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BattleResultAppraiseSeasonConfTableRow
// Struct Size::0x0020
struct FBattleResultAppraiseSeasonConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              appraise;                                                     // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BattleResultAppraiseTableRow
// Struct Size::0x0168
struct FBattleResultAppraiseTableRow : public FTableRowBase
{
    uint32_t                                      AppraiseId;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         AppraiseName;                                                 // 0x0010(0x0018)
    FText                                         Describe;                                                     // 0x0028(0x0018)
    FText                                         DesWords;                                                     // 0x0040(0x0018)
    TArray<int64_t>                               event;                                                        // 0x0058(0x0010)
    TArray<int64_t>                               event;                                                        // 0x0068(0x0010)
    TArray<uint32_t>                              ignore;                                                       // 0x0078(0x0010)
    TArray<FAppraiseConditionConf>                Conditions;                                                   // 0x0088(0x0010)
    FString                                       icon;                                                         // 0x0098(0x0010)
    uint32_t                                      Group;                                                        // 0x00A8(0x0004)
    uint32_t                                      GroupShowIndex;                                               // 0x00AC(0x0004)
    uint32_t                                      Class;                                                        // 0x00B0(0x0004)
    uint32_t                                      ClassIndex;                                                   // 0x00B4(0x0004)
    uint32_t                                      quality;                                                      // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    TArray<uint32_t>                              FacePicMapUnlockIds;                                          // 0x00C0(0x0010)
    uint32_t                                      SeasonPropotion;                                              // 0x00D0(0x0004)
    uint32_t                                      Proportion;                                                   // 0x00D4(0x0004)
    uint32_t                                      PlatformCDNImageURLID;                                        // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    FText                                         MagazineShareDesc;                                            // 0x00E0(0x0018)
    uint32_t                                      AppraiseImageIndex;                                           // 0x00F8(0x0004)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
    FText                                         DataDes;                                                      // 0x0100(0x0018)
    FText                                         ShareDescribe;                                                // 0x0118(0x0018)
    FText                                         ShareDesWords;                                                // 0x0130(0x0018)
    uint32_t                                      CanShare;                                                     // 0x0148(0x0004)
    uint32_t                                      SeasonForceShowType;                                          // 0x014C(0x0004)
    uint32_t                                      ForceShowType;                                                // 0x0150(0x0004)
    uint32_t                                      Type;                                                         // 0x0154(0x0004)
    uint32_t                                      Param1;                                                       // 0x0158(0x0004)
    uint32_t                                      Param2;                                                       // 0x015C(0x0004)
    uint32_t                                      param3;                                                       // 0x0160(0x0004)
    char                                          pa_0164[0x0004]                                               // 0x0164(0x0004)
};


// ScriptStruct  UADataTableModule.AppraiseConditionConf
// Struct Size::0x0028
struct FAppraiseConditionConf
{
    FText                                         expression;                                                   // 0x0000(0x0018)
    uint32_t                                      Op;                                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       Val;                                                          // 0x0020(0x0008)
};


// ScriptStruct  UADataTableModule.BattlePassWorldLevelConfTableRow
// Struct Size::0x0018
struct FBattlePassWorldLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      week;                                                         // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      delta;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.BattlePassVipShowConfTableRow
// Struct Size::0x0028
struct FBattlePassVipShowConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      vip;                                                          // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    TArray<FBattlePassVipShowItem>                award;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.BattlePassVipShowItem
// Struct Size::0x0040
struct FBattlePassVipShowItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    FText                                         unlock;                                                       // 0x0010(0x0018)
    FText                                         item;                                                         // 0x0028(0x0018)
};


// ScriptStruct  UADataTableModule.BattlePassVipConfTableRow
// Struct Size::0x0048
struct FBattlePassVipConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      pre;                                                          // 0x0010(0x0004)
    uint32_t                                      vip;                                                          // 0x0014(0x0004)
    FText                                         Name;                                                         // 0x0018(0x0018)
    uint32_t                                      purchase;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FBattlePassVipItem>                    award;                                                        // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.BattlePassVipItem
// Struct Size::0x0010
struct FBattlePassVipItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      show;                                                         // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.BattlePassShowTypeTableRow
// Struct Size::0x0010
struct FBattlePassShowTypeTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.BattlePassOtherWayTableRow
// Struct Size::0x0060
struct FBattlePassOtherWayTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      unlock;                                                       // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FDateTime                                     start;                                                        // 0x0018(0x0008)
    FDateTime                                     end;                                                          // 0x0020(0x0008)
    FText                                         desc;                                                         // 0x0028(0x0018)
    uint32_t                                      jump;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         btn;                                                          // 0x0048(0x0018)
};


// ScriptStruct  UADataTableModule.BattlePassLevelConfTableRow
// Struct Size::0x0038
struct FBattlePassLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Level;                                                        // 0x000C(0x0004)
    uint32_t                                      group;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FBattlePassLevelItem>                  award;                                                        // 0x0018(0x0010)
    TArray<FBattlePassLevelItem>                  extra;                                                        // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.BattlePassLevelItem
// Struct Size::0x000C
struct FBattlePassLevelItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.BattlePassLastSeasonAwardConfTableRow
// Struct Size::0x0048
struct FBattlePassLastSeasonAwardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      level;                                                        // 0x0010(0x0004)
    uint32_t                                      level;                                                        // 0x0014(0x0004)
    uint32_t                                      login;                                                        // 0x0018(0x0004)
    uint32_t                                      login;                                                        // 0x001C(0x0004)
    TArray<uint32_t>                              award;                                                        // 0x0020(0x0010)
    FText                                         desc;                                                         // 0x0030(0x0018)
};


// ScriptStruct  UADataTableModule.BattlePassConfTableRow
// Struct Size::0x00A0
struct FBattlePassConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      max;                                                          // 0x000C(0x0004)
    uint32_t                                      award;                                                        // 0x0010(0x0004)
    uint32_t                                      need;                                                         // 0x0014(0x0004)
    uint32_t                                      buy;                                                          // 0x0018(0x0004)
    uint32_t                                      buy;                                                          // 0x001C(0x0004)
    FText                                         show;                                                         // 0x0020(0x0018)
    FString                                       entry;                                                        // 0x0038(0x0010)
    FString                                       img;                                                          // 0x0048(0x0010)
    TArray<uint32_t>                              try;                                                          // 0x0058(0x0010)
    uint32_t                                      exchange;                                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FText>                                 first;                                                        // 0x0070(0x0010)
    uint32_t                                      upgrade;                                                      // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FText                                         growup;                                                       // 0x0088(0x0018)
};


// ScriptStruct  UADataTableModule.BattlePassAwardItemsConfTableRow
// Struct Size::0x0020
struct FBattlePassAwardItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBlackItemConf>                        award;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BasicEquipConfTableRow
// Struct Size::0x0030
struct FBasicEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      group;                                                        // 0x000C(0x0004)
    uint32_t                                      class;                                                        // 0x0010(0x0004)
    uint32_t                                      slot;                                                         // 0x0014(0x0004)
    uint32_t                                      item;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FExtEquipConf>                         exts;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.BanTypeConfTableRow
// Struct Size::0x0028
struct FBanTypeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Content;                                                      // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BanThrowsconfTableRow
// Struct Size::0x0040
struct FBanThrowsconfTableRow : public FTableRowBase
{
    int32_t                                       RowNum;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    uint64_t                                      ItemId;                                                       // 0x0010(0x0008)
    uint32_t                                      HitGroup;                                                     // 0x0018(0x0004)
    float                                         DamageThres;                                                  // 0x001C(0x0004)
    int32_t                                       DamageTimes;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<int32_t>                               TimeThres;                                                    // 0x0028(0x0010)
    uint64_t                                      BanTime;                                                      // 0x0038(0x0008)
};


// ScriptStruct  UADataTableModule.BanReasonConfTableRow
// Struct Size::0x0028
struct FBanReasonConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Content;                                                      // 0x0010(0x0018)
};


// ScriptStruct  UADataTableModule.BanChatCountryConfTableRow
// Struct Size::0x0010
struct FBanChatCountryConfTableRow : public FTableRowBase
{
    uint32_t                                      country;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.BadgeSlotConfTableRow
// Struct Size::0x0040
struct FBadgeSlotConfTableRow : public FTableRowBase
{
    uint32_t                                      slot;                                                         // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    FText                                         slot;                                                         // 0x0010(0x0018)
    uint32_t                                      sort;                                                         // 0x0028(0x0004)
    uint32_t                                      check;                                                        // 0x002C(0x0004)
    FString                                       slot;                                                         // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.BadgeConfTableRow
// Struct Size::0x0058
struct FBadgeConfTableRow : public FTableRowBase
{
    uint32_t                                      badge;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         badge;                                                        // 0x0010(0x0018)
    uint32_t                                      group;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint32_t>                              jump;                                                         // 0x0030(0x0010)
    FText                                         no;                                                           // 0x0040(0x0018)
};


// ScriptStruct  UADataTableModule.AvatarValueShowTableRow
// Struct Size::0x0020
struct FAvatarValueShowTableRow : public FTableRowBase
{
    uint32_t                                      avatar;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBuffInfo>                             buff;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BuffInfo
// Struct Size::0x0018
struct FBuffInfo
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarValueNameTableRow
// Struct Size::0x0020
struct FAvatarValueNameTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarTabCfgTableRow
// Struct Size::0x0048
struct FAvatarTabCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Index;                                                        // 0x000C(0x0004)
    TArray<uint32_t>                              sub;                                                          // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       icon;                                                         // 0x0030(0x0010)
    uint32_t                                      show;                                                         // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  UADataTableModule.AvatarSetCfgTableRow
// Struct Size::0x0020
struct FAvatarSetCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      IsIntergral;                                                  // 0x000C(0x0004)
    TArray<uint32_t>                              avatar;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarPartTabCfgTableRow
// Struct Size::0x0030
struct FAvatarPartTabCfgTableRow : public FTableRowBase
{
    uint32_t                                      PartId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       icon;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarItemConfTableRow
// Struct Size::0x0020
struct FAvatarItemConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              conflect;                                                     // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarItemCfgTableRow
// Struct Size::0x0080
struct FAvatarItemCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    uint32_t                                      force;                                                        // 0x0010(0x0004)
    uint32_t                                      sex;                                                          // 0x0014(0x0004)
    uint32_t                                      Level;                                                        // 0x0018(0x0004)
    uint32_t                                      is;                                                           // 0x001C(0x0004)
    uint32_t                                      Score;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FDateTime                                     start;                                                        // 0x0028(0x0008)
    FDateTime                                     end;                                                          // 0x0030(0x0008)
    uint32_t                                      replace;                                                      // 0x0038(0x0004)
    uint32_t                                      replace;                                                      // 0x003C(0x0004)
    TArray<uint32_t>                              jump;                                                         // 0x0040(0x0010)
    FText                                         no;                                                           // 0x0050(0x0018)
    uint32_t                                      factory;                                                      // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FString                                       effect;                                                       // 0x0070(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarHairOptionsTableRow
// Struct Size::0x0018
struct FAvatarHairOptionsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      hair;                                                         // 0x000C(0x0004)
    uint32_t                                      Color;                                                        // 0x0010(0x0004)
    uint32_t                                      composite;                                                    // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.AvatarFactoryCfgTableRow
// Struct Size::0x0050
struct FAvatarFactoryCfgTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       icon;                                                         // 0x0020(0x0010)
    FString                                       desc;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              series;                                                       // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.AvatarCompleteShareConfTableRow
// Struct Size::0x0020
struct FAvatarCompleteShareConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       cdn;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AuctionTagsTableRow
// Struct Size::0x0038
struct FAuctionTagsTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FString                                       icon;                                                         // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.AuctionSingleRecycleTableRow
// Struct Size::0x0020
struct FAuctionSingleRecycleTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    uint32_t                                      show;                                                         // 0x0010(0x0004)
    uint32_t                                      expire;                                                       // 0x0014(0x0004)
    uint32_t                                      expire;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionScaleConfTableRow
// Struct Size::0x0010
struct FAuctionScaleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         DistancePercentA;                                             // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionSafeQuestionConfTableRow
// Struct Size::0x0030
struct FAuctionSafeQuestionConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      number1;                                                      // 0x000C(0x0004)
    FText                                         symbol;                                                       // 0x0010(0x0018)
    uint32_t                                      number2;                                                      // 0x0028(0x0004)
    uint32_t                                      Answer;                                                       // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionMinorTableRow
// Struct Size::0x0070
struct FAuctionMinorTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      sort;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<uint32_t>                              Parent;                                                       // 0x0030(0x0010)
    uint32_t                                      Show;                                                         // 0x0040(0x0004)
    uint32_t                                      show;                                                         // 0x0044(0x0004)
    FString                                       icon;                                                         // 0x0048(0x0010)
    uint32_t                                      icon;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<uint32_t>                              show;                                                         // 0x0060(0x0010)
};


// ScriptStruct  UADataTableModule.AuctionMajorTableRow
// Struct Size::0x0050
struct FAuctionMajorTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    uint32_t                                      sort;                                                         // 0x0028(0x0004)
    uint32_t                                      Show;                                                         // 0x002C(0x0004)
    uint32_t                                      skip;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       icon;                                                         // 0x0038(0x0010)
    uint32_t                                      icon;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionItemTableRow
// Struct Size::0x0138
struct FAuctionItemTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    TArray<uint32_t>                              Parent;                                                       // 0x0010(0x0010)
    TArray<uint32_t>                              weapon;                                                       // 0x0020(0x0010)
    TArray<uint32_t>                              durability;                                                   // 0x0030(0x0010)
    TArray<uint32_t>                              durability;                                                   // 0x0040(0x0010)
    uint32_t                                      on;                                                           // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FDateTime                                     begin;                                                        // 0x0058(0x0008)
    FDateTime                                     end;                                                          // 0x0060(0x0008)
    uint32_t                                      act;                                                          // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<uint32_t>                              sort;                                                         // 0x0070(0x0010)
    uint32_t                                      combinable;                                                   // 0x0080(0x0004)
    uint32_t                                      one;                                                          // 0x0084(0x0004)
    uint32_t                                      min;                                                          // 0x0088(0x0004)
    uint32_t                                      minimum;                                                      // 0x008C(0x0004)
    uint32_t                                      max;                                                          // 0x0090(0x0004)
    uint32_t                                      max;                                                          // 0x0094(0x0004)
    uint64_t                                      display;                                                      // 0x0098(0x0008)
    uint32_t                                      auto;                                                         // 0x00A0(0x0004)
    float                                         sale;                                                         // 0x00A4(0x0004)
    float                                         sale;                                                         // 0x00A8(0x0004)
    float                                         sale;                                                         // 0x00AC(0x0004)
    float                                         sale;                                                         // 0x00B0(0x0004)
    float                                         sale;                                                         // 0x00B4(0x0004)
    float                                         sale;                                                         // 0x00B8(0x0004)
    uint32_t                                      merge;                                                        // 0x00BC(0x0004)
    TArray<uint32_t>                              Tags;                                                         // 0x00C0(0x0010)
    FString                                       official;                                                     // 0x00D0(0x0010)
    uint32_t                                      official;                                                     // 0x00E0(0x0004)
    float                                         min;                                                          // 0x00E4(0x0004)
    float                                         max;                                                          // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    TArray<uint32_t>                              replace;                                                      // 0x00F0(0x0010)
    TArray<uint32_t>                              replace;                                                      // 0x0100(0x0010)
    float                                         hour;                                                         // 0x0110(0x0004)
    float                                         once;                                                         // 0x0114(0x0004)
    float                                         official;                                                     // 0x0118(0x0004)
    float                                         official;                                                     // 0x011C(0x0004)
    uint32_t                                      item;                                                         // 0x0120(0x0004)
    uint32_t                                      standprice;                                                   // 0x0124(0x0004)
    uint32_t                                      standprice;                                                   // 0x0128(0x0004)
    uint32_t                                      avgprice;                                                     // 0x012C(0x0004)
    uint32_t                                      avgprice;                                                     // 0x0130(0x0004)
    uint32_t                                      step;                                                         // 0x0134(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionGetRightsWayTableRow
// Struct Size::0x0050
struct FAuctionGetRightsWayTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         desc;                                                         // 0x0010(0x0018)
    uint32_t                                      jump;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FText                                         btn;                                                          // 0x0030(0x0018)
    uint32_t                                      is;                                                           // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionDelayTableRow
// Struct Size::0x0018
struct FAuctionDelayTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      place;                                                        // 0x000C(0x0004)
    uint32_t                                      place;                                                        // 0x0010(0x0004)
    uint32_t                                      send;                                                         // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.AuctionCombineRecycleTableRow
// Struct Size::0x0018
struct FAuctionCombineRecycleTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      show;                                                         // 0x000C(0x0004)
    uint32_t                                      show;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ArmorProtectDisplayConfTableRow
// Struct Size::0x0040
struct FArmorProtectDisplayConfTableRow : public FTableRowBase
{
    uint32_t                                      protect;                                                      // 0x0008(0x0004)
    uint32_t                                      protect;                                                      // 0x000C(0x0004)
    FText                                         protect;                                                      // 0x0010(0x0018)
    uint32_t                                      protect;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       protect;                                                      // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.ArmorProtectConfTableRow
// Struct Size::0x0018
struct FArmorProtectConfTableRow : public FTableRowBase
{
    uint32_t                                      protect;                                                      // 0x0008(0x0004)
    uint32_t                                      protect;                                                      // 0x000C(0x0004)
    uint32_t                                      protect;                                                      // 0x0010(0x0004)
    uint32_t                                      protect;                                                      // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ArmorMaterialConfTableRow
// Struct Size::0x0010
struct FArmorMaterialConfTableRow : public FTableRowBase
{
    uint32_t                                      material;                                                     // 0x0008(0x0004)
    float                                         material;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ArmorDetailValueToAttributeTableRow
// Struct Size::0x0038
struct FArmorDetailValueToAttributeTableRow : public FTableRowBase
{
    FString                                       DetailValueName;                                              // 0x0008(0x0010)
    uint32_t                                      ConvertType;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ConvertTargetName;                                            // 0x0020(0x0010)
    uint32_t                                      OperationType;                                                // 0x0030(0x0004)
    uint32_t                                      SubOperationType;                                             // 0x0034(0x0004)
};


// ScriptStruct  UADataTableModule.ArmorDetailConfTableRow
// Struct Size::0x0198
struct FArmorDetailConfTableRow : public FTableRowBase
{
    uint32_t                                      armor;                                                        // 0x0008(0x0004)
    uint32_t                                      armor;                                                        // 0x000C(0x0004)
    uint32_t                                      armor;                                                        // 0x0010(0x0004)
    uint32_t                                      armor;                                                        // 0x0014(0x0004)
    TArray<uint32_t>                              armor;                                                        // 0x0018(0x0010)
    uint32_t                                      armor;                                                        // 0x0028(0x0004)
    uint32_t                                      armor;                                                        // 0x002C(0x0004)
    float                                         armor;                                                        // 0x0030(0x0004)
    float                                         armor;                                                        // 0x0034(0x0004)
    TArray<float>                                 ArmorDestructibilityScaleByPart;                              // 0x0038(0x0010)
    uint32_t                                      armor;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<uint32_t>                              size;                                                         // 0x0050(0x0010)
    FText                                         armor;                                                        // 0x0060(0x0018)
    float                                         armor;                                                        // 0x0078(0x0004)
    float                                         armor;                                                        // 0x007C(0x0004)
    float                                         armor;                                                        // 0x0080(0x0004)
    float                                         MoveSpeed;                                                    // 0x0084(0x0004)
    float                                         TurnSpeed;                                                    // 0x0088(0x0004)
    float                                         Engonomics;                                                   // 0x008C(0x0004)
    FText                                         SoundPick;                                                    // 0x0090(0x0018)
    FText                                         NoiseReduce;                                                  // 0x00A8(0x0018)
    FText                                         DefenseFlash;                                                 // 0x00C0(0x0018)
    FText                                         DefensePoison;                                                // 0x00D8(0x0018)
    uint32_t                                      SoundBlock;                                                   // 0x00F0(0x0004)
    float                                         SoundLevelInfluence;                                          // 0x00F4(0x0004)
    float                                         SoundMaxDistanceInfluenceFactor;                              // 0x00F8(0x0004)
    float                                         SoundIndicatorLevelInfluence;                                 // 0x00FC(0x0004)
    float                                         SoundIndicatorMaxDistanceInfluenceFactor;                     // 0x0100(0x0004)
    float                                         FlashTimeInfluenceFactor;                                     // 0x0104(0x0004)
    float                                         FlashEffectInfluenceFactor;                                   // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    FString                                       StaticScreenEffectPath;                                       // 0x0110(0x0010)
    FString                                       MaterialScreenEffectPath;                                     // 0x0120(0x0010)
    uint32_t                                      HasBrokenScreenEffect;                                        // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    FString                                       AssembleTag;                                                  // 0x0138(0x0010)
    FString                                       SubAssembleTag;                                               // 0x0148(0x0010)
    uint64_t                                      slot;                                                         // 0x0158(0x0008)
    uint64_t                                      sub;                                                          // 0x0160(0x0008)
    TArray<FWeaponSocket>                         Sockets;                                                      // 0x0168(0x0010)
    TArray<uint32_t>                              ConflictedItemIds;                                            // 0x0178(0x0010)
    TArray<uint32_t>                              IgnoreSoundIndicatorType;                                     // 0x0188(0x0010)
};


// ScriptStruct  UADataTableModule.AntipenetrationConfTableRow
// Struct Size::0x0010
struct FAntipenetrationConfTableRow : public FTableRowBase
{
    uint32_t                                      material;                                                     // 0x0008(0x0004)
    uint32_t                                      material;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.AmmoNumTableRow
// Struct Size::0x00F8
struct FAmmoNumTableRow : public FTableRowBase
{
    uint64_t                                      magazine;                                                     // 0x0008(0x0008)
    int32_t                                       Type;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         full;                                                         // 0x0018(0x0018)
    uint32_t                                      full;                                                         // 0x0030(0x0004)
    uint32_t                                      full;                                                         // 0x0034(0x0004)
    FText                                         almostfull;                                                   // 0x0038(0x0018)
    int32_t                                       almostfull;                                                   // 0x0050(0x0004)
    int32_t                                       almostfull;                                                   // 0x0054(0x0004)
    FText                                         morethanhalf;                                                 // 0x0058(0x0018)
    int32_t                                       morethanhalf;                                                 // 0x0070(0x0004)
    int32_t                                       morethanhalf;                                                 // 0x0074(0x0004)
    FText                                         abouthalf;                                                    // 0x0078(0x0018)
    int32_t                                       abouthalf;                                                    // 0x0090(0x0004)
    int32_t                                       abouthalf;                                                    // 0x0094(0x0004)
    FText                                         lessthanhalf;                                                 // 0x0098(0x0018)
    int32_t                                       lessthanhalf;                                                 // 0x00B0(0x0004)
    int32_t                                       lessthanhalf;                                                 // 0x00B4(0x0004)
    FText                                         almostempty;                                                  // 0x00B8(0x0018)
    int32_t                                       almostempty;                                                  // 0x00D0(0x0004)
    int32_t                                       almostempty;                                                  // 0x00D4(0x0004)
    FText                                         empty;                                                        // 0x00D8(0x0018)
    int32_t                                       Empty;                                                        // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  UADataTableModule.AmmoMagazineRelationTableRow
// Struct Size::0x0020
struct FAmmoMagazineRelationTableRow : public FTableRowBase
{
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      ammo;                                                         // 0x000C(0x0004)
    uint32_t                                      ammo;                                                         // 0x0010(0x0004)
    uint32_t                                      capacity;                                                     // 0x0014(0x0004)
    uint32_t                                      filling;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.AiLimitConfTableRow
// Struct Size::0x0020
struct FAiLimitConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    float                                         normal;                                                       // 0x000C(0x0004)
    float                                         redline;                                                      // 0x0010(0x0004)
    uint32_t                                      calc;                                                         // 0x0014(0x0004)
    uint32_t                                      loot;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.AiLevelConfTableRow
// Struct Size::0x0018
struct FAiLevelConfTableRow : public FTableRowBase
{
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    uint32_t                                      start;                                                        // 0x000C(0x0004)
    uint32_t                                      end;                                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.AiDropConfTableRow
// Struct Size::0x0020
struct FAiDropConfTableRow : public FTableRowBase
{
    uint32_t                                      group;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FDropItemList>                         drop;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.DropItemList
// Struct Size::0x0010
struct FDropItemList
{
    uint32_t                                      act;                                                          // 0x0000(0x0004)
    uint32_t                                      item;                                                         // 0x0004(0x0004)
    uint32_t                                      Num;                                                          // 0x0008(0x0004)
    uint32_t                                      Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.AiCommonConfTableRow
// Struct Size::0x0020
struct FAiCommonConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Val;                                                          // 0x000C(0x0004)
    FString                                       pic;                                                          // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AdditionalTranslationConfTableRow
// Struct Size::0x0038
struct FAdditionalTranslationConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         translation;                                                  // 0x0010(0x0018)
    TArray<FText>                                 translation;                                                  // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.AdcodeConfTableRow
// Struct Size::0x0020
struct FAdcodeConfTableRow : public FTableRowBase
{
    uint32_t                                      ADCode;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FText>                                 Region;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActWeekendPaybackConfTableRow
// Struct Size::0x0020
struct FActWeekendPaybackConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     hide;                                                         // 0x0010(0x0008)
    FDateTime                                     payback;                                                      // 0x0018(0x0008)
};


// ScriptStruct  UADataTableModule.ActTaskMetiConfTableRow
// Struct Size::0x0058
struct FActTaskMetiConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      active;                                                       // 0x000C(0x0004)
    uint32_t                                      reset;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         pic;                                                          // 0x0018(0x0018)
    TArray<uint32_t>                              meti;                                                         // 0x0030(0x0010)
    uint32_t                                      meti;                                                         // 0x0040(0x0004)
    uint32_t                                      meti;                                                         // 0x0044(0x0004)
    TArray<uint32_t>                              default;                                                      // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.ActTaskConfTableRow
// Struct Size::0x0020
struct FActTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      reset;                                                        // 0x000C(0x0004)
    TArray<uint32_t>                              task;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActSingleRechargeConfTableRow
// Struct Size::0x0020
struct FActSingleRechargeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      threshold;                                                    // 0x000C(0x0004)
    TArray<FAwardSingleChargeConf>                award;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AwardSingleChargeConf
// Struct Size::0x0008
struct FAwardSingleChargeConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActSimpleConfTableRow
// Struct Size::0x0030
struct FActSimpleConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FShowItem>                             show;                                                         // 0x0010(0x0010)
    TArray<FPPTNode>                              ppts;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.PPTNode
// Struct Size::0x0030
struct FPPTNode
{
    FString                                       Title;                                                        // 0x0000(0x0010)
    FString                                       desc;                                                         // 0x0010(0x0010)
    FString                                       pic;                                                          // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ShowItem
// Struct Size::0x0020
struct FShowItem
{
    TArray<uint32_t>                              ID;                                                           // 0x0000(0x0010)
    FString                                       desc;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActSideClashConfTableRow
// Struct Size::0x0050
struct FActSideClashConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      play;                                                         // 0x000C(0x0004)
    uint32_t                                      jump;                                                         // 0x0010(0x0004)
    uint32_t                                      cdis;                                                         // 0x0014(0x0004)
    uint32_t                                      mnst;                                                         // 0x0018(0x0004)
    uint32_t                                      survive;                                                      // 0x001C(0x0004)
    TArray<FPointEvent>                           cdis;                                                         // 0x0020(0x0010)
    uint32_t                                      cdis;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FPointEvent>                           mnst;                                                         // 0x0038(0x0010)
    uint32_t                                      mnst;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.PointEvent
// Struct Size::0x0004
struct FPointEvent
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
};


// ScriptStruct  UADataTableModule.ActServerProgressConfTableRow
// Struct Size::0x0050
struct FActServerProgressConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              inc;                                                          // 0x0010(0x0010)
    TArray<float>                                 inc;                                                          // 0x0020(0x0010)
    uint32_t                                      max;                                                          // 0x0030(0x0004)
    uint32_t                                      task;                                                         // 0x0034(0x0004)
    uint32_t                                      limit;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FActServerProgressRewardConf>          rewards;                                                      // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.ActServerProgressRewardConf
// Struct Size::0x0040
struct FActServerProgressRewardConf
{
    uint32_t                                      Progress;                                                     // 0x0000(0x0004)
    uint32_t                                      Type;                                                         // 0x0004(0x0004)
    uint32_t                                      item;                                                         // 0x0008(0x0004)
    uint32_t                                      item;                                                         // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       cdn;                                                          // 0x0018(0x0010)
    FString                                       desc;                                                         // 0x0028(0x0010)
    uint32_t                                      is;                                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.ActSeriesActConfTableRow
// Struct Size::0x0040
struct FActSeriesActConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      child;                                                        // 0x000C(0x0004)
    uint32_t                                      reward;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FText                                         reward;                                                       // 0x0018(0x0018)
    TArray<FChildActConf>                         child;                                                        // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.ChildActConf
// Struct Size::0x0058
struct FChildActConf
{
    uint32_t                                      child;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FText                                         thumb;                                                        // 0x0008(0x0018)
    FText                                         thumb;                                                        // 0x0020(0x0018)
    FText                                         reward;                                                       // 0x0038(0x0018)
    uint32_t                                      Difficulty;                                                   // 0x0050(0x0004)
    uint32_t                                      reject;                                                       // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.ActSecretTaskConfTableRow
// Struct Size::0x0030
struct FActSecretTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      exchange;                                                     // 0x000C(0x0004)
    TArray<FPhotoTaskConf>                        photo;                                                        // 0x0010(0x0010)
    TArray<FAwardItemConf>                        all;                                                          // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.PhotoTaskConf
// Struct Size::0x000C
struct FPhotoTaskConf
{
    uint32_t                                      photo;                                                        // 0x0000(0x0004)
    uint32_t                                      Level;                                                        // 0x0004(0x0004)
    uint32_t                                      task;                                                         // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActSeasonPageConfTableRow
// Struct Size::0x0060
struct FActSeasonPageConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      entry;                                                        // 0x000C(0x0004)
    uint32_t                                      sys;                                                          // 0x0010(0x0004)
    uint32_t                                      season;                                                       // 0x0014(0x0004)
    uint32_t                                      display;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       begin;                                                        // 0x0030(0x0010)
    FString                                       Description;                                                  // 0x0040(0x0010)
    FString                                       pic;                                                          // 0x0050(0x0010)
};


// ScriptStruct  UADataTableModule.ActSeasonActEntranceConfTableRow
// Struct Size::0x0058
struct FActSeasonActEntranceConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      main;                                                         // 0x000C(0x0004)
    uint32_t                                      Pos;                                                          // 0x0010(0x0004)
    uint32_t                                      jumpgoto;                                                     // 0x0014(0x0004)
    FString                                       Name;                                                         // 0x0018(0x0010)
    FString                                       Description;                                                  // 0x0028(0x0010)
    FString                                       pic;                                                          // 0x0038(0x0010)
    FString                                       mask;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.ActScratchCardConfTableRow
// Struct Size::0x0030
struct FActScratchCardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      dynamic;                                                      // 0x000C(0x0004)
    uint32_t                                      history;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<uint32_t>                              marquee;                                                      // 0x0018(0x0010)
    uint32_t                                      marquee;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.ActScavGuideConfTableRow
// Struct Size::0x0030
struct FActScavGuideConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       pic;                                                          // 0x0010(0x0010)
    FString                                       notify;                                                       // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.ActRelatedItemsConfTableRow
// Struct Size::0x0020
struct FActRelatedItemsConfTableRow : public FTableRowBase
{
    uint32_t                                      act;                                                          // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              Items;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActRedPacketConfTableRow
// Struct Size::0x0020
struct FActRedPacketConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      reset;                                                        // 0x000C(0x0004)
    TArray<FTaskListConf>                         task;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.TaskListConf
// Struct Size::0x000C
struct FTaskListConf
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    uint32_t                                      Reset;                                                        // 0x0004(0x0004)
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActRecruitGiftPackageConfTableRow
// Struct Size::0x0020
struct FActRecruitGiftPackageConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FGiftItem>                             gift;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GiftItem
// Struct Size::0x0058
struct FGiftItem
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      item;                                                         // 0x0004(0x0004)
    FString                                       item;                                                         // 0x0008(0x0010)
    FString                                       item;                                                         // 0x0018(0x0010)
    FString                                       item;                                                         // 0x0028(0x0010)
    FString                                       item;                                                         // 0x0038(0x0010)
    uint32_t                                      exchange;                                                     // 0x0048(0x0004)
    uint32_t                                      exchange;                                                     // 0x004C(0x0004)
    uint32_t                                      discount;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.ActRankConfTableRow
// Struct Size::0x0030
struct FActRankConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     frozen;                                                       // 0x0010(0x0008)
    uint32_t                                      mail;                                                         // 0x0018(0x0004)
    uint32_t                                      score;                                                        // 0x001C(0x0004)
    TArray<FRangeAward>                           awards;                                                       // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.RangeAward
// Struct Size::0x000C
struct FRangeAward
{
    uint32_t                                      min;                                                          // 0x0000(0x0004)
    uint32_t                                      max;                                                          // 0x0004(0x0004)
    uint32_t                                      award;                                                        // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActRandomTaskConfTableRow
// Struct Size::0x0028
struct FActRandomTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      random;                                                       // 0x000C(0x0004)
    uint32_t                                      reset;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FTaskItem>                             task;                                                         // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.TaskItem
// Struct Size::0x0008
struct FTaskItem
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActRandomForgeConfTableRow
// Struct Size::0x0038
struct FActRandomForgeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              quick;                                                        // 0x0010(0x0010)
    uint32_t                                      deluxe;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<ForgePool>                             forge;                                                        // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.orgePool
// Struct Size::0x0014
struct ForgePool
{
    uint32_t                                      Cost;                                                         // 0x0000(0x0004)
    uint32_t                                      normal;                                                       // 0x0004(0x0004)
    uint32_t                                      lucky;                                                        // 0x0008(0x0004)
    uint32_t                                      cost;                                                         // 0x000C(0x0004)
    uint32_t                                      luck;                                                         // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.ActProbShowConfTableRow
// Struct Size::0x0050
struct FActProbShowConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              item;                                                         // 0x0010(0x0010)
    TArray<uint32_t>                              is;                                                           // 0x0020(0x0010)
    TArray<uint32_t>                              item;                                                         // 0x0030(0x0010)
    TArray<uint32_t>                              Weight;                                                       // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.ActPrivilegeDiscountConfTableRow
// Struct Size::0x0020
struct FActPrivilegeDiscountConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Time;                                                         // 0x000C(0x0004)
    TArray<FPrivilegeDiscountConf>                privilege;                                                    // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.PrivilegeDiscountConf
// Struct Size::0x000C
struct FPrivilegeDiscountConf
{
    uint32_t                                      privilege;                                                    // 0x0000(0x0004)
    uint32_t                                      duration;                                                     // 0x0004(0x0004)
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActPopImageConfTableRow
// Struct Size::0x0018
struct FActPopImageConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      json;                                                         // 0x0010(0x0004)
    uint32_t                                      Priority;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ActOpenBoxConfTableRow
// Struct Size::0x0058
struct FActOpenBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      daily;                                                        // 0x000C(0x0004)
    uint32_t                                      box;                                                          // 0x0010(0x0004)
    uint32_t                                      box;                                                          // 0x0014(0x0004)
    uint32_t                                      key;                                                          // 0x0018(0x0004)
    uint32_t                                      key;                                                          // 0x001C(0x0004)
    uint32_t                                      mall;                                                         // 0x0020(0x0004)
    uint32_t                                      pool;                                                         // 0x0024(0x0004)
    uint32_t                                      lucky;                                                        // 0x0028(0x0004)
    uint32_t                                      total;                                                        // 0x002C(0x0004)
    FString                                       banner;                                                       // 0x0030(0x0010)
    uint32_t                                      is;                                                           // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<uint32_t>                              step;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.ActMoneyBoxConfTableRow
// Struct Size::0x0050
struct FActMoneyBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      buy;                                                          // 0x000C(0x0004)
    uint32_t                                      buy;                                                          // 0x0010(0x0004)
    uint32_t                                      reward;                                                       // 0x0014(0x0004)
    uint32_t                                      base;                                                         // 0x0018(0x0004)
    uint32_t                                      battle;                                                       // 0x001C(0x0004)
    uint32_t                                      escape;                                                       // 0x0020(0x0004)
    uint32_t                                      kill;                                                         // 0x0024(0x0004)
    uint32_t                                      take;                                                         // 0x0028(0x0004)
    uint32_t                                      take;                                                         // 0x002C(0x0004)
    FString                                       money;                                                        // 0x0030(0x0010)
    TArray<FMoneyBoxPicConf>                      money;                                                        // 0x0040(0x0010)
};


// ScriptStruct  UADataTableModule.MoneyBoxPicConf
// Struct Size::0x0018
struct FMoneyBoxPicConf
{
    FString                                       pic;                                                          // 0x0000(0x0010)
    uint32_t                                      percentage;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ActLuckyStarConfTableRow
// Struct Size::0x0068
struct FActLuckyStarConfTableRow : public FTableRowBase
{
    uint32_t                                      act;                                                          // 0x0008(0x0004)
    uint32_t                                      allow;                                                        // 0x000C(0x0004)
    FDateTime                                     spread;                                                       // 0x0010(0x0008)
    uint32_t                                      lucky;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FAwardItemConf>                        help;                                                         // 0x0020(0x0010)
    FText                                         notify;                                                       // 0x0030(0x0018)
    FText                                         notify;                                                       // 0x0048(0x0018)
    uint32_t                                      notify;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  UADataTableModule.ActLotteryStepConfTableRow
// Struct Size::0x0040
struct FActLotteryStepConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ticket;                                                       // 0x000C(0x0004)
    TArray<uint32_t>                              step;                                                         // 0x0010(0x0010)
    uint32_t                                      ticket;                                                       // 0x0020(0x0004)
    uint32_t                                      pool;                                                         // 0x0024(0x0004)
    TArray<uint32_t>                              guaranteed;                                                   // 0x0028(0x0010)
    uint32_t                                      daily;                                                        // 0x0038(0x0004)
    uint32_t                                      total;                                                        // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.ActLotteryNormalConfTableRow
// Struct Size::0x0058
struct FActLotteryNormalConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      ticket;                                                       // 0x000C(0x0004)
    uint32_t                                      single;                                                       // 0x0010(0x0004)
    uint32_t                                      multi;                                                        // 0x0014(0x0004)
    uint32_t                                      multi;                                                        // 0x0018(0x0004)
    uint32_t                                      ticket;                                                       // 0x001C(0x0004)
    uint32_t                                      pool;                                                         // 0x0020(0x0004)
    uint32_t                                      lucky;                                                        // 0x0024(0x0004)
    TArray<uint32_t>                              guaranteed;                                                   // 0x0028(0x0010)
    uint32_t                                      daily;                                                        // 0x0038(0x0004)
    uint32_t                                      total;                                                        // 0x003C(0x0004)
    uint32_t                                      free;                                                         // 0x0040(0x0004)
    uint32_t                                      free;                                                         // 0x0044(0x0004)
    uint32_t                                      free;                                                         // 0x0048(0x0004)
    uint32_t                                      shop;                                                         // 0x004C(0x0004)
    uint32_t                                      currency;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.ActInviteNewConfTableRow
// Struct Size::0x0030
struct FActInviteNewConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       all;                                                          // 0x0010(0x0010)
    TArray<FRewardConf>                           reward;                                                       // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.RewardConf
// Struct Size::0x0018
struct FRewardConf
{
    uint32_t                                      invite;                                                       // 0x0000(0x0004)
    uint32_t                                      Level;                                                        // 0x0004(0x0004)
    FString                                       reward;                                                       // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.ActIdentificationSpecificConfTableRow
// Struct Size::0x0068
struct FActIdentificationSpecificConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      act;                                                          // 0x000C(0x0004)
    FString                                       pic;                                                          // 0x0010(0x0010)
    FString                                       Description;                                                  // 0x0020(0x0010)
    uint32_t                                      Level;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FNeedEntryIDConf>                      need;                                                         // 0x0038(0x0010)
    uint32_t                                      can;                                                          // 0x0048(0x0004)
    uint32_t                                      daily;                                                        // 0x004C(0x0004)
    uint32_t                                      weekly;                                                       // 0x0050(0x0004)
    uint32_t                                      total;                                                        // 0x0054(0x0004)
    TArray<FActivateSpecificAwardConf>            activate;                                                     // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.ActivateSpecificAwardConf
// Struct Size::0x0010
struct FActivateSpecificAwardConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.NeedEntryIDConf
// Struct Size::0x0008
struct FNeedEntryIDConf
{
    uint32_t                                      need;                                                         // 0x0000(0x0004)
    uint32_t                                      Slot;                                                         // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActIdentificationEntryConfTableRow
// Struct Size::0x0078
struct FActIdentificationEntryConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      act;                                                          // 0x000C(0x0004)
    FText                                         Description;                                                  // 0x0010(0x0018)
    uint32_t                                      Level;                                                        // 0x0028(0x0004)
    uint32_t                                      Slot;                                                         // 0x002C(0x0004)
    uint32_t                                      Weight;                                                       // 0x0030(0x0004)
    uint32_t                                      value;                                                        // 0x0034(0x0004)
    TArray<uint32_t>                              companion;                                                    // 0x0038(0x0010)
    uint32_t                                      is;                                                           // 0x0048(0x0004)
    uint32_t                                      is;                                                           // 0x004C(0x0004)
    uint32_t                                      is;                                                           // 0x0050(0x0004)
    uint32_t                                      can;                                                          // 0x0054(0x0004)
    uint32_t                                      daily;                                                        // 0x0058(0x0004)
    uint32_t                                      weekly;                                                       // 0x005C(0x0004)
    uint32_t                                      total;                                                        // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TArray<FActivateAwardConf>                    activate;                                                     // 0x0068(0x0010)
};


// ScriptStruct  UADataTableModule.ActivateAwardConf
// Struct Size::0x0010
struct FActivateAwardConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ActIdentificationConfTableRow
// Struct Size::0x0038
struct FActIdentificationConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      reidentification;                                             // 0x000C(0x0004)
    uint32_t                                      weekly;                                                       // 0x0010(0x0004)
    uint32_t                                      weekly;                                                       // 0x0014(0x0004)
    uint32_t                                      always;                                                       // 0x0018(0x0004)
    uint32_t                                      gurantee;                                                     // 0x001C(0x0004)
    uint32_t                                      mail;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<uint32_t>                              related;                                                      // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.ActGroupPurchaseConfTableRow
// Struct Size::0x0030
struct FActGroupPurchaseConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      buy;                                                          // 0x000C(0x0004)
    uint32_t                                      expectation;                                                  // 0x0010(0x0004)
    uint32_t                                      refund;                                                       // 0x0014(0x0004)
    uint32_t                                      extra;                                                        // 0x0018(0x0004)
    uint32_t                                      recharge;                                                     // 0x001C(0x0004)
    TArray<FDiscountConf>                         discount;                                                     // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.DiscountConf
// Struct Size::0x000C
struct FDiscountConf
{
    uint32_t                                      purchase;                                                     // 0x0000(0x0004)
    uint32_t                                      discount;                                                     // 0x0004(0x0004)
    uint32_t                                      refund;                                                       // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActGoodCommentConfTableRow
// Struct Size::0x0048
struct FActGoodCommentConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<uint32_t>                              trigger;                                                      // 0x0010(0x0010)
    TArray<uint32_t>                              trigger;                                                      // 0x0020(0x0010)
    uint32_t                                      trigger;                                                      // 0x0030(0x0004)
    uint32_t                                      max;                                                          // 0x0034(0x0004)
    TArray<FChannelInfo>                          channel;                                                      // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.ChannelInfo
// Struct Size::0x0018
struct FChannelInfo
{
    uint32_t                                      ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       URL;                                                          // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.ActGoldenWeekConfTableRow
// Struct Size::0x0020
struct FActGoldenWeekConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      task;                                                         // 0x000C(0x0004)
    TArray<FGoldenWeekTreasuryConf>               treasure;                                                     // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.GoldenWeekTreasuryConf
// Struct Size::0x0010
struct FGoldenWeekTreasuryConf
{
    uint32_t                                      treasure;                                                     // 0x0000(0x0004)
    uint32_t                                      treasure;                                                     // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ActGoldenWeekBoxConfTableRow
// Struct Size::0x0038
struct FActGoldenWeekBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FDateTime                                     take;                                                         // 0x0010(0x0008)
    FDateTime                                     take;                                                         // 0x0018(0x0008)
    uint32_t                                      score;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FActGoldenWeekCDNConf>                 pic;                                                          // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.ActGoldenWeekCDNConf
// Struct Size::0x0018
struct FActGoldenWeekCDNConf
{
    uint32_t                                      score;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       treasure;                                                     // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.ActGoldIdCardConfTableRow
// Struct Size::0x0030
struct FActGoldIdCardConfTableRow : public FTableRowBase
{
    uint64_t                                      ID;                                                           // 0x0008(0x0008)
    uint32_t                                      inner;                                                        // 0x0010(0x0004)
    uint32_t                                      is;                                                           // 0x0014(0x0004)
    FText                                         cdn;                                                          // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.ActGeneralOpenBoxConfTableRow
// Struct Size::0x0030
struct FActGeneralOpenBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      daily;                                                        // 0x000C(0x0004)
    uint32_t                                      box;                                                          // 0x0010(0x0004)
    uint32_t                                      box;                                                          // 0x0014(0x0004)
    uint32_t                                      key;                                                          // 0x0018(0x0004)
    uint32_t                                      key;                                                          // 0x001C(0x0004)
    uint32_t                                      normal;                                                       // 0x0020(0x0004)
    uint32_t                                      lucky;                                                        // 0x0024(0x0004)
    uint32_t                                      lucky;                                                        // 0x0028(0x0004)
    uint32_t                                      prob;                                                         // 0x002C(0x0004)
};


// ScriptStruct  UADataTableModule.ActFriNumInviteCodeConfTableRow
// Struct Size::0x0068
struct FActFriNumInviteCodeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      refresh;                                                      // 0x000C(0x0004)
    FText                                         act;                                                          // 0x0010(0x0018)
    FText                                         act;                                                          // 0x0028(0x0018)
    FText                                         act;                                                          // 0x0040(0x0018)
    TArray<FriNumTaskConf>                        fri;                                                          // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.riNumTaskConf
// Struct Size::0x0038
struct FriNumTaskConf
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    uint32_t                                      invite;                                                       // 0x0004(0x0004)
    FText                                         task;                                                         // 0x0008(0x0018)
    FText                                         reward;                                                       // 0x0020(0x0018)
};


// ScriptStruct  UADataTableModule.ActFriLevelInviteCodeConfTableRow
// Struct Size::0x0068
struct FActFriLevelInviteCodeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      refresh;                                                      // 0x000C(0x0004)
    FText                                         act;                                                          // 0x0010(0x0018)
    FText                                         act;                                                          // 0x0028(0x0018)
    FText                                         act;                                                          // 0x0040(0x0018)
    TArray<FriLevelTaskConf>                      fri;                                                          // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.riLevelTaskConf
// Struct Size::0x0040
struct FriLevelTaskConf
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    uint32_t                                      complete;                                                     // 0x0004(0x0004)
    uint32_t                                      Level;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         task;                                                         // 0x0010(0x0018)
    FText                                         reward;                                                       // 0x0028(0x0018)
};


// ScriptStruct  UADataTableModule.ActFirstLoseEquipConfTableRow
// Struct Size::0x0020
struct FActFirstLoseEquipConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      min;                                                          // 0x000C(0x0004)
    TArray<FirstLoseEquipConf>                    reward;                                                       // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.irstLoseEquipConf
// Struct Size::0x0008
struct FirstLoseEquipConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActExpressTaskPoolConfTableRow
// Struct Size::0x0058
struct FActExpressTaskPoolConfTableRow : public FTableRowBase
{
    uint32_t                                      act;                                                          // 0x0008(0x0004)
    uint32_t                                      task;                                                         // 0x000C(0x0004)
    TArray<uint32_t>                              init;                                                         // 0x0010(0x0010)
    uint32_t                                      fill;                                                         // 0x0020(0x0004)
    uint32_t                                      refresh;                                                      // 0x0024(0x0004)
    TArray<FWeightedTask>                         task;                                                         // 0x0028(0x0010)
    TArray<FWeightedTask>                         task;                                                         // 0x0038(0x0010)
    TArray<FWeightedTask>                         task;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.WeightedTask
// Struct Size::0x0040
struct FWeightedTask
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    uint32_t                                      Weight;                                                       // 0x0004(0x0004)
    FText                                         rsc;                                                          // 0x0008(0x0018)
    FText                                         special;                                                      // 0x0020(0x0018)
    uint32_t                                      mail;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UADataTableModule.ActExchangeGlobalConfTableRow
// Struct Size::0x0010
struct FActExchangeGlobalConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      history;                                                      // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.ActExchangeConfTableRow
// Struct Size::0x0058
struct FActExchangeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      pre;                                                          // 0x000C(0x0004)
    uint32_t                                      total;                                                        // 0x0010(0x0004)
    uint32_t                                      daily;                                                        // 0x0014(0x0004)
    uint32_t                                      week;                                                         // 0x0018(0x0004)
    uint32_t                                      act;                                                          // 0x001C(0x0004)
    TArray<FCostItemNode>                         cost;                                                         // 0x0020(0x0010)
    TArray<FSubmitItemNode>                       submit;                                                       // 0x0030(0x0010)
    FString                                       reward;                                                       // 0x0040(0x0010)
    uint32_t                                      is;                                                           // 0x0050(0x0004)
    uint32_t                                      server;                                                       // 0x0054(0x0004)
};


// ScriptStruct  UADataTableModule.SubmitItemNode
// Struct Size::0x0014
struct FSubmitItemNode
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
    uint32_t                                      is;                                                           // 0x000C(0x0004)
    uint32_t                                      is;                                                           // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.CostItemNode
// Struct Size::0x0008
struct FCostItemNode
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActEntryConfTableRow
// Struct Size::0x00B8
struct FActEntryConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      sys;                                                          // 0x000C(0x0004)
    uint32_t                                      Type;                                                         // 0x0010(0x0004)
    uint32_t                                      tab;                                                          // 0x0014(0x0004)
    uint32_t                                      display;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       icon;                                                         // 0x0030(0x0010)
    uint32_t                                      countdown;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       tmplt;                                                        // 0x0048(0x0010)
    uint32_t                                      disappear;                                                    // 0x0058(0x0004)
    uint32_t                                      min;                                                          // 0x005C(0x0004)
    FString                                       client;                                                       // 0x0060(0x0010)
    FString                                       client;                                                       // 0x0070(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x0080(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x0090(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x00A0(0x0010)
    uint32_t                                      country;                                                      // 0x00B0(0x0004)
    uint32_t                                      is;                                                           // 0x00B4(0x0004)
};


// ScriptStruct  UADataTableModule.ActDoss2ConfTableRow
// Struct Size::0x0020
struct FActDoss2ConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      contact;                                                      // 0x000C(0x0004)
    FString                                       dialogue;                                                     // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActDailyLoginConfTableRow
// Struct Size::0x0028
struct FActDailyLoginConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      reset;                                                        // 0x000C(0x0004)
    uint32_t                                      need;                                                         // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FAwardItemConf>                        reward;                                                       // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.ActContestConfTableRow
// Struct Size::0x0048
struct FActContestConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
    FString                                       Str;                                                          // 0x0018(0x0010)
    FDateTime                                     begin;                                                        // 0x0028(0x0008)
    FDateTime                                     end;                                                          // 0x0030(0x0008)
    TArray<FRewardSeg>                            reward;                                                       // 0x0038(0x0010)
};


// ScriptStruct  UADataTableModule.RewardSeg
// Struct Size::0x0018
struct FRewardSeg
{
    uint32_t                                      start;                                                        // 0x0000(0x0004)
    uint32_t                                      end;                                                          // 0x0004(0x0004)
    FString                                       reward;                                                       // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.ActConfigTableRow
// Struct Size::0x01F0
struct FActConfigTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      display;                                                      // 0x000C(0x0004)
    uint32_t                                      Type;                                                         // 0x0010(0x0004)
    uint32_t                                      icon;                                                         // 0x0014(0x0004)
    FText                                         Name;                                                         // 0x0018(0x0018)
    uint32_t                                      rp;                                                           // 0x0030(0x0004)
    uint32_t                                      is;                                                           // 0x0034(0x0004)
    TArray<uint32_t>                              closed;                                                       // 0x0038(0x0010)
    TArray<uint32_t>                              open;                                                         // 0x0048(0x0010)
    FString                                       tab;                                                          // 0x0058(0x0010)
    uint32_t                                      tab;                                                          // 0x0068(0x0004)
    uint32_t                                      theme;                                                        // 0x006C(0x0004)
    FString                                       tab;                                                          // 0x0070(0x0010)
    uint32_t                                      precondition;                                                 // 0x0080(0x0004)
    uint32_t                                      disappear;                                                    // 0x0084(0x0004)
    uint32_t                                      min;                                                          // 0x0088(0x0004)
    uint32_t                                      max;                                                          // 0x008C(0x0004)
    uint32_t                                      parent;                                                       // 0x0090(0x0004)
    uint32_t                                      is;                                                           // 0x0094(0x0004)
    FDateTime                                     begin;                                                        // 0x0098(0x0008)
    FDateTime                                     begin;                                                        // 0x00A0(0x0008)
    FDateTime                                     end;                                                          // 0x00A8(0x0008)
    uint32_t                                      continue;                                                     // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FString                                       des;                                                          // 0x00B8(0x0010)
    FString                                       act;                                                          // 0x00C8(0x0010)
    FString                                       notice;                                                       // 0x00D8(0x0010)
    FString                                       json;                                                         // 0x00E8(0x0010)
    FString                                       reward;                                                       // 0x00F8(0x0010)
    FString                                       pic;                                                          // 0x0108(0x0010)
    FString                                       Jump;                                                         // 0x0118(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x0128(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x0138(0x0010)
    TArray<uint32_t>                              forbidden;                                                    // 0x0148(0x0010)
    FString                                       client;                                                       // 0x0158(0x0010)
    FString                                       client;                                                       // 0x0168(0x0010)
    FString                                       bp;                                                           // 0x0178(0x0010)
    FString                                       URL;                                                          // 0x0188(0x0010)
    uint32_t                                      tag;                                                          // 0x0198(0x0004)
    uint32_t                                      tag;                                                          // 0x019C(0x0004)
    uint32_t                                      countdown;                                                    // 0x01A0(0x0004)
    uint32_t                                      core;                                                         // 0x01A4(0x0004)
    uint32_t                                      core;                                                         // 0x01A8(0x0004)
    uint32_t                                      country;                                                      // 0x01AC(0x0004)
    uint32_t                                      through;                                                      // 0x01B0(0x0004)
    uint32_t                                      can;                                                          // 0x01B4(0x0004)
    uint32_t                                      rate;                                                         // 0x01B8(0x0004)
    uint32_t                                      is;                                                           // 0x01BC(0x0004)
    FString                                       share;                                                        // 0x01C0(0x0010)
    FString                                       share;                                                        // 0x01D0(0x0010)
    uint32_t                                      open;                                                         // 0x01E0(0x0004)
    uint32_t                                      not;                                                          // 0x01E4(0x0004)
    uint32_t                                      is;                                                           // 0x01E8(0x0004)
    uint32_t                                      check;                                                        // 0x01EC(0x0004)
};


// ScriptStruct  UADataTableModule.ActCollectClueConfTableRow
// Struct Size::0x0030
struct FActCollectClueConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FinalRewardConf>                       rewards;                                                      // 0x0010(0x0010)
    TArray<FTaskTextConf>                         task;                                                         // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.TaskTextConf
// Struct Size::0x0038
struct FTaskTextConf
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Text;                                                         // 0x0018(0x0010)
    FString                                       pic;                                                          // 0x0028(0x0010)
};


// ScriptStruct  UADataTableModule.inalRewardConf
// Struct Size::0x000C
struct FinalRewardConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
    uint32_t                                      is;                                                           // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.ActCodePacketConfTableRow
// Struct Size::0x0020
struct FActCodePacketConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FCodePacketConf>                       code;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.CodePacketConf
// Struct Size::0x0040
struct FCodePacketConf
{
    uint32_t                                      task;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ntf;                                                          // 0x0008(0x0010)
    FString                                       Text;                                                         // 0x0018(0x0010)
    uint32_t                                      finish;                                                       // 0x0028(0x0004)
    uint32_t                                      Reset;                                                        // 0x002C(0x0004)
    FString                                       Effect;                                                       // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.ActClassTaskConfTableRow
// Struct Size::0x0020
struct FActClassTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      class;                                                        // 0x000C(0x0004)
    TArray<FClassTaskConf>                        task;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ClassTaskConf
// Struct Size::0x0018
struct FClassTaskConf
{
    uint32_t                                      bound;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<uint32_t>                              Tasks;                                                        // 0x0008(0x0010)
};


// ScriptStruct  UADataTableModule.ActCdkConfTableRow
// Struct Size::0x0058
struct FActCdkConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    uint32_t                                      act;                                                          // 0x0020(0x0004)
    uint32_t                                      task;                                                         // 0x0024(0x0004)
    FString                                       cdk;                                                          // 0x0028(0x0010)
    uint32_t                                      mail;                                                         // 0x0038(0x0004)
    uint32_t                                      marquee;                                                      // 0x003C(0x0004)
    uint32_t                                      server;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       website;                                                      // 0x0048(0x0010)
};


// ScriptStruct  UADataTableModule.ActBlindBoxConfTableRow
// Struct Size::0x0020
struct FActBlindBoxConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBlindBoxConf>                         rewards;                                                      // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.BlindBoxConf
// Struct Size::0x0020
struct FBlindBoxConf
{
    uint32_t                                      pool;                                                         // 0x0000(0x0004)
    uint32_t                                      treasure;                                                     // 0x0004(0x0004)
    FDateTime                                     begin;                                                        // 0x0008(0x0008)
    FDateTime                                     end;                                                          // 0x0010(0x0008)
    uint32_t                                      jump;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UADataTableModule.ActBankruptConfTableRow
// Struct Size::0x0028
struct FActBankruptConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       Val;                                                          // 0x0010(0x0008)
    FString                                       Str;                                                          // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.ActAwardConfTableRow
// Struct Size::0x0020
struct FActAwardConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FAwardItemConf>                        award;                                                        // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.ActAccumRechargeConfTableRow
// Struct Size::0x0028
struct FActAccumRechargeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      total;                                                        // 0x000C(0x0004)
    uint32_t                                      Stage;                                                        // 0x0010(0x0004)
    uint32_t                                      threshold;                                                    // 0x0014(0x0004)
    TArray<FAwardAccumRechargeConf>               award;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.AwardAccumRechargeConf
// Struct Size::0x0008
struct FAwardAccumRechargeConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.ActAccumConsumeConfTableRow
// Struct Size::0x0028
struct FActAccumConsumeConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      total;                                                        // 0x000C(0x0004)
    uint32_t                                      Stage;                                                        // 0x0010(0x0004)
    uint32_t                                      threshold;                                                    // 0x0014(0x0004)
    TArray<FAwardAccumConsumeConf>                award;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UADataTableModule.AwardAccumConsumeConf
// Struct Size::0x0008
struct FAwardAccumConsumeConf
{
    uint32_t                                      item;                                                         // 0x0000(0x0004)
    uint32_t                                      Num;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.AchievementConfTableRow
// Struct Size::0x0078
struct FAchievementConfTableRow : public FTableRowBase
{
    uint32_t                                      badge;                                                        // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    uint32_t                                      sub;                                                          // 0x0010(0x0004)
    uint32_t                                      season;                                                       // 0x0014(0x0004)
    FText                                         badge;                                                        // 0x0018(0x0018)
    FText                                         badge;                                                        // 0x0030(0x0018)
    uint32_t                                      need;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<uint32_t>                              task;                                                         // 0x0050(0x0010)
    FText                                         icon;                                                         // 0x0060(0x0018)
};


// ScriptStruct  UADataTableModule.AchieveTaskConfTableRow
// Struct Size::0x0098
struct FAchieveTaskConfTableRow : public FTableRowBase
{
    uint32_t                                      task;                                                         // 0x0008(0x0004)
    uint32_t                                      Type;                                                         // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FText                                         finish;                                                       // 0x0028(0x0018)
    FText                                         desc;                                                         // 0x0040(0x0018)
    FText                                         finish;                                                       // 0x0058(0x0018)
    uint32_t                                      target;                                                       // 0x0070(0x0004)
    uint32_t                                      Param1;                                                       // 0x0074(0x0004)
    uint32_t                                      Param2;                                                       // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<uint32_t>                              sub;                                                          // 0x0080(0x0010)
    uint32_t                                      Progress;                                                     // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  UADataTableModule.AchieveBadgeSlotTableRow
// Struct Size::0x0050
struct FAchieveBadgeSlotTableRow : public FTableRowBase
{
    uint32_t                                      slot;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         slot;                                                         // 0x0010(0x0018)
    FText                                         slot;                                                         // 0x0028(0x0018)
    uint32_t                                      is;                                                           // 0x0040(0x0004)
    uint32_t                                      sort;                                                         // 0x0044(0x0004)
    uint32_t                                      check;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  UADataTableModule.AccountBanReasonTableRow
// Struct Size::0x0030
struct FAccountBanReasonTableRow : public FTableRowBase
{
    FString                                       AccountBanID;                                                 // 0x0008(0x0010)
    FText                                         AccountBanReason;                                             // 0x0018(0x0018)
};


// ScriptStruct  UADataTableModule.AccessRepairDurabilityConfTableRow
// Struct Size::0x0020
struct FAccessRepairDurabilityConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FAccessDurabilityPriceConf>            durability;                                                   // 0x0010(0x0010)
};


// ScriptStruct  UADataTableModule.AccessDurabilityPriceConf
// Struct Size::0x0008
struct FAccessDurabilityPriceConf
{
    uint32_t                                      armor;                                                        // 0x0000(0x0004)
    uint32_t                                      durability;                                                   // 0x0004(0x0004)
};


// ScriptStruct  UADataTableModule.AccessMatArchIdConfTableRow
// Struct Size::0x0010
struct FAccessMatArchIdConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      material;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.AccessDurabilityArchIdConfTableRow
// Struct Size::0x0010
struct FAccessDurabilityArchIdConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    uint32_t                                      durability;                                                   // 0x000C(0x0004)
};


// ScriptStruct  UADataTableModule.AISpawnScavSpawnControllerTableRow
// Struct Size::0x00A8
struct FAISpawnScavSpawnControllerTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    int32_t                                       eventId;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 Weather;                                                      // 0x0028(0x0010)
    int32_t                                       SquadID;                                                      // 0x0038(0x0004)
    int32_t                                       FatherSquadID;                                                // 0x003C(0x0004)
    float                                         PlayerAroundRadius;                                           // 0x0040(0x0004)
    float                                         PlayerLineOfSight;                                            // 0x0044(0x0004)
    float                                         PlayerViewAngle;                                              // 0x0048(0x0004)
    int32_t                                       AIRandLimitationMin;                                          // 0x004C(0x0004)
    int32_t                                       AIRandLimitationMax;                                          // 0x0050(0x0004)
    bool                                          Loop;                                                         // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    float                                         FirstSpawnTime;                                               // 0x0058(0x0004)
    int32_t                                       TriggerVolumeID;                                              // 0x005C(0x0004)
    float                                         DeathDelay;                                                   // 0x0060(0x0004)
    int32_t                                       Reinforce;                                                    // 0x0064(0x0004)
    bool                                          IsPatrol;                                                     // 0x0068(0x0001)
    bool                                          SingleArea;                                                   // 0x0069(0x0001)
    char                                          pa_006A[0x0002]                                               // 0x006A(0x0002)
    int32_t                                       Priority;                                                     // 0x006C(0x0004)
    int32_t                                       FactionType;                                                  // 0x0070(0x0004)
    int32_t                                       GroupType;                                                    // 0x0074(0x0004)
    TArray<FScavWaveInfoArray>                    ScavWaveInfoArray;                                            // 0x0078(0x0010)
    TArray<FAreaInfo>                             AreaInfo;                                                     // 0x0088(0x0010)
    TArray<FAreaInfo>                             Reinforcement;                                                // 0x0098(0x0010)
};


// ScriptStruct  UADataTableModule.AreaInfo
// Struct Size::0x0018
struct FAreaInfo
{
    FString                                       AreaID;                                                       // 0x0000(0x0010)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UADataTableModule.ScavWaveInfoArray
// Struct Size::0x0014
struct FScavWaveInfoArray
{
    float                                         Probability;                                                  // 0x0000(0x0004)
    int32_t                                       Min;                                                          // 0x0004(0x0004)
    int32_t                                       Max;                                                          // 0x0008(0x0004)
    float                                         MinInterval;                                                  // 0x000C(0x0004)
    float                                         MaxInterval;                                                  // 0x0010(0x0004)
};


// ScriptStruct  UADataTableModule.AISpawnPlayerScavConfigTableRow
// Struct Size::0x0080
struct FAISpawnPlayerScavConfigTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    int32_t                                       eventId;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 Weather;                                                      // 0x0028(0x0010)
    int32_t                                       MinPlayerScavAINum;                                           // 0x0038(0x0004)
    int32_t                                       MaxPlayerScavAINum;                                           // 0x003C(0x0004)
    float                                         PlayerScavAIDelayTime;                                        // 0x0040(0x0004)
    float                                         PlayerScavAIEndTime;                                          // 0x0044(0x0004)
    float                                         PlayerScavAISpawnInterval;                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<int32_t>                               PlayerScavAIIDPool;                                           // 0x0050(0x0010)
    TArray<int32_t>                               PlayerScavAIEquipPool;                                        // 0x0060(0x0010)
    float                                         PlayerAroundRadius;                                           // 0x0070(0x0004)
    float                                         PlayerLineOfSight;                                            // 0x0074(0x0004)
    float                                         PlayerViewAngle;                                              // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  UADataTableModule.AISpawnPMCSpawnControllerTableRow
// Struct Size::0x0040
struct FAISpawnPMCSpawnControllerTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    int32_t                                       AISpawnConfigID;                                              // 0x0010(0x0004)
    int32_t                                       SquadID;                                                      // 0x0014(0x0004)
    int32_t                                       MinSquadNum;                                                  // 0x0018(0x0004)
    int32_t                                       MaxSquadNum;                                                  // 0x001C(0x0004)
    float                                         PlayerAroundRadius;                                           // 0x0020(0x0004)
    float                                         PlayerLineOfSight;                                            // 0x0024(0x0004)
    float                                         PlayerViewAngle;                                              // 0x0028(0x0004)
    bool                                          Priority;                                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    TArray<FAreaInfo>                             AreaInfo;                                                     // 0x0030(0x0010)
};


// ScriptStruct  UADataTableModule.AISpawnPMCConfigTableRow
// Struct Size::0x00D8
struct FAISpawnPMCConfigTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    int32_t                                       eventId;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 Weather;                                                      // 0x0028(0x0010)
    int32_t                                       MinPMCNum;                                                    // 0x0038(0x0004)
    int32_t                                       MaxPMCNum;                                                    // 0x003C(0x0004)
    int32_t                                       Plan1Weight;                                                  // 0x0040(0x0004)
    float                                         PMCAIDelayTime;                                               // 0x0044(0x0004)
    int32_t                                       MinPMCAITeamUpNum;                                            // 0x0048(0x0004)
    int32_t                                       MaxPMCAITeamUpNum;                                            // 0x004C(0x0004)
    float                                         PlayerAroundRadius;                                           // 0x0050(0x0004)
    float                                         PlayerLineOfSight;                                            // 0x0054(0x0004)
    float                                         PlayerViewAngle;                                              // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<int32_t>                               PMCAIIDPool;                                                  // 0x0060(0x0010)
    TArray<int32_t>                               PMCAIEquipPool;                                               // 0x0070(0x0010)
    TArray<FPMCAIEquipmentLimit>                  PMCAIEquipmentLimit;                                          // 0x0080(0x0010)
    int32_t                                       Plan2Wieght;                                                  // 0x0090(0x0004)
    float                                         PMCAIDelayTime2;                                              // 0x0094(0x0004)
    int32_t                                       MinPMCAITeamUpNum2;                                           // 0x0098(0x0004)
    int32_t                                       MaxPMCAITeamUpNum2;                                           // 0x009C(0x0004)
    TArray<int32_t>                               PMCAIIDPool2;                                                 // 0x00A0(0x0010)
    TArray<int32_t>                               PMCAIEquipPool2;                                              // 0x00B0(0x0010)
    float                                         ScanInterval;                                                 // 0x00C0(0x0004)
    float                                         SpawnInterval;                                                // 0x00C4(0x0004)
    float                                         DetectionTime;                                                // 0x00C8(0x0004)
    float                                         BattleIntensity;                                              // 0x00CC(0x0004)
    int32_t                                       HitNum;                                                       // 0x00D0(0x0004)
    int32_t                                       KillNum;                                                      // 0x00D4(0x0004)
};


// ScriptStruct  UADataTableModule.PMCAIEquipmentLimit
// Struct Size::0x000C
struct FPMCAIEquipmentLimit
{
    int32_t                                       EquipID;                                                      // 0x0000(0x0004)
    int32_t                                       Limit;                                                        // 0x0004(0x0004)
    int32_t                                       BackupID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  UADataTableModule.AISpawnBossSpawnControllerTableRow
// Struct Size::0x0088
struct FAISpawnBossSpawnControllerTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    TArray<float>                                 Weather;                                                      // 0x0020(0x0010)
    int32_t                                       SquadID;                                                      // 0x0030(0x0004)
    int32_t                                       BossID;                                                       // 0x0034(0x0004)
    int32_t                                       eventId;                                                      // 0x0038(0x0004)
    float                                         PlayerAroundRadius;                                           // 0x003C(0x0004)
    float                                         PlayerLineOfSight;                                            // 0x0040(0x0004)
    float                                         PlayerViewAngle;                                              // 0x0044(0x0004)
    float                                         Probability;                                                  // 0x0048(0x0004)
    int32_t                                       Weight;                                                       // 0x004C(0x0004)
    FText                                         MaxNumber;                                                    // 0x0050(0x0018)
    float                                         FirstSpawnTime;                                               // 0x0068(0x0004)
    int32_t                                       FactionType;                                                  // 0x006C(0x0004)
    int32_t                                       GroupType;                                                    // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FTriggerArea>                          BossArea;                                                     // 0x0078(0x0010)
};


// ScriptStruct  UADataTableModule.TriggerArea
// Struct Size::0x0030
struct FTriggerArea
{
    FString                                       AreaID;                                                       // 0x0000(0x0010)
    FString                                       TriggerEvent;                                                 // 0x0010(0x0010)
    FString                                       FollowArea;                                                   // 0x0020(0x0010)
};


// ScriptStruct  UADataTableModule.AISpawnAreaInfoTableRow
// Struct Size::0x0068
struct FAISpawnAreaInfoTableRow : public FTableRowBase
{
    int32_t                                       ConfigID;                                                     // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TArray<int32_t>                               AISpawnConfigID;                                              // 0x0010(0x0010)
    int32_t                                       eventId;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 Weather;                                                      // 0x0028(0x0010)
    FString                                       AreaID;                                                       // 0x0038(0x0010)
    int32_t                                       CampID;                                                       // 0x0048(0x0004)
    int32_t                                       MaxAINumber;                                                  // 0x004C(0x0004)
    int32_t                                       PoolType;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FAIPool>                               AIPool;                                                       // 0x0058(0x0010)
};


// ScriptStruct  UADataTableModule.AIPool
// Struct Size::0x0018
struct FAIPool
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       Equip;                                                        // 0x0010(0x0004)
    int32_t                                       Weight;                                                       // 0x0014(0x0004)
};


// ScriptStruct  UACommon.TaskDescription
// Struct Size::0x0018
struct FTaskDescription
{
    FString                                       ETag;                                                         // 0x0000(0x0010)
    int32_t                                       FileSize;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UACommon.KeyInputBlockingConfTableRow
// Struct Size::0x0010
struct FKeyInputBlockingConfTableRow : public FTableRowBase
{
    enum class EPCInputButton                     ActionName;                                                   // 0x0008(0x0001)
    bool                                          FrontEnd;                                                     // 0x0009(0x0001)
    bool                                          InBattle;                                                     // 0x000A(0x0001)
    bool                                          notBagOpen;                                                   // 0x000B(0x0001)
    bool                                          notMapOpen;                                                   // 0x000C(0x0001)
    bool                                          notGamesettingOpen;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  UACommon.CommonActionKeyNameConfTableRow
// Struct Size::0x0088
struct FCommonActionKeyNameConfTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         ActionName;                                                   // 0x0010(0x0018)
    FText                                         OperationName;                                                // 0x0028(0x0018)
    int32_t                                       Scale;                                                        // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FText                                         KeyDescribeName;                                              // 0x0048(0x0018)
    int32_t                                       typeId;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FText                                         KeyTypeName;                                                  // 0x0068(0x0018)
    int32_t                                       subTypeId;                                                    // 0x0080(0x0004)
    int32_t                                       RelationCounts;                                               // 0x0084(0x0004)
};


// ScriptStruct  UACommon.WidgetReferenceTable
// Struct Size::0x0010
struct FWidgetReferenceTable : public FTableRowBase
{
    UUserWidget*                                  WidgetClass;                                                  // 0x0008(0x0008)
};


// ScriptStruct  UACommon.AuctionIconScaleOverrideConfTable
// Struct Size::0x0010
struct FAuctionIconScaleOverrideConfTable : public FTableRowBase
{
    int32_t                                       item;                                                         // 0x0008(0x0004)
    float                                         Scale;                                                        // 0x000C(0x0004)
};


// ScriptStruct  UACommon.MagazineIconConfTable
// Struct Size::0x0010
struct FMagazineIconConfTable : public FTableRowBase
{
    int32_t                                       item;                                                         // 0x0008(0x0004)
    int32_t                                       min;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UACommon.ItemIntervalTable
// Struct Size::0x0060
struct FItemIntervalTable : public FTableRowBase
{
    int32_t                                       Item;                                                         // 0x0008(0x0004)
    float                                         Interval;                                                     // 0x000C(0x0004)
    TMap<int32_t,float>                           item;                                                         // 0x0010(0x0050)
};


// ScriptStruct  UACommon.SystemUnlockTable
// Struct Size::0x0010
struct FSystemUnlockTable : public FTableRowBase
{
    int32_t                                       sys;                                                          // 0x0008(0x0004)
    bool                                          NeedUnlockAnim;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  UACommon.LootStaticPointDetailTable
// Struct Size::0x0070
struct FLootStaticPointDetailTable : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       desc;                                                         // 0x0010(0x0010)
    TMap<enum class ELevelDifficult,FLootDetailTable>LootDetail;                                                // 0x0020(0x0050)
};


// ScriptStruct  UACommon.LootDetailTable
// Struct Size::0x0050
struct FLootDetailTable : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FNumDistribute>                        Count;                                                        // 0x0010(0x0010)
    TArray<FLoosePoint>                           LoosePoints;                                                  // 0x0020(0x0010)
    TArray<FLoosePoint>                           FixedLoosePoints;                                             // 0x0030(0x0010)
    TArray<FActiveLoosePoint>                     ActivateLoosePoints;                                          // 0x0040(0x0010)
};


// ScriptStruct  UACommon.ActiveLoosePoint
// Struct Size::0x0028
struct FActiveLoosePoint : public FTableRowBase
{
    FLoosePoint                                   LoosePoint;                                                   // 0x0008(0x0018)
    int32_t                                       ActiveId;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UACommon.LoosePoint
// Struct Size::0x0018
struct FLoosePoint : public FTableRowBase
{
    int32_t                                       Distribution;                                                 // 0x0008(0x0004)
    int32_t                                       ItemId;                                                       // 0x000C(0x0004)
    int32_t                                       MinCount;                                                     // 0x0010(0x0004)
    int32_t                                       MaxCount;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UACommon.NumDistribute
// Struct Size::0x0010
struct FNumDistribute : public FTableRowBase
{
    int32_t                                       Distribution;                                                 // 0x0008(0x0004)
    int32_t                                       Num;                                                          // 0x000C(0x0004)
};


// ScriptStruct  UACommon.MapStaticPointTable
// Struct Size::0x0090
struct FMapStaticPointTable : public FTableRowBase
{
    int32_t                                       MapID;                                                        // 0x0008(0x0004)
    int32_t                                       RuleID;                                                       // 0x000C(0x0004)
    enum class ELevelDifficult                    LevelDifficult;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       PointName;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    int32_t                                       LootPointType;                                                // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    ASGInventory*                                 InvClass;                                                     // 0x0068(0x0008)
    int32_t                                       LinkStaticPointDetailId;                                      // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       Comments;                                                     // 0x0078(0x0010)
    char                                          pa_0088[0x0008]                                               // 0x0088(0x0008)
};


// ScriptStruct  UACommon.RookieTipTable
// Struct Size::0x0090
struct FRookieTipTable : public FTableRowBase
{
    int32_t                                       tip;                                                          // 0x0008(0x0004)
    enum class ERookieTipType                     Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FText                                         Text;                                                         // 0x0010(0x0018)
    FString                                       listen;                                                       // 0x0028(0x0010)
    TArray<int32_t>                               next;                                                         // 0x0038(0x0010)
    bool                                          is;                                                           // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    int32_t                                       talkcharacter;                                                // 0x004C(0x0004)
    FString                                       sound;                                                        // 0x0050(0x0010)
    float                                         remain;                                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TArray<FString>                               exec;                                                         // 0x0068(0x0010)
    TArray<int32_t>                               face;                                                         // 0x0078(0x0010)
    bool                                          delete;                                                       // 0x0088(0x0001)
    bool                                          add;                                                          // 0x0089(0x0001)
    char                                          pa_008A[0x0006]                                               // 0x008A(0x0006)
};


// ScriptStruct  UACommon.RookieLimitTable
// Struct Size::0x0060
struct FRookieLimitTable : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<int32_t,bool>                            sys;                                                          // 0x0010(0x0050)
};


// ScriptStruct  UACommon.RicochetTable
// Struct Size::0x0018
struct FRicochetTable : public FTableRowBase
{
    float                                         armor;                                                        // 0x0008(0x0004)
    float                                         armor;                                                        // 0x000C(0x0004)
    float                                         armor;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UACommon.LoosePointAliasesTable
// Struct Size::0x0070
struct FLoosePointAliasesTable : public FTableRowBase
{
    FName                                         LinkLoosePointDetailID;                                       // 0x0008(0x0008)
    FAliasesTableMessage                          AliasesTableMessage;                                          // 0x0010(0x0060)
};


// ScriptStruct  UACommon.AliasesTableMessage
// Struct Size::0x0060
struct FAliasesTableMessage
{
    TMap<int32_t,FAliases>                        AliasesTable;                                                 // 0x0000(0x0050)
    TArray<FLoosePoint>                           LoosePointMessages;                                           // 0x0050(0x0010)
};


// ScriptStruct  UACommon.Aliases
// Struct Size::0x0008
struct FAliases
{
    float                                         Rate;                                                         // 0x0000(0x0004)
    int32_t                                       Idx;                                                          // 0x0004(0x0004)
};


// ScriptStruct  UACommon.LoosePointMapMessage
// Struct Size::0x0020
struct FLoosePointMapMessage : public FTableRowBase
{
    int32_t                                       MapID;                                                        // 0x0008(0x0004)
    int32_t                                       TotalWeight;                                                  // 0x000C(0x0004)
    TArray<FMapLoosePoint>                        SortLoosePoints;                                              // 0x0010(0x0010)
};


// ScriptStruct  UACommon.MapLoosePoint
// Struct Size::0x0090
struct FMapLoosePoint : public FTableRowBase
{
    int32_t                                       MapID;                                                        // 0x0008(0x0004)
    int32_t                                       RuleID;                                                       // 0x000C(0x0004)
    FString                                       PointName;                                                    // 0x0010(0x0010)
    FTransform                                    Root;                                                         // 0x0020(0x0030)
    enum class ELoosePointType                    LoosePointType;                                               // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
    FString                                       Comments;                                                     // 0x0058(0x0010)
    TArray<FTransform>                            RandomPos;                                                    // 0x0068(0x0010)
    FName                                         LinkLoosePointDetailID;                                       // 0x0078(0x0008)
    int32_t                                       Distributed;                                                  // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  UACommon.LoosePointDetail
// Struct Size::0x0030
struct FLoosePointDetail : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       desc;                                                         // 0x0010(0x0010)
    TArray<FLoosePoint>                           LoosePoints;                                                  // 0x0020(0x0010)
};


// ScriptStruct  UACommon.ItemRenderShowSizeOverrideConf
// Struct Size::0x0010
struct FItemRenderShowSizeOverrideConf : public FTableRowBase
{
    int32_t                                       ItemType;                                                     // 0x0008(0x0004)
    float                                         Multiplier;                                                   // 0x000C(0x0004)
};


// ScriptStruct  UACommon.ItemCamOffsetOverrideConf
// Struct Size::0x0018
struct FItemCamOffsetOverrideConf : public FTableRowBase
{
    uint32_t                                      ItemId;                                                       // 0x0008(0x0004)
    FVector                                       Offset;                                                       // 0x000C(0x000C)
};


// ScriptStruct  UACommon.ItemCornerIconConf
// Struct Size::0x0020
struct FItemCornerIconConf : public FTableRowBase
{
    FString                                       TypeName;                                                     // 0x0008(0x0010)
    UPaperSprite*                                 icon;                                                         // 0x0018(0x0008)
};


// ScriptStruct  UACommon.ItemColorConf
// Struct Size::0x0048
struct FItemColorConf : public FTableRowBase
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    TArray<uint32_t>                              SupportTypes;                                                 // 0x0018(0x0010)
    TArray<uint32_t>                              IgnoreTypes;                                                  // 0x0028(0x0010)
    TArray<int32_t>                               rarity;                                                       // 0x0038(0x0010)
};


// ScriptStruct  UACommon.MapRuleConfig
// Struct Size::0x000C
struct FMapRuleConfig
{
    int32_t                                       RuleID;                                                       // 0x0000(0x0004)
    int32_t                                       MinCount;                                                     // 0x0004(0x0004)
    int32_t                                       MaxCount;                                                     // 0x0008(0x0004)
};


// ScriptStruct  UACommon.IniFileBackup
// Struct Size::0x0160
struct FIniFileBackup
{
    FString                                       IniName;                                                      // 0x0000(0x0010)
    TArray<FString>                               ClassesReloaded;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0140]                                               // 0x0020(0x0140)
};


// ScriptStruct  UACommon.BuglyData
// Struct Size::0x0020
struct FBuglyData
{
    FString                                       URL;                                                          // 0x0000(0x0010)
    FString                                       Time;                                                         // 0x0010(0x0010)
};


// ScriptStruct  UACommon.ItemInfoForRand
// Struct Size::0x0058
struct FItemInfoForRand
{
    TMap<int32_t,int32_t>                         SuitItemsInfo;                                                // 0x0000(0x0050)
    int32_t                                       Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UACommon.InitInventoryParams
// Struct Size::0x0018
struct FInitInventoryParams
{
    USGPlayerItemInfoBase*                        item;                                                         // 0x0000(0x0008)
    AActor*                                       ParentInventory;                                              // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  UACommon.SceneCaptureConfig
// Struct Size::0x00B0
struct FSceneCaptureConfig
{
    FTransform                                    CameraTransform;                                              // 0x0000(0x0030)
    float                                         FOV;                                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UTextureRenderTarget2D*                       TextureTarget;                                                // 0x0038(0x0008)
    bool                                          bIsCasual;                                                    // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FString                                       Light;                                                        // 0x0048(0x0010)
    FString                                       Light;                                                        // 0x0058(0x0010)
    FString                                       Light;                                                        // 0x0068(0x0010)
    FString                                       Light;                                                        // 0x0078(0x0010)
    FString                                       Light;                                                        // 0x0088(0x0010)
    FString                                       Light;                                                        // 0x0098(0x0010)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  UACommon.UAFrontEndStageTableRow
// Struct Size::0x0070
struct FUAFrontEndStageTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CameraTag;                                                    // 0x0010(0x0010)
    FString                                       SequenceTag;                                                  // 0x0020(0x0010)
    bool                                          bReversePlay;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    FString                                       CameraStartFocus;                                             // 0x0038(0x0010)
    FString                                       CameraEndFocus;                                               // 0x0048(0x0010)
    float                                         CameraMoveSpeed;                                              // 0x0058(0x0004)
    bool                                          bNeedSfx;                                                     // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    FString                                       Comment;                                                      // 0x0060(0x0010)
};


// ScriptStruct  UACommon.UAGamePadVisibilityTableRow
// Struct Size::0x0060
struct FUAGamePadVisibilityTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       WidgetName;                                                   // 0x0010(0x0010)
    FString                                       SettingKey;                                                   // 0x0020(0x0010)
    uint32_t                                      TutorialActive;                                               // 0x0030(0x0004)
    uint32_t                                      RangeActive;                                                  // 0x0034(0x0004)
    uint32_t                                      NormalActive;                                                 // 0x0038(0x0004)
    uint32_t                                      DBNOActive;                                                   // 0x003C(0x0004)
    uint32_t                                      SpectatingActive;                                             // 0x0040(0x0004)
    uint32_t                                      OBActive;                                                     // 0x0044(0x0004)
    uint32_t                                      OBFreeView;                                                   // 0x0048(0x0004)
    uint32_t                                      VehicleDriverView;                                            // 0x004C(0x0004)
    uint32_t                                      VehiclePassengerView;                                         // 0x0050(0x0004)
    uint32_t                                      WaitDownloadRangeView;                                        // 0x0054(0x0004)
    uint32_t                                      KillCam;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UACommon.UATutorialEventTable
// Struct Size::0x0070
struct FUATutorialEventTable : public FTableRowBase
{
    FString                                       EventName;                                                    // 0x0008(0x0010)
    int32_t                                       MaxTimesInGame;                                               // 0x0018(0x0004)
    int32_t                                       MaxTimesInCareer;                                             // 0x001C(0x0004)
    int32_t                                       NotTriggerTimesInCareer;                                      // 0x0020(0x0004)
    int32_t                                       CD;                                                           // 0x0024(0x0004)
    FString                                       ExtraParaText1;                                               // 0x0028(0x0010)
    int32_t                                       ExtraPara1;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       ExtraParaText2;                                               // 0x0040(0x0010)
    int32_t                                       ExtraPara2;                                                   // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       ExtraParaText3;                                               // 0x0058(0x0010)
    int32_t                                       ExtraPara3;                                                   // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  UACommon.UAAdviseInvPriorityTable
// Struct Size::0x00C8
struct FUAAdviseInvPriorityTable : public FTableRowBase
{
    FString                                       characterState;                                               // 0x0008(0x0010)
    FString                                       AdviseInvType1;                                               // 0x0018(0x0010)
    FString                                       AdviseInvType2;                                               // 0x0028(0x0010)
    FString                                       AdviseInvType3;                                               // 0x0038(0x0010)
    FString                                       AdviseInvType4;                                               // 0x0048(0x0010)
    FString                                       AdviseInvType5;                                               // 0x0058(0x0010)
    FString                                       AdviseInvType6;                                               // 0x0068(0x0010)
    FString                                       AdviseInvType7;                                               // 0x0078(0x0010)
    FString                                       AdviseInvType8;                                               // 0x0088(0x0010)
    FString                                       AdviseInvType9;                                               // 0x0098(0x0010)
    FString                                       AdviseInvType10;                                              // 0x00A8(0x0010)
    FString                                       AdviseInvTypeEnd;                                             // 0x00B8(0x0010)
};


// ScriptStruct  UACommon.UAAIUniqueItemInfoTable
// Struct Size::0x0010
struct FUAAIUniqueItemInfoTable : public FTableRowBase
{
    int32_t                                       ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UACommon.UAFactionRelationTable
// Struct Size::0x0018
struct FUAFactionRelationTable : public FTableRowBase
{
    enum class EFactionRelationType               NormalPMC;                                                    // 0x0008(0x0001)
    enum class EFactionRelationType               NormalScav;                                                   // 0x0009(0x0001)
    enum class EFactionRelationType               PlayerScav;                                                   // 0x000A(0x0001)
    enum class EFactionRelationType               RebelFaction;                                                 // 0x000B(0x0001)
    enum class EFactionRelationType               LakeFaction;                                                  // 0x000C(0x0001)
    enum class EFactionRelationType               GangsterFaction;                                              // 0x000D(0x0001)
    enum class EFactionRelationType               KurtTeam;                                                     // 0x000E(0x0001)
    enum class EFactionRelationType               NavyFaction;                                                  // 0x000F(0x0001)
    enum class EFactionRelationType               Blackgold;                                                    // 0x0010(0x0001)
    enum class EFactionRelationType               Gnesk;                                                        // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  UACommon.UAMultiModeWidgetTable
// Struct Size::0x0048
struct FUAMultiModeWidgetTable : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Name;                                                         // 0x0010(0x0018)
    FString                                       sysIds;                                                       // 0x0028(0x0010)
    bool                                          isShowMode;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       use;                                                          // 0x003C(0x0004)
    int32_t                                       need;                                                         // 0x0040(0x0004)
    int32_t                                       default;                                                      // 0x0044(0x0004)
};


// ScriptStruct  UACommon.UATraceStyleTable
// Struct Size::0x01F0
struct FUATraceStyleTable : public FTableRowBase
{
    int32_t                                       StyleID;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Annotation;                                                   // 0x0010(0x0010)
    TSoftClassPtr<UObject>                        TemplateUMG;                                                  // 0x0020(0x0028)
    int32_t                                       ZOrder;                                                       // 0x0048(0x0004)
    float                                         EffectDistance;                                               // 0x004C(0x0004)
    float                                         OpacityOnVisible;                                             // 0x0050(0x0004)
    float                                         OpacityOnInvisible;                                           // 0x0054(0x0004)
    FSlateColor                                   Image;                                                        // 0x0058(0x0028)
    FSlateColor                                   Image;                                                        // 0x0080(0x0028)
    FSlateColor                                   Image;                                                        // 0x00A8(0x0028)
    FString                                       Image;                                                        // 0x00D0(0x0010)
    FSlateColor                                   Image;                                                        // 0x00E0(0x0028)
    FSlateColor                                   Image;                                                        // 0x0108(0x0028)
    FSlateColor                                   Image;                                                        // 0x0130(0x0028)
    FString                                       Image;                                                        // 0x0158(0x0010)
    FSlateColor                                   Image;                                                        // 0x0168(0x0028)
    FSlateColor                                   Image;                                                        // 0x0190(0x0028)
    FSlateColor                                   Image;                                                        // 0x01B8(0x0028)
    TArray<FString>                               Params;                                                       // 0x01E0(0x0010)
};


// ScriptStruct  UACommon.UANewTraceStyleTable
// Struct Size::0x0130
struct FUANewTraceStyleTable : public FTableRowBase
{
    FString                                       Annotation;                                                   // 0x0008(0x0010)
    FSlateColor                                   Color;                                                        // 0x0018(0x0028)
    FSoftObjectPath                               MarkIconResource;                                             // 0x0040(0x0018)
    FSoftObjectPath                               BackgroundResource;                                           // 0x0058(0x0018)
    FUATraceSceneStyleParams                      SceneStyleParams;                                             // 0x0070(0x0038)
    FUATraceNewMapStyleParams                     NewMapStyleParams;                                            // 0x00A8(0x0060)
    FUATraceDirectionalBarStyleParams             DirectionalBarStyleParams;                                    // 0x0108(0x0028)
};


// ScriptStruct  UACommon.UATraceDirectionalBarStyleParams
// Struct Size::0x0028
struct FUATraceDirectionalBarStyleParams
{
    FString                                       HighlightAniName;                                             // 0x0000(0x0010)
    int32_t                                       AniLoopTimes;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FString>                               Params;                                                       // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UATraceNewMapStyleParams
// Struct Size::0x0060
struct FUATraceNewMapStyleParams
{
    TSoftClassPtr<UObject>                        UMGType;                                                      // 0x0000(0x0028)
    int32_t                                       ZOrder;                                                       // 0x0028(0x0004)
    bool                                          HighLightMapIcon;                                             // 0x002C(0x0001)
    bool                                          bShowArea;                                                    // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    float                                         DisplayAnimationInterval;                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       HighlightAniName;                                             // 0x0038(0x0010)
    int32_t                                       AniLoopTimes;                                                 // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FString>                               Params;                                                       // 0x0050(0x0010)
};


// ScriptStruct  UACommon.UATraceSceneStyleParams
// Struct Size::0x0038
struct FUATraceSceneStyleParams
{
    float                                         OpactiyInVision;                                              // 0x0000(0x0004)
    float                                         OpactiyNotInVision;                                           // 0x0004(0x0004)
    float                                         OpacityOutofDistance;                                         // 0x0008(0x0004)
    float                                         ShortShowDistance;                                            // 0x000C(0x0004)
    FString                                       HighlightAniName;                                             // 0x0010(0x0010)
    int32_t                                       AniLoopTimes;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FString>                               Params;                                                       // 0x0028(0x0010)
};


// ScriptStruct  UACommon.UANewTraceRuleTable
// Struct Size::0x0030
struct FUANewTraceRuleTable : public FTableRowBase
{
    enum class ENewTraceSyncRule                  SyncRule;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FUATraceSceneRuleParams                       SceneRuleParams;                                              // 0x000C(0x000C)
    FUATraceNewMapRuleParams                      NewMapRuleParams;                                             // 0x0018(0x000C)
    FUATraceDirectionalBarRuleParams              DirectionalBarRuleParams;                                     // 0x0024(0x000C)
};


// ScriptStruct  UACommon.UATraceDirectionalBarRuleParams
// Struct Size::0x000C
struct FUATraceDirectionalBarRuleParams
{
    bool                                          bCanShow;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ShowDistance;                                                 // 0x0004(0x0004)
    float                                         DrawInverval;                                                 // 0x0008(0x0004)
};


// ScriptStruct  UACommon.UATraceNewMapRuleParams
// Struct Size::0x000C
struct FUATraceNewMapRuleParams
{
    bool                                          bCanShow;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ShowDistance;                                                 // 0x0004(0x0004)
    float                                         DrawInverval;                                                 // 0x0008(0x0004)
};


// ScriptStruct  UACommon.UATraceSceneRuleParams
// Struct Size::0x000C
struct FUATraceSceneRuleParams
{
    bool                                          bCanShow;                                                     // 0x0000(0x0001)
    bool                                          bActiveCanShow;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         ShowDistance;                                                 // 0x0004(0x0004)
    float                                         DrawInverval;                                                 // 0x0008(0x0004)
};


// ScriptStruct  UACommon.UANewTraceConfigTable
// Struct Size::0x0090
struct FUANewTraceConfigTable : public FTableRowBase
{
    enum class ENewTraceableMarkType              MarkType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       TraceRuleRowName;                                             // 0x0010(0x0010)
    int32_t                                       TraceStyleID;                                                 // 0x0020(0x0004)
    float                                         DataSyncInverval;                                             // 0x0024(0x0004)
    bool                                          CanInteract;                                                  // 0x0028(0x0001)
    bool                                          bAutoSelected;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FText                                         TraceTitle;                                                   // 0x0030(0x0018)
    FText                                         TraceDesc;                                                    // 0x0048(0x0018)
    FText                                         TargetTitle;                                                  // 0x0060(0x0018)
    FText                                         TargetDesc;                                                   // 0x0078(0x0018)
};


// ScriptStruct  UACommon.UATraceTargetTable
// Struct Size::0x0090
struct FUATraceTargetTable : public FTableRowBase
{
    int32_t                                       TargetId;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         TargetTitle;                                                  // 0x0010(0x0018)
    FText                                         TargetDesc;                                                   // 0x0028(0x0018)
    bool                                          bShowTrace;                                                   // 0x0040(0x0001)
    bool                                          bIsClick;                                                     // 0x0041(0x0001)
    bool                                          bIsAutoSelect;                                                // 0x0042(0x0001)
    char                                          pa_0043[0x0005]                                               // 0x0043(0x0005)
    FText                                         TraceTitle;                                                   // 0x0048(0x0018)
    FText                                         TraceDesc;                                                    // 0x0060(0x0018)
    FString                                       AnimName;                                                     // 0x0078(0x0010)
    int32_t                                       StyleID;                                                      // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  UACommon.UALootDataInfosTable
// Struct Size::0x0030
struct FUALootDataInfosTable : public FTableRowBase
{
    int32_t                                       LootDataInfoID;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Description;                                                  // 0x0010(0x0010)
    int32_t                                       LootPointType;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UPaperSprite*                                 LootPointIcon;                                                // 0x0028(0x0008)
};


// ScriptStruct  UACommon.UABrilliantTimeReplayTableRow
// Struct Size::0x0040
struct FUABrilliantTimeReplayTableRow : public FTableRowBase
{
    int32_t                                       typeId;                                                       // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    TSoftObjectPtr<UMFMissionFlow>                MissionFlow;                                                  // 0x0010(0x0028)
    int32_t                                       MinCountToSubmit;                                             // 0x0038(0x0004)
    bool                                          NeedEscapeAliveToSubmit;                                      // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  UACommon.UASubTitleTextTable
// Struct Size::0x0030
struct FUASubTitleTextTable : public FTableRowBase
{
    int32_t                                       TextMessageId;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         Text;                                                         // 0x0010(0x0018)
    int32_t                                       GameHUDTypeID;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UACommon.UASubTitleVOTable
// Struct Size::0x0030
struct FUASubTitleVOTable : public FTableRowBase
{
    int32_t                                       Messageid;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SoundResource;                                                // 0x0010(0x0010)
    int32_t                                       TextMessageId;                                                // 0x0020(0x0004)
    FName                                         SoundType;                                                    // 0x0024(0x0008)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UACommon.ItemConfTableRowBPProxy
// Struct Size::0x00D0
struct FItemConfTableRowBPProxy : public FTableRowBase
{
    int32_t                                       ItemId;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       ShortName;                                                    // 0x0020(0x0010)
    uint32_t                                      IconId;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       Describe;                                                     // 0x0038(0x0010)
    int32_t                                       SizeX;                                                        // 0x0048(0x0004)
    int32_t                                       SizeY;                                                        // 0x004C(0x0004)
    float                                         Weight;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       pickup;                                                       // 0x0058(0x0010)
    FString                                       use;                                                          // 0x0068(0x0010)
    FString                                       drop;                                                         // 0x0078(0x0010)
    int32_t                                       sell;                                                         // 0x0088(0x0004)
    uint32_t                                      can;                                                          // 0x008C(0x0004)
    int32_t                                       standard;                                                     // 0x0090(0x0004)
    uint32_t                                      StackMax;                                                     // 0x0094(0x0004)
    uint32_t                                      not;                                                          // 0x0098(0x0004)
    uint32_t                                      Bind;                                                         // 0x009C(0x0004)
    uint32_t                                      rarity;                                                       // 0x00A0(0x0004)
    uint32_t                                      Durability;                                                   // 0x00A4(0x0004)
    uint32_t                                      UseExp;                                                       // 0x00A8(0x0004)
    int32_t                                       LootExp;                                                      // 0x00AC(0x0004)
    TArray<char>                                  RejectSlot;                                                   // 0x00B0(0x0010)
    uint32_t                                      sort;                                                         // 0x00C0(0x0004)
    uint32_t                                      jump;                                                         // 0x00C4(0x0004)
    uint32_t                                      RarityColorIndex;                                             // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  UACommon.LootDropTableRowBPProxy
// Struct Size::0x0098
struct FLootDropTableRowBPProxy : public FTableRowBase
{
    int64_t                                       ID;                                                           // 0x0008(0x0008)
    FString                                       desc;                                                         // 0x0010(0x0010)
    char                                          ItemType;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    int64_t                                       ItemId;                                                       // 0x0028(0x0008)
    TArray<int32_t>                               ItemNum;                                                      // 0x0030(0x0010)
    TArray<int64_t>                               SubItemTable;                                                 // 0x0040(0x0010)
    int32_t                                       Weight;                                                       // 0x0050(0x0004)
    float                                         Percent;                                                      // 0x0054(0x0004)
    float                                         RandTimes;                                                    // 0x0058(0x0004)
    char                                          OperationType;                                                // 0x005C(0x0001)
    char                                          IsPermanent;                                                  // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    uint32_t                                      ActID;                                                        // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    TArray<uint64_t>                              LootPointWhite;                                               // 0x0068(0x0010)
    TArray<uint64_t>                              LootPointBlack;                                               // 0x0078(0x0010)
    FString                                       Describe;                                                     // 0x0088(0x0010)
};


// ScriptStruct  UACommon.MapDetailTableRowBPProxy
// Struct Size::0x0098
struct FMapDetailTableRowBPProxy : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       map;                                                          // 0x0010(0x0010)
    FString                                       mobile;                                                       // 0x0020(0x0010)
    FString                                       Name;                                                         // 0x0030(0x0010)
    FString                                       level;                                                        // 0x0040(0x0010)
    FString                                       Picture;                                                      // 0x0050(0x0010)
    FString                                       desc;                                                         // 0x0060(0x0010)
    FVector2D                                     MapSize;                                                      // 0x0070(0x0008)
    TArray<FVector2D>                             SampleScenePoints;                                            // 0x0078(0x0010)
    TArray<FVector2D>                             SampleMapPoints;                                              // 0x0088(0x0010)
};


// ScriptStruct  UACommon.UACaptureTableRow
// Struct Size::0x0018
struct FUACaptureTableRow : public FTableRowBase
{
    uint32_t                                      ID;                                                           // 0x0008(0x0004)
    int32_t                                       X;                                                            // 0x000C(0x0004)
    int32_t                                       Y;                                                            // 0x0010(0x0004)
    int32_t                                       Z;                                                            // 0x0014(0x0004)
};


// ScriptStruct  UACommon.UAEscapeInteractTextTable
// Struct Size::0x0028
struct FUAEscapeInteractTextTable : public FTableRowBase
{
    int32_t                                       EscapeInteractID;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         InteractText;                                                 // 0x0010(0x0018)
};


// ScriptStruct  UACommon.UAPlayerEscapeShowRow
// Struct Size::0x0028
struct FUAPlayerEscapeShowRow : public FTableRowBase
{
    bool                                          enable;                                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       EscapePointID;                                                // 0x000C(0x0004)
    int32_t                                       MaxPlayerNum;                                                 // 0x0010(0x0004)
    float                                         PlayTime;                                                     // 0x0014(0x0004)
    TArray<APlayerController*>                    PCArr;                                                        // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UAEscapeTextTableRow
// Struct Size::0x0148
struct FUAEscapeTextTableRow : public FTableRowBase
{
    int32_t                                       EscapePointID;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         EscapeName;                                                   // 0x0010(0x0018)
    FText                                         ConditionDescription;                                         // 0x0028(0x0018)
    FText                                         ConditionDescShort;                                           // 0x0040(0x0018)
    FText                                         ConditionPassText;                                            // 0x0058(0x0018)
    FText                                         EscapeDescription;                                            // 0x0070(0x0018)
    FText                                         RemainTimeText;                                               // 0x0088(0x0018)
    FText                                         AlreadyFailText;                                              // 0x00A0(0x0018)
    int32_t                                       EscapeReportID;                                               // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    FText                                         PersonHitContent;                                             // 0x00C0(0x0018)
    FText                                         GlobalHitContent;                                             // 0x00D8(0x0018)
    FText                                         GlobalCloseHitContent;                                        // 0x00F0(0x0018)
    FVector                                       Location;                                                     // 0x0108(0x000C)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
    FText                                         GlobalLeftTimeHitContent;                                     // 0x0118(0x0018)
    FText                                         GlobalLeftTimeHitContent;                                     // 0x0130(0x0018)
};


// ScriptStruct  UACommon.PanelLayerTableRow
// Struct Size::0x0020
struct FPanelLayerTableRow : public FTableRowBase
{
    FString                                       LayerName;                                                    // 0x0008(0x0010)
    uint32_t                                      StartZOrder;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UACommon.PanelConfTableRow
// Struct Size::0x0058
struct FPanelConfTableRow : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       OwnerModule;                                                  // 0x0018(0x0010)
    FString                                       AssetMobileName;                                              // 0x0028(0x0010)
    FString                                       LayerName;                                                    // 0x0038(0x0010)
    TArray<FString>                               OwnerPanel;                                                   // 0x0048(0x0010)
};


// ScriptStruct  UACommon.ServiceConfTableRow
// Struct Size::0x0058
struct FServiceConfTableRow : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       InitContext;                                                  // 0x0018(0x0010)
    FString                                       ResetContext;                                                 // 0x0028(0x0010)
    FString                                       desc;                                                         // 0x0038(0x0010)
    FString                                       ServiceType;                                                  // 0x0048(0x0010)
};


// ScriptStruct  UACommon.ModuleContextConfTableRow
// Struct Size::0x0038
struct FModuleContextConfTableRow : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       LevelPath;                                                    // 0x0018(0x0010)
    FString                                       desc;                                                         // 0x0028(0x0010)
};


// ScriptStruct  UACommon.ModuleConfTableRow
// Struct Size::0x0038
struct FModuleConfTableRow : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       Context;                                                      // 0x0018(0x0010)
    FString                                       desc;                                                         // 0x0028(0x0010)
};


// ScriptStruct  UACommon.UAGameBigMapModuleModeTable
// Struct Size::0x0050
struct FUAGameBigMapModuleModeTable : public FTableRowBase
{
    TSoftClassPtr<UObject>                        BigMapModule;                                                 // 0x0008(0x0028)
    FText                                         DisplayName;                                                  // 0x0030(0x0018)
    bool                                          enable;                                                       // 0x0048(0x0001)
    bool                                          Switchable;                                                   // 0x0049(0x0001)
    bool                                          DefaultState;                                                 // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
};


// ScriptStruct  UACommon.UAGameLandmarkTable
// Struct Size::0x0030
struct FUAGameLandmarkTable : public FTableRowBase
{
    int32_t                                       MapID;                                                        // 0x0008(0x0004)
    int32_t                                       LandMarkId;                                                   // 0x000C(0x0004)
    FText                                         LandMarkName;                                                 // 0x0010(0x0018)
    FVector2D                                     WorldLocation;                                                // 0x0028(0x0008)
};


// ScriptStruct  UACommon.UAGameBigMapEffectTable
// Struct Size::0x0060
struct FUAGameBigMapEffectTable : public FTableRowBase
{
    int32_t                                       Messageid;                                                    // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    int32_t                                       LandMarkId;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TSoftClassPtr<UObject>                        TemplateUMG;                                                  // 0x0018(0x0028)
    float                                         StartAtScale;                                                 // 0x0040(0x0004)
    float                                         EndAtScale;                                                   // 0x0044(0x0004)
    bool                                          ShowAtInit;                                                   // 0x0048(0x0001)
    bool                                          DynamicSize;                                                  // 0x0049(0x0001)
    char                                          pa_004A[0x0002]                                               // 0x004A(0x0002)
    int32_t                                       InitSize;                                                     // 0x004C(0x0004)
    TArray<int32_t>                               AreaIDs;                                                      // 0x0050(0x0010)
};


// ScriptStruct  UACommon.UALootPointInfo
// Struct Size::0x0058
struct FUALootPointInfo : public FTableRowBase
{
    int32_t                                       MapID;                                                        // 0x0008(0x0004)
    int32_t                                       LootPointID;                                                  // 0x000C(0x0004)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FText                                         AreaName;                                                     // 0x0020(0x0018)
    int32_t                                       AreaID;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       LevelPath;                                                    // 0x0040(0x0010)
    int32_t                                       LootPointType;                                                // 0x0050(0x0004)
    int32_t                                       InBigMapAreaID;                                               // 0x0054(0x0004)
};


// ScriptStruct  UACommon.UABattleQuickChat
// Struct Size::0x0068
struct FUABattleQuickChat : public FTableRowBase
{
    int32_t                                       Messageid;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ChatType;                                                     // 0x0010(0x0010)
    FText                                         ListName;                                                     // 0x0020(0x0018)
    FText                                         ChatContent;                                                  // 0x0038(0x0018)
    FText                                         ChatSound;                                                    // 0x0050(0x0018)
};


// ScriptStruct  UACommon.UAGamePadMessageTable
// Struct Size::0x0010
struct FUAGamePadMessageTable : public FTableRowBase
{
    int32_t                                       Messageid;                                                    // 0x0008(0x0004)
    enum class EUAGamePadTable                    GamePadWidgets;                                               // 0x000C(0x0001)
    bool                                          GamePadWidgetVisibility;                                      // 0x000D(0x0001)
    enum class EGamePadEffectTable                GamePadEffectWidgets;                                         // 0x000E(0x0001)
    bool                                          GamePadEffectWidgetVisibility;                                // 0x000F(0x0001)
};


// ScriptStruct  UACommon.UAGameHUDTable
// Struct Size::0x00E8
struct FUAGameHUDTable : public FTableRowBase
{
    int32_t                                       Messageid;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        TemplateUMG;                                                  // 0x0010(0x0028)
    enum class EUAHUDPreInstallLoc                Location;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TSoftObjectPtr<UObject>                       background;                                                   // 0x0040(0x0028)
    TSoftObjectPtr<UObject>                       Content;                                                      // 0x0068(0x0028)
    bool                                          bUseContent;                                                  // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FSlateColor                                   Content;                                                      // 0x0098(0x0028)
    FText                                         Normal;                                                       // 0x00C0(0x0018)
    int32_t                                       RemainTime;                                                   // 0x00D8(0x0004)
    bool                                          bWaitWidgetFinish;                                            // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    UAkAudioEvent*                                AudioEvent;                                                   // 0x00E0(0x0008)
};


// ScriptStruct  UACommon.UATaskTypeTable
// Struct Size::0x0038
struct FUATaskTypeTable : public FTableRowBase
{
    uint32_t                                      Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         TypeDesc;                                                     // 0x0010(0x0018)
    FString                                       iconPath;                                                     // 0x0028(0x0010)
};


// ScriptStruct  UACommon.UABattleEventTable
// Struct Size::0x00B8
struct FUABattleEventTable : public FTableRowBase
{
    FString                                       Describe;                                                     // 0x0008(0x0010)
    bool                                          Enabled;                                                      // 0x0018(0x0001)
    enum class EUAStatisMethod                    StatisMethod;                                                 // 0x0019(0x0001)
    bool                                          ExcludeSameTeam;                                              // 0x001A(0x0001)
    char                                          pa_001B[0x0005]                                               // 0x001B(0x0005)
    TArray<FUAStatisParamInfo>                    Params;                                                       // 0x0020(0x0010)
    int32_t                                       MaxTimesInSecond;                                             // 0x0030(0x0004)
    int32_t                                       CutGroup;                                                     // 0x0034(0x0004)
    bool                                          ShouldCombine;                                                // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       Weight;                                                       // 0x003C(0x0004)
    float                                         CutTrendArgsOnConstant;                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FUACutTrendArgs>                       CutTrendArgsOnDistance;                                       // 0x0048(0x0010)
    TArray<FUACutTrendArgs>                       CutTrendArgsOnDeltaTime;                                      // 0x0058(0x0010)
    TArray<FUACutTrendArgs>                       CutTrendArgsOnEventValue;                                     // 0x0068(0x0010)
    FString                                       DescribeWord;                                                 // 0x0078(0x0010)
    TArray<FUADescribeWordArgs>                   DescribeWordArgsList;                                         // 0x0088(0x0010)
    FString                                       CombinedDescribeWord;                                         // 0x0098(0x0010)
    TArray<FUADescribeWordArgs>                   CombinedDescribeWordArgsList;                                 // 0x00A8(0x0010)
};


// ScriptStruct  UACommon.UADescribeWordArgs
// Struct Size::0x0020
struct FUADescribeWordArgs : public FTableRowBase
{
    FString                                       arg;                                                          // 0x0008(0x0010)
    enum class EUAArgResolveMethod                ResolveMethod;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  UACommon.UACutTrendArgs
// Struct Size::0x0018
struct FUACutTrendArgs : public FTableRowBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         N;                                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UACommon.UAStatisParamInfo
// Struct Size::0x0038
struct FUAStatisParamInfo : public FTableRowBase
{
    enum class EUAStatisParamFilterType           CompareType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    int64_t                                       CompareValue;                                                 // 0x0010(0x0008)
    int64_t                                       CompareValueExt;                                              // 0x0018(0x0008)
    bool                                          Detail;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<int64_t>                               ValueList;                                                    // 0x0028(0x0010)
};


// ScriptStruct  UACommon.UAStatisTable
// Struct Size::0x0058
struct FUAStatisTable : public FTableRowBase
{
    FText                                         Describe;                                                     // 0x0008(0x0018)
    enum class EUAStatisMethod                    StatisMethod;                                                 // 0x0020(0x0001)
    bool                                          ExcludeSameTeam;                                              // 0x0021(0x0001)
    bool                                          ExcludeSameInst;                                              // 0x0022(0x0001)
    bool                                          RecordEvent;                                                  // 0x0023(0x0001)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FUAStatisParamInfo>                    Params;                                                       // 0x0028(0x0010)
    int32_t                                       EventCount;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FSoftClassPath                                ExpCaculator;                                                 // 0x0040(0x0018)
};


// ScriptStruct  UACommon.UAServiceTable
// Struct Size::0x0028
struct FUAServiceTable : public FTableRowBase
{
    FString                                       InitContext;                                                  // 0x0008(0x0010)
    FString                                       ResetContext;                                                 // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UAModuleTable
// Struct Size::0x0028
struct FUAModuleTable : public FTableRowBase
{
    FString                                       Context;                                                      // 0x0008(0x0010)
    FString                                       DefaultPanel;                                                 // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UAModuleContextTable
// Struct Size::0x0028
struct FUAModuleContextTable : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       LevelPath;                                                    // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UAGachaMapTable
// Struct Size::0x0020
struct FUAGachaMapTable : public FTableRowBase
{
    uint64_t                                      ItemId;                                                       // 0x0008(0x0008)
    uint32_t                                      WeaponId;                                                     // 0x0010(0x0004)
    uint32_t                                      Num;                                                          // 0x0014(0x0004)
    uint32_t                                      Weight;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UACommon.UAVestBagGridTable
// Struct Size::0x0110
struct FUAVestBagGridTable : public FTableRowBase
{
    FString                                       Name;                                                         // 0x0008(0x0010)
    uint32_t                                      Seperated;                                                    // 0x0018(0x0004)
    uint32_t                                      SizeX;                                                        // 0x001C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0020(0x0004)
    float                                         PosX;                                                         // 0x0024(0x0004)
    float                                         PosY;                                                         // 0x0028(0x0004)
    uint32_t                                      SizeX;                                                        // 0x002C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0030(0x0004)
    float                                         PosX;                                                         // 0x0034(0x0004)
    float                                         PosY;                                                         // 0x0038(0x0004)
    uint32_t                                      SizeX;                                                        // 0x003C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0040(0x0004)
    float                                         PosX;                                                         // 0x0044(0x0004)
    float                                         PosY;                                                         // 0x0048(0x0004)
    uint32_t                                      SizeX;                                                        // 0x004C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0050(0x0004)
    float                                         PosX;                                                         // 0x0054(0x0004)
    float                                         PosY;                                                         // 0x0058(0x0004)
    uint32_t                                      SizeX;                                                        // 0x005C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0060(0x0004)
    float                                         PosX;                                                         // 0x0064(0x0004)
    float                                         PosY;                                                         // 0x0068(0x0004)
    uint32_t                                      SizeX;                                                        // 0x006C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0070(0x0004)
    float                                         PosX;                                                         // 0x0074(0x0004)
    float                                         PosY;                                                         // 0x0078(0x0004)
    uint32_t                                      SizeX;                                                        // 0x007C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0080(0x0004)
    float                                         PosX;                                                         // 0x0084(0x0004)
    float                                         PosY;                                                         // 0x0088(0x0004)
    uint32_t                                      SizeX;                                                        // 0x008C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0090(0x0004)
    float                                         PosX;                                                         // 0x0094(0x0004)
    float                                         PosY;                                                         // 0x0098(0x0004)
    uint32_t                                      SizeX;                                                        // 0x009C(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00A0(0x0004)
    float                                         PosX;                                                         // 0x00A4(0x0004)
    float                                         PosY;                                                         // 0x00A8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00AC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00B0(0x0004)
    float                                         PosX;                                                         // 0x00B4(0x0004)
    float                                         PosY;                                                         // 0x00B8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00BC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00C0(0x0004)
    float                                         PosX;                                                         // 0x00C4(0x0004)
    float                                         PosY;                                                         // 0x00C8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00CC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00D0(0x0004)
    float                                         PosX;                                                         // 0x00D4(0x0004)
    float                                         PosY;                                                         // 0x00D8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00DC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00E0(0x0004)
    float                                         PosX;                                                         // 0x00E4(0x0004)
    float                                         PosY;                                                         // 0x00E8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00EC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x00F0(0x0004)
    float                                         PosX;                                                         // 0x00F4(0x0004)
    float                                         PosY;                                                         // 0x00F8(0x0004)
    uint32_t                                      SizeX;                                                        // 0x00FC(0x0004)
    uint32_t                                      SizeY;                                                        // 0x0100(0x0004)
    float                                         PosX;                                                         // 0x0104(0x0004)
    float                                         PosY;                                                         // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  UACommon.UABattleMapTable
// Struct Size::0x0098
struct FUABattleMapTable : public FTableRowBase
{
    FString                                       MapLevel;                                                     // 0x0008(0x0010)
    FString                                       MobileMapLevel;                                               // 0x0018(0x0010)
    uint32_t                                      ShowIndex;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       Name;                                                         // 0x0030(0x0010)
    FString                                       Picture;                                                      // 0x0040(0x0010)
    FString                                       desc;                                                         // 0x0050(0x0010)
    uint32_t                                      Time;                                                         // 0x0060(0x0004)
    uint32_t                                      DayStartTime;                                                 // 0x0064(0x0004)
    uint32_t                                      MinPMC;                                                       // 0x0068(0x0004)
    uint32_t                                      MaxPMC;                                                       // 0x006C(0x0004)
    uint32_t                                      IsScavJoin;                                                   // 0x0070(0x0004)
    uint32_t                                      ScavJoinTimeBegin;                                            // 0x0074(0x0004)
    uint32_t                                      ScavJoinTimeEnd;                                              // 0x0078(0x0004)
    uint32_t                                      NormalBeginTime;                                              // 0x007C(0x0004)
    uint32_t                                      NormalBeginPersonNum;                                         // 0x0080(0x0004)
    uint32_t                                      LongTimeBeginTime;                                            // 0x0084(0x0004)
    uint32_t                                      LongTimeBeginPersonNum;                                       // 0x0088(0x0004)
    uint32_t                                      TimeoutTime;                                                  // 0x008C(0x0004)
    uint32_t                                      SpawnAIPersonNum;                                             // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  UACommon.UAGlobalNumTable
// Struct Size::0x0028
struct FUAGlobalNumTable : public FTableRowBase
{
    FText                                         Name;                                                         // 0x0008(0x0018)
    float                                         Val;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UACommon.UABattleresultTable
// Struct Size::0x0028
struct FUABattleresultTable : public FTableRowBase
{
    uint32_t                                      dataid;                                                       // 0x0008(0x0004)
    uint32_t                                      AttributeType;                                                // 0x000C(0x0004)
    uint32_t                                      Proportion;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Describe;                                                     // 0x0018(0x0010)
};


// ScriptStruct  UACommon.UAItemContextMenuTable
// Struct Size::0x0038
struct FUAItemContextMenuTable : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    uint32_t                                      DisplayIconID;                                                // 0x0020(0x0004)
    uint32_t                                      ShowIndex;                                                    // 0x0024(0x0004)
    FString                                       UseTip;                                                       // 0x0028(0x0010)
};


// ScriptStruct  UACommon.TextLocalizationPatch
// Struct Size::0x0090
struct FTextLocalizationPatch
{
    FString                                       NativeCulture;                                                // 0x0000(0x0010)
    FString                                       Namespace;                                                    // 0x0010(0x0010)
    FString                                       Key;                                                          // 0x0020(0x0010)
    FString                                       NativeString;                                                 // 0x0030(0x0010)
    TMap<FString,FString>                         LocalizedStrings;                                             // 0x0040(0x0050)
};


// ScriptStruct  UACommon.UAModeActivityMissionTable
// Struct Size::0x0070
struct FUAModeActivityMissionTable : public FModeTableRowBase
{
    TMap<int32_t,FActivityMissionConfig>          ActivityMissionMap;                                           // 0x0020(0x0050)
};


// ScriptStruct  UACommon.ActivityMissionConfig
// Struct Size::0x0040
struct FActivityMissionConfig
{
    FActivityResidentMissionConfig                ResidentMission;                                              // 0x0000(0x0010)
    FActivityRandomMissionConfig                  RandomMission;                                                // 0x0010(0x0018)
    int32_t                                       MaxActivityTaskNum;                                           // 0x0028(0x0004)
    bool                                          bCloseDynamicMission;                                         // 0x002C(0x0001)
    bool                                          bCloseOtherActivities;                                        // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    TArray<int32_t>                               CloseOtherActivityIDs;                                        // 0x0030(0x0010)
};


// ScriptStruct  UACommon.ActivityRandomMissionConfig
// Struct Size::0x0018
struct FActivityRandomMissionConfig
{
    float                                         Probability;                                                  // 0x0000(0x0004)
    int32_t                                       RandomTimes;                                                  // 0x0004(0x0004)
    TArray<FMissionClassWeightConfig>             MissionList;                                                  // 0x0008(0x0010)
};


// ScriptStruct  UACommon.MissionClassWeightConfig
// Struct Size::0x0030
struct FMissionClassWeightConfig
{
    TSoftObjectPtr<UMFMissionFlow>                MissionFlowAsset;                                             // 0x0000(0x0028)
    int32_t                                       Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UACommon.ActivityResidentMissionConfig
// Struct Size::0x0010
struct FActivityResidentMissionConfig
{
    TArray<FMissionClassProbabilityConfig>        MissionList;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UACommon.MissionClassProbabilityConfig
// Struct Size::0x0030
struct FMissionClassProbabilityConfig
{
    TSoftObjectPtr<UMFMissionFlow>                MissionFlowAsset;                                             // 0x0000(0x0028)
    float                                         Probability;                                                  // 0x0028(0x0004)
    bool                                          bIgnoreActivitiy;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  UACommon.UAModeDynamicMissionTable
// Struct Size::0x0060
struct FUAModeDynamicMissionTable : public FModeTableRowBase
{
    FString                                       LevelName;                                                    // 0x0020(0x0010)
    FDynamicResidentMissionConfig                 ResidentMission;                                              // 0x0030(0x0010)
    FDynamicRandomMissionConfig                   RandomMission;                                                // 0x0040(0x0018)
    int32_t                                       MaxDynamicTaskNum;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UACommon.DynamicRandomMissionConfig
// Struct Size::0x0018
struct FDynamicRandomMissionConfig
{
    float                                         Probability;                                                  // 0x0000(0x0004)
    int32_t                                       RandomTimes;                                                  // 0x0004(0x0004)
    TArray<FMissionClassWeightConfig>             MissionList;                                                  // 0x0008(0x0010)
};


// ScriptStruct  UACommon.DynamicResidentMissionConfig
// Struct Size::0x0010
struct FDynamicResidentMissionConfig
{
    TArray<FMissionClassProbabilityConfig>        MissionList;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UACommon.UAModeQuestDistributerConfigTable
// Struct Size::0x0098
struct FUAModeQuestDistributerConfigTable : public FModeTableRowBase
{
    float                                         LoadDistributerProbability;                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FQuestDistributerClassWithWeight>      NeedLoadQuestDistributer;                                     // 0x0028(0x0010)
    int32_t                                       RandomTimes;                                                  // 0x0038(0x0004)
    float                                         ActivityLoadDistributerProbability;                           // 0x003C(0x0004)
    TMap<int32_t,FActivityQuestDistributer>       ActivityNeedLoadQuestDistributer;                             // 0x0040(0x0050)
    int32_t                                       ActivityRandomTimes;                                          // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  UACommon.ActivityQuestDistributer
// Struct Size::0x0010
struct FActivityQuestDistributer
{
    TArray<FQuestDistributerClassWithWeight>      ActivityQuestDistributers;                                    // 0x0000(0x0010)
};


// ScriptStruct  UACommon.QuestDistributerClassWithWeight
// Struct Size::0x0030
struct FQuestDistributerClassWithWeight
{
    TSoftClassPtr<UObject>                        QuestDistributerClass;                                        // 0x0000(0x0028)
    int32_t                                       Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UACommon.UAModeBigMapModuleConfigTable
// Struct Size::0x0040
struct FUAModeBigMapModuleConfigTable : public FModeTableRowBase
{
    TArray<TSoftClassPtr<UObject>>                AdditionModules;                                              // 0x0020(0x0010)
    TArray<TSoftClassPtr<UObject>>                RemoveModules;                                                // 0x0030(0x0010)
};


// ScriptStruct  UACommon.UAScriptLevelTable
// Struct Size::0x0040
struct FUAScriptLevelTable : public FModeTableRowBase
{
    TArray<FString>                               ScriptMaps;                                                   // 0x0020(0x0010)
    TArray<FString>                               AdditionIgnores;                                              // 0x0030(0x0010)
};


// ScriptStruct  UACommon.UAModeLootConfigTable
// Struct Size::0x0068
struct FUAModeLootConfigTable : public FModeTableRowBase
{
    int32_t                                       LootID;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TSoftObjectPtr<UDataTable>                    LootDropSubTable;                                             // 0x0028(0x0028)
    TArray<FString>                               LootMaps;                                                     // 0x0050(0x0010)
    float                                         RoughSearchModifyScale;                                       // 0x0060(0x0004)
    float                                         DetailSearchModifyScale;                                      // 0x0064(0x0004)
};


// ScriptStruct  UACommon.UAModeStartAndEscapeTable
// Struct Size::0x0110
struct FUAModeStartAndEscapeTable : public FModeTableRowBase
{
    FString                                       LevelName;                                                    // 0x0020(0x0010)
    TArray<FString>                               AdditionLevelName;                                            // 0x0030(0x0010)
    TArray<FUAPlayerStartGroupData>               PlayerStart;                                                  // 0x0040(0x0010)
    TArray<FUAAIStartGroupData>                   AIStartAddition;                                              // 0x0050(0x0010)
    TMap<FString,FEscapePreset>                   EscapePresetMap;                                              // 0x0060(0x0050)
    TMap<int32_t,FEscapeProbabilityReset>         EscapeProbabilityResetMap;                                    // 0x00B0(0x0050)
    float                                         PMCCheckRadius;                                               // 0x0100(0x0004)
    float                                         EnemyCheckRadius;                                             // 0x0104(0x0004)
    float                                         SecondEnemyCheckRadius;                                       // 0x0108(0x0004)
    float                                         TeamCheckRadius;                                              // 0x010C(0x0004)
};


// ScriptStruct  UACommon.EscapeProbabilityReset
// Struct Size::0x0008
struct FEscapeProbabilityReset
{
    float                                         OpenProbability;                                              // 0x0000(0x0004)
    float                                         ShowProbability;                                              // 0x0004(0x0004)
};


// ScriptStruct  UACommon.EscapePreset
// Struct Size::0x0048
struct FEscapePreset
{
    int32_t                                       PresetIndex;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               ConstantEscapePointIDs;                                       // 0x0008(0x0010)
    int32_t                                       ConstantNum;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               RandomEscapePointIDs;                                         // 0x0020(0x0010)
    int32_t                                       RandomNum;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FUAEscapeRandomStruct>                 RandomArr;                                                    // 0x0038(0x0010)
};


// ScriptStruct  UACommon.UAEscapeRandomStruct
// Struct Size::0x0018
struct FUAEscapeRandomStruct
{
    TArray<FUAEscapeRandomWeightStruct>           EscapePointIDs;                                               // 0x0000(0x0010)
    int32_t                                       RandomNum;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UACommon.UAEscapeRandomWeightStruct
// Struct Size::0x0008
struct FUAEscapeRandomWeightStruct
{
    int32_t                                       EscapePointID;                                                // 0x0000(0x0004)
    int32_t                                       Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UACommon.UAAIStartGroupData
// Struct Size::0x0008
struct FUAAIStartGroupData
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    enum class EPlayerTeamType                    StartPointType;                                               // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UACommon.UAPlayerStartGroupData
// Struct Size::0x0030
struct FUAPlayerStartGroupData
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    enum class EPlayerTeamType                    StartPointType;                                               // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       BigGroup;                                                     // 0x0008(0x0004)
    int32_t                                       SecondGroup;                                                  // 0x000C(0x0004)
    int32_t                                       Priority;                                                     // 0x0010(0x0004)
    int32_t                                       Weight;                                                       // 0x0014(0x0004)
    FString                                       EscapePreset;                                                 // 0x0018(0x0010)
    int32_t                                       ExclusiveGroup;                                               // 0x0028(0x0004)
    int32_t                                       ExclusiveGroupWeight;                                         // 0x002C(0x0004)
};


// ScriptStruct  UACommon.UAGameModeTableRow
// Struct Size::0x0098
struct FUAGameModeTableRow : public FTableRowBase
{
    uint32_t                                      Index;                                                        // 0x0008(0x0004)
    uint32_t                                      MainModeID;                                                   // 0x000C(0x0004)
    FText                                         MainModeName;                                                 // 0x0010(0x0018)
    uint32_t                                      SubModeID;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FText                                         SubModeName;                                                  // 0x0030(0x0018)
    TSoftClassPtr<UObject>                        GameModeClass;                                                // 0x0048(0x0028)
    TSoftClassPtr<UObject>                        GameStateClass;                                               // 0x0070(0x0028)
};


// ScriptStruct  UACommon.PanelProfilerStack
// Struct Size::0x0010
struct FPanelProfilerStack
{
    TArray<double>                                theStack;                                                     // 0x0000(0x0010)
};


// ScriptStruct  UAGame.AchievementList
// Struct Size::0x0010
struct FAchievementList
{
    TArray<FAchievementData>                      Achievements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  UAGame.AchievementData
// Struct Size::0x0008
struct FAchievementData
{
    int32_t                                       AchievementID;                                                // 0x0000(0x0004)
    int32_t                                       Progress;                                                     // 0x0004(0x0004)
};


// ScriptStruct  UAGame.AchievementDistributerTableRow
// Struct Size::0x0038
struct FAchievementDistributerTableRow : public FTableRowBase
{
    int32_t                                       AchievementID;                                                // 0x0008(0x0004)
    bool                                          bSubAchievement;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TSoftClassPtr<UObject>                        QuestDistributerClass;                                        // 0x0010(0x0028)
};


// ScriptStruct  UAGame.BigMapAreaTextureInfo
// Struct Size::0x0050
struct FBigMapAreaTextureInfo
{
    int32_t                                       AreaID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FBigMapTexture                                MapTexture;                                                   // 0x0008(0x0030)
    FText                                         AreaName;                                                     // 0x0038(0x0018)
};


// ScriptStruct  UAGame.BigMapTexture
// Struct Size::0x0030
struct FBigMapTexture
{
    UTexture2D*                                   MapTexture;                                                   // 0x0000(0x0008)
    bool                                          bEnable4Tiles;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UTexture2D*                                   Map4TileTexture1;                                             // 0x0010(0x0008)
    UTexture2D*                                   Map4TileTexture2;                                             // 0x0018(0x0008)
    UTexture2D*                                   Map4TileTexture3;                                             // 0x0020(0x0008)
    UTexture2D*                                   Map4TileTexture4;                                             // 0x0028(0x0008)
};


// ScriptStruct  UAGame.AIAimingTarget
// Struct Size::0x0001
struct FAIAimingTarget
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  UAGame.DefaultOperationSettingTable
// Struct Size::0x0058
struct FDefaultOperationSettingTable : public FTableRowBase
{
    FName                                         ActionName;                                                   // 0x0008(0x0008)
    enum class EOperationKeyType                  KeyType;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FInputChord                                   KeyChord;                                                     // 0x0018(0x0020)
    enum class EOperationKeyStyle                 KeyStyle;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<enum class EOperationInputType>        EffectiveTarget;                                              // 0x0040(0x0010)
    float                                         Scale;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UAGame.DefaultSettingTable
// Struct Size::0x0018
struct FDefaultSettingTable : public FTableRowBase
{
    FName                                         SettingName;                                                  // 0x0008(0x0008)
    float                                         DefaultValue;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.HardwareBlacklistTableRow
// Struct Size::0x0020
struct FHardwareBlacklistTableRow : public FTableRowBase
{
    uint32_t                                      HardwareId;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       HardwareName;                                                 // 0x0010(0x0010)
};


// ScriptStruct  UAGame.CAHardwareCheckConfigTableRow
// Struct Size::0x0030
struct FCAHardwareCheckConfigTableRow : public FTableRowBase
{
    FString                                       CheckValueName;                                               // 0x0008(0x0010)
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Comment;                                                      // 0x0020(0x0010)
};


// ScriptStruct  UAGame.SystemPopMsgTableRow
// Struct Size::0x0028
struct FSystemPopMsgTableRow : public FTableRowBase
{
    uint32_t                                      MsgID;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FText                                         MsgText;                                                      // 0x0010(0x0018)
};


// ScriptStruct  UAGame.MessageIDInfo
// Struct Size::0x0050
struct FMessageIDInfo
{
    TMap<FGameplayTag,FString>                    BlockTagLocationKey;                                          // 0x0000(0x0050)
};


// ScriptStruct  UAGame.ActionDefine
// Struct Size::0x0038
struct FActionDefine
{
    TArray<enum class EActionContext>             EnabledContext;                                               // 0x0000(0x0010)
    char                                          pa_0010[0x0028]                                               // 0x0010(0x0028)
};


// ScriptStruct  UAGame.SubContextGroup
// Struct Size::0x0010
struct FSubContextGroup
{
    TArray<enum class EActionContext>             SubContext;                                                   // 0x0000(0x0010)
};


// ScriptStruct  UAGame.ActionContext
// Struct Size::0x0002
struct FActionContext
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  UAGame.MFMissionVariableRead
// Struct Size::0x0040
struct FMFMissionVariableRead : public FMFMissionVariableReadBase
{
    FMissionActorReference                        ConfigValue;                                                  // 0x0028(0x0018)
};


// ScriptStruct  UAGame.QuestActionSpawnInventoryInfo
// Struct Size::0x0028
struct FQuestActionSpawnInventoryInfo
{
    int64_t                                       SpawnPointID;                                                 // 0x0000(0x0008)
    int64_t                                       ItemId;                                                       // 0x0008(0x0008)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    int32_t                                       ItemStackCount;                                               // 0x0014(0x0004)
    bool                                          bCheckPlacement;                                              // 0x0018(0x0001)
    enum class ETraceMarkOperatorType             OperatorType;                                                 // 0x0019(0x0001)
    enum class ETraceableMarkType                 MarkType;                                                     // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    float                                         ScanningInterval;                                             // 0x001C(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UAGame.TimeOfDay
// Struct Size::0x000C
struct FTimeOfDay
{
    int32_t                                       Hour;                                                         // 0x0000(0x0004)
    int32_t                                       Minute;                                                       // 0x0004(0x0004)
    int32_t                                       Second;                                                       // 0x0008(0x0004)
};


// ScriptStruct  UAGame.DistributeQuestHistory
// Struct Size::0x0018
struct FDistributeQuestHistory
{
    AMFQuestDistributerBase*                      QuestDistributer;                                             // 0x0000(0x0008)
    enum class ECharacterType                     TriggerCharacterType;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TriggerCharacterLevel;                                        // 0x000C(0x0004)
    int32_t                                       GraphID;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.ActivateLootPointConfigs
// Struct Size::0x0020
struct FActivateLootPointConfigs
{
    TArray<int32_t>                               ForceActivateLootPoints;                                      // 0x0000(0x0010)
    TArray<FActivateLootPointConfig>              ActivateConfigs;                                              // 0x0010(0x0010)
};


// ScriptStruct  UAGame.ActivateLootPointConfig
// Struct Size::0x000C
struct FActivateLootPointConfig
{
    int32_t                                       LootPointType;                                                // 0x0000(0x0004)
    int32_t                                       ActivateMinCount;                                             // 0x0004(0x0004)
    int32_t                                       ActivateMaxCount;                                             // 0x0008(0x0004)
};


// ScriptStruct  UAGame.RandomQuestTableRow
// Struct Size::0x0018
struct FRandomQuestTableRow : public FTableRowBase
{
    int32_t                                       TaskId;                                                       // 0x0008(0x0004)
    int32_t                                       Weight;                                                       // 0x000C(0x0004)
    int32_t                                       MinLevel;                                                     // 0x0010(0x0004)
    int32_t                                       MaxLevel;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UAGame.GiveItemInfo
// Struct Size::0x0018
struct FGiveItemInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       MinStackCount;                                                // 0x0004(0x0004)
    int32_t                                       MaxStackCount;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASGInventory*                                 InventoryClass;                                               // 0x0010(0x0008)
};


// ScriptStruct  UAGame.RandomEscapePoint
// Struct Size::0x0008
struct FRandomEscapePoint
{
    int32_t                                       EscapePointID;                                                // 0x0000(0x0004)
    int32_t                                       Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UAGame.VolumeMarkableInfo
// Struct Size::0x0008
struct FVolumeMarkableInfo
{
    int32_t                                       VolumeID;                                                     // 0x0000(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0004(0x0004)
};


// ScriptStruct  UAGame.InventoryMarkableInfo
// Struct Size::0x0008
struct FInventoryMarkableInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0004(0x0004)
};


// ScriptStruct  UAGame.AICharacterMarkableInfo
// Struct Size::0x0010
struct FAICharacterMarkableInfo
{
    int64_t                                       AIID;                                                         // 0x0000(0x0008)
    enum class ESpawnReason                       SpawnReason;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ConfigID;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UAGame.PylonIDMapTableRow
// Struct Size::0x0018
struct FPylonIDMapTableRow : public FTableRowBase
{
    int64_t                                       Key;                                                          // 0x0008(0x0008)
    int32_t                                       PylonID;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.TriggerSpawnByEventConfig
// Struct Size::0x0018
struct FTriggerSpawnByEventConfig
{
    int32_t                                       SpawnNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriggerSpawnByEventParams>            EventParams;                                                  // 0x0008(0x0010)
};


// ScriptStruct  UAGame.TriggerSpawnByEventParams
// Struct Size::0x0018
struct FTriggerSpawnByEventParams
{
    TArray<FString>                               EventStrs;                                                    // 0x0000(0x0010)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.TriggerSpawnByVolumeConfig
// Struct Size::0x0018
struct FTriggerSpawnByVolumeConfig
{
    int32_t                                       SpawnNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriggerSpawnByVolumeParams>           VolumeParams;                                                 // 0x0008(0x0010)
};


// ScriptStruct  UAGame.TriggerSpawnByVolumeParams
// Struct Size::0x0018
struct FTriggerSpawnByVolumeParams
{
    TArray<int32_t>                               VolumeIDs;                                                    // 0x0000(0x0010)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.TriggerSpawnByAreaConfig
// Struct Size::0x0018
struct FTriggerSpawnByAreaConfig
{
    int32_t                                       SpawnNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriggerSpawnByAreaParams>             AreaParams;                                                   // 0x0008(0x0010)
};


// ScriptStruct  UAGame.TriggerSpawnByAreaParams
// Struct Size::0x0020
struct FTriggerSpawnByAreaParams
{
    int32_t                                       SquadID;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FString>                               SpawnAreas;                                                   // 0x0008(0x0010)
    int32_t                                       Weight;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  UAGame.QuestEffectSpawnInteractItemInfo
// Struct Size::0x0030
struct FQuestEffectSpawnInteractItemInfo
{
    int64_t                                       SpawnPointID;                                                 // 0x0000(0x0008)
    ASGNetRelevantConfigurableActor*              InteractItemClass;                                            // 0x0008(0x0008)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    bool                                          bQuestActionRelevantToActors;                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    UMFQuestContextSourceBase*                    TargetContextSource;                                          // 0x0018(0x0008)
    TArray<enum class ERelatedTargetType>         RelatedTargetTypes;                                           // 0x0020(0x0010)
};


// ScriptStruct  UAGame.QuestEffectSpawnInventoryInfo
// Struct Size::0x0040
struct FQuestEffectSpawnInventoryInfo
{
    int64_t                                       SpawnPointID;                                                 // 0x0000(0x0008)
    ASGInventory*                                 ContainerClass;                                               // 0x0008(0x0008)
    TArray<int64_t>                               ItemIDs;                                                      // 0x0010(0x0010)
    int32_t                                       Weight;                                                       // 0x0020(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0024(0x0004)
    UMFQuestContextSourceBase*                    TargetContextSource;                                          // 0x0028(0x0008)
    TArray<enum class ERelatedTargetType>         RelatedTargetTypes;                                           // 0x0030(0x0010)
};


// ScriptStruct  UAGame.QuestEffectSpawnPickupInfo
// Struct Size::0x0030
struct FQuestEffectSpawnPickupInfo
{
    int64_t                                       SpawnPointID;                                                 // 0x0000(0x0008)
    ASGPickup*                                    PickupClass;                                                  // 0x0008(0x0008)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0014(0x0004)
    UMFQuestContextSourceBase*                    TargetContextSource;                                          // 0x0018(0x0008)
    TArray<enum class ERelatedTargetType>         RelatedTargetTypes;                                           // 0x0020(0x0010)
};


// ScriptStruct  UAGame.QuestInventory
// Struct Size::0x0030
struct FQuestInventory
{
    int32_t                                       TaskId;                                                       // 0x0000(0x0004)
    int32_t                                       TargetId;                                                     // 0x0004(0x0004)
    TArray<int64_t>                               ItemIDs;                                                      // 0x0008(0x0010)
    int32_t                                       BigType;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       MidType;                                                      // 0x0020(0x0008)
    int64_t                                       subtype;                                                      // 0x0028(0x0008)
};


// ScriptStruct  UAGame.ActQuestTargetTemplateTableRow
// Struct Size::0x0038
struct FActQuestTargetTemplateTableRow : public FTableRowBase
{
    int32_t                                       TargetTypeID;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        QuestClass;                                                   // 0x0010(0x0028)
};


// ScriptStruct  UAGame.QuestIDTableRow
// Struct Size::0x0038
struct FQuestIDTableRow : public FTableRowBase
{
    int32_t                                       QuestID;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftClassPtr<UObject>                        QuestClass;                                                   // 0x0010(0x0028)
};


// ScriptStruct  UAGame.TaskCreateData
// Struct Size::0x0030
struct FTaskCreateData
{
    int32_t                                       TaskId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FQuestCreateData>                      QuestArr;                                                     // 0x0008(0x0010)
    bool                                          CompleteInOneBattle;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x000B]                                               // 0x0019(0x000B)
    int32_t                                       PrevType;                                                     // 0x0024(0x0004)
    bool                                          IsAct;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  UAGame.QuestCreateData
// Struct Size::0x0040
struct FQuestCreateData
{
    int32_t                                       TargetId;                                                     // 0x0000(0x0004)
    int32_t                                       CurrProgress;                                                 // 0x0004(0x0004)
    int32_t                                       MaxProgress;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               PreviewTargets;                                               // 0x0010(0x0010)
    int32_t                                       NodeType;                                                     // 0x0020(0x0004)
    int32_t                                       PrevType;                                                     // 0x0024(0x0004)
    int32_t                                       FailWhenNextFail;                                             // 0x0028(0x0004)
    bool                                          IsAct;                                                        // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    TArray<int32_t>                               ActQuestTemplateParams;                                       // 0x0030(0x0010)
};


// ScriptStruct  UAGame.QuestTraceInfo
// Struct Size::0x0040
struct FQuestTraceInfo
{
    TWeakObjectPtr<AActor>                        TraceActor;                                                   // 0x0000(0x0008)
    enum class EQuestTraceMarkType                TraceMarkType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Handle;                                                       // 0x000C(0x0004)
    FVector                                       WorldLocation;                                                // 0x0010(0x000C)
    FVector                                       Extend;                                                       // 0x001C(0x000C)
    bool                                          bIsActorDestroyed;                                            // 0x0028(0x0001)
    bool                                          bHasOwner;                                                    // 0x0029(0x0001)
    bool                                          bNeedTrace;                                                   // 0x002A(0x0001)
    char                                          pa_002B[0x0001]                                               // 0x002B(0x0001)
    TWeakObjectPtr<AQuestBase>                    OwnerQuest;                                                   // 0x002C(0x0008)
    int32_t                                       TaskId;                                                       // 0x0034(0x0004)
    int32_t                                       TargetId;                                                     // 0x0038(0x0004)
    int32_t                                       EscapeId;                                                     // 0x003C(0x0004)
};


// ScriptStruct  UAGame.RichUMGRow
// Struct Size::0x0010
struct FRichUMGRow : public FTableRowBase
{
    UCAUserWidget*                                WidgetClass;                                                  // 0x0008(0x0008)
};


// ScriptStruct  UAGame.SoundContext
// Struct Size::0x0088
struct FSoundContext
{
    AActor*                                       SourceActor;                                                  // 0x0000(0x0008)
    FVector                                       SoundLocation;                                                // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWaveWidget*                             IconWidget;                                                   // 0x0018(0x0008)
    UMaterialInterface*                           MatUpper;                                                     // 0x0020(0x0008)
    UMaterialInterface*                           MatMiddle;                                                    // 0x0028(0x0008)
    UMaterialInterface*                           MatLower;                                                     // 0x0030(0x0008)
    char                                          pa_0038[0x0050]                                               // 0x0038(0x0050)
};


// ScriptStruct  UAGame.SGInventorySpawnInfo
// Struct Size::0x0078
struct FSGInventorySpawnInfo
{
    TSoftClassPtr<UObject>                        InventoryClass;                                               // 0x0000(0x0028)
    bool                                          bIsFullWeapon;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    uint64_t                                      LootDropID;                                                   // 0x0030(0x0008)
    uint64_t                                      LootDropTableItemID;                                          // 0x0038(0x0008)
    uint64_t                                      ReallyLootDropTableItemID;                                    // 0x0040(0x0008)
    uint32_t                                      Count;                                                        // 0x0048(0x0004)
    uint32_t                                      SkinID;                                                       // 0x004C(0x0004)
    uint32_t                                      ParentItemID;                                                 // 0x0050(0x0004)
    int32_t                                       SlotIndex;                                                    // 0x0054(0x0004)
    uint64_t                                      ParentLootDropID;                                             // 0x0058(0x0008)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
    uint32_t                                      FormActivityID;                                               // 0x0070(0x0004)
    uint32_t                                      FormActivityPoolID;                                           // 0x0074(0x0004)
};


// ScriptStruct  UAGame.SGLootRandomItemTableRow
// Struct Size::0x0050
struct FSGLootRandomItemTableRow : public FTableRowBase
{
    enum class ELootRandomItemType                ItemType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    uint64_t                                      ItemId;                                                       // 0x0010(0x0008)
    char                                          ItemNum;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    UDataTable*                                   SubItemTable;                                                 // 0x0020(0x0008)
    int32_t                                       Weight;                                                       // 0x0028(0x0004)
    float                                         Percent;                                                      // 0x002C(0x0004)
    int32_t                                       RandTimes;                                                    // 0x0030(0x0004)
    enum class ESGLootRandomItemOperation         OperationType;                                                // 0x0034(0x0001)
    bool                                          IsPermanent;                                                  // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    FText                                         Describe;                                                     // 0x0038(0x0018)
};


// ScriptStruct  UAGame.InvAdvPriortyInfo
// Struct Size::0x0018
struct FInvAdvPriortyInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  UAGame.InvTypeInfo
// Struct Size::0x0018
struct FInvTypeInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  UAGame.SpawnAreaBase
// Struct Size::0x0020
struct FSpawnAreaBase
{
    TArray<AActor*>                               SpawnPoints;                                                  // 0x0000(0x0010)
    TArray<USpawnPointInfo*>                      SpawnPointInfos;                                              // 0x0010(0x0010)
};


// ScriptStruct  UAGame.SpawnArea
// Struct Size::0x0108
struct FSpawnArea : public FSpawnAreaBase
{
    TArray<ASGAIPathNode*>                        PathNodes;                                                    // 0x0020(0x0010)
    TArray<AActor*>                               GuardPoints;                                                  // 0x0030(0x0010)
    AVolume*                                      BattleVolume;                                                 // 0x0040(0x0008)
    TArray<FString>                               ExclusiveAreas;                                               // 0x0048(0x0010)
    AActor*                                       MapEffectMarkActor;                                           // 0x0058(0x0008)
    ASGAITriggerVolume*                           PlayTriggerVolume;                                            // 0x0060(0x0008)
    TArray<AActor*>                               BattleTestStartPoints;                                        // 0x0068(0x0010)
    TArray<AVolume*>                              PatrolNoEntryVolume;                                          // 0x0078(0x0010)
    bool                                          bEnableTestData;                                              // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    FAISpawnAreaInfoTableRow                      AreaData;                                                     // 0x0090(0x0068)
    char                                          pa_00F8[0x0010]                                               // 0x00F8(0x0010)
};


// ScriptStruct  UAGame.SpawnVolume
// Struct Size::0x0020
struct FSpawnVolume : public FSpawnAreaBase
{
};


// ScriptStruct  UAGame.PathNodeGroupInfo
// Struct Size::0x0028
struct FPathNodeGroupInfo
{
    AVolume*                                      BattleVolumes;                                                // 0x0000(0x0008)
    TArray<ASGAIPathNode*>                        PathNodes;                                                    // 0x0008(0x0010)
    TArray<AActor*>                               ScavSpawnPoints;                                              // 0x0018(0x0010)
};


// ScriptStruct  UAGame.ScavInfoForPathNodeGroup
// Struct Size::0x0020
struct FScavInfoForPathNodeGroup
{
    ASGAICharacter*                               ScavPawn;                                                     // 0x0000(0x0008)
    FString                                       AreaName;                                                     // 0x0008(0x0010)
    ASGAIPathNode*                                CurrentPathNode;                                              // 0x0018(0x0008)
};


// ScriptStruct  UAGame.PathArray
// Struct Size::0x0010
struct FPathArray
{
    TArray<ASGAIPathNode*>                        PathNodes;                                                    // 0x0000(0x0010)
};


// ScriptStruct  UAGame.AreaRuntimeDataInSpawnGroup
// Struct Size::0x0028
struct FAreaRuntimeDataInSpawnGroup
{
    FAreaInfo                                     AreaInfo;                                                     // 0x0000(0x0018)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  UAGame.AISpawnPool
// Struct Size::0x000C
struct FAISpawnPool
{
    FName                                         ToSpawnAIID;                                                  // 0x0000(0x0008)
    int32_t                                       EquipmentPoolID;                                              // 0x0008(0x0004)
};


// ScriptStruct  UAGame.BulletDampingBind
// Struct Size::0x0018
struct FBulletDampingBind
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FBulletDampingParam                           DampingParam;                                                 // 0x0008(0x0010)
};


// ScriptStruct  UAGame.BulletDampingParam
// Struct Size::0x0010
struct FBulletDampingParam
{
    float                                         VelSub;                                                       // 0x0000(0x0004)
    float                                         DamageSub;                                                    // 0x0004(0x0004)
    float                                         PenetrationSub;                                               // 0x0008(0x0004)
    float                                         Density;                                                      // 0x000C(0x0004)
};


// ScriptStruct  UAGame.UABenchmarkDataTableData
// Struct Size::0x0060
struct FUABenchmarkDataTableData : public FTableRowBase
{
    FString                                       Marker;                                                       // 0x0008(0x0010)
    FString                                       Type;                                                         // 0x0018(0x0010)
    FString                                       Unit;                                                         // 0x0028(0x0010)
    FString                                       Value;                                                        // 0x0038(0x0010)
    float                                         PosX;                                                         // 0x0048(0x0004)
    float                                         PosY;                                                         // 0x004C(0x0004)
    float                                         PosZ;                                                         // 0x0050(0x0004)
    float                                         RotX;                                                         // 0x0054(0x0004)
    float                                         RotY;                                                         // 0x0058(0x0004)
    float                                         RotZ;                                                         // 0x005C(0x0004)
};


// ScriptStruct  UAGame.UATutorialEventInfo
// Struct Size::0x0038
struct FUATutorialEventInfo
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       EventName;                                                    // 0x0008(0x0010)
    int32_t                                       MaxTimesInGame;                                               // 0x0018(0x0004)
    int32_t                                       MaxTimesInCareer;                                             // 0x001C(0x0004)
    int32_t                                       NotTriggerTimesInCareer;                                      // 0x0020(0x0004)
    int32_t                                       CD;                                                           // 0x0024(0x0004)
    int32_t                                       Para1;                                                        // 0x0028(0x0004)
    int32_t                                       Para2;                                                        // 0x002C(0x0004)
    int32_t                                       Para3;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  UAGame.ShortcutItemStruct
// Struct Size::0x0020
struct FShortcutItemStruct
{
    TArray<ASGInventory*>                         ShortcutItemInvList;                                          // 0x0000(0x0010)
    ASGInventory*                                 ShortcutItemInv;                                              // 0x0010(0x0008)
    enum class EAttachPosition                    MyAttachPosition;                                             // 0x0018(0x0001)
    enum class EAttachPosition                    InvAttachPosition;                                            // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  UAGame.UAMarkedData
// Struct Size::0x0008
struct FUAMarkedData
{
    enum class EUAMarkedType                      MarkedType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MarkedContinueTime;                                           // 0x0004(0x0004)
};


// ScriptStruct  UAGame.DistributeMissionHistory
// Struct Size::0x0018
struct FDistributeMissionHistory
{
    UMFMissionFlow*                               MissionFlow;                                                  // 0x0000(0x0008)
    enum class ECharacterType                     TriggerCharacterType;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TriggerCharacterLevel;                                        // 0x000C(0x0004)
    int32_t                                       MisionFlowID;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.FactionmemberBaseInfo
// Struct Size::0x0048
struct FFactionmemberBaseInfo
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    uint64_t                                      GID;                                                          // 0x0010(0x0008)
    uint64_t                                      TeamIndex;                                                    // 0x0018(0x0008)
    enum class EFactionMemberType                 CharacterType;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    ASGCharacter*                                 Character;                                                    // 0x0028(0x0008)
    enum class ESGPlayerCondition                 Condition;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FVector                                       TransientLocation;                                            // 0x0034(0x000C)
    int64_t                                       DeathTimeStamp;                                               // 0x0040(0x0008)
};


// ScriptStruct  UAGame.UAFSMInfo
// Struct Size::0x0030
struct FUAFSMInfo
{
    FString                                       FSMState;                                                     // 0x0000(0x0010)
    FString                                       OldFSMState;                                                  // 0x0010(0x0010)
    UObject*                                      TargetObject;                                                 // 0x0020(0x0008)
    bool                                          OnlyReplicateToTarget;                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  UAGame.UAFSMAdvanceParam
// Struct Size::0x0001
struct FUAFSMAdvanceParam
{
    bool                                          OnlyReplicateToTarget;                                        // 0x0000(0x0001)
};


// ScriptStruct  UAGame.GameAreaStatisDateInfo
// Struct Size::0x0010
struct FGameAreaStatisDateInfo
{
    TArray<FAreaDataInfo>                         AreaIDArrays;                                                 // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GameHUDReportInfo
// Struct Size::0x0048
struct FGameHUDReportInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UOverlay*                                     ParentWidget;                                                 // 0x0008(0x0008)
    char                                          pa_0010[0x0038]                                               // 0x0010(0x0038)
};


// ScriptStruct  UAGame.ActivityRequireDistributers
// Struct Size::0x0010
struct FActivityRequireDistributers
{
    TArray<TSoftClassPtr<UObject>>                DistributerClasses;                                           // 0x0000(0x0010)
};


// ScriptStruct  UAGame.UAModePickupLevelConfigsMappingTableRow
// Struct Size::0x0020
struct FUAModePickupLevelConfigsMappingTableRow : public FTableRowBase
{
    int32_t                                       ModeId;                                                       // 0x0008(0x0004)
    int32_t                                       MapID;                                                        // 0x000C(0x0004)
    int32_t                                       MatchID;                                                      // 0x0010(0x0004)
    int32_t                                       TeamID;                                                       // 0x0014(0x0004)
    UDataTable*                                   PickupLevelConfigsTable;                                      // 0x0018(0x0008)
};


// ScriptStruct  UAGame.PlayerStartGroupInfo
// Struct Size::0x0018
struct FPlayerStartGroupInfo
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    enum class EPlayerTeamType                    TeamType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<APlayerStart*>                         PlayerStarts;                                                 // 0x0008(0x0010)
};


// ScriptStruct  UAGame.FactionPlayerStart
// Struct Size::0x0040
struct FFactionPlayerStart
{
    enum class EFactionType                       FactionType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               DomainPlayerStart;                                            // 0x0008(0x0010)
    bool                                          bOccupyDomainPlayerStart;                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<int32_t>                               PlayerStartResult;                                            // 0x0020(0x0010)
    TArray<int32_t>                               PlayerStartResultUsed;                                        // 0x0030(0x0010)
};


// ScriptStruct  UAGame.PlayerItemGroupReplaceInfo
// Struct Size::0x0020
struct FPlayerItemGroupReplaceInfo
{
    int64_t                                       PlayerGID;                                                    // 0x0000(0x0008)
    int32_t                                       TeamIndex;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FItemGroupReplaceInfo>                 ItemGroupReplaceInfos;                                        // 0x0010(0x0010)
};


// ScriptStruct  UAGame.ItemGroupReplaceInfo
// Struct Size::0x0030
struct FItemGroupReplaceInfo
{
    int64_t                                       TakeInItemGID;                                                // 0x0000(0x0008)
    TArray<USGPlayerItemInfoBase*>                ItemGroupAfterReplace;                                        // 0x0008(0x0010)
    TArray<FItemTreeCreateInfo>                   ItemGroupCreateInfos;                                         // 0x0018(0x0010)
    bool                                          bReplaced;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  UAGame.ItemTreeCreateInfo
// Struct Size::0x0028
struct FItemTreeCreateInfo
{
    int64_t                                       FromPlayerGID;                                                // 0x0000(0x0008)
    int32_t                                       FromTeamIndex;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASGInventory*                                 CreatedRootInventory;                                         // 0x0010(0x0008)
    TArray<FPendingCreateItemInfo>                PendingCreateInventories;                                     // 0x0018(0x0010)
};


// ScriptStruct  UAGame.PendingCreateItemInfo
// Struct Size::0x0018
struct FPendingCreateItemInfo
{
    USGPlayerItemInfoBase*                        PlayerItemInfo;                                               // 0x0000(0x0008)
    AActor*                                       ParentInventory;                                              // 0x0008(0x0008)
    int32_t                                       ContainerIndex;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.TraceableActorList
// Struct Size::0x0010
struct FTraceableActorList
{
    TArray<FTraceableActorInfo>                   TraceableActorInfos;                                          // 0x0000(0x0010)
};


// ScriptStruct  UAGame.TraceableActorInfo
// Struct Size::0x0058
struct FTraceableActorInfo
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        ActorOuter;                                                   // 0x0008(0x0008)
    bool                                          bActorDestroyed;                                              // 0x0010(0x0001)
    bool                                          bOwnerAlive;                                                  // 0x0011(0x0001)
    bool                                          bHasOwner;                                                    // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    FVector                                       WorldLocation;                                                // 0x0014(0x000C)
    int32_t                                       Handle;                                                       // 0x0020(0x0004)
    enum class ETraceMarkOperatorType             OperatorType;                                                 // 0x0024(0x0001)
    enum class ETraceableMarkType                 MarkType;                                                     // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    int32_t                                       ConfigID;                                                     // 0x0028(0x0004)
    float                                         ScanningInterval;                                             // 0x002C(0x0004)
    float                                         LastUpdateServerTime;                                         // 0x0030(0x0004)
    TWeakObjectPtr<AQuestBase>                    OwnerQuest;                                                   // 0x0034(0x0008)
    int32_t                                       TaskId;                                                       // 0x003C(0x0004)
    int32_t                                       TargetId;                                                     // 0x0040(0x0004)
    bool                                          bNeedTrace;                                                   // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FVector                                       Extend;                                                       // 0x0048(0x000C)
    int32_t                                       EscapeId;                                                     // 0x0054(0x0004)
};


// ScriptStruct  UAGame.TrackPlayerInfo
// Struct Size::0x0020
struct FTrackPlayerInfo
{
    UUAPlayerStateTraceComponent*                 PlayerStateTraceComponent;                                    // 0x0000(0x0008)
    UUAPlayerStateChaseActivityComp*              ChaseActivityComp;                                            // 0x0008(0x0008)
    FChaseActivityAvatarInfo                      ChaseActivityAvatarInfo;                                      // 0x0010(0x0010)
};


// ScriptStruct  UAGame.MemberInfo
// Struct Size::0x00C8
struct FMemberInfo
{
    int64_t                                       GID;                                                          // 0x0000(0x0008)
    int32_t                                       Level;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       HeadIconFileName;                                             // 0x0010(0x0010)
    UObject*                                      HeadIconTexture;                                              // 0x0020(0x0008)
    FString                                       HeadboxPath;                                                  // 0x0028(0x0010)
    FString                                       PrivilegeIconPath;                                            // 0x0038(0x0010)
    FString                                       PlayerName;                                                   // 0x0048(0x0010)
    FString                                       TitleName;                                                    // 0x0058(0x0010)
    FString                                       TitleIconPath;                                                // 0x0068(0x0010)
    FString                                       TitleBackgroundPath;                                          // 0x0078(0x0010)
    int32_t                                       TitleShowNum;                                                 // 0x0088(0x0004)
    int32_t                                       Type;                                                         // 0x008C(0x0004)
    FString                                       NameCardPath;                                                 // 0x0090(0x0010)
    FString                                       NationalFlagPath;                                             // 0x00A0(0x0010)
    FString                                       RankingIconPath;                                              // 0x00B0(0x0010)
    bool                                          VoiceBan;                                                     // 0x00C0(0x0001)
    bool                                          VoiceClose;                                                   // 0x00C1(0x0001)
    char                                          pa_00C2[0x0006]                                               // 0x00C2(0x0006)
};


// ScriptStruct  UAGame.ModifyEscapeInfoList
// Struct Size::0x0010
struct FModifyEscapeInfoList
{
    TArray<FModifyEscapeInfo>                     ModifyEscapeInfos;                                            // 0x0000(0x0010)
};


// ScriptStruct  UAGame.ModifyEscapeInfo
// Struct Size::0x0008
struct FModifyEscapeInfo
{
    int32_t                                       EscapePointID;                                                // 0x0000(0x0004)
    bool                                          bAddEscapePoint;                                              // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UAGame.TeamEscapeInfo
// Struct Size::0x0020
struct FTeamEscapeInfo
{
    ASGTeamInfo*                                  TeamInfo;                                                     // 0x0000(0x0008)
    TArray<int32_t>                               EscapePointIDs;                                               // 0x0008(0x0010)
    bool                                          FinishDistribute;                                             // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       PresetIndex;                                                  // 0x001C(0x0004)
};


// ScriptStruct  UAGame.SGSceneMoveActorRaw
// Struct Size::0x0028
struct FSGSceneMoveActorRaw
{
    FMissionActorReference                        ActorReference;                                               // 0x0000(0x0018)
    FVector                                       MoveLocation;                                                 // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UAGame.ChaseActivityInvMarkScaleInfo
// Struct Size::0x0008
struct FChaseActivityInvMarkScaleInfo
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    float                                         Scale;                                                        // 0x0004(0x0004)
};


// ScriptStruct  UAGame.UAWeaponAttributes
// Struct Size::0x001C
struct FUAWeaponAttributes
{
    float                                         BulletZeroFlyDistanceForWeaponAction;                         // 0x0000(0x0004)
    float                                         ZeroDropDistance;                                             // 0x0004(0x0004)
    float                                         Accuracy;                                                     // 0x0008(0x0004)
    float                                         MoaX;                                                         // 0x000C(0x0004)
    float                                         MoaY;                                                         // 0x0010(0x0004)
    float                                         VerticalRecoil;                                               // 0x0014(0x0004)
    float                                         HorizontalRecoil;                                             // 0x0018(0x0004)
};


// ScriptStruct  UAGame.UALootBoxNameTool
// Struct Size::0x00C0
struct FUALootBoxNameTool
{
    FText                                         TextForFindTableID;                                           // 0x0000(0x0018)
    char                                          pa_0018[0x00A8]                                               // 0x0018(0x00A8)
};


// ScriptStruct  UAGame.CombinPickupData
// Struct Size::0x0048
struct FCombinPickupData
{
    TSoftClassPtr<UObject>                        PickupClass;                                                  // 0x0000(0x0028)
    FVector                                       LocationOffset;                                               // 0x0028(0x000C)
    FRotator                                      RotatorOffset;                                                // 0x0034(0x000C)
    AUAPickup*                                    SpawnPickup;                                                  // 0x0040(0x0008)
};


// ScriptStruct  UAGame.CacheModifyData
// Struct Size::0x0010
struct FCacheModifyData
{
    TArray<ACharacter*>                           Characters;                                                   // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionActionRelevantToAICharacters
// Struct Size::0x0010
struct FMissionActionRelevantToAICharacters
{
    TArray<TWeakObjectPtr<ASGAICharacter>>        AICharacters;                                                 // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionActionRelevantToInventories
// Struct Size::0x0010
struct FMissionActionRelevantToInventories
{
    TArray<TWeakObjectPtr<ASGInventory>>          Inventories;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionActionRelevantToInteractActors
// Struct Size::0x0010
struct FMissionActionRelevantToInteractActors
{
    TArray<TWeakObjectPtr<AActor>>                InteractActors;                                               // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionActionSpawnedInventories
// Struct Size::0x0010
struct FMissionActionSpawnedInventories
{
    TArray<TWeakObjectPtr<ASGInventory>>          Inventories;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UAGame.RandomCacheStruct
// Struct Size::0x0010
struct FRandomCacheStruct
{
    TArray<int32_t>                               EscapePoints;                                                 // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    int32_t                                       IntCount;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.FactionPlayerStartConfigRow
// Struct Size::0x0050
struct FFactionPlayerStartConfigRow
{
    enum class EFactionType                       FactionType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ChooseNum;                                                    // 0x0004(0x0004)
    enum class EFPSCCheckType                     CheckType;                                                    // 0x0008(0x0001)
    enum class EPlayerTeamType                    PlayerStartTeamType;                                          // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       ParamOne;                                                     // 0x000C(0x0004)
    int32_t                                       ParamTwo;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FMFMissionVariableRead                        NewReferenceVector;                                           // 0x0018(0x0038)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionParadropRow
// Struct Size::0x0048
struct FMissionParadropRow
{
    FMFMissionVariableRead                        NewPlacementActor;                                            // 0x0000(0x0040)
    FName                                         ConfigRowName;                                                // 0x0040(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionVariableWriteRow
// Struct Size::0x0010
struct FMissionVariableWriteRow
{
    TArray<UMFMissionVariableWriteBase*>          Variables;                                                    // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveActivateLootPointConfigs
// Struct Size::0x0020
struct FMissionObjectiveActivateLootPointConfigs
{
    TArray<int32_t>                               ForceActivateLootPoints;                                      // 0x0000(0x0010)
    TArray<FMissionObjectiveActivateLootPointConfig>ActivateConfigs;                                            // 0x0010(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveActivateLootPointConfig
// Struct Size::0x000C
struct FMissionObjectiveActivateLootPointConfig
{
    int32_t                                       LootPointType;                                                // 0x0000(0x0004)
    int32_t                                       ActivateMinCount;                                             // 0x0004(0x0004)
    int32_t                                       ActivateMaxCount;                                             // 0x0008(0x0004)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveBroadcastedCheckTimeConfigs
// Struct Size::0x0010
struct FMissionObjectiveBroadcastedCheckTimeConfigs
{
    TArray<int32_t>                               CheckIndexs;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveBroadcastGameHUDConfigs
// Struct Size::0x0010
struct FMissionObjectiveBroadcastGameHUDConfigs
{
    TArray<FBroadcastOnGameHUDConfig>             GameHUDConfigs;                                               // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    int32_t                                       IntCount;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0018
struct FGlobalEventMessage
{
    ACharacter*                                   Instigator;                                                   // 0x0000(0x0008)
    ACharacter*                                   TeamMember;                                                   // 0x0008(0x0008)
    AActor*                                       EscapeVolume;                                                 // 0x0010(0x0008)
};


// ScriptStruct  UAGame.FactionScoreAction
// Struct Size::0x0010
struct FFactionScoreAction
{
    TArray<UMFMissionAction*>                     Actions;                                                      // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AGameState*                                   Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnedActors
// Struct Size::0x0010
struct FMissionObjectiveSpawnedActors
{
    TArray<ASGNetRelevantConfigurableActor*>      Actors;                                                       // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnedInteractItems
// Struct Size::0x0010
struct FMissionObjectiveSpawnedInteractItems
{
    TArray<TWeakObjectPtr<ASGNetRelevantConfigurableActor>>InteractItems;                                       // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    AActor*                                       InteractActor;                                                // 0x0008(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnedInventories
// Struct Size::0x0010
struct FMissionObjectiveSpawnedInventories
{
    TArray<TWeakObjectPtr<ASGInventory>>          Inventories;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnedPickups
// Struct Size::0x0010
struct FMissionObjectiveSpawnedPickups
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0008
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0028
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
    FStackableItemSourceInfo                      StackableItemSourceInfo;                                      // 0x0010(0x0018)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    AActor*                                       Instigator;                                                   // 0x0000(0x0008)
    ASGInventory*                                 Inventory;                                                    // 0x0008(0x0008)
};


// ScriptStruct  UAGame.GlobalEventMessage
// Struct Size::0x0010
struct FGlobalEventMessage
{
    APlayerState*                                 Instigator;                                                   // 0x0000(0x0008)
    enum class EPlayerEndGameType                 EndGameType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  UAGame.MissionFlowUploadData
// Struct Size::0x0028
struct FMissionFlowUploadData
{
    FString                                       MissionFlowName;                                              // 0x0000(0x0010)
    enum class EMissionStatus                     MissionFlowStatus;                                            // 0x0010(0x0001)
    bool                                          bBeforeState;                                                 // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    TArray<FMissionUploadData>                    MissionUploadDataList;                                        // 0x0018(0x0010)
};


// ScriptStruct  UAGame.MissionUploadData
// Struct Size::0x0018
struct FMissionUploadData
{
    FString                                       MissionName;                                                  // 0x0000(0x0010)
    enum class EMissionStatus                     MissionStatus;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       CurProgress;                                                  // 0x0014(0x0004)
};


// ScriptStruct  UAGame.ActivityTemplateMissionTableRow
// Struct Size::0x0038
struct FActivityTemplateMissionTableRow : public FTableRowBase
{
    int32_t                                       TargetTypeID;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftObjectPtr<UMFMissionFlow>                MissionFlowAsset;                                             // 0x0010(0x0028)
};


// ScriptStruct  UAGame.MissionFlowPlayers
// Struct Size::0x0010
struct FMissionFlowPlayers
{
    TArray<TWeakObjectPtr<APlayerController>>     PlayerList;                                                   // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionTraceableParam
// Struct Size::0x0004
struct FMissionTraceableParam
{
    int32_t                                       ConfigID;                                                     // 0x0000(0x0004)
};


// ScriptStruct  UAGame.MissionConditionTimeOfDay
// Struct Size::0x000C
struct FMissionConditionTimeOfDay
{
    int32_t                                       Hour;                                                         // 0x0000(0x0004)
    int32_t                                       Minute;                                                       // 0x0004(0x0004)
    int32_t                                       Second;                                                       // 0x0008(0x0004)
};


// ScriptStruct  UAGame.MissionActionVolumeMarkableInfo
// Struct Size::0x0060
struct FMissionActionVolumeMarkableInfo
{
    bool                                          bShowTraceableActor;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               SpawnedInventories;                                           // 0x0008(0x0010)
    FMFGlobalEventParameterTag                    VolumeTag;                                                    // 0x0018(0x0008)
    int32_t                                       VolumeID;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMFMissionVariableRead                        NewVolumeID;                                                  // 0x0028(0x0030)
    int32_t                                       ConfigID;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  UAGame.MissionActionInventoryMarkableInfo
// Struct Size::0x0040
struct FMissionActionInventoryMarkableInfo
{
    bool                                          bShowTraceableActor;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FMissionActorReference                        SpawnVolumeActor;                                             // 0x0008(0x0018)
    FMFGlobalEventParameterTag                    SpawnVolumeTag;                                               // 0x0020(0x0008)
    bool                                          bNotCharacterOwner;                                           // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FMFGlobalEventParameterTag                    InventoryTag;                                                 // 0x002C(0x0008)
    int32_t                                       ItemId;                                                       // 0x0034(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UAGame.MissionActionAICharacterMarkableInfo
// Struct Size::0x0020
struct FMissionActionAICharacterMarkableInfo
{
    bool                                          bShowTraceableActor;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMFGlobalEventParameterTag                    AICharacterTag;                                               // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    int64_t                                       AIID;                                                         // 0x0010(0x0008)
    enum class ESpawnReason                       SpawnReason;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ConfigID;                                                     // 0x001C(0x0004)
};


// ScriptStruct  UAGame.MissionActionActorMarkableInfo
// Struct Size::0x0030
struct FMissionActionActorMarkableInfo
{
    bool                                          bShowTraceableActor;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMFGlobalEventParameterTag                    ActorTag;                                                     // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMissionActorReference                        ActorRef;                                                     // 0x0010(0x0018)
    int32_t                                       ConfigID;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UAGame.MissionActionRandomEscapePoint
// Struct Size::0x0040
struct FMissionActionRandomEscapePoint
{
    int32_t                                       EscapePointID;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMFMissionVariableRead                        NewEscapePointID;                                             // 0x0008(0x0030)
    int32_t                                       Weight;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  UAGame.MissionActionRelevantToAI
// Struct Size::0x0018
struct FMissionActionRelevantToAI
{
    TArray<int32_t>                               AIIDs;                                                        // 0x0000(0x0010)
    int32_t                                       ConfigID;                                                     // 0x0010(0x0004)
    int32_t                                       FailedAINum;                                                  // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionActionRelevantToInventory
// Struct Size::0x0018
struct FMissionActionRelevantToInventory
{
    TArray<int32_t>                               InventoryItemIDs;                                             // 0x0000(0x0010)
    int32_t                                       ConfigID;                                                     // 0x0010(0x0004)
    int32_t                                       FailedInventoryNum;                                           // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionActionRelevantToVolume
// Struct Size::0x0018
struct FMissionActionRelevantToVolume
{
    TArray<int32_t>                               VolumeItemIDs;                                                // 0x0000(0x0010)
    int32_t                                       ConfigID;                                                     // 0x0010(0x0004)
    int32_t                                       FailedInteractNum;                                            // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionActionRelevantToInteract
// Struct Size::0x0018
struct FMissionActionRelevantToInteract
{
    TArray<int32_t>                               InteractItemIDs;                                              // 0x0000(0x0010)
    int32_t                                       ConfigID;                                                     // 0x0010(0x0004)
    int32_t                                       FailedInteractNum;                                            // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionActionGiveItemInfo
// Struct Size::0x0018
struct FMissionActionGiveItemInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       MinStackCount;                                                // 0x0004(0x0004)
    int32_t                                       MaxStackCount;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASGInventory*                                 InventoryClass;                                               // 0x0010(0x0008)
};


// ScriptStruct  UAGame.RandomMissionTableRow
// Struct Size::0x0018
struct FRandomMissionTableRow : public FTableRowBase
{
    int32_t                                       TaskId;                                                       // 0x0008(0x0004)
    int32_t                                       Weight;                                                       // 0x000C(0x0004)
    int32_t                                       MinLevel;                                                     // 0x0010(0x0004)
    int32_t                                       MaxLevel;                                                     // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionObjectiveGiveItemInfo
// Struct Size::0x0018
struct FMissionObjectiveGiveItemInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
    int32_t                                       MinStackCount;                                                // 0x0004(0x0004)
    int32_t                                       MaxStackCount;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASGInventory*                                 InventoryClass;                                               // 0x0010(0x0008)
};


// ScriptStruct  UAGame.MissionObjectiveAddInventoryToSearchContainerInfo
// Struct Size::0x0004
struct FMissionObjectiveAddInventoryToSearchContainerInfo
{
    int32_t                                       ItemId;                                                       // 0x0000(0x0004)
};


// ScriptStruct  UAGame.MissionObjectiveAddInventoryToLootContainerInfo
// Struct Size::0x0008
struct FMissionObjectiveAddInventoryToLootContainerInfo
{
    int32_t                                       Weight;                                                       // 0x0000(0x0004)
    int32_t                                       ItemId;                                                       // 0x0004(0x0004)
};


// ScriptStruct  UAGame.MissionObjectiveSceneEventInfo
// Struct Size::0x0058
struct FMissionObjectiveSceneEventInfo
{
    TSoftClassPtr<UObject>                        SceneEventClassPtr;                                           // 0x0000(0x0028)
    float                                         ValidTime;                                                    // 0x0028(0x0004)
    float                                         ValidScope;                                                   // 0x002C(0x0004)
    FVector                                       Location;                                                     // 0x0030(0x000C)
    float                                         CoverRange;                                                   // 0x003C(0x0004)
    int32_t                                       Weight;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FString>                               Tags;                                                         // 0x0048(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnParticleInfo
// Struct Size::0x0028
struct FMissionObjectiveSpawnParticleInfo
{
    FMissionActorReference                        SpawnPointActor;                                              // 0x0000(0x0018)
    UParticleSystem*                              Effect;                                                       // 0x0018(0x0008)
    int32_t                                       Weight;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnActorInfo
// Struct Size::0x0038
struct FMissionObjectiveSpawnActorInfo
{
    FMissionActorReference                        SpawnPointActor;                                              // 0x0000(0x0018)
    UStaticMesh*                                  StaticMesh;                                                   // 0x0018(0x0008)
    int32_t                                       Weight;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<enum class EMissionRelatedTargetType>  RelatedTargetTypes;                                           // 0x0028(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnPickupInfo
// Struct Size::0x0038
struct FMissionObjectiveSpawnPickupInfo
{
    FMissionActorReference                        SpawnPointActor;                                              // 0x0000(0x0018)
    ASGPickup*                                    PickupClass;                                                  // 0x0018(0x0008)
    int32_t                                       Weight;                                                       // 0x0020(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0024(0x0004)
    TArray<enum class EMissionRelatedTargetType>  RelatedTargetTypes;                                           // 0x0028(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnInteractItemInfo
// Struct Size::0x0038
struct FMissionObjectiveSpawnInteractItemInfo
{
    FMissionActorReference                        SpawnPointActor;                                              // 0x0000(0x0018)
    ASGNetRelevantConfigurableActor*              InteractItemClass;                                            // 0x0018(0x0008)
    int32_t                                       Weight;                                                       // 0x0020(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0024(0x0004)
    TArray<enum class EMissionRelatedTargetType>  RelatedTargetTypes;                                           // 0x0028(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnInventoryInfo
// Struct Size::0x0068
struct FMissionObjectiveSpawnInventoryInfo
{
    FMissionActorReference                        SpawnPointActor;                                              // 0x0000(0x0018)
    FMissionActorReference                        SpawnVolumeActor;                                             // 0x0018(0x0018)
    ASGInventory*                                 ContainerClass;                                               // 0x0030(0x0008)
    TArray<int64_t>                               ItemIDs;                                                      // 0x0038(0x0010)
    int32_t                                       Weight;                                                       // 0x0048(0x0004)
    int32_t                                       ConfigID;                                                     // 0x004C(0x0004)
    int32_t                                       LootPointType;                                                // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<enum class EMissionRelatedTargetType>  RelatedTargetTypes;                                           // 0x0058(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnAIEventConfig
// Struct Size::0x0018
struct FMissionObjectiveSpawnAIEventConfig
{
    int32_t                                       SpawnNum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMissionObjectiveSpawnAIEventParams>   EventParams;                                                  // 0x0008(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveSpawnAIEventParams
// Struct Size::0x0018
struct FMissionObjectiveSpawnAIEventParams
{
    TArray<FString>                               EventStrList;                                                 // 0x0000(0x0010)
    int32_t                                       Weight;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.MissionObjectiveInteractTargets
// Struct Size::0x0010
struct FMissionObjectiveInteractTargets
{
    TArray<AActor*>                               InteractTargets;                                              // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveCollectedItems
// Struct Size::0x0010
struct FMissionObjectiveCollectedItems
{
    TArray<ASGInventory*>                         Inventories;                                                  // 0x0000(0x0010)
};


// ScriptStruct  UAGame.MissionObjectiveEffectMissionFlowInfo
// Struct Size::0x0018
struct FMissionObjectiveEffectMissionFlowInfo
{
    int32_t                                       MissionFlowID;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MissionIDs;                                                   // 0x0008(0x0010)
};


// ScriptStruct  UAGame.MissionRelatedPlayers
// Struct Size::0x0040
struct FMissionRelatedPlayers
{
    TArray<APlayerState*>                         PlayerStates;                                                 // 0x0000(0x0010)
    TArray<ASGTeamInfo*>                          TeamInfos;                                                    // 0x0010(0x0010)
    TArray<enum class EPlayerTeamType>            PlayerTeamTypes;                                              // 0x0020(0x0010)
    TArray<enum class EFactionType>               FactionTypes;                                                 // 0x0030(0x0010)
};


// ScriptStruct  UAGame.MissionRelatedTargets
// Struct Size::0x0040
struct FMissionRelatedTargets
{
    TArray<ACharacter*>                           Characters;                                                   // 0x0000(0x0010)
    TArray<ASGTeamInfo*>                          TeamInfos;                                                    // 0x0010(0x0010)
    TArray<enum class EPlayerTeamType>            PlayerTeamTypes;                                              // 0x0020(0x0010)
    TArray<enum class EFactionType>               FactionTypes;                                                 // 0x0030(0x0010)
};


// ScriptStruct  UAGame.MissionFlowClassTableRow
// Struct Size::0x0038
struct FMissionFlowClassTableRow : public FTableRowBase
{
    int32_t                                       MissionFlowID;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftObjectPtr<UMFMissionFlow>                MissionFlowAsset;                                             // 0x0010(0x0028)
};


// ScriptStruct  UAGame.MissionFlowCreateData
// Struct Size::0x0028
struct FMissionFlowCreateData
{
    int32_t                                       MissionFlowID;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMissionCreateData>                    MissionList;                                                  // 0x0008(0x0010)
    bool                                          bActTask;                                                     // 0x0018(0x0001)
    bool                                          bShowInGame;                                                  // 0x0019(0x0001)
    char                                          pa_001A[0x000E]                                               // 0x001A(0x000E)
};


// ScriptStruct  UAGame.MissionCreateData
// Struct Size::0x0020
struct FMissionCreateData
{
    int32_t                                       MissionID;                                                    // 0x0000(0x0004)
    int32_t                                       CurProgress;                                                  // 0x0004(0x0004)
    int32_t                                       MaxProgress;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               ActivityTemplateParams;                                       // 0x0010(0x0010)
};


// ScriptStruct  UAGame.ObjPoolClassWeight
// Struct Size::0x0030
struct FObjPoolClassWeight
{
    TSoftClassPtr<UObject>                        Class;                                                        // 0x0000(0x0028)
    int32_t                                       Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UAGame.UAObjPoolExpectationMem
// Struct Size::0x0008
struct FUAObjPoolExpectationMem
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    float                                         ExpectationMem;                                               // 0x0004(0x0004)
};


// ScriptStruct  UAGame.NiagaraSwitherRow
// Struct Size::0x0010
struct FNiagaraSwitherRow
{
    UNiagaraSystem*                               Asset;                                                        // 0x0000(0x0008)
    float                                         PlayTime;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.UAParadropVolumeInfo
// Struct Size::0x0010
struct FUAParadropVolumeInfo
{
    TArray<int32_t>                               AvailablePointIDs;                                            // 0x0000(0x0010)
};


// ScriptStruct  UAGame.UAParadropWave
// Struct Size::0x0048
struct FUAParadropWave
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FUAParadropFlight>                     Flights;                                                      // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
    APawn*                                        ParadropInstigator;                                           // 0x0028(0x0008)
    char                                          pa_0030[0x0018]                                               // 0x0030(0x0018)
};


// ScriptStruct  UAGame.UAParadropFlight
// Struct Size::0x0058
struct FUAParadropFlight
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<AActor*>                               ParadropPoints;                                               // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    TArray<FVector>                               OverWriteKeyPoints;                                           // 0x0020(0x0010)
    char                                          pa_0030[0x0028]                                               // 0x0030(0x0028)
};


// ScriptStruct  UAGame.UAParadropGroup
// Struct Size::0x0010
struct FUAParadropGroup
{
    TArray<AActor*>                               ParadropPointArray;                                           // 0x0000(0x0010)
};


// ScriptStruct  UAGame.UAParadropSupplyInfo
// Struct Size::0x0010
struct FUAParadropSupplyInfo
{
    AActor*                                       LootContainer;                                                // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  UAGame.ParticalSwitherRow
// Struct Size::0x0010
struct FParticalSwitherRow
{
    ASGShowControlEffectActor*                    EffectActor;                                                  // 0x0000(0x0008)
    float                                         PlayTime;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.QuestReplicateData
// Struct Size::0x0028
struct FQuestReplicateData
{
    AController*                                  Controller;                                                   // 0x0000(0x0008)
    int32_t                                       GraphID;                                                      // 0x0008(0x0004)
    enum class EQuestStatus                       GraphState;                                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<AMFQuestBase*>                         QuestActors;                                                  // 0x0010(0x0010)
    bool                                          IsSeasonTask;                                                 // 0x0020(0x0001)
    bool                                          QuestBeforeState;                                             // 0x0021(0x0001)
    enum class EQuestStatus                       OldGraphState;                                                // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    float                                         GraphStateChangeTime;                                         // 0x0024(0x0004)
};


// ScriptStruct  UAGame.UAAmmoSpawnRow
// Struct Size::0x0010
struct FUAAmmoSpawnRow : public FTableRowBase
{
    int32_t                                       MinCount;                                                     // 0x0008(0x0004)
    int32_t                                       MaxCount;                                                     // 0x000C(0x0004)
};


// ScriptStruct  UAGame.RelevantFollowActorList
// Struct Size::0x0010
struct FRelevantFollowActorList
{
    TArray<AActor*>                               ActorList;                                                    // 0x0000(0x0010)
};


// ScriptStruct  UAGame.ASkeletalAnimSwitherRow
// Struct Size::0x0010
struct FASkeletalAnimSwitherRow
{
    UAnimationAsset*                              Asset;                                                        // 0x0000(0x0008)
    float                                         PlayTime;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.SceneObjInfo
// Struct Size::0x0038
struct FSceneObjInfo : public FSceneObjeInfo
{
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  UAGame.ThrowableDebuffStruct
// Struct Size::0x0010
struct FThrowableDebuffStruct
{
    float                                         DizzyTime;                                                    // 0x0000(0x0004)
    float                                         BlindTime;                                                    // 0x0004(0x0004)
    float                                         SlowDownTime;                                                 // 0x0008(0x0004)
    float                                         TinnitusTime;                                                 // 0x000C(0x0004)
};


// ScriptStruct  UAGame.InventoryFlashDebuffStruct
// Struct Size::0x0010
struct FInventoryFlashDebuffStruct
{
    float                                         DebuffTime;                                                   // 0x0000(0x0004)
    float                                         GetDebuffPosX;                                                // 0x0004(0x0004)
    float                                         GetDebuffPosY;                                                // 0x0008(0x0004)
    float                                         GetDebuffPosZ;                                                // 0x000C(0x0004)
};


// ScriptStruct  UAGame.UseInventoryFlashStruct
// Struct Size::0x0010
struct FUseInventoryFlashStruct
{
    float                                         UseTime;                                                      // 0x0000(0x0004)
    float                                         UsePosX;                                                      // 0x0004(0x0004)
    float                                         UsePosY;                                                      // 0x0008(0x0004)
    float                                         UsePosZ;                                                      // 0x000C(0x0004)
};


// ScriptStruct  UAGame.SecHurtFlowStruct
// Struct Size::0x00C8
struct FSecHurtFlowStruct
{
    int32_t                                       MapID;                                                        // 0x0000(0x0004)
    int32_t                                       Weatherid;                                                    // 0x0004(0x0004)
    int32_t                                       HurtFlowID;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       EnemyOpenID;                                                  // 0x0010(0x0010)
    FString                                       EnemyRoleID;                                                  // 0x0020(0x0010)
    int32_t                                       EnemyRoleType;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       EnemyUserName;                                                // 0x0038(0x0010)
    int32_t                                       HurtTime;                                                     // 0x0048(0x0004)
    int32_t                                       HurtType;                                                     // 0x004C(0x0004)
    int32_t                                       HitType;                                                      // 0x0050(0x0004)
    int32_t                                       DamageStart;                                                  // 0x0054(0x0004)
    int32_t                                       DamageReduce;                                                 // 0x0058(0x0004)
    int32_t                                       ArmorDef;                                                     // 0x005C(0x0004)
    int32_t                                       HPstart;                                                      // 0x0060(0x0004)
    int32_t                                       HPEnd;                                                        // 0x0064(0x0004)
    int32_t                                       HelmetHPStart;                                                // 0x0068(0x0004)
    int32_t                                       HelmetHPEnd;                                                  // 0x006C(0x0004)
    int32_t                                       ArmorHPStart;                                                 // 0x0070(0x0004)
    int32_t                                       ArmorHPEnd;                                                   // 0x0074(0x0004)
    int32_t                                       FallHeight;                                                   // 0x0078(0x0004)
    int32_t                                       PlayerKilled;                                                 // 0x007C(0x0004)
    int32_t                                       IfIsAI;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FString                                       DebuffStartList;                                              // 0x0088(0x0010)
    FString                                       DebuffEndList;                                                // 0x0098(0x0010)
    FString                                       DebuffLevelStartList;                                         // 0x00A8(0x0010)
    FString                                       DebuffLevelEndList;                                           // 0x00B8(0x0010)
};


// ScriptStruct  UAGame.OnKillOtherStruct
// Struct Size::0x00F0
struct FOnKillOtherStruct
{
    FString                                       WeaponName;                                                   // 0x0000(0x0010)
    FString                                       BulletName;                                                   // 0x0010(0x0010)
    float                                         KillTime;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       HitHelmetInventoryName;                                       // 0x0028(0x0010)
    FString                                       HitVestInventoryName;                                         // 0x0038(0x0010)
    int32_t                                       KilledPlayerTeamType;                                         // 0x0048(0x0004)
    int32_t                                       ArmorLevel;                                                   // 0x004C(0x0004)
    int32_t                                       HitEndurance;                                                 // 0x0050(0x0004)
    int32_t                                       TeamType;                                                     // 0x0054(0x0004)
    bool                                          bADS;                                                         // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    ASGInventory*                                 WeaponInventory;                                              // 0x0060(0x0008)
    float                                         HitDistance;                                                  // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    uint64_t                                      KillerPlayerID;                                               // 0x0070(0x0008)
    float                                         CauseArmorConsume;                                            // 0x0078(0x0004)
    float                                         CauseArmorReduceDamage;                                       // 0x007C(0x0004)
    bool                                          bHitHead;                                                     // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         ResultDamage;                                                 // 0x0084(0x0004)
    float                                         GameRunningTime;                                              // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    uint64_t                                      KilledCharacterID;                                            // 0x0090(0x0008)
    int32_t                                       HitGroup;                                                     // 0x0098(0x0004)
    int32_t                                       HitHeadPart;                                                  // 0x009C(0x0004)
    float                                         KillerPosX;                                                   // 0x00A0(0x0004)
    float                                         KillerPosY;                                                   // 0x00A4(0x0004)
    float                                         KillerPosZ;                                                   // 0x00A8(0x0004)
    float                                         DeathPosX;                                                    // 0x00AC(0x0004)
    float                                         DeathPosY;                                                    // 0x00B0(0x0004)
    float                                         DeathPosZ;                                                    // 0x00B4(0x0004)
    int32_t                                       GunId;                                                        // 0x00B8(0x0004)
    uint32_t                                      BulletItemID;                                                 // 0x00BC(0x0004)
    uint32_t                                      VestItemID;                                                   // 0x00C0(0x0004)
    uint32_t                                      HelmetItemID;                                                 // 0x00C4(0x0004)
    float                                         VerticalRecoil;                                               // 0x00C8(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00CC(0x0004)
    float                                         MoaX;                                                         // 0x00D0(0x0004)
    float                                         MoaY;                                                         // 0x00D4(0x0004)
    float                                         Ergonomics;                                                   // 0x00D8(0x0004)
    float                                         Accuracy;                                                     // 0x00DC(0x0004)
    FString                                       AccessoryIds;                                                 // 0x00E0(0x0010)
};


// ScriptStruct  UAGame.BulletDamageStruct
// Struct Size::0x0050
struct FBulletDamageStruct
{
    FString                                       WeaponName;                                                   // 0x0000(0x0010)
    FString                                       BulletName;                                                   // 0x0010(0x0010)
    FString                                       WeaponType;                                                   // 0x0020(0x0010)
    int32_t                                       HitCharacter;                                                 // 0x0030(0x0004)
    int32_t                                       HitArmor;                                                     // 0x0034(0x0004)
    int32_t                                       HitEndurance;                                                 // 0x0038(0x0004)
    int32_t                                       HitGroup;                                                     // 0x003C(0x0004)
    float                                         HitEnduranceDamage;                                           // 0x0040(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x0044(0x0004)
    int32_t                                       HitSubGroup;                                                  // 0x0048(0x0004)
    float                                         HitSubEnduranceDamage;                                        // 0x004C(0x0004)
};


// ScriptStruct  UAGame.ChangeWeaponOrStartFireStruct
// Struct Size::0x0038
struct FChangeWeaponOrStartFireStruct
{
    uint64_t                                      FireID;                                                       // 0x0000(0x0008)
    FString                                       WeaponName;                                                   // 0x0008(0x0010)
    int32_t                                       bIsChangeWeaponOrStartFire;                                   // 0x0018(0x0004)
    int32_t                                       bHitCharacter;                                                // 0x001C(0x0004)
    int32_t                                       HitEndurance;                                                 // 0x0020(0x0004)
    int32_t                                       HitGroup;                                                     // 0x0024(0x0004)
    float                                         HitEnduranceDamage;                                           // 0x0028(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x002C(0x0004)
    int32_t                                       HitSubGroup;                                                  // 0x0030(0x0004)
    float                                         HitSubEnduranceDamage;                                        // 0x0034(0x0004)
};


// ScriptStruct  UAGame.AntiDataStruct
// Struct Size::0x0030
struct FAntiDataStruct
{
    uint64_t                                      roomid;                                                       // 0x0000(0x0008)
    FString                                       ClientVersion;                                                // 0x0008(0x0010)
    FString                                       AntiData;                                                     // 0x0018(0x0010)
    uint32_t                                      Source;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UAGame.ThrowableStartFireInformationStatistics
// Struct Size::0x0198
struct FThrowableStartFireInformationStatistics
{
    int64_t                                       Timestamp;                                                    // 0x0000(0x0008)
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    FString                                       WeaponName;                                                   // 0x0010(0x0010)
    FString                                       WeaponType;                                                   // 0x0020(0x0010)
    bool                                          bHit;                                                         // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    TArray<FString>                               HitCharacterArray;                                            // 0x0038(0x0010)
    int32_t                                       HitNumber;                                                    // 0x0048(0x0004)
    int32_t                                       HitPmcNumber;                                                 // 0x004C(0x0004)
    int32_t                                       HitScavNumber;                                                // 0x0050(0x0004)
    float                                         ThrowDistance;                                                // 0x0054(0x0004)
    int32_t                                       TeamType;                                                     // 0x0058(0x0004)
    int32_t                                       HitCharacterTeamType;                                         // 0x005C(0x0004)
    int64_t                                       HitCharacterPlayerID;                                         // 0x0060(0x0008)
    int32_t                                       HitEndurance;                                                 // 0x0068(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x006C(0x0004)
    int64_t                                       ArmorId;                                                      // 0x0070(0x0008)
    int32_t                                       ArmorLevel;                                                   // 0x0078(0x0004)
    float                                         CauseArmorConsume;                                            // 0x007C(0x0004)
    float                                         CauseArmorReduceDamage;                                       // 0x0080(0x0004)
    float                                         ResultDamage;                                                 // 0x0084(0x0004)
    ASGInventory*                                 WeaponInventory;                                              // 0x0088(0x0008)
    int32_t                                       HitCharacterType;                                             // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    int64_t                                       HitAIID;                                                      // 0x0098(0x0008)
    int32_t                                       ShotTime;                                                     // 0x00A0(0x0004)
    int32_t                                       HitTime;                                                      // 0x00A4(0x0004)
    int32_t                                       PlayerPositionX;                                              // 0x00A8(0x0004)
    int32_t                                       PlayerPositionY;                                              // 0x00AC(0x0004)
    int32_t                                       PlayerPositionZ;                                              // 0x00B0(0x0004)
    int32_t                                       ThrowPositionX;                                               // 0x00B4(0x0004)
    int32_t                                       ThrowPositionY;                                               // 0x00B8(0x0004)
    int32_t                                       ThrowPositionZ;                                               // 0x00BC(0x0004)
    int32_t                                       ProjectileBornPositionX;                                      // 0x00C0(0x0004)
    int32_t                                       ProjectileBornPositionY;                                      // 0x00C4(0x0004)
    int32_t                                       ProjectileBornPositionZ;                                      // 0x00C8(0x0004)
    int32_t                                       HitPositionX;                                                 // 0x00CC(0x0004)
    int32_t                                       HitPositionY;                                                 // 0x00D0(0x0004)
    int32_t                                       HitPositionZ;                                                 // 0x00D4(0x0004)
    int32_t                                       HitCharacterPositionX;                                        // 0x00D8(0x0004)
    int32_t                                       HitCharacterPositionY;                                        // 0x00DC(0x0004)
    int32_t                                       HitCharacterPositionZ;                                        // 0x00E0(0x0004)
    int32_t                                       HitCharacterTeammateNumber;                                   // 0x00E4(0x0004)
    FString                                       ThrowCharacterID;                                             // 0x00E8(0x0010)
    bool                                          HegPenetrateObstacle;                                         // 0x00F8(0x0001)
    char                                          pa_00F9[0x0003]                                               // 0x00F9(0x0003)
    int32_t                                       HegPenetrateObstacleNum;                                      // 0x00FC(0x0004)
    float                                         HegPenetrateObstacleDamage;                                   // 0x0100(0x0004)
    int32_t                                       HegNumCauseTinnitus;                                          // 0x0104(0x0004)
    float                                         FragSumBodyDamage;                                            // 0x0108(0x0004)
    float                                         FragSumArmorDamage;                                           // 0x010C(0x0004)
    int32_t                                       FragHitNumber;                                                // 0x0110(0x0004)
    int32_t                                       FragHitHeadNumber;                                            // 0x0114(0x0004)
    int32_t                                       FragHitChestNumber;                                           // 0x0118(0x0004)
    int32_t                                       FragHitStomachNumber;                                         // 0x011C(0x0004)
    int32_t                                       FragHitLeftArmNumber;                                         // 0x0120(0x0004)
    int32_t                                       FragHitRightArmNumber;                                        // 0x0124(0x0004)
    int32_t                                       FragHitLeftLegNumber;                                         // 0x0128(0x0004)
    int32_t                                       FragHitRightLegNumber;                                        // 0x012C(0x0004)
    int32_t                                       FragHitArmorLevel;                                            // 0x0130(0x0004)
    float                                         MolotovTime;                                                  // 0x0134(0x0004)
    int32_t                                       MolotovHitNumber;                                             // 0x0138(0x0004)
    bool                                          ActivityUse;                                                  // 0x013C(0x0001)
    char                                          pa_013D[0x0003]                                               // 0x013D(0x0003)
    int32_t                                       OwnerTeamIndex;                                               // 0x0140(0x0004)
    bool                                          TeamFlash;                                                    // 0x0144(0x0001)
    char                                          pa_0145[0x0003]                                               // 0x0145(0x0003)
    int32_t                                       MapID;                                                        // 0x0148(0x0004)
    int32_t                                       TimeSeconds;                                                  // 0x014C(0x0004)
    int32_t                                       TimeFromLastThrow;                                            // 0x0150(0x0004)
    char                                          pa_0154[0x0004]                                               // 0x0154(0x0004)
    TArray<FString>                               InfectedCharacterTeamTypeArray;                               // 0x0158(0x0010)
    TArray<FString>                               InfectedCharacterArray;                                       // 0x0168(0x0010)
    FString                                       InfectedCharacterTeamType;                                    // 0x0178(0x0010)
    FString                                       InfectedCharacter;                                            // 0x0188(0x0010)
};


// ScriptStruct  UAGame.MeleeStartFireInformationStatistics
// Struct Size::0x00B8
struct FMeleeStartFireInformationStatistics
{
    int64_t                                       Timestamp;                                                    // 0x0000(0x0008)
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    FString                                       WeaponName;                                                   // 0x0010(0x0010)
    FString                                       WeaponType;                                                   // 0x0020(0x0010)
    bool                                          bHit;                                                         // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       HitNumber;                                                    // 0x0034(0x0004)
    int32_t                                       HitPmcNumber;                                                 // 0x0038(0x0004)
    int32_t                                       HitScavNumber;                                                // 0x003C(0x0004)
    float                                         HitDistance;                                                  // 0x0040(0x0004)
    int32_t                                       TeamType;                                                     // 0x0044(0x0004)
    int32_t                                       HitCharacterTeamType;                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    int64_t                                       HitCharacterPlayerID;                                         // 0x0050(0x0008)
    int32_t                                       HitEndurance;                                                 // 0x0058(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x005C(0x0004)
    int64_t                                       ArmorId;                                                      // 0x0060(0x0008)
    int32_t                                       ArmorLevel;                                                   // 0x0068(0x0004)
    float                                         CauseArmorConsume;                                            // 0x006C(0x0004)
    float                                         CauseArmorReduceDamage;                                       // 0x0070(0x0004)
    float                                         ResultDamage;                                                 // 0x0074(0x0004)
    ASGInventory*                                 WeaponInventory;                                              // 0x0078(0x0008)
    int32_t                                       HitCharacterType;                                             // 0x0080(0x0004)
    int32_t                                       ShotTime;                                                     // 0x0084(0x0004)
    int32_t                                       HitTime;                                                      // 0x0088(0x0004)
    int32_t                                       PlayerPositionX;                                              // 0x008C(0x0004)
    int32_t                                       PlayerPositionY;                                              // 0x0090(0x0004)
    int32_t                                       PlayerPositionZ;                                              // 0x0094(0x0004)
    int32_t                                       MeleePositionX;                                               // 0x0098(0x0004)
    int32_t                                       MeleePositionY;                                               // 0x009C(0x0004)
    int32_t                                       MeleePositionZ;                                               // 0x00A0(0x0004)
    int32_t                                       HitPositionX;                                                 // 0x00A4(0x0004)
    int32_t                                       HitPositionY;                                                 // 0x00A8(0x0004)
    int32_t                                       HitPositionZ;                                                 // 0x00AC(0x0004)
    int32_t                                       TimeSeconds;                                                  // 0x00B0(0x0004)
    int32_t                                       TimeFromLastThrow;                                            // 0x00B4(0x0004)
};


// ScriptStruct  UAGame.StartFireInformationStatistics
// Struct Size::0x0208
struct FStartFireInformationStatistics
{
    int64_t                                       Timestamp;                                                    // 0x0000(0x0008)
    int64_t                                       WeaponId;                                                     // 0x0008(0x0008)
    FString                                       WeaponName;                                                   // 0x0010(0x0010)
    int64_t                                       BulletID;                                                     // 0x0020(0x0008)
    FString                                       BulletName;                                                   // 0x0028(0x0010)
    int32_t                                       BulletCount;                                                  // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       WeaponType;                                                   // 0x0040(0x0010)
    bool                                          bADS;                                                         // 0x0050(0x0001)
    bool                                          bHit;                                                         // 0x0051(0x0001)
    bool                                          bHitHead;                                                     // 0x0052(0x0001)
    char                                          pa_0053[0x0001]                                               // 0x0053(0x0001)
    float                                         HitDistance;                                                  // 0x0054(0x0004)
    float                                         VerticalRecoil;                                               // 0x0058(0x0004)
    float                                         HorizontalRecoil;                                             // 0x005C(0x0004)
    FString                                       SightName;                                                    // 0x0060(0x0010)
    float                                         EngageDistance;                                               // 0x0070(0x0004)
    float                                         WaistShotAccuracy;                                            // 0x0074(0x0004)
    float                                         EffectiveDistance;                                            // 0x0078(0x0004)
    int32_t                                       TeamType;                                                     // 0x007C(0x0004)
    int32_t                                       HitCharacterTeamType;                                         // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    int64_t                                       HitCharacterPlayerID;                                         // 0x0088(0x0008)
    int32_t                                       HitEndurance;                                                 // 0x0090(0x0004)
    int32_t                                       HitGroup;                                                     // 0x0094(0x0004)
    float                                         HitEnduranceDamage;                                           // 0x0098(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x009C(0x0004)
    int32_t                                       HitSubGroup;                                                  // 0x00A0(0x0004)
    float                                         HitSubEnduranceDamage;                                        // 0x00A4(0x0004)
    int64_t                                       ArmorId;                                                      // 0x00A8(0x0008)
    int32_t                                       ArmorLevel;                                                   // 0x00B0(0x0004)
    float                                         CauseArmorConsume;                                            // 0x00B4(0x0004)
    float                                         CauseArmorReduceDamage;                                       // 0x00B8(0x0004)
    float                                         ResultDamage;                                                 // 0x00BC(0x0004)
    ASGInventory*                                 WeaponInventory;                                              // 0x00C0(0x0008)
    uint32_t                                      ChangeWeaponOrFire;                                           // 0x00C8(0x0004)
    int32_t                                       HitCharacterType;                                             // 0x00CC(0x0004)
    int64_t                                       HitAIID;                                                      // 0x00D0(0x0008)
    float                                         MoaX;                                                         // 0x00D8(0x0004)
    float                                         MoaY;                                                         // 0x00DC(0x0004)
    int32_t                                       ShootingMode;                                                 // 0x00E0(0x0004)
    int32_t                                       MapID;                                                        // 0x00E4(0x0004)
    int32_t                                       Weatherid;                                                    // 0x00E8(0x0004)
    int32_t                                       AtackFlowID;                                                  // 0x00EC(0x0004)
    FString                                       TargetUserName;                                               // 0x00F0(0x0010)
    int32_t                                       GunType;                                                      // 0x0100(0x0004)
    char                                          pa_0104[0x0004]                                               // 0x0104(0x0004)
    FString                                       GunPartslist;                                                 // 0x0108(0x0010)
    int32_t                                       BulletSpeed;                                                  // 0x0118(0x0004)
    int32_t                                       MagazineMax;                                                  // 0x011C(0x0004)
    int32_t                                       MagazineLeft;                                                 // 0x0120(0x0004)
    int32_t                                       ShotFrequency;                                                // 0x0124(0x0004)
    int32_t                                       BulletDamage;                                                 // 0x0128(0x0004)
    int32_t                                       BulletDamageReduce;                                           // 0x012C(0x0004)
    int32_t                                       BulletDown;                                                   // 0x0130(0x0004)
    int32_t                                       ReloadTime;                                                   // 0x0134(0x0004)
    int32_t                                       PlayerPose;                                                   // 0x0138(0x0004)
    int32_t                                       ShotPose;                                                     // 0x013C(0x0004)
    int32_t                                       FireType;                                                     // 0x0140(0x0004)
    int32_t                                       Sideways;                                                     // 0x0144(0x0004)
    int32_t                                       ShotTime;                                                     // 0x0148(0x0004)
    int32_t                                       HitTime;                                                      // 0x014C(0x0004)
    int32_t                                       PlayerPositionX;                                              // 0x0150(0x0004)
    int32_t                                       PlayerPositionY;                                              // 0x0154(0x0004)
    int32_t                                       PlayerPositionZ;                                              // 0x0158(0x0004)
    int32_t                                       GunPositionX;                                                 // 0x015C(0x0004)
    int32_t                                       GunPositionY;                                                 // 0x0160(0x0004)
    int32_t                                       GunPositionZ;                                                 // 0x0164(0x0004)
    int32_t                                       BulletsBornPositionX;                                         // 0x0168(0x0004)
    int32_t                                       BulletsBornPositionY;                                         // 0x016C(0x0004)
    int32_t                                       BulletsBornPositionZ;                                         // 0x0170(0x0004)
    int32_t                                       LastHitTime;                                                  // 0x0174(0x0004)
    int32_t                                       BulletFlyDistance;                                            // 0x0178(0x0004)
    int32_t                                       BulletFlyTime;                                                // 0x017C(0x0004)
    int32_t                                       HitPositionX;                                                 // 0x0180(0x0004)
    int32_t                                       HitPositionY;                                                 // 0x0184(0x0004)
    int32_t                                       HitPositionZ;                                                 // 0x0188(0x0004)
    int32_t                                       HitPart;                                                      // 0x018C(0x0004)
    int32_t                                       RecoilMoveX;                                                  // 0x0190(0x0004)
    int32_t                                       RecoilMoveY;                                                  // 0x0194(0x0004)
    int32_t                                       WeaponAimFOV;                                                 // 0x0198(0x0004)
    int32_t                                       BulletDamageBuff;                                             // 0x019C(0x0004)
    int32_t                                       HitSubHeadPart;                                               // 0x01A0(0x0004)
    bool                                          bPenetrateArmor;                                              // 0x01A4(0x0001)
    char                                          pa_01A5[0x0003]                                               // 0x01A5(0x0003)
    int64_t                                       HitMovableArmorID;                                            // 0x01A8(0x0008)
    float                                         MovableArmorConsume;                                          // 0x01B0(0x0004)
    float                                         MovableArmorBlockDamage;                                      // 0x01B4(0x0004)
    float                                         FireNetAvgLag;                                                // 0x01B8(0x0004)
    float                                         FireNetLossPercentage;                                        // 0x01BC(0x0004)
    float                                         FireNetAvgLossPercentage;                                     // 0x01C0(0x0004)
    float                                         CauserMaxLocDelta;                                            // 0x01C4(0x0004)
    float                                         HitNetAvgLag;                                                 // 0x01C8(0x0004)
    float                                         HitNetLossPercentage;                                         // 0x01CC(0x0004)
    float                                         HitNetAvgLossPercentage;                                      // 0x01D0(0x0004)
    float                                         TakerMaxLocDelta;                                             // 0x01D4(0x0004)
    uint32_t                                      TargetVestArmorID;                                            // 0x01D8(0x0004)
    uint32_t                                      TargetHelmetArmorID;                                          // 0x01DC(0x0004)
    uint32_t                                      TargetFaceShieldID;                                           // 0x01E0(0x0004)
    uint32_t                                      TargetThighArmorID;                                           // 0x01E4(0x0004)
    int32_t                                       QuietStep;                                                    // 0x01E8(0x0004)
    int32_t                                       ContinuousFireCount;                                          // 0x01EC(0x0004)
    float                                         ShotTargetDistance;                                           // 0x01F0(0x0004)
    int32_t                                       TimeSeconds;                                                  // 0x01F4(0x0004)
    uint64_t                                      ShotTargetGID;                                                // 0x01F8(0x0008)
    int32_t                                       TimeFromLastThrow;                                            // 0x0200(0x0004)
    char                                          pa_0204[0x0004]                                               // 0x0204(0x0004)
};


// ScriptStruct  UAGame.InteractionStatistics
// Struct Size::0x000C
struct FInteractionStatistics
{
    uint32_t                                      ItemId;                                                       // 0x0000(0x0004)
    uint32_t                                      MapID;                                                        // 0x0004(0x0004)
    int32_t                                       InteractionType;                                              // 0x0008(0x0004)
};


// ScriptStruct  UAGame.PlayerTakeDamageByWeaponStatistics
// Struct Size::0x0170
struct FPlayerTakeDamageByWeaponStatistics
{
    FString                                       WeaponName;                                                   // 0x0000(0x0010)
    FString                                       BulletName;                                                   // 0x0010(0x0010)
    FString                                       WeaponType;                                                   // 0x0020(0x0010)
    int32_t                                       VestLevel;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       VestName;                                                     // 0x0038(0x0010)
    int32_t                                       HelmetLevel;                                                  // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       HelmetName;                                                   // 0x0050(0x0010)
    FString                                       DamageHitType;                                                // 0x0060(0x0010)
    float                                         ResultDamage;                                                 // 0x0070(0x0004)
    float                                         ArmorConsume;                                                 // 0x0074(0x0004)
    float                                         PenetrateDamage;                                              // 0x0078(0x0004)
    float                                         CharacterAllEndurance;                                        // 0x007C(0x0004)
    FString                                       HitArmorName;                                                 // 0x0080(0x0010)
    float                                         CurWeaponADSTime;                                             // 0x0090(0x0004)
    float                                         CurWeaponFireInterval;                                        // 0x0094(0x0004)
    float                                         ValidAimTime;                                                 // 0x0098(0x0004)
    int32_t                                       DamageHitTypeInt;                                             // 0x009C(0x0004)
    float                                         ArmorReduceDamage;                                            // 0x00A0(0x0004)
    float                                         ShootDistance;                                                // 0x00A4(0x0004)
    int32_t                                       TeamType;                                                     // 0x00A8(0x0004)
    bool                                          bIsDead;                                                      // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    uint64_t                                      ShooterCharacterID;                                           // 0x00B0(0x0008)
    int32_t                                       ShooterTeamType;                                              // 0x00B8(0x0004)
    int32_t                                       CharacterType;                                                // 0x00BC(0x0004)
    int32_t                                       WeaponValue;                                                  // 0x00C0(0x0004)
    int32_t                                       HitSubEndurance;                                              // 0x00C4(0x0004)
    float                                         VerticalRecoil;                                               // 0x00C8(0x0004)
    float                                         HorizontalRecoil;                                             // 0x00CC(0x0004)
    FString                                       SightName;                                                    // 0x00D0(0x0010)
    int32_t                                       WeaponId;                                                     // 0x00E0(0x0004)
    int32_t                                       MapID;                                                        // 0x00E4(0x0004)
    int32_t                                       Weatherid;                                                    // 0x00E8(0x0004)
    int32_t                                       HurtFlowID;                                                   // 0x00EC(0x0004)
    int32_t                                       EnemyRoleType;                                                // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    FString                                       EnemyRoleID;                                                  // 0x00F8(0x0010)
    FString                                       EnemyUserName;                                                // 0x0108(0x0010)
    int32_t                                       HurtTime;                                                     // 0x0118(0x0004)
    int32_t                                       HurtType;                                                     // 0x011C(0x0004)
    int32_t                                       DamageStart;                                                  // 0x0120(0x0004)
    int32_t                                       DamageReduce;                                                 // 0x0124(0x0004)
    int32_t                                       HPstart;                                                      // 0x0128(0x0004)
    int32_t                                       HPEnd;                                                        // 0x012C(0x0004)
    int32_t                                       HelmetHPStart;                                                // 0x0130(0x0004)
    int32_t                                       HelmetHPEnd;                                                  // 0x0134(0x0004)
    int32_t                                       ArmorHPStart;                                                 // 0x0138(0x0004)
    int32_t                                       ArmorHPEnd;                                                   // 0x013C(0x0004)
    int32_t                                       FallHeight;                                                   // 0x0140(0x0004)
    int32_t                                       PlayerKilled;                                                 // 0x0144(0x0004)
    FString                                       DebuffStartList;                                              // 0x0148(0x0010)
    FString                                       DebuffEndList;                                                // 0x0158(0x0010)
    bool                                          bPenetrateArmor;                                              // 0x0168(0x0001)
    char                                          pa_0169[0x0007]                                               // 0x0169(0x0007)
};


// ScriptStruct  UAGame.UATeamEscapeRow
// Struct Size::0x0008
struct FUATeamEscapeRow
{
    int32_t                                       EscapePointID;                                                // 0x0000(0x0004)
    enum class EEscapeExploreState                State;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UAGame.TeammemberPlayerBaseInfo
// Struct Size::0x0070
struct FTeammemberPlayerBaseInfo
{
    int32_t                                       IndexInTeam;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    uint64_t                                      GID;                                                          // 0x0008(0x0008)
    int32_t                                       SquadIndex;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    AController*                                  Controller;                                                   // 0x0018(0x0008)
    ASGCharacter*                                 Character;                                                    // 0x0020(0x0008)
    enum class ECharacterSex                      CharacterSex;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FTeammemberTitleInfo                          TitleInfo;                                                    // 0x002C(0x000C)
    FTeammemberStatusInfo                         StatusInfo;                                                   // 0x0038(0x0018)
    FTeammemberIdentityInfo                       IdentityInfo;                                                 // 0x0050(0x0018)
    bool                                          bIsAI;                                                        // 0x0068(0x0001)
    bool                                          bRemoved;                                                     // 0x0069(0x0001)
    char                                          pa_006A[0x0006]                                               // 0x006A(0x0006)
};


// ScriptStruct  UAGame.TeammemberIdentityInfo
// Struct Size::0x0018
struct FTeammemberIdentityInfo
{
    FString                                       PlayerName;                                                   // 0x0000(0x0010)
    int32_t                                       PlayerLevel;                                                  // 0x0010(0x0004)
    int32_t                                       HeadBoxID;                                                    // 0x0014(0x0004)
};


// ScriptStruct  UAGame.TeammemberStatusInfo
// Struct Size::0x0018
struct FTeammemberStatusInfo
{
    enum class ESGPlayerCondition                 Condition;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     DeathLocation;                                                // 0x0004(0x0008)
    FVector                                       TransientLocation;                                            // 0x000C(0x000C)
};


// ScriptStruct  UAGame.TeammemberTitleInfo
// Struct Size::0x000C
struct FTeammemberTitleInfo
{
    int32_t                                       TitleID;                                                      // 0x0000(0x0004)
    int32_t                                       TitleStarNum;                                                 // 0x0004(0x0004)
    int32_t                                       TitleRank;                                                    // 0x0008(0x0004)
};


// ScriptStruct  UAGame.TeamPlayerBaseInfo
// Struct Size::0x0028
struct FTeamPlayerBaseInfo
{
    uint64_t                                      GID;                                                          // 0x0000(0x0008)
    int32_t                                       SquadIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASGPlayerState*                               PlayerState;                                                  // 0x0010(0x0008)
    enum class ECharacterSex                      CharacterSex;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       TitleID;                                                      // 0x001C(0x0004)
    int32_t                                       TitleStarNum;                                                 // 0x0020(0x0004)
    int32_t                                       TitleRank;                                                    // 0x0024(0x0004)
};


// ScriptStruct  UAGame.TeamPlayerInfo
// Struct Size::0x0078
struct FTeamPlayerInfo
{
    FVector2D                                     Sign;                                                         // 0x0000(0x0008)
    int32_t                                       Sign;                                                         // 0x0008(0x0004)
    FTraceableActorInfo                           Sign;                                                         // 0x000C(0x0058)
    FVector2D                                     Sign;                                                         // 0x0064(0x0008)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    int64_t                                       UpdateTimeStamp;                                              // 0x0070(0x0008)
};


// ScriptStruct  UAGame.TraceInfoHistoryBlackboard
// Struct Size::0x0020
struct FTraceInfoHistoryBlackboard
{
    TArray<FNewTraceableActorInfo>                ActiveTraceDataList;                                          // 0x0000(0x0010)
    TArray<FNewTraceableActorInfo>                PassivityTraceDataList;                                       // 0x0010(0x0010)
};


// ScriptStruct  UAGame.TutorialCheckpointSettings
// Struct Size::0x0010
struct FTutorialCheckpointSettings
{
    ASGPlayerStart*                               PlayerStart;                                                  // 0x0000(0x0008)
    bool                                          bResetCaptainRotation;                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  UAGame.TutorialCaptainTipRow
// Struct Size::0x0038
struct FTutorialCaptainTipRow : public FTableRowBase
{
    int64_t                                       HUDTableID;                                                   // 0x0008(0x0008)
    FName                                         VoiceRowName;                                                 // 0x0010(0x0008)
    UAnimMontage*                                 BodyMontage;                                                  // 0x0018(0x0008)
    FName                                         MontageSectionName;                                           // 0x0020(0x0008)
    FString                                       FacialMontage;                                                // 0x0028(0x0010)
};


// ScriptStruct  UAGame.CACameraChangeArray
// Struct Size::0x0010
struct FCACameraChangeArray
{
    TArray<FCACameraChangeFocusSpeed>             SpeedItem;                                                    // 0x0000(0x0010)
};


// ScriptStruct  UAGame.CACameraChangeFocusSpeed
// Struct Size::0x0018
struct FCACameraChangeFocusSpeed
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    float                                         Speed;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  UAGame.CACameraAdvancedFocus
// Struct Size::0x0018
struct FCACameraAdvancedFocus
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
};


// ScriptStruct  UAGame.NewTraceableActorInfoList
// Struct Size::0x0010
struct FNewTraceableActorInfoList
{
    TArray<FNewTraceableActorInfo>                TraceableActorInfos;                                          // 0x0000(0x0010)
};


// ScriptStruct  UAGame.InventoryInfo
// Struct Size::0x0048
struct FInventoryInfo
{
    int64_t                                       ItemGID;                                                      // 0x0000(0x0008)
    int64_t                                       ItemId;                                                       // 0x0008(0x0008)
    int32_t                                       StackCount;                                                   // 0x0010(0x0004)
    int32_t                                       Durability;                                                   // 0x0014(0x0004)
    int32_t                                       MaxDurability;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int64_t                                       ParentGID;                                                    // 0x0020(0x0008)
    int32_t                                       Index;                                                        // 0x0028(0x0004)
    int32_t                                       StartRow;                                                     // 0x002C(0x0004)
    int32_t                                       StartColumn;                                                  // 0x0030(0x0004)
    enum class EAttachPosition                    AttachPosition;                                               // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       InsureType;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    int64_t                                       TakeInPlayerGID;                                              // 0x0040(0x0008)
};


// ScriptStruct  UAGame.DarkZonePlayerStartPointInfo
// Struct Size::0x0038
struct FDarkZonePlayerStartPointInfo
{
    TArray<AActor*>                               PlayerStartPointList;                                         // 0x0000(0x0010)
    TArray<int32_t>                               TeamIndexList;                                                // 0x0010(0x0010)
    int32_t                                       GroupIndex;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<AActor*>                               TeamPlayerStartPointList;                                     // 0x0028(0x0010)
};


// ScriptStruct  UAGame.DarkZoneEscapePointInfo
// Struct Size::0x0010
struct FDarkZoneEscapePointInfo
{
    AActor*                                       EscapePoint;                                                  // 0x0000(0x0008)
    float                                         Ratio;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  UAGame.RestrictedAreaInfo
// Struct Size::0x0024
struct FRestrictedAreaInfo
{
    float                                         CenterPointOffsetMax;                                         // 0x0000(0x0004)
    FVector                                       CenterPoint;                                                  // 0x0004(0x000C)
    float                                         Radius;                                                       // 0x0010(0x0004)
    float                                         WaitTime;                                                     // 0x0014(0x0004)
    float                                         ShrinkTime;                                                   // 0x0018(0x0004)
    int32_t                                       Damage;                                                       // 0x001C(0x0004)
    float                                         DamageInterval;                                               // 0x0020(0x0004)
};


// ScriptStruct  UAGame.UAPickupLevelConfigsTableRow
// Struct Size::0x0038
struct FUAPickupLevelConfigsTableRow : public FTableRowBase
{
    int32_t                                       Level;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Describtion;                                                  // 0x0010(0x0010)
    float                                         Percent;                                                      // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FUAPickupPercentage>                   PickupPercentages;                                            // 0x0028(0x0010)
};


// ScriptStruct  UAGame.UAPickupPercentage
// Struct Size::0x0030
struct FUAPickupPercentage
{
    TSoftClassPtr<UObject>                        PickupClass;                                                  // 0x0000(0x0028)
    float                                         Percent;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  UAGame.UAPickupLevelPercentage
// Struct Size::0x0008
struct FUAPickupLevelPercentage
{
    int32_t                                       Level;                                                        // 0x0000(0x0004)
    float                                         Percent;                                                      // 0x0004(0x0004)
};


// ScriptStruct  UAGame.InvisibleTag
// Struct Size::0x0010
struct FInvisibleTag
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  UAGame.VolumeSpawnedInventoryInfo
// Struct Size::0x0070
struct FVolumeSpawnedInventoryInfo
{
    TWeakObjectPtr<ASGInventory>                  SpawnedInventory;                                             // 0x0000(0x0008)
    FMissionObjectiveSpawnInventoryInfo           SpawnInventoryInfo;                                           // 0x0008(0x0068)
};


// ScriptStruct  SlateCore.CompositeFont
// Struct Size::0x0038
struct FCompositeFont
{
    FTypeface                                     DefaultTypeface;                                              // 0x0000(0x0010)
    FCompositeFallbackFont                        FallbackTypeface;                                             // 0x0010(0x0018)
    TArray<FCompositeSubFont>                     SubTypefaces;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CompositeFallbackFont
// Struct Size::0x0018
struct FCompositeFallbackFont
{
    FTypeface                                     Typeface;                                                     // 0x0000(0x0010)
    float                                         ScalingFactor;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SlateCore.Typeface
// Struct Size::0x0010
struct FTypeface
{
    TArray<FTypefaceEntry>                        Fonts;                                                        // 0x0000(0x0010)
};


// ScriptStruct  SlateCore.TypefaceEntry
// Struct Size::0x0028
struct FTypefaceEntry
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FFontData                                     Font;                                                         // 0x0008(0x0020)
};


// ScriptStruct  SlateCore.FontData
// Struct Size::0x0020
struct FFontData
{
    FString                                       FontFilename;                                                 // 0x0000(0x0010)
    enum class EFontHinting                       Hinting;                                                      // 0x0010(0x0001)
    enum class EFontLoadingPolicy                 LoadingPolicy;                                                // 0x0011(0x0001)
    bool                                          IsKeepInMemory;                                               // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    int32_t                                       SubFaceIndex;                                                 // 0x0014(0x0004)
    UObject*                                      FontFaceAsset;                                                // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.CompositeSubFont
// Struct Size::0x0038
struct FCompositeSubFont : public FCompositeFallbackFont
{
    TArray<FInt32Range>                           CharacterRanges;                                              // 0x0018(0x0010)
    FString                                       Cultures;                                                     // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CaptureLostEvent
// Struct Size::0x0008
struct FCaptureLostEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.WindowStyle
// Struct Size::0x1138
struct FWindowStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  MinimizeButtonStyle;                                          // 0x0008(0x0298)
    FButtonStyle                                  MaximizeButtonStyle;                                          // 0x02A0(0x0298)
    FButtonStyle                                  RestoreButtonStyle;                                           // 0x0538(0x0298)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x07D0(0x0298)
    FTextBlockStyle                               TitleTextStyle;                                               // 0x0A68(0x0290)
    FSlateBrush                                   ActiveTitleBrush;                                             // 0x0CF8(0x0090)
    FSlateBrush                                   InactiveTitleBrush;                                           // 0x0D88(0x0090)
    FSlateBrush                                   FlashTitleBrush;                                              // 0x0E18(0x0090)
    FSlateColor                                   BackgroundColor;                                              // 0x0EA8(0x0028)
    FSlateBrush                                   OutlineBrush;                                                 // 0x0ED0(0x0090)
    FSlateColor                                   OutlineColor;                                                 // 0x0F60(0x0028)
    FSlateBrush                                   BorderBrush;                                                  // 0x0F88(0x0090)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1018(0x0090)
    FSlateBrush                                   ChildBackgroundBrush;                                         // 0x10A8(0x0090)
};


// ScriptStruct  SlateCore.ScrollBorderStyle
// Struct Size::0x0128
struct FScrollBorderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   TopShadowBrush;                                               // 0x0008(0x0090)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0098(0x0090)
};


// ScriptStruct  SlateCore.ScrollBoxStyle
// Struct Size::0x0248
struct FScrollBoxStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   TopShadowBrush;                                               // 0x0008(0x0090)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0098(0x0090)
    FSlateBrush                                   LeftShadowBrush;                                              // 0x0128(0x0090)
    FSlateBrush                                   RightShadowBrush;                                             // 0x01B8(0x0090)
};


// ScriptStruct  SlateCore.DockTabStyle
// Struct Size::0x0760
struct FDockTabStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0008(0x0298)
    FSlateBrush                                   NormalBrush;                                                  // 0x02A0(0x0090)
    FSlateBrush                                   ActiveBrush;                                                  // 0x0330(0x0090)
    FSlateBrush                                   ColorOverlayTabBrush;                                         // 0x03C0(0x0090)
    FSlateBrush                                   ColorOverlayIconBrush;                                        // 0x0450(0x0090)
    FSlateBrush                                   ForegroundBrush;                                              // 0x04E0(0x0090)
    FSlateBrush                                   HoveredBrush;                                                 // 0x0570(0x0090)
    FSlateBrush                                   ContentAreaBrush;                                             // 0x0600(0x0090)
    FSlateBrush                                   TabWellBrush;                                                 // 0x0690(0x0090)
    FMargin                                       TabPadding;                                                   // 0x0720(0x0010)
    float                                         OverlapWidth;                                                 // 0x0730(0x0004)
    char                                          pa_0734[0x0004]                                               // 0x0734(0x0004)
    FSlateColor                                   FlashColor;                                                   // 0x0738(0x0028)
};


// ScriptStruct  SlateCore.HeaderRowStyle
// Struct Size::0x0C18
struct FHeaderRowStyle : public FSlateWidgetStyle
{
    FTableColumnHeaderStyle                       ColumnStyle;                                                  // 0x0008(0x0518)
    FTableColumnHeaderStyle                       LastColumnStyle;                                              // 0x0520(0x0518)
    FSplitterStyle                                ColumnSplitterStyle;                                          // 0x0A38(0x0128)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0B60(0x0090)
    FSlateColor                                   ForegroundColor;                                              // 0x0BF0(0x0028)
};


// ScriptStruct  SlateCore.SplitterStyle
// Struct Size::0x0128
struct FSplitterStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   HandleNormalBrush;                                            // 0x0008(0x0090)
    FSlateBrush                                   HandleHighlightBrush;                                         // 0x0098(0x0090)
};


// ScriptStruct  SlateCore.TableColumnHeaderStyle
// Struct Size::0x0518
struct FTableColumnHeaderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   SortPrimaryAscendingImage;                                    // 0x0008(0x0090)
    FSlateBrush                                   SortPrimaryDescendingImage;                                   // 0x0098(0x0090)
    FSlateBrush                                   SortSecondaryAscendingImage;                                  // 0x0128(0x0090)
    FSlateBrush                                   SortSecondaryDescendingImage;                                 // 0x01B8(0x0090)
    FSlateBrush                                   NormalBrush;                                                  // 0x0248(0x0090)
    FSlateBrush                                   HoveredBrush;                                                 // 0x02D8(0x0090)
    FSlateBrush                                   MenuDropdownImage;                                            // 0x0368(0x0090)
    FSlateBrush                                   MenuDropdownNormalBorderBrush;                                // 0x03F8(0x0090)
    FSlateBrush                                   MenuDropdownHoveredBorderBrush;                               // 0x0488(0x0090)
};


// ScriptStruct  SlateCore.InlineTextImageStyle
// Struct Size::0x00A0
struct FInlineTextImageStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   Image;                                                        // 0x0008(0x0090)
    int16_t                                       Baseline;                                                     // 0x0098(0x0002)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  SlateCore.VolumeControlStyle
// Struct Size::0x0648
struct FVolumeControlStyle : public FSlateWidgetStyle
{
    FSliderStyle                                  SliderStyle;                                                  // 0x0008(0x0370)
    FSlateBrush                                   HighVolumeImage;                                              // 0x0378(0x0090)
    FSlateBrush                                   MidVolumeImage;                                               // 0x0408(0x0090)
    FSlateBrush                                   LowVolumeImage;                                               // 0x0498(0x0090)
    FSlateBrush                                   NoVolumeImage;                                                // 0x0528(0x0090)
    FSlateBrush                                   MutedImage;                                                   // 0x05B8(0x0090)
};


// ScriptStruct  SlateCore.SliderStyle
// Struct Size::0x0370
struct FSliderStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   NormalBarImage;                                               // 0x0008(0x0090)
    FSlateBrush                                   HoveredBarImage;                                              // 0x0098(0x0090)
    FSlateBrush                                   DisabledBarImage;                                             // 0x0128(0x0090)
    FSlateBrush                                   NormalThumbImage;                                             // 0x01B8(0x0090)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x0248(0x0090)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x02D8(0x0090)
    float                                         BarThickness;                                                 // 0x0368(0x0004)
    char                                          pa_036C[0x0004]                                               // 0x036C(0x0004)
};


// ScriptStruct  SlateCore.SearchBoxStyle
// Struct Size::0x0B28
struct FSearchBoxStyle : public FSlateWidgetStyle
{
    FEditableTextBoxStyle                         TextBoxStyle;                                                 // 0x0008(0x0868)
    FSlateFontInfo                                ActiveFontInfo;                                               // 0x0870(0x0060)
    FSlateBrush                                   UpArrowImage;                                                 // 0x08D0(0x0090)
    FSlateBrush                                   DownArrowImage;                                               // 0x0960(0x0090)
    FSlateBrush                                   GlassImage;                                                   // 0x09F0(0x0090)
    FSlateBrush                                   ClearImage;                                                   // 0x0A80(0x0090)
    FMargin                                       ImagePadding;                                                 // 0x0B10(0x0010)
    bool                                          bLeftAlignButtons;                                            // 0x0B20(0x0001)
    char                                          pa_0B21[0x0007]                                               // 0x0B21(0x0007)
};


// ScriptStruct  SlateCore.ExpandableAreaStyle
// Struct Size::0x0130
struct FExpandableAreaStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   CollapsedImage;                                               // 0x0008(0x0090)
    FSlateBrush                                   ExpandedImage;                                                // 0x0098(0x0090)
    float                                         RolloutAnimationSeconds;                                      // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
};


// ScriptStruct  SlateCore.ProgressBarStyle
// Struct Size::0x01B8
struct FProgressBarStyle : public FSlateWidgetStyle
{
    FSlateBrush                                   BackgroundImage;                                              // 0x0008(0x0090)
    FSlateBrush                                   FillImage;                                                    // 0x0098(0x0090)
    FSlateBrush                                   MarqueeImage;                                                 // 0x0128(0x0090)
};


// ScriptStruct  SlateCore.InlineEditableTextBlockStyle
// Struct Size::0x0B00
struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
{
    FEditableTextBoxStyle                         EditableTextBoxStyle;                                         // 0x0008(0x0868)
    FTextBlockStyle                               TextStyle;                                                    // 0x0870(0x0290)
};


// ScriptStruct  SlateCore.HyperlinkStyle
// Struct Size::0x0540
struct FHyperlinkStyle : public FSlateWidgetStyle
{
    FButtonStyle                                  UnderlineStyle;                                               // 0x0008(0x0298)
    FTextBlockStyle                               TextStyle;                                                    // 0x02A0(0x0290)
    FMargin                                       Padding;                                                      // 0x0530(0x0010)
};


// ScriptStruct  SlateCore.CheckBoxStyle
// Struct Size::0x05C8
struct FCheckBoxStyle : public FSlateWidgetStyle
{
    enum class ESlateCheckBoxType                 CheckBoxType;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FSlateBrush                                   UncheckedImage;                                               // 0x0010(0x0090)
    FSlateBrush                                   UncheckedHoveredImage;                                        // 0x00A0(0x0090)
    FSlateBrush                                   UncheckedPressedImage;                                        // 0x0130(0x0090)
    FSlateBrush                                   CheckedImage;                                                 // 0x01C0(0x0090)
    FSlateBrush                                   CheckedHoveredImage;                                          // 0x0250(0x0090)
    FSlateBrush                                   CheckedPressedImage;                                          // 0x02E0(0x0090)
    FSlateBrush                                   UndeterminedImage;                                            // 0x0370(0x0090)
    FSlateBrush                                   UndeterminedHoveredImage;                                     // 0x0400(0x0090)
    FSlateBrush                                   UndeterminedPressedImage;                                     // 0x0490(0x0090)
    FMargin                                       Padding;                                                      // 0x0520(0x0010)
    FSlateColor                                   ForegroundColor;                                              // 0x0530(0x0028)
    FSlateColor                                   BorderBackgroundColor;                                        // 0x0558(0x0028)
    FSlateSound                                   CheckedSlateSound;                                            // 0x0580(0x0018)
    FSlateSound                                   UncheckedSlateSound;                                          // 0x0598(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x05B0(0x0018)
};


// ScriptStruct  Slate.CustomizedToolMenu
// Struct Size::0x01E8
struct FCustomizedToolMenu
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TMap<FName,FCustomizedToolMenuEntry>          Entries;                                                      // 0x0008(0x0050)
    TMap<FName,FCustomizedToolMenuSection>        Sections;                                                     // 0x0058(0x0050)
    TMap<FName,FCustomizedToolMenuNameArray>      EntryOrder;                                                   // 0x00A8(0x0050)
    TArray<FName>                                 SectionOrder;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x00E0]                                               // 0x0108(0x00E0)
};


// ScriptStruct  Slate.CustomizedToolMenuNameArray
// Struct Size::0x0010
struct FCustomizedToolMenuNameArray
{
    TArray<FName>                                 Names;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Slate.CustomizedToolMenuSection
// Struct Size::0x0004
struct FCustomizedToolMenuSection
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Slate.CustomizedToolMenuEntry
// Struct Size::0x0004
struct FCustomizedToolMenuEntry
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  ImageWriteQueue.ImageWriteOptions
// Struct Size::0x0060
struct FImageWriteOptions
{
    enum class EDesiredImageFormat                Format;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDelegate                                     OnComplete;                                                   // 0x0004(0x0010)
    int32_t                                       CompressionQuality;                                           // 0x0014(0x0004)
    bool                                          bOverwriteFile;                                               // 0x0018(0x0001)
    bool                                          bAsync;                                                       // 0x0019(0x0001)
    char                                          pa_001A[0x0046]                                               // 0x001A(0x0046)
};


// ScriptStruct  MaterialShaderQualitySettings.MaterialQualityOverrides
// Struct Size::0x000E
struct FMaterialQualityOverrides
{
    bool                                          bDiscardQualityDuringCook;                                    // 0x0000(0x0001)
    bool                                          bEnableOverride;                                              // 0x0001(0x0001)
    bool                                          bForceFullyRough;                                             // 0x0002(0x0001)
    bool                                          bForceNonMetal;                                               // 0x0003(0x0001)
    bool                                          bForceDisableLMDirectionality;                                // 0x0004(0x0001)
    bool                                          bForceLQReflections;                                          // 0x0005(0x0001)
    bool                                          bForceDisablePreintegratedGF;                                 // 0x0006(0x0001)
    bool                                          bDisableMaterialNormalCalculation;                            // 0x0007(0x0001)
    enum class EMobileShadowQuality               MobileShadowQuality;                                          // 0x0008(0x0001)
    bool                                          bDisableAdditiveReflection;                                   // 0x0009(0x0001)
    bool                                          bDisableMaterialPlanarReflection;                             // 0x000A(0x0001)
    bool                                          bCalcILCPerVertex;                                            // 0x000B(0x0001)
    bool                                          b1dSHForTransferTexture;                                      // 0x000C(0x0001)
    bool                                          bDisableGeometricSpecularAA;                                  // 0x000D(0x0001)
};


// ScriptStruct  Renderer.LightPropagationVolumeSettings
// Struct Size::0x0040
struct FLightPropagationVolumeSettings
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LPVIntensity;                                                 // 0x0004(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0008(0x0004)
    float                                         LPVSize;                                                      // 0x000C(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x0010(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0014(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0018(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x001C(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0020(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0024(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0028(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x002C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0030(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0034(0x0004)
    float                                         LPVFadeRange;                                                 // 0x0038(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x003C(0x0004)
};


// ScriptStruct  EngineSettings.AutoCompleteCommand
// Struct Size::0x0028
struct FAutoCompleteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       desc;                                                         // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  EngineSettings.GameModeName
// Struct Size::0x0028
struct FGameModeName
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FSoftClassPath                                GameMode;                                                     // 0x0010(0x0018)
};


// ScriptStruct  Chaos.ChaosSolverConfiguration
// Struct Size::0x0068
struct FChaosSolverConfiguration
{
    int32_t                                       Iterations;                                                   // 0x0000(0x0004)
    int32_t                                       CollisionPairIterations;                                      // 0x0004(0x0004)
    int32_t                                       PushOutIterations;                                            // 0x0008(0x0004)
    int32_t                                       CollisionPushOutPairIterations;                               // 0x000C(0x0004)
    float                                         CollisionMarginFraction;                                      // 0x0010(0x0004)
    float                                         CollisionMarginMax;                                           // 0x0014(0x0004)
    float                                         CollisionCullDistance;                                        // 0x0018(0x0004)
    int32_t                                       JointPairIterations;                                          // 0x001C(0x0004)
    int32_t                                       JointPushOutPairIterations;                                   // 0x0020(0x0004)
    float                                         ClusterConnectionFactor;                                      // 0x0024(0x0004)
    enum class EClusterUnionMethod                ClusterUnionConnectionType;                                   // 0x0028(0x0001)
    bool                                          bGenerateCollisionData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FSolverCollisionFilterSettings                CollisionFilterSettings;                                      // 0x002C(0x0010)
    bool                                          bGenerateBreakData;                                           // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FSolverBreakingFilterSettings                 BreakingFilterSettings;                                       // 0x0040(0x0010)
    bool                                          bGenerateTrailingData;                                        // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FSolverTrailingFilterSettings                 TrailingFilterSettings;                                       // 0x0054(0x0010)
    bool                                          bGenerateContactGraph;                                        // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
};


// ScriptStruct  Chaos.SolverTrailingFilterSettings
// Struct Size::0x0010
struct FSolverTrailingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingFilterSettings
// Struct Size::0x0010
struct FSolverBreakingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionFilterSettings
// Struct Size::0x0010
struct FSolverCollisionFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Chaos.RecordedTransformTrack
// Struct Size::0x0010
struct FRecordedTransformTrack
{
    TArray<FRecordedFrame>                        Records;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Chaos.RecordedFrame
// Struct Size::0x00B8
struct FRecordedFrame
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<int32_t>                               TransformIndices;                                             // 0x0010(0x0010)
    TArray<int32_t>                               PreviousTransformIndices;                                     // 0x0020(0x0010)
    TArray<bool>                                  DisabledFlags;                                                // 0x0030(0x0010)
    TArray<FSolverCollisionData>                  Collisions;                                                   // 0x0040(0x0010)
    TArray<FSolverBreakingData>                   Breakings;                                                    // 0x0050(0x0010)
    TSet<FSolverTrailingData>                     Trailings;                                                    // 0x0060(0x0050)
    float                                         Timestamp;                                                    // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Chaos.SolverTrailingData
// Struct Size::0x0030
struct FSolverTrailingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  Chaos.SolverBreakingData
// Struct Size::0x0030
struct FSolverBreakingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  Chaos.SolverCollisionData
// Struct Size::0x006C
struct FSolverCollisionData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x000C(0x000C)
    FVector                                       Normal;                                                       // 0x0018(0x000C)
    FVector                                       Velocity1;                                                    // 0x0024(0x000C)
    FVector                                       Velocity2;                                                    // 0x0030(0x000C)
    FVector                                       AngularVelocity1;                                             // 0x003C(0x000C)
    FVector                                       AngularVelocity2;                                             // 0x0048(0x000C)
    float                                         Mass1;                                                        // 0x0054(0x0004)
    float                                         Mass2;                                                        // 0x0058(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x005C(0x0004)
    int32_t                                       LevelsetIndex;                                                // 0x0060(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x0064(0x0004)
    int32_t                                       LevelsetIndexMesh;                                            // 0x0068(0x0004)
};


// ScriptStruct  MRMesh.MRMeshConfiguration
// Struct Size::0x0001
struct FMRMeshConfiguration
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.TrackedGeometryGroup
// Struct Size::0x0018
struct FTrackedGeometryGroup
{
    AARActor*                                     ARActor;                                                      // 0x0000(0x0008)
    UARComponent*                                 ARComponent;                                                  // 0x0008(0x0008)
    UARTrackedGeometry*                           TrackedGeometry;                                              // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARGeoAnchorUpdatePayload
// Struct Size::0x0070
struct FARGeoAnchorUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    float                                         Longitude;                                                    // 0x0050(0x0004)
    float                                         Latitude;                                                     // 0x0054(0x0004)
    float                                         AltitudeMeters;                                               // 0x0058(0x0004)
    enum class EARAltitudeSource                  AltitudeSource;                                               // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    FString                                       AnchorName;                                                   // 0x0060(0x0010)
};


// ScriptStruct  AugmentedReality.ARSessionPayload
// Struct Size::0x0018
struct FARSessionPayload
{
    int32_t                                       ConfigFlags;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           DefaultMeshMaterial;                                          // 0x0008(0x0008)
    UMaterialInterface*                           DefaultWireframeMeshMaterial;                                 // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARMeshUpdatePayload
// Struct Size::0x0060
struct FARMeshUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  AugmentedReality.ARObjectUpdatePayload
// Struct Size::0x0030
struct FARObjectUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
};


// ScriptStruct  AugmentedReality.AREnvironmentProbeUpdatePayload
// Struct Size::0x0030
struct FAREnvironmentProbeUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
};


// ScriptStruct  AugmentedReality.ARPoseUpdatePayload
// Struct Size::0x0040
struct FARPoseUpdatePayload
{
    FTransform                                    WorldTransform;                                               // 0x0000(0x0030)
    TArray<FTransform>                            JointTransforms;                                              // 0x0030(0x0010)
};


// ScriptStruct  AugmentedReality.ARQRCodeUpdatePayload
// Struct Size::0x0070
struct FARQRCodeUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    FVector                                       Extents;                                                      // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       QRCode;                                                       // 0x0060(0x0010)
};


// ScriptStruct  AugmentedReality.ARImageUpdatePayload
// Struct Size::0x0060
struct FARImageUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    UARCandidateImage*                            DetectedImage;                                                // 0x0050(0x0008)
    FVector2D                                     EstimatedSize;                                                // 0x0058(0x0008)
};


// ScriptStruct  AugmentedReality.ARFaceUpdatePayload
// Struct Size::0x0040
struct FARFaceUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    FVector                                       LeftEyePosition;                                              // 0x0018(0x000C)
    FVector                                       RightEyePosition;                                             // 0x0024(0x000C)
    FVector                                       LookAtTarget;                                                 // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  AugmentedReality.ARPointUpdatePayload
// Struct Size::0x0001
struct FARPointUpdatePayload
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.ARPlaneUpdatePayload
// Struct Size::0x0080
struct FARPlaneUpdatePayload
{
    FARSessionPayload                             SessionPayload;                                               // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldTransform;                                               // 0x0020(0x0030)
    FVector                                       Center;                                                       // 0x0050(0x000C)
    FVector                                       Extents;                                                      // 0x005C(0x000C)
    TArray<FVector>                               BoundaryVertices;                                             // 0x0068(0x0010)
    enum class EARObjectClassification            ObjectClassification;                                         // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  AugmentedReality.ARSharedWorldReplicationState
// Struct Size::0x0008
struct FARSharedWorldReplicationState
{
    int32_t                                       PreviewImageOffset;                                           // 0x0000(0x0004)
    int32_t                                       ARWorldOffset;                                                // 0x0004(0x0004)
};


// ScriptStruct  AugmentedReality.ARTraceResult
// Struct Size::0x0060
struct FARTraceResult
{
    float                                         DistanceFromCamera;                                           // 0x0000(0x0004)
    enum class EARLineTraceChannels               TraceChannel;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FTransform                                    LocalTransform;                                               // 0x0010(0x0030)
    UARTrackedGeometry*                           TrackedGeometry;                                              // 0x0040(0x0008)
    char                                          pa_0048[0x0018]                                               // 0x0048(0x0018)
};


// ScriptStruct  AugmentedReality.ARCameraIntrinsics
// Struct Size::0x0018
struct FARCameraIntrinsics
{
    FIntPoint                                     ImageResolution;                                              // 0x0000(0x0008)
    FVector2D                                     FocalLength;                                                  // 0x0008(0x0008)
    FVector2D                                     PrincipalPoint;                                               // 0x0010(0x0008)
};


// ScriptStruct  AugmentedReality.ARPose3D
// Struct Size::0x0050
struct FARPose3D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FTransform>                            JointTransforms;                                              // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
    enum class EARJointTransformSpace             JointTransformSpace;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  AugmentedReality.ARSkeletonDefinition
// Struct Size::0x0028
struct FARSkeletonDefinition
{
    int32_t                                       NumJoints;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FName>                                 JointNames;                                                   // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  AugmentedReality.ARPose2D
// Struct Size::0x0048
struct FARPose2D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FVector2D>                             JointLocations;                                               // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
};


// ScriptStruct  AugmentedReality.ARVideoFormat
// Struct Size::0x000C
struct FARVideoFormat
{
    int32_t                                       FPS;                                                          // 0x0000(0x0004)
    int32_t                                       Width;                                                        // 0x0004(0x0004)
    int32_t                                       Height;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AugmentedReality.ARSessionStatus
// Struct Size::0x0018
struct FARSessionStatus
{
    FString                                       AdditionalInfo;                                               // 0x0000(0x0010)
    enum class EARSessionStatus                   status;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  HeadMountedDisplay.XRMotionControllerData
// Struct Size::0x00A0
struct FXRMotionControllerData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x0008)
    FGuid                                         ApplicationInstanceID;                                        // 0x000C(0x0010)
    enum class EXRVisualType                      DeviceVisualType;                                             // 0x001C(0x0001)
    enum class EControllerHand                    HandIndex;                                                    // 0x001D(0x0001)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    FVector                                       GripPosition;                                                 // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         GripRotation;                                                 // 0x0030(0x0010)
    FVector                                       AimPosition;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FQuat                                         AimRotation;                                                  // 0x0050(0x0010)
    TArray<FVector>                               HandKeyPositions;                                             // 0x0060(0x0010)
    TArray<FQuat>                                 HandKeyRotations;                                             // 0x0070(0x0010)
    TArray<float>                                 HandKeyRadii;                                                 // 0x0080(0x0010)
    bool                                          bIsGrasped;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x000F]                                               // 0x0091(0x000F)
};


// ScriptStruct  HeadMountedDisplay.XRHMDData
// Struct Size::0x0040
struct FXRHMDData
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         DeviceName;                                                   // 0x0004(0x0008)
    FGuid                                         ApplicationInstanceID;                                        // 0x000C(0x0010)
    enum class ETrackingStatus                    TrackingStatus;                                               // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FVector                                       position;                                                     // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0030(0x0010)
};


// ScriptStruct  HeadMountedDisplay.XRDeviceId
// Struct Size::0x000C
struct FXRDeviceId
{
    FName                                         SystemName;                                                   // 0x0000(0x0008)
    int32_t                                       DeviceID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  HeadMountedDisplay.XRGestureConfig
// Struct Size::0x0006
struct FXRGestureConfig
{
    bool                                          bTap;                                                         // 0x0000(0x0001)
    bool                                          bHold;                                                        // 0x0001(0x0001)
    enum class ESpatialInputGestureAxis           AxisGesture;                                                  // 0x0002(0x0001)
    bool                                          bNavigationAxisX;                                             // 0x0003(0x0001)
    bool                                          bNavigationAxisY;                                             // 0x0004(0x0001)
    bool                                          bNavigationAxisZ;                                             // 0x0005(0x0001)
};


// ScriptStruct  BuildPatchServices.FileManifestData
// Struct Size::0x0068
struct FFileManifestData
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FSHAHashData                                  FileHash;                                                     // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FChunkPartData>                        FileChunkParts;                                               // 0x0028(0x0010)
    TArray<FString>                               InstallTags;                                                  // 0x0038(0x0010)
    bool                                          bIsUnixExecutable;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FString                                       SymlinkTarget;                                                // 0x0050(0x0010)
    bool                                          bIsReadOnly;                                                  // 0x0060(0x0001)
    bool                                          bIsCompressed;                                                // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  BuildPatchServices.ChunkPartData
// Struct Size::0x0018
struct FChunkPartData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint32_t                                      Offset;                                                       // 0x0010(0x0004)
    uint32_t                                      Size;                                                         // 0x0014(0x0004)
};


// ScriptStruct  BuildPatchServices.SHAHashData
// Struct Size::0x0014
struct FSHAHashData
{
    char                                          Hash;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  BuildPatchServices.ChunkInfoData
// Struct Size::0x0040
struct FChunkInfoData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint64_t                                      Hash;                                                         // 0x0010(0x0008)
    FSHAHashData                                  ShaHash;                                                      // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       FileSize;                                                     // 0x0030(0x0008)
    char                                          GroupNumber;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  BuildPatchServices.CustomFieldData
// Struct Size::0x0020
struct FCustomFieldData
{
    FString                                       Key;                                                          // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Foliage.FoliageVertexColorChannelMask
// Struct Size::0x000C
struct FFoliageVertexColorChannelMask
{
    char                                          UseMask;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaskThreshold;                                                // 0x0004(0x0004)
    char                                          InvertMask;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Foliage.FoliageTypeObject
// Struct Size::0x0020
struct FFoliageTypeObject
{
    UObject*                                      FoliageTypeObject;                                            // 0x0000(0x0008)
    UFoliageType*                                 TypeInstance;                                                 // 0x0008(0x0008)
    bool                                          bIsAsset;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UFoliageType*                                 Type;                                                         // 0x0018(0x0008)
};


// ScriptStruct  Foliage.ProceduralFoliageInstance
// Struct Size::0x0050
struct FProceduralFoliageInstance
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    float                                         Age;                                                          // 0x001C(0x0004)
    FVector                                       Normal;                                                       // 0x0020(0x000C)
    float                                         Scale;                                                        // 0x002C(0x0004)
    UFoliageType*                                 Type;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0018]                                               // 0x0038(0x0018)
};


// ScriptStruct  Landscape.OffsetData
// Struct Size::0x0010
struct FOffsetData
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Landscape.LandscapeLayer
// Struct Size::0x0088
struct FLandscapeLayer
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    bool                                          bVisible;                                                     // 0x0018(0x0001)
    bool                                          bLocked;                                                      // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         HeightmapAlpha;                                               // 0x001C(0x0004)
    float                                         WeightmapAlpha;                                               // 0x0020(0x0004)
    enum class ELandscapeBlendMode                BlendMode;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    TArray<FLandscapeLayerBrush>                  Brushes;                                                      // 0x0028(0x0010)
    TMap<ULandscapeLayerInfoObject*,bool>         WeightmapLayerAllocationBlend;                                // 0x0038(0x0050)
};


// ScriptStruct  Landscape.LandscapeLayerBrush
// Struct Size::0x0001
struct FLandscapeLayerBrush
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerComponentData
// Struct Size::0x0038
struct FLandscapeLayerComponentData
{
    FHeightmapData                                HeightmapData;                                                // 0x0000(0x0008)
    FWeightmapData                                WeightmapData;                                                // 0x0008(0x0030)
};


// ScriptStruct  Landscape.WeightmapData
// Struct Size::0x0030
struct FWeightmapData
{
    TArray<UTexture2D*>                           Textures;                                                     // 0x0000(0x0010)
    TArray<FWeightmapLayerAllocationInfo>         LayerAllocations;                                             // 0x0010(0x0010)
    TArray<ULandscapeWeightmapUsage*>             TextureUsages;                                                // 0x0020(0x0010)
};


// ScriptStruct  Landscape.WeightmapLayerAllocationInfo
// Struct Size::0x0010
struct FWeightmapLayerAllocationInfo
{
    ULandscapeLayerInfoObject*                    LayerInfo;                                                    // 0x0000(0x0008)
    char                                          WeightmapTextureIndex;                                        // 0x0008(0x0001)
    char                                          WeightmapTextureChannel;                                      // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Landscape.HeightmapData
// Struct Size::0x0008
struct FHeightmapData
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeComponentMaterialOverride
// Struct Size::0x0010
struct FLandscapeComponentMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.PerPlatformInt
// Struct Size::0x0008
struct FPerPlatformInt
{
    int32_t                                       Default;                                                      // 0x0000(0x0004)
    int32_t                                       ScalableBias;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Landscape.LandscapeEditToolRenderData
// Struct Size::0x0038
struct FLandscapeEditToolRenderData
{
    UMaterialInterface*                           ToolMaterial;                                                 // 0x0000(0x0008)
    UMaterialInterface*                           GizmoMaterial;                                                // 0x0008(0x0008)
    int32_t                                       SelectedType;                                                 // 0x0010(0x0004)
    int32_t                                       DebugChannelR;                                                // 0x0014(0x0004)
    int32_t                                       DebugChannelG;                                                // 0x0018(0x0004)
    int32_t                                       DebugChannelB;                                                // 0x001C(0x0004)
    UTexture2D*                                   DataTexture;                                                  // 0x0020(0x0008)
    UTexture2D*                                   LayerContributionTexture;                                     // 0x0028(0x0008)
    UTexture2D*                                   DirtyTexture;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Landscape.GizmoSelectData
// Struct Size::0x0050
struct FGizmoSelectData
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Landscape.GrassVariety
// Struct Size::0x0098
struct FGrassVariety
{
    UStaticMesh*                                  GrassMesh;                                                    // 0x0000(0x0008)
    TArray<UMaterialInterface*>                   OverrideMaterials;                                            // 0x0008(0x0010)
    FPerPlatformFloat                             GrassDensity;                                                 // 0x0018(0x0004)
    FPerPlatformFloat                             MaxOffset;                                                    // 0x001C(0x0004)
    FPerPlatformFloat                             MinGrassWeight;                                               // 0x0020(0x0004)
    bool                                          bUseGrid;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         PlacementJitter;                                              // 0x0028(0x0004)
    FPerPlatformInt                               StartCullDistance;                                            // 0x002C(0x0008)
    FPerPlatformInt                               EndCullDistance;                                              // 0x0034(0x0008)
    float                                         FallOffExponent;                                              // 0x003C(0x0004)
    FFloatInterval                                OffsetWeight;                                                 // 0x0040(0x0008)
    FFloatInterval                                OffsetRange;                                                  // 0x0048(0x0008)
    FFloatInterval                                EdgeScaleWeight;                                              // 0x0050(0x0008)
    FFloatInterval                                EdgeScaleRatio;                                               // 0x0058(0x0008)
    int32_t                                       MinLOD;                                                       // 0x0060(0x0004)
    enum class EGrassScaling                      Scaling;                                                      // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    enum class EGrassPreservePriority             GrassPreservePriority;                                        // 0x0068(0x0004)
    FFloatInterval                                ScaleX;                                                       // 0x006C(0x0008)
    FFloatInterval                                ScaleY;                                                       // 0x0074(0x0008)
    FFloatInterval                                ScaleZ;                                                       // 0x007C(0x0008)
    bool                                          RandomRotation;                                               // 0x0084(0x0001)
    bool                                          AlignToSurface;                                               // 0x0085(0x0001)
    bool                                          bUseLandscapeLightmap;                                        // 0x0086(0x0001)
    FLightingChannels                             LightingChannels;                                             // 0x0087(0x0001)
    bool                                          bReceivesDecals;                                              // 0x0088(0x0001)
    bool                                          bCastDynamicShadow;                                           // 0x0089(0x0001)
    bool                                          bCastShadow;                                                  // 0x008A(0x0001)
    bool                                          bCastContactShadow;                                           // 0x008B(0x0001)
    bool                                          bKeepInstanceBufferCPUCopy;                                   // 0x008C(0x0001)
    bool                                          bForceUseSkyLightAsDiffuseGI;                                 // 0x008D(0x0001)
    enum class EIndirectLightingCacheQuality      IndirectLightingCacheQuality;                                 // 0x008E(0x0001)
    bool                                          bReMergeInstancing;                                           // 0x008F(0x0001)
    bool                                          bHiddenShadowOnShadowCapture;                                 // 0x0090(0x0001)
    enum class EShadowCaptureLayer                ShadowCaptureLayer;                                           // 0x0091(0x0001)
    char                                          pa_0092[0x0006]                                               // 0x0092(0x0006)
};


// ScriptStruct  Engine.PerPlatformFloat
// Struct Size::0x0004
struct FPerPlatformFloat
{
    float                                         Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Landscape.LandscapeInfoLayerSettings
// Struct Size::0x0010
struct FLandscapeInfoLayerSettings
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
    FName                                         LayerName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeMaterialTextureStreamingInfo
// Struct Size::0x000C
struct FLandscapeMaterialTextureStreamingInfo
{
    FName                                         TextureName;                                                  // 0x0000(0x0008)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Landscape.LandscapeProxyMaterialOverride
// Struct Size::0x0010
struct FLandscapeProxyMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeImportLayerInfo
// Struct Size::0x0001
struct FLandscapeImportLayerInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerStruct
// Struct Size::0x0008
struct FLandscapeLayerStruct
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditorLayerSettings
// Struct Size::0x0001
struct FLandscapeEditorLayerSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineConnection
// Struct Size::0x0010
struct FLandscapeSplineConnection
{
    ULandscapeSplineSegment*                      Segment;                                                      // 0x0000(0x0008)
    char                                          End;                                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Landscape.ForeignWorldSplineData
// Struct Size::0x0001
struct FForeignWorldSplineData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignSplineSegmentData
// Struct Size::0x0001
struct FForeignSplineSegmentData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignControlPointData
// Struct Size::0x0001
struct FForeignControlPointData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineMeshEntry
// Struct Size::0x0038
struct FLandscapeSplineMeshEntry
{
    UStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    TArray<UMaterialInterface*>                   MaterialOverrides;                                            // 0x0008(0x0010)
    char                                          bCenterH;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FVector2D                                     CenterAdjust;                                                 // 0x001C(0x0008)
    char                                          bScaleToWidth;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Scale;                                                        // 0x0028(0x000C)
    enum class LandscapeSplineMeshOrientation     Orientation;                                                  // 0x0034(0x0001)
    enum class ESplineMeshAxis                    ForwardAxis;                                                  // 0x0035(0x0001)
    enum class ESplineMeshAxis                    UpAxis;                                                       // 0x0036(0x0001)
    char                                          pa_0037[0x0001]                                               // 0x0037(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineSegmentConnection
// Struct Size::0x0018
struct FLandscapeSplineSegmentConnection
{
    ULandscapeSplineControlPoint*                 ControlPoint;                                                 // 0x0000(0x0008)
    float                                         TangentLen;                                                   // 0x0008(0x0004)
    FName                                         SocketName;                                                   // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Landscape.LandscapeSplineInterpPoint
// Struct Size::0x0070
struct FLandscapeSplineInterpPoint
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       Left;                                                         // 0x000C(0x000C)
    FVector                                       Right;                                                        // 0x0018(0x000C)
    FVector                                       FalloffLeft;                                                  // 0x0024(0x000C)
    FVector                                       FalloffRight;                                                 // 0x0030(0x000C)
    FVector                                       LayerLeft;                                                    // 0x003C(0x000C)
    FVector                                       LayerRight;                                                   // 0x0048(0x000C)
    FVector                                       LayerFalloffLeft;                                             // 0x0054(0x000C)
    FVector                                       LayerFalloffRight;                                            // 0x0060(0x000C)
    float                                         StartEndFalloff;                                              // 0x006C(0x0004)
};


// ScriptStruct  Landscape.GrassInput
// Struct Size::0x0028
struct FGrassInput
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    ULandscapeGrassType*                          GrassType;                                                    // 0x0008(0x0008)
    FExpressionInput                              Input;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Landscape.LayerBlendInput
// Struct Size::0x0048
struct FLayerBlendInput
{
    FName                                         LayerName;                                                    // 0x0000(0x0008)
    enum class ELandscapeLayerBlendType           BlendType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FExpressionInput                              LayerInput;                                                   // 0x000C(0x000C)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FExpressionInput                              HeightInput;                                                  // 0x0020(0x000C)
    char                                          pa_002C[0x0008]                                               // 0x002C(0x0008)
    float                                         PreviewWeight;                                                // 0x0034(0x0004)
    FVector                                       ConstLayerInput;                                              // 0x0038(0x000C)
    float                                         ConstHeightInput;                                             // 0x0044(0x0004)
};


// ScriptStruct  Landscape.PhysicalMaterialInput
// Struct Size::0x0020
struct FPhysicalMaterialInput
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  TimeManagement.TimedDataInputEvaluationData
// Struct Size::0x0008
struct FTimedDataInputEvaluationData
{
    float                                         DistanceToNewestSampleSeconds;                                // 0x0000(0x0004)
    float                                         DistanceToOldestSampleSeconds;                                // 0x0004(0x0004)
};


// ScriptStruct  TimeManagement.TimedDataChannelSampleTime
// Struct Size::0x0018
struct FTimedDataChannelSampleTime
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.TrackInstanceInputComponent
// Struct Size::0x0010
struct FTrackInstanceInputComponent
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    int32_t                                       OutputIndex;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceComponent
// Struct Size::0x0010
struct FMovieSceneTrackInstanceComponent
{
    UMovieSceneSection*                           Owner;                                                        // 0x0000(0x0008)
    UMovieSceneTrackInstance*                     TrackInstanceClass;                                           // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.EasingComponentData
// Struct Size::0x0008
struct FEasingComponentData
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePropertyBinding
// Struct Size::0x0014
struct FMovieScenePropertyBinding
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    FName                                         PropertyPath;                                                 // 0x0008(0x0008)
    bool                                          bCanUseClassLookup;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSectionGroup
// Struct Size::0x0010
struct FMovieSceneSectionGroup
{
    TArray<TWeakObjectPtr<UMovieSceneSection>>    Sections;                                                     // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingIDs
// Struct Size::0x0010
struct FMovieSceneObjectBindingIDs
{
    TArray<FMovieSceneObjectBindingID>            IDs;                                                          // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingID
// Struct Size::0x0018
struct FMovieSceneObjectBindingID
{
    int32_t                                       SequenceID;                                                   // 0x0000(0x0004)
    enum class EMovieSceneObjectBindingSpace      Space;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FGuid                                         Guid;                                                         // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackLabels
// Struct Size::0x0010
struct FMovieSceneTrackLabels
{
    TArray<FString>                               Strings;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEditorData
// Struct Size::0x00F0
struct FMovieSceneEditorData
{
    TMap<FString,FMovieSceneExpansionState>       ExpansionStates;                                              // 0x0000(0x0050)
    TArray<FString>                               PinnedNodes;                                                  // 0x0050(0x0010)
    double                                        ViewStart;                                                    // 0x0060(0x0008)
    double                                        ViewEnd;                                                      // 0x0068(0x0008)
    double                                        WorkStart;                                                    // 0x0070(0x0008)
    double                                        WorkEnd;                                                      // 0x0078(0x0008)
    TSet<FFrameNumber>                            MarkedFrames;                                                 // 0x0080(0x0050)
    FFloatRange                                   WorkingRange;                                                 // 0x00D0(0x0010)
    FFloatRange                                   ViewRange;                                                    // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneExpansionState
// Struct Size::0x0001
struct FMovieSceneExpansionState
{
    bool                                          bExpanded;                                                    // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneMarkedFrame
// Struct Size::0x0018
struct FMovieSceneMarkedFrame
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       label;                                                        // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTimecodeSource
// Struct Size::0x0018
struct FMovieSceneTimecodeSource
{
    FTimecode                                     Timecode;                                                     // 0x0000(0x0014)
    FFrameNumber                                  DeltaFrame;                                                   // 0x0014(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneBinding
// Struct Size::0x0030
struct FMovieSceneBinding
{
    FGuid                                         ObjectGuid;                                                   // 0x0000(0x0010)
    FString                                       BindingName;                                                  // 0x0010(0x0010)
    TArray<UMovieSceneTrack*>                     Tracks;                                                       // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneBindingOverrideData
// Struct Size::0x0024
struct FMovieSceneBindingOverrideData
{
    FMovieSceneObjectBindingID                    ObjectBindingID;                                              // 0x0000(0x0018)
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0018(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  MovieScene.OptionalMovieSceneBlendType
// Struct Size::0x0002
struct FOptionalMovieSceneBlendType
{
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0000(0x0001)
    bool                                          bIsValid;                                                     // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSequenceCompilerMaskStruct
// Struct Size::0x0001
struct FMovieSceneSequenceCompilerMaskStruct
{
    char                                          bHierarchy;                                                   // 0x0000(0x0001)
    char                                          bEvaluationTemplate;                                          // 0x0000(0x0001)
    char                                          bEvaluationTemplateField;                                     // 0x0000(0x0001)
    char                                          bEntityComponentField;                                        // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraph
// Struct Size::0x0138
struct FMovieSceneEntitySystemGraph
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
    FMovieSceneEntitySystemGraphNodes             Nodes;                                                        // 0x0080(0x0038)
    char                                          pa_00B8[0x0080]                                               // 0x00B8(0x0080)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNodes
// Struct Size::0x0038
struct FMovieSceneEntitySystemGraphNodes
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneEntitySystemGraphNode
// Struct Size::0x0028
struct FMovieSceneEntitySystemGraphNode
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    UMovieSceneEntitySystem*                      System;                                                       // 0x0020(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplatePtr
// Struct Size::0x0088
struct FMovieSceneEvalTemplatePtr
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneEmptyStruct
// Struct Size::0x0001
struct FMovieSceneEmptyStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationField
// Struct Size::0x0030
struct FMovieSceneEvaluationField
{
    TArray<FMovieSceneFrameRange>                 Ranges;                                                       // 0x0000(0x0010)
    TArray<FMovieSceneEvaluationGroup>            Groups;                                                       // 0x0010(0x0010)
    TArray<FMovieSceneEvaluationMetaData>         MetaData;                                                     // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationMetaData
// Struct Size::0x0020
struct FMovieSceneEvaluationMetaData
{
    TArray<FMovieSceneSequenceID>                 ActiveSequences;                                              // 0x0000(0x0010)
    TArray<FMovieSceneOrderedEvaluationKey>       ActiveEntities;                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneOrderedEvaluationKey
// Struct Size::0x0010
struct FMovieSceneOrderedEvaluationKey
{
    FMovieSceneEvaluationKey                      Key;                                                          // 0x0000(0x000C)
    uint16_t                                      SetupIndex;                                                   // 0x000C(0x0002)
    uint16_t                                      TearDownIndex;                                                // 0x000E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationKey
// Struct Size::0x000C
struct FMovieSceneEvaluationKey
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
    uint32_t                                      SectionIndex;                                                 // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackIdentifier
// Struct Size::0x0004
struct FMovieSceneTrackIdentifier
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroup
// Struct Size::0x0030
struct FMovieSceneEvaluationGroup
{
    TArray<FMovieSceneEvaluationGroupLUTIndex>    LUTIndices;                                                   // 0x0000(0x0010)
    TArray<FMovieSceneFieldEntry>                 TrackLUT;                                                     // 0x0010(0x0010)
    TArray<FMovieSceneFieldEntry>                 SectionLUT;                                                   // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x0008
struct FMovieSceneFieldEntry
{
    uint16_t                                      ChildIndex;                                                   // 0x0000(0x0002)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFieldEntry
// Struct Size::0x000C
struct FMovieSceneFieldEntry
{
    FMovieSceneEvaluationFieldTrackPtr            TrackPtr;                                                     // 0x0000(0x0008)
    uint16_t                                      NumChildren;                                                  // 0x0008(0x0002)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldTrackPtr
// Struct Size::0x0008
struct FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroupLUTIndex
// Struct Size::0x0008
struct FMovieSceneEvaluationGroupLUTIndex
{
    int32_t                                       NumInitPtrs;                                                  // 0x0000(0x0004)
    int32_t                                       NumEvalPtrs;                                                  // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFrameRange
// Struct Size::0x0010
struct FMovieSceneFrameRange
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSegmentPtr
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSegmentIdentifier                  SegmentID;                                                    // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegmentIdentifier
// Struct Size::0x0004
struct FMovieSceneSegmentIdentifier
{
    int32_t                                       IdentifierIndex;                                              // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEntityComponentField
// Struct Size::0x00F0
struct FMovieSceneEntityComponentField
{
    FMovieSceneEvaluationFieldEntityTree          PersistentEntityTree;                                         // 0x0000(0x0060)
    FMovieSceneEvaluationFieldEntityTree          OneShotEntityTree;                                            // 0x0060(0x0060)
    TArray<FMovieSceneEvaluationFieldEntity>      Entities;                                                     // 0x00C0(0x0010)
    TArray<FMovieSceneEvaluationFieldEntityMetaData>EntityMetaData;                                             // 0x00D0(0x0010)
    TArray<FMovieSceneEvaluationFieldSharedEntityMetaData>SharedMetaData;                                       // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityMetaData
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldEntityMetaData
{
    FFrameNumber                                  ForcedTime;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0008(0x0001)
    char                                          bEvaluateInSequencePreRoll;                                   // 0x0009(0x0001)
    char                                          bEvaluateInSequencePostRoll;                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntity
// Struct Size::0x0010
struct FMovieSceneEvaluationFieldEntity
{
    FMovieSceneEvaluationFieldEntityKey           Key;                                                          // 0x0000(0x000C)
    int32_t                                       SharedMetaDataIndex;                                          // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityKey
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldEntityKey
{
    TWeakObjectPtr<UObject>                       EntityOwner;                                                  // 0x0000(0x0008)
    uint32_t                                      EntityID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldEntityTree
// Struct Size::0x0060
struct FMovieSceneEvaluationFieldEntityTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplate
// Struct Size::0x0160
struct FMovieSceneEvaluationTemplate
{
    TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>Tracks;                                          // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FGuid                                         SequenceSignature;                                            // 0x00A0(0x0010)
    FMovieSceneEvaluationTemplateSerialNumber     TemplateSerialNumber;                                         // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
    FMovieSceneTemplateGenerationLedger           TemplateLedger;                                               // 0x00B8(0x00A8)
};


// ScriptStruct  MovieScene.MovieSceneTemplateGenerationLedger
// Struct Size::0x00A8
struct FMovieSceneTemplateGenerationLedger
{
    FMovieSceneTrackIdentifier                    LastTrackIdentifier;                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FGuid,FMovieSceneTrackIdentifier>        TrackSignatureToTrackIdentifier;                              // 0x0008(0x0050)
    TMap<FGuid,FMovieSceneFrameRange>             SubSectionRanges;                                             // 0x0058(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplateSerialNumber
// Struct Size::0x0004
struct FMovieSceneEvaluationTemplateSerialNumber
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTrack
// Struct Size::0x0078
struct FMovieSceneEvaluationTrack
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    uint16_t                                      EvaluationPriority;                                           // 0x0010(0x0002)
    enum class EEvaluationMethod                  EvaluationMethod;                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0001]                                               // 0x0013(0x0001)
    TWeakObjectPtr<UMovieSceneTrack>              SourceTrack;                                                  // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FMovieSceneEvalTemplatePtr>            ChildTemplates;                                               // 0x0020(0x0010)
    FMovieSceneTrackImplementationPtr             TrackTemplate;                                                // 0x0030(0x0038)
    FName                                         EvaluationGroup;                                              // 0x0068(0x0008)
    char                                          bEvaluateInPreroll;                                           // 0x0070(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0070(0x0001)
    char                                          bTearDownPriority;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementationPtr
// Struct Size::0x0038
struct FMovieSceneTrackImplementationPtr
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.MovieSceneSubSectionData
// Struct Size::0x001C
struct FMovieSceneSubSectionData
{
    TWeakObjectPtr<UMovieSceneSubSection>         Section;                                                      // 0x0000(0x0008)
    FGuid                                         ObjectBindingID;                                              // 0x0008(0x0010)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneRootEvaluationTemplateInstance
// Struct Size::0x00E8
struct FMovieSceneRootEvaluationTemplateInstance
{
    TWeakObjectPtr<UMovieSceneSequence>           WeakRootSequence;                                             // 0x0000(0x0008)
    UMovieSceneCompiledDataManager*               CompiledDataManager;                                          // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    UMovieSceneEntitySystemLinker*                EntitySystemLinker;                                           // 0x0018(0x0008)
    char                                          pa_0020[0x0070]                                               // 0x0020(0x0070)
    TMap<FMovieSceneSequenceID,UObject*>          DirectorInstances;                                            // 0x0090(0x0050)
    char                                          pa_00E0[0x0008]                                               // 0x00E0(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneKeyStruct
// Struct Size::0x0008
struct FMovieSceneKeyStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneKeyTimeStruct
// Struct Size::0x0028
struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieScene.GeneratedMovieSceneKeyStruct
// Struct Size::0x0050
struct FGeneratedMovieSceneKeyStruct
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannel
// Struct Size::0x00C0
struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
{
    UObject*                                      PropertyClass;                                                // 0x0008(0x0008)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneObjectPathChannelKeyValue>  Values;                                                       // 0x0020(0x0010)
    FMovieSceneObjectPathChannelKeyValue          DefaultValue;                                                 // 0x0030(0x0030)
    char                                          pa_0060[0x0060]                                               // 0x0060(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannelKeyValue
// Struct Size::0x0030
struct FMovieSceneObjectPathChannelKeyValue
{
    TSoftObjectPtr<UObject>                       SoftPtr;                                                      // 0x0000(0x0028)
    UObject*                                      HardPtr;                                                      // 0x0028(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePossessable
// Struct Size::0x0048
struct FMovieScenePossessable
{
    TArray<FName>                                 Tags;                                                         // 0x0000(0x0010)
    FGuid                                         Guid;                                                         // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    UObject*                                      PossessedObjectClass;                                         // 0x0030(0x0008)
    FGuid                                         ParentGuid;                                                   // 0x0038(0x0010)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionTemplate
// Struct Size::0x0038
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0018)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionData
// Struct Size::0x0018
struct FMovieScenePropertySectionData
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    FString                                       PropertyPath;                                                 // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEasingSettings
// Struct Size::0x0038
struct FMovieSceneEasingSettings
{
    int32_t                                       AutoEaseInDuration;                                           // 0x0000(0x0004)
    int32_t                                       AutoEaseOutDuration;                                          // 0x0004(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseIn;                                                       // 0x0008(0x0010)
    bool                                          bManualEaseIn;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ManualEaseInDuration;                                         // 0x001C(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseOut;                                                      // 0x0020(0x0010)
    bool                                          bManualEaseOut;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       ManualEaseOutDuration;                                        // 0x0034(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSectionEvalOptions
// Struct Size::0x0002
struct FMovieSceneSectionEvalOptions
{
    bool                                          bCanEditCompletionMode;                                       // 0x0000(0x0001)
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSectionParameters
// Struct Size::0x0024
struct FMovieSceneSectionParameters
{
    FFrameNumber                                  StartFrameOffset;                                             // 0x0000(0x0004)
    bool                                          bCanLoop;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0008(0x0004)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x000C(0x0004)
    float                                         TimeScale;                                                    // 0x0010(0x0004)
    int32_t                                       HierarchicalBias;                                             // 0x0014(0x0004)
    float                                         StartOffset;                                                  // 0x0018(0x0004)
    float                                         PrerollTime;                                                  // 0x001C(0x0004)
    float                                         PostrollTime;                                                 // 0x0020(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegment
// Struct Size::0x0058
struct FMovieSceneSegment
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MovieScene.SectionEvaluationData
// Struct Size::0x000C
struct FSectionEvaluationData
{
    int32_t                                       ImplIndex;                                                    // 0x0000(0x0004)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchy
// Struct Size::0x0118
struct FMovieSceneSequenceHierarchy
{
    FMovieSceneSequenceHierarchyNode              RootNode;                                                     // 0x0000(0x0018)
    FMovieSceneSubSequenceTree                    Tree;                                                         // 0x0018(0x0060)
    TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData>SubSequences;                                         // 0x0078(0x0050)
    TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>Hierarchy;                                      // 0x00C8(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchyNode
// Struct Size::0x0018
struct FMovieSceneSequenceHierarchyNode
{
    FMovieSceneSequenceID                         ParentID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMovieSceneSequenceID>                 Children;                                                     // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceData
// Struct Size::0x00E8
struct FMovieSceneSubSequenceData
{
    FSoftObjectPath                               Sequence;                                                     // 0x0000(0x0018)
    FMovieSceneSequenceTransform                  RootToSequenceTransform;                                      // 0x0018(0x0020)
    FFrameRate                                    TickResolution;                                               // 0x0038(0x0008)
    FMovieSceneSequenceID                         DeterministicSequenceID;                                      // 0x0040(0x0004)
    FMovieSceneFrameRange                         PlayRange;                                                    // 0x0044(0x0010)
    FMovieSceneFrameRange                         FullPlayRange;                                                // 0x0054(0x0010)
    FMovieSceneFrameRange                         UnwarpedPlayRange;                                            // 0x0064(0x0010)
    FMovieSceneFrameRange                         PreRollRange;                                                 // 0x0074(0x0010)
    FMovieSceneFrameRange                         PostRollRange;                                                // 0x0084(0x0010)
    int16_t                                       HierarchicalBias;                                             // 0x0094(0x0002)
    bool                                          bHasHierarchicalEasing;                                       // 0x0096(0x0001)
    char                                          pa_0097[0x0001]                                               // 0x0097(0x0001)
    FMovieSceneSequenceInstanceDataPtr            InstanceData;                                                 // 0x0098(0x0018)
    char                                          pa_00B0[0x0008]                                               // 0x00B0(0x0008)
    FGuid                                         SubSectionSignature;                                          // 0x00B8(0x0010)
    FMovieSceneSequenceTransform                  OuterToInnerTransform;                                        // 0x00C8(0x0020)
};


// ScriptStruct  MovieScene.MovieSceneSequenceTransform
// Struct Size::0x0020
struct FMovieSceneSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FMovieSceneNestedSequenceTransform>    NestedTransforms;                                             // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneNestedSequenceTransform
// Struct Size::0x0014
struct FMovieSceneNestedSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    FMovieSceneTimeWarping                        Warping;                                                      // 0x000C(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTimeWarping
// Struct Size::0x0008
struct FMovieSceneTimeWarping
{
    FFrameNumber                                  Start;                                                        // 0x0000(0x0004)
    FFrameNumber                                  End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTimeTransform
// Struct Size::0x000C
struct FMovieSceneTimeTransform
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    FFrameTime                                    Offset;                                                       // 0x0004(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceDataPtr
// Struct Size::0x0018
struct FMovieSceneSequenceInstanceDataPtr
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTree
// Struct Size::0x0060
struct FMovieSceneSubSequenceTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceTreeEntry
// Struct Size::0x0008
struct FMovieSceneSubSequenceTreeEntry
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackParams
// Struct Size::0x0028
struct FMovieSceneSequencePlaybackParams
{
    FFrameTime                                    Frame;                                                        // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       MarkedFrame;                                                  // 0x0010(0x0010)
    enum class EMovieScenePositionType            PositionType;                                                 // 0x0020(0x0001)
    enum class EUpdatePositionMethod              UpdateMethod;                                                 // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackSettings
// Struct Size::0x0014
struct FMovieSceneSequencePlaybackSettings
{
    char                                          bAutoPlay;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMovieSceneSequenceLoopCount                  LoopCount;                                                    // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         StartTime;                                                    // 0x000C(0x0004)
    char                                          bRandomStartTime;                                             // 0x0010(0x0001)
    char                                          bRestoreState;                                                // 0x0010(0x0001)
    char                                          bDisableMovementInput;                                        // 0x0010(0x0001)
    char                                          bDisableLookAtInput;                                          // 0x0010(0x0001)
    char                                          bHidePlayer;                                                  // 0x0010(0x0001)
    char                                          bHideHud;                                                     // 0x0010(0x0001)
    char                                          bDisableCameraCuts;                                           // 0x0010(0x0001)
    char                                          bPauseAtEnd;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceLoopCount
// Struct Size::0x0004
struct FMovieSceneSequenceLoopCount
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceReplProperties
// Struct Size::0x0010
struct FMovieSceneSequenceReplProperties
{
    FFrameTime                                    LastKnownPosition;                                            // 0x0000(0x0008)
    enum class EMovieScenePlayerStatus            LastKnownStatus;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       LastKnownNumLoops;                                            // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneWarpCounter
// Struct Size::0x0010
struct FMovieSceneWarpCounter
{
    TArray<uint32_t>                              WarpCounts;                                                   // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSpawnable
// Struct Size::0x0090
struct FMovieSceneSpawnable
{
    FTransform                                    SpawnTransform;                                               // 0x0000(0x0030)
    TArray<FName>                                 Tags;                                                         // 0x0030(0x0010)
    bool                                          bContinuouslyRespawn;                                         // 0x0040(0x0001)
    bool                                          bEvaluateTracksWhenNotSpawned;                                // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    FGuid                                         Guid;                                                         // 0x0044(0x0010)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       Name;                                                         // 0x0058(0x0010)
    UObject*                                      ObjectTemplate;                                               // 0x0068(0x0008)
    TArray<FGuid>                                 ChildPossessables;                                            // 0x0070(0x0010)
    enum class ESpawnOwnership                    Ownership;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FName                                         LevelName;                                                    // 0x0084(0x0008)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  MovieScene.TestMovieSceneEvalTemplate
// Struct Size::0x0020
struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieScene.MovieSceneTrackDisplayOptions
// Struct Size::0x0004
struct FMovieSceneTrackDisplayOptions
{
    char                                          bShowVerticalFrames;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvalOptions
// Struct Size::0x0004
struct FMovieSceneTrackEvalOptions
{
    char                                          bCanEvaluateNearestSection;                                   // 0x0000(0x0001)
    char                                          bEvalNearestSection;                                          // 0x0000(0x0001)
    char                                          bEvaluateInPreroll;                                           // 0x0000(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0000(0x0001)
    char                                          bEvaluateNearestSection;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationField
// Struct Size::0x0010
struct FMovieSceneTrackEvaluationField
{
    TArray<FMovieSceneTrackEvaluationFieldEntry>  Entries;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvaluationFieldEntry
// Struct Size::0x0020
struct FMovieSceneTrackEvaluationFieldEntry
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    FFrameNumberRange                             Range;                                                        // 0x0008(0x0010)
    FFrameNumber                                  ForcedTime;                                                   // 0x0018(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x001C(0x0001)
    char                                          pa_001D[0x0001]                                               // 0x001D(0x0001)
    int16_t                                       LegacySortOrder;                                              // 0x001E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceInput
// Struct Size::0x0010
struct FMovieSceneTrackInstanceInput
{
    UMovieSceneSection*                           Section;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTrackInstanceEntry
// Struct Size::0x0010
struct FMovieSceneTrackInstanceEntry
{
    UObject*                                      BoundObject;                                                  // 0x0000(0x0008)
    UMovieSceneTrackInstance*                     TrackInstance;                                                // 0x0008(0x0008)
};


// ScriptStruct  AnimationCore.Axis
// Struct Size::0x0010
struct FAxis
{
    FVector                                       Axis;                                                         // 0x0000(0x000C)
    bool                                          bInLocalSpace;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescriptionEx
// Struct Size::0x0010
struct FConstraintDescriptionEx
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FFilterOptionPerAxis                          AxesFilterOption;                                             // 0x0008(0x0003)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  AnimationCore.AimConstraintDescription
// Struct Size::0x0040
struct FAimConstraintDescription : public FConstraintDescriptionEx
{
    FAxis                                         LookAt;                                                       // 0x0010(0x0010)
    FAxis                                         LookUp;                                                       // 0x0020(0x0010)
    bool                                          bUseLookUp;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FVector                                       LookUpTarget;                                                 // 0x0034(0x000C)
};


// ScriptStruct  AnimationCore.TransformConstraintDescription
// Struct Size::0x0018
struct FTransformConstraintDescription : public FConstraintDescriptionEx
{
    enum class ETransformConstraintType           TransformType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimationCore.NodeChain
// Struct Size::0x0010
struct FNodeChain
{
    TArray<FName>                                 Nodes;                                                        // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.TransformNoScale
// Struct Size::0x0020
struct FTransformNoScale
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0120
struct FAnimNode : public FAnimNode
{
    FName                                         GroupName;                                                    // 0x0010(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0018(0x0001)
    enum class EAnimSyncGroupScope                GroupScope;                                                   // 0x0019(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    float                                         BlendWeight;                                                  // 0x001C(0x0004)
    float                                         InternalTimeAccumulator;                                      // 0x0020(0x0004)
    char                                          pa_0024[0x00FC]                                               // 0x0024(0x00FC)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0208
struct FAnimNode : public FAnimNode
{
    float                                         X;                                                            // 0x0120(0x0004)
    float                                         Y;                                                            // 0x0124(0x0004)
    float                                         Z;                                                            // 0x0128(0x0004)
    float                                         PlayRate;                                                     // 0x012C(0x0004)
    bool                                          bLoop;                                                        // 0x0130(0x0001)
    bool                                          bResetPlayTimeWhenBlendSpaceChanges;                          // 0x0131(0x0001)
    char                                          pa_0132[0x0002]                                               // 0x0132(0x0002)
    float                                         StartPosition;                                                // 0x0134(0x0004)
    UBlendSpaceBase*                              BlendSpace;                                                   // 0x0138(0x0008)
    bool                                          bResetPlayTimeWhenStartPositionChanges;                       // 0x0140(0x0001)
    bool                                          bResetAccumulateTimeWhenActive;                               // 0x0141(0x0001)
    char                                          pa_0142[0x0006]                                               // 0x0142(0x0006)
    bool                                          bUseOverrideInterpolationParam;                               // 0x0148(0x0001)
    char                                          pa_0149[0x0003]                                               // 0x0149(0x0003)
    FInterpolationParameter                       OverrideInterpolationParam;                                   // 0x014C(0x0008)
    FInterpolationParameter                       OverrideInterpolationParam;                                   // 0x0154(0x0008)
    char                                          pa_015C[0x008C]                                               // 0x015C(0x008C)
    UBlendSpaceBase*                              PreviousBlendSpace;                                           // 0x01E8(0x0008)
    float                                         PreviousStartPosition;                                        // 0x01F0(0x0004)
    char                                          pa_01F4[0x000C]                                               // 0x01F4(0x000C)
    UAnimSequence*                                LastCachedAnimSequence;                                       // 0x0200(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x02E0
struct FAnimNode : public FAnimNode
{
    char                                          pa_0208[0x0068]                                               // 0x0208(0x0068)
    FPoseLink                                     BasePose;                                                     // 0x0270(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0280(0x0004)
    FName                                         SourceSocketName;                                             // 0x0284(0x0008)
    FName                                         PivotSocketName;                                              // 0x028C(0x0008)
    FVector                                       LookAtLocation;                                               // 0x0294(0x000C)
    FVector                                       SocketAxis;                                                   // 0x02A0(0x000C)
    float                                         Alpha;                                                        // 0x02AC(0x0004)
    char                                          pa_02B0[0x0030]                                               // 0x02B0(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0490
struct FAnimNode : public FAnimNode
{
    float                                         LinearDampingOverride;                                        // 0x00D0(0x0004)
    float                                         AngularDampingOverride;                                       // 0x00D4(0x0004)
    char                                          pa_00D8[0x0068]                                               // 0x00D8(0x0068)
    FBoneReference                                RelativeSpaceBone;                                            // 0x0140(0x0010)
    FBoneReference                                BoundBone;                                                    // 0x0150(0x0010)
    FBoneReference                                ChainEnd;                                                     // 0x0160(0x0010)
    FVector                                       BoxExtents;                                                   // 0x0170(0x000C)
    FVector                                       LocalJointOffset;                                             // 0x017C(0x000C)
    float                                         GravityScale;                                                 // 0x0188(0x0004)
    FVector                                       GravityOverride;                                              // 0x018C(0x000C)
    float                                         LinearSpringConstant;                                         // 0x0198(0x0004)
    float                                         AngularSpringConstant;                                        // 0x019C(0x0004)
    float                                         WindScale;                                                    // 0x01A0(0x0004)
    FVector                                       ComponentLinearAccScale;                                      // 0x01A4(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x01B0(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x01BC(0x000C)
    float                                         AngularBiasOverride;                                          // 0x01C8(0x0004)
    int32_t                                       NumSolverIterationsPreUpdate;                                 // 0x01CC(0x0004)
    int32_t                                       NumSolverIterationsPostUpdate;                                // 0x01D0(0x0004)
    FAnimPhysConstraintSetup                      ConstraintSetup;                                              // 0x01D4(0x0048)
    char                                          pa_021C[0x0004]                                               // 0x021C(0x0004)
    TArray<FAnimPhysSphericalLimit>               SphericalLimits;                                              // 0x0220(0x0010)
    float                                         SphereCollisionRadius;                                        // 0x0230(0x0004)
    FVector                                       ExternalForce;                                                // 0x0234(0x000C)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0240(0x0010)
    enum class AnimPhysCollisionType              CollisionType;                                                // 0x0250(0x0001)
    enum class AnimPhysSimSpaceType               SimulationSpace;                                              // 0x0251(0x0001)
    char                                          pa_0252[0x0002]                                               // 0x0252(0x0002)
    char                                          bUseSphericalLimits;                                          // 0x0254(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0254(0x0001)
    char                                          bDoUpdate;                                                    // 0x0254(0x0001)
    char                                          bDoEval;                                                      // 0x0254(0x0001)
    char                                          bOverrideLinearDamping;                                       // 0x0254(0x0001)
    char                                          bOverrideAngularBias;                                         // 0x0254(0x0001)
    char                                          bOverrideAngularDamping;                                      // 0x0254(0x0001)
    char                                          bEnableWind;                                                  // 0x0254(0x0001)
    char                                          bUseGravityOverride;                                          // 0x0255(0x0001)
    char                                          bLinearSpring;                                                // 0x0255(0x0001)
    char                                          bAngularSpring;                                               // 0x0255(0x0001)
    char                                          bClamp;                                                       // 0x0255(0x0001)
    char                                          pa_0256[0x0002]                                               // 0x0256(0x0002)
    FBoneReference                                ClampReferenceBone;                                           // 0x0258(0x0010)
    FVector                                       ClampTranslationMin;                                          // 0x0268(0x000C)
    FVector                                       ClampTranslationMax;                                          // 0x0274(0x000C)
    FRotator                                      ClampRotationMin;                                             // 0x0280(0x000C)
    FRotator                                      ClampRotationMax;                                             // 0x028C(0x000C)
    char                                          bChain;                                                       // 0x0298(0x0001)
    char                                          pa_0299[0x0007]                                               // 0x0299(0x0007)
    FRotationRetargetingInfo                      RetargetingSettings;                                          // 0x02A0(0x0130)
    char                                          pa_03D0[0x00C0]                                               // 0x03D0(0x00C0)
};


// ScriptStruct  AnimGraphRuntime.RotationRetargetingInfo
// Struct Size::0x0130
struct FRotationRetargetingInfo
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    FTransform                                    Target;                                                       // 0x0040(0x0030)
    enum class ERotationComponent                 RotationComponent;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FVector                                       TwistAxis;                                                    // 0x0074(0x000C)
    bool                                          bUseAbsoluteAngle;                                            // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         SourceMinimum;                                                // 0x0084(0x0004)
    float                                         SourceMaximum;                                                // 0x0088(0x0004)
    float                                         TargetMinimum;                                                // 0x008C(0x0004)
    float                                         TargetMaximum;                                                // 0x0090(0x0004)
    enum class EEasingFuncType                    EasingType;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FRuntimeFloatCurve                            CustomCurve;                                                  // 0x0098(0x0088)
    bool                                          bFlipEasing;                                                  // 0x0120(0x0001)
    char                                          pa_0121[0x0003]                                               // 0x0121(0x0003)
    float                                         EasingWeight;                                                 // 0x0124(0x0004)
    bool                                          bClamp;                                                       // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysPlanarLimit
// Struct Size::0x0040
struct FAnimPhysPlanarLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FTransform                                    PlaneTransform;                                               // 0x0010(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysSphericalLimit
// Struct Size::0x0024
struct FAnimPhysSphericalLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FVector                                       SphereLocalOffset;                                            // 0x0010(0x000C)
    float                                         LimitRadius;                                                  // 0x001C(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysConstraintSetup
// Struct Size::0x0048
struct FAnimPhysConstraintSetup
{
    enum class AnimPhysLinearConstraintType       LinearXLimitType;                                             // 0x0000(0x0001)
    enum class AnimPhysLinearConstraintType       LinearYLimitType;                                             // 0x0001(0x0001)
    enum class AnimPhysLinearConstraintType       LinearZLimitType;                                             // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       LinearAxesMin;                                                // 0x0004(0x000C)
    FVector                                       LinearAxesMax;                                                // 0x0010(0x000C)
    enum class AnimPhysAngularConstraintType      AngularConstraintType;                                        // 0x001C(0x0001)
    enum class AnimPhysTwistAxis                  TwistAxis;                                                    // 0x001D(0x0001)
    enum class AnimPhysTwistAxis                  AngularTargetAxis;                                            // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    float                                         ConeAngle;                                                    // 0x0020(0x0004)
    FVector                                       AngularLimitsMin;                                             // 0x0024(0x000C)
    FVector                                       AngularLimitsMax;                                             // 0x0030(0x000C)
    FVector                                       AngularTarget;                                                // 0x003C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    float                                         Alpha;                                                        // 0x0030(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0034(0x0008)
    int32_t                                       LODThreshold;                                                 // 0x003C(0x0004)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0004]                                               // 0x00C0(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x00C4(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x00C5(0x0001)
    char                                          pa_00C6[0x0002]                                               // 0x00C6(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0110
struct FAnimNode : public FAnimNode
{
    TArray<FAngularRangeLimit>                    AngularRangeLimits;                                           // 0x00D0(0x0010)
    TArray<FVector>                               AngularOffsets;                                               // 0x00E0(0x0010)
    TArray<FAngularRangeLimit>                    LocationRangeLimits;                                          // 0x00F0(0x0010)
    TArray<FVector>                               LocationOffsets;                                              // 0x0100(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AngularRangeLimit
// Struct Size::0x0028
struct FAngularRangeLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
    FBoneReference                                Bone;                                                         // 0x0018(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0068
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    TArray<FBlendBoneByChannelEntry>              BoneDefinitions;                                              // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EBoneControlSpace                  TransformsSpace;                                              // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  AnimGraphRuntime.BlendBoneByChannelEntry
// Struct Size::0x0024
struct FBlendBoneByChannelEntry
{
    FBoneReference                                SourceBone;                                                   // 0x0000(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x0010(0x0010)
    bool                                          bBlendTranslation;                                            // 0x0020(0x0001)
    bool                                          bBlendRotation;                                               // 0x0021(0x0001)
    bool                                          bBlendScale;                                                  // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0098
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             BlendPose;                                                    // 0x0010(0x0010)
    TArray<float>                                 BlendTime;                                                    // 0x0020(0x0010)
    enum class EBlendListTransitionType           TransitionType;                                               // 0x0030(0x0001)
    enum class EAlphaBlendOption                  BlendType;                                                    // 0x0031(0x0001)
    bool                                          bResetChildOnActivation;                                      // 0x0032(0x0001)
    bool                                          bResetBlendingChildOnActivation;                              // 0x0033(0x0001)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UCurveFloat*                                  CustomBlendCurve;                                             // 0x0038(0x0008)
    UBlendProfile*                                BlendProfile;                                                 // 0x0040(0x0008)
    char                                          pa_0048[0x0050]                                               // 0x0048(0x0050)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    bool                                          bActiveValue;                                                 // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    TArray<int32_t>                               EnumToPoseIndex;                                              // 0x0098(0x0010)
    char                                          ActiveEnumValue;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    int32_t                                       ActiveChildIndex;                                             // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0210
struct FAnimNode : public FAnimNode
{
    float                                         NormalizedTime;                                               // 0x0208(0x0004)
    char                                          pa_020C[0x0004]                                               // 0x020C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0120
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0010)
    UCurveFloat*                                  DrivingCurve;                                                 // 0x00E0(0x0008)
    float                                         Multiplier;                                                   // 0x00E8(0x0004)
    float                                         RangeMin;                                                     // 0x00EC(0x0004)
    float                                         RangeMax;                                                     // 0x00F0(0x0004)
    float                                         RemappedMin;                                                  // 0x00F4(0x0004)
    float                                         RemappedMax;                                                  // 0x00F8(0x0004)
    FName                                         ParameterName;                                                // 0x00FC(0x0008)
    FBoneReference                                TargetBone;                                                   // 0x0104(0x0010)
    enum class EDrivenDestinationMode             DestinationMode;                                              // 0x0114(0x0001)
    enum class EDrivenBoneModificationMode        ModificationMode;                                             // 0x0115(0x0001)
    enum class EComponentType                     SourceComponent;                                              // 0x0116(0x0001)
    char                                          bUseRange;                                                    // 0x0117(0x0001)
    char                                          bAffectTargetTranslationX;                                    // 0x0117(0x0001)
    char                                          bAffectTargetTranslationY;                                    // 0x0117(0x0001)
    char                                          bAffectTargetTranslationZ;                                    // 0x0117(0x0001)
    char                                          bAffectTargetRotationX;                                       // 0x0117(0x0001)
    char                                          bAffectTargetRotationY;                                       // 0x0117(0x0001)
    char                                          bAffectTargetRotationZ;                                       // 0x0117(0x0001)
    char                                          bAffectTargetScaleX;                                          // 0x0117(0x0001)
    char                                          bAffectTargetScaleY;                                          // 0x0118(0x0001)
    char                                          bAffectTargetScaleZ;                                          // 0x0118(0x0001)
    char                                          pa_0119[0x0007]                                               // 0x0119(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0180
struct FAnimNode : public FAnimNode
{
    FVector                                       EffectorLocation;                                             // 0x00D0(0x000C)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x00E0(0x0060)
    FBoneReference                                TipBone;                                                      // 0x0140(0x0010)
    FBoneReference                                RootBone;                                                     // 0x0150(0x0010)
    float                                         Precision;                                                    // 0x0160(0x0004)
    int32_t                                       MaxIterations;                                                // 0x0164(0x0004)
    bool                                          bStartFromTail;                                               // 0x0168(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x0169(0x0001)
    char                                          pa_016A[0x0006]                                               // 0x016A(0x0006)
    TArray<float>                                 RotationLimitPerJoints;                                       // 0x0170(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0110
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    TArray<FConstraint>                           ConstraintSetup;                                              // 0x00E0(0x0010)
    TArray<float>                                 ConstraintWeights;                                            // 0x00F0(0x0010)
    char                                          pa_0100[0x0010]                                               // 0x0100(0x0010)
};


// ScriptStruct  AnimGraphRuntime.Constraint
// Struct Size::0x001C
struct FConstraint
{
    FBoneReference                                TargetBone;                                                   // 0x0000(0x0010)
    enum class EConstraintOffsetOption            OffsetOption;                                                 // 0x0010(0x0001)
    enum class ETransformConstraintType           TransformType;                                                // 0x0011(0x0001)
    FFilterOptionPerAxis                          PerAxis;                                                      // 0x0012(0x0003)
    char                                          pa_0015[0x0007]                                               // 0x0015(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00E0(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00F0(0x0001)
    bool                                          bCopyRotation;                                                // 0x00F1(0x0001)
    bool                                          bCopyScale;                                                   // 0x00F2(0x0001)
    enum class EBoneControlSpace                  ControlSpace;                                                 // 0x00F3(0x0001)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SourceBone;                                                   // 0x00D0(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00E0(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00F0(0x0001)
    bool                                          bCopyRotation;                                                // 0x00F1(0x0001)
    bool                                          bCopyScale;                                                   // 0x00F2(0x0001)
    enum class CopyBoneDeltaMode                  CopyMode;                                                     // 0x00F3(0x0001)
    float                                         TranslationMultiplier;                                        // 0x00F4(0x0004)
    float                                         RotationMultiplier;                                           // 0x00F8(0x0004)
    float                                         ScaleMultiplier;                                              // 0x00FC(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01D8
struct FAnimNode : public FAnimNode
{
    TWeakObjectPtr<USkeletalMeshComponent>        SourceMeshComponent;                                          // 0x0010(0x0008)
    char                                          bUseAttachedParent;                                           // 0x0018(0x0001)
    char                                          bCopyCurves;                                                  // 0x0018(0x0001)
    bool                                          bCopyCustomAttributes;                                        // 0x0019(0x0001)
    char                                          bUseMeshPose;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    FName                                         RootBoneToCopy;                                               // 0x001C(0x0008)
    char                                          pa_0024[0x01B4]                                               // 0x0024(0x01B4)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0040
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    FName                                         SourceBinding;                                                // 0x0020(0x0008)
    float                                         Alpha;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TScriptInterface<ICurveSourceInterface>       CurveSource;                                                  // 0x0030(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0190
struct FAnimNode : public FAnimNode
{
    FTransform                                    EffectorTransform;                                            // 0x00D0(0x0030)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0060)
    FBoneReference                                TipBone;                                                      // 0x0160(0x0010)
    FBoneReference                                RootBone;                                                     // 0x0170(0x0010)
    float                                         Precision;                                                    // 0x0180(0x0004)
    int32_t                                       MaxIterations;                                                // 0x0184(0x0004)
    enum class EBoneControlSpace                  EffectorTransformSpace;                                       // 0x0188(0x0001)
    enum class EBoneRotationSource                EffectorRotationSource;                                       // 0x0189(0x0001)
    char                                          pa_018A[0x0006]                                               // 0x018A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0128
struct FAnimNode : public FAnimNode
{
    FBoneReference                                RightHandFK;                                                  // 0x00D0(0x0010)
    FBoneReference                                LeftHandFK;                                                   // 0x00E0(0x0010)
    FBoneReference                                RightHandIK;                                                  // 0x00F0(0x0010)
    FBoneReference                                LeftHandIK;                                                   // 0x0100(0x0010)
    TArray<FBoneReference>                        IKBonesToMove;                                                // 0x0110(0x0010)
    float                                         HandFKWeight;                                                 // 0x0120(0x0004)
    char                                          pa_0124[0x0004]                                               // 0x0124(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    TArray<FPoseLink>                             BlendPoses;                                                   // 0x0020(0x0010)
    TArray<FInputBlendPose>                       LayerSetup;                                                   // 0x0030(0x0010)
    TArray<float>                                 BlendWeights;                                                 // 0x0040(0x0010)
    bool                                          bMeshSpaceRotationBlend;                                      // 0x0050(0x0001)
    bool                                          bMeshSpaceScaleBlend;                                         // 0x0051(0x0001)
    enum class ECurveBlendOption                  CurveBlendOption;                                             // 0x0052(0x0001)
    char                                          pa_0053[0x0001]                                               // 0x0053(0x0001)
    int32_t                                       DesiredCurveBlendIndex;                                       // 0x0054(0x0004)
    bool                                          bBlendRootMotionBasedOnRootBone;                              // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    int32_t                                       LODThreshold;                                                 // 0x005C(0x0004)
    TArray<FPerBoneBlendWeight>                   PerBoneBlendWeights;                                          // 0x0060(0x0010)
    FGuid                                         SkeletonGuid;                                                 // 0x0070(0x0010)
    FGuid                                         VirtualBoneGuid;                                              // 0x0080(0x0010)
    char                                          pa_0090[0x0030]                                               // 0x0090(0x0030)
};


// ScriptStruct  Engine.PerBoneBlendWeight
// Struct Size::0x0008
struct FPerBoneBlendWeight
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0100
struct FAnimNode : public FAnimNode
{
    float                                         ReachPrecision;                                               // 0x00D0(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00D4(0x0004)
    TArray<FAnimLegIKDefinition>                  LegsDefinition;                                               // 0x00D8(0x0010)
    char                                          pa_00E8[0x0018]                                               // 0x00E8(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKDefinition
// Struct Size::0x002C
struct FAnimLegIKDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
    float                                         MinRotationAngle;                                             // 0x0024(0x0004)
    enum class EAxis                              FootBoneForwardAxis;                                          // 0x0028(0x0001)
    enum class EAxis                              HingeRotationAxis;                                            // 0x0029(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x002A(0x0001)
    bool                                          bEnableKneeTwistCorrection;                                   // 0x002B(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKData
// Struct Size::0x00A0
struct FAnimLegIKData
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  AnimGraphRuntime.IKChain
// Struct Size::0x0038
struct FIKChain
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  AnimGraphRuntime.IKChainLink
// Struct Size::0x003C
struct FIKChainLink
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01B0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    FBoneSocketTarget                             LookAtTarget;                                                 // 0x00E0(0x0060)
    FVector                                       LookAtLocation;                                               // 0x0140(0x000C)
    FAxis                                         LookAt;                                                       // 0x014C(0x0010)
    bool                                          bUseLookUpAxis;                                               // 0x015C(0x0001)
    enum class EInterpolationBlend                InterpolationType;                                            // 0x015D(0x0001)
    char                                          pa_015E[0x0002]                                               // 0x015E(0x0002)
    FAxis                                         LookUp;                                                       // 0x0160(0x0010)
    float                                         LookAtClamp;                                                  // 0x0170(0x0004)
    float                                         InterpolationTime;                                            // 0x0174(0x0004)
    float                                         InterpolationTriggerThreashold;                               // 0x0178(0x0004)
    char                                          pa_017C[0x0034]                                               // 0x017C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0038
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    bool                                          bMeshSpaceAdditive;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0158
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToModify;                                                 // 0x00D0(0x0010)
    FVector                                       Translation;                                                  // 0x00E0(0x000C)
    FRotator                                      Rotation;                                                     // 0x00EC(0x000C)
    FVector                                       Scale;                                                        // 0x00F8(0x000C)
    enum class EBoneModificationMode              TranslationMode;                                              // 0x0104(0x0001)
    enum class EBoneModificationMode              RotationMode;                                                 // 0x0105(0x0001)
    enum class EBoneModificationMode              ScaleMode;                                                    // 0x0106(0x0001)
    enum class EBoneControlSpace                  TranslationSpace;                                             // 0x0107(0x0001)
    enum class EBoneControlSpace                  RotationSpace;                                                // 0x0108(0x0001)
    enum class EBoneControlSpace                  ScaleSpace;                                                   // 0x0109(0x0001)
    bool                                          bSkipEvaluateWhenBoneTransformUnchanged;                      // 0x010A(0x0001)
    char                                          pa_010B[0x0001]                                               // 0x010B(0x0001)
    FVector                                       ActualTranslation;                                            // 0x010C(0x000C)
    FRotator                                      ActualRotation;                                               // 0x0118(0x000C)
    FInputVInterp                                 TranslationInterp;                                            // 0x0124(0x0018)
    FInputRInterp                                 RotationInterp;                                               // 0x013C(0x0018)
    char                                          pa_0154[0x0004]                                               // 0x0154(0x0004)
};


// ScriptStruct  Engine.InputRInterp
// Struct Size::0x0018
struct FInputRInterp
{
    bool                                          bInterpResult;                                                // 0x0000(0x0001)
    bool                                          bConstInterp;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         InterpSpeedIncreasing;                                        // 0x0004(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
};


// ScriptStruct  Engine.InputVInterp
// Struct Size::0x0018
struct FInputVInterp
{
    bool                                          bInterpResult;                                                // 0x0000(0x0001)
    bool                                          bConstInterp;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         InterpSpeedIncreasing;                                        // 0x0004(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0090
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    TArray<float>                                 CurveValues;                                                  // 0x0020(0x0010)
    TArray<FName>                                 CurveNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    enum class EModifyCurveApplyMode              ApplyMode;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    float                                         ActualAlpha;                                                  // 0x0058(0x0004)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x005C(0x0030)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0050
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             Poses;                                                        // 0x0010(0x0010)
    TArray<float>                                 DesiredAlphas;                                                // 0x0020(0x0010)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0040(0x0008)
    bool                                          bAdditiveNode;                                                // 0x0048(0x0001)
    bool                                          bNormalizeAlpha;                                              // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0108
struct FAnimNode : public FAnimNode
{
    FBoneReference                                BoneToObserve;                                                // 0x00D0(0x0010)
    enum class EBoneControlSpace                  DisplaySpace;                                                 // 0x00E0(0x0001)
    bool                                          bRelativeToRefPose;                                           // 0x00E1(0x0001)
    char                                          pa_00E2[0x0002]                                               // 0x00E2(0x0002)
    FVector                                       Translation;                                                  // 0x00E4(0x000C)
    FRotator                                      Rotation;                                                     // 0x00F0(0x000C)
    FVector                                       Scale;                                                        // 0x00FC(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0168
struct FAnimNode : public FAnimNode
{
    UPoseAsset*                                   PoseAsset;                                                    // 0x0120(0x0008)
    char                                          pa_0128[0x0040]                                               // 0x0128(0x0040)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0188
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0168(0x0010)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0178(0x0001)
    char                                          pa_0179[0x0007]                                               // 0x0179(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0180(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0180
struct FAnimNode : public FAnimNode
{
    FName                                         PoseName;                                                     // 0x0168(0x0008)
    float                                         PoseWeight;                                                   // 0x0170(0x0004)
    char                                          pa_0174[0x000C]                                               // 0x0174(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0220
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0168(0x0010)
    TArray<FBoneReference>                        SourceBones;                                                  // 0x0178(0x0010)
    TArray<FBoneReference>                        OnlyDriveBones;                                               // 0x0188(0x0010)
    TArray<FPoseDriverTarget>                     PoseTargets;                                                  // 0x0198(0x0010)
    char                                          pa_01A8[0x0030]                                               // 0x01A8(0x0030)
    FBoneReference                                EvalSpaceBone;                                                // 0x01D8(0x0010)
    FRBFParams                                    RBFParams;                                                    // 0x01E8(0x002C)
    enum class EPoseDriverSource                  DriveSource;                                                  // 0x0214(0x0001)
    enum class EPoseDriverOutput                  DriveOutput;                                                  // 0x0215(0x0001)
    char                                          bOnlyDriveSelectedBones;                                      // 0x0216(0x0001)
    char                                          pa_0217[0x0001]                                               // 0x0217(0x0001)
    int32_t                                       LODThreshold;                                                 // 0x0218(0x0004)
    char                                          pa_021C[0x0004]                                               // 0x021C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.RBFParams
// Struct Size::0x002C
struct FRBFParams
{
    int32_t                                       TargetDimensions;                                             // 0x0000(0x0004)
    enum class ERBFSolverType                     SolverType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Radius;                                                       // 0x0008(0x0004)
    bool                                          bAutomaticRadius;                                             // 0x000C(0x0001)
    enum class ERBFFunctionType                   Function;                                                     // 0x000D(0x0001)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x000E(0x0001)
    enum class EBoneAxis                          TwistAxis;                                                    // 0x000F(0x0001)
    float                                         WeightThreshold;                                              // 0x0010(0x0004)
    enum class ERBFNormalizeMethod                NormalizeMethod;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       MedianReference;                                              // 0x0018(0x000C)
    float                                         MedianMin;                                                    // 0x0024(0x0004)
    float                                         MedianMax;                                                    // 0x0028(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTarget
// Struct Size::0x00C0
struct FPoseDriverTarget
{
    TArray<FPoseDriverTransform>                  BoneTransforms;                                               // 0x0000(0x0010)
    FRotator                                      TargetRotation;                                               // 0x0010(0x000C)
    float                                         TargetScale;                                                  // 0x001C(0x0004)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0020(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0021(0x0001)
    bool                                          bApplyCustomCurve;                                            // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
    FRichCurve                                    CustomCurve;                                                  // 0x0028(0x0080)
    FName                                         DrivenName;                                                   // 0x00A8(0x0008)
    char                                          pa_00B0[0x0008]                                               // 0x00B0(0x0008)
    bool                                          bIsHidden;                                                    // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTransform
// Struct Size::0x0018
struct FPoseDriverTransform
{
    FVector                                       TargetTranslation;                                            // 0x0000(0x000C)
    FRotator                                      TargetRotation;                                               // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0090
struct FAnimNode : public FAnimNode
{
    FName                                         SnapshotName;                                                 // 0x0010(0x0008)
    FPoseSnapshot                                 Snapshot;                                                     // 0x0018(0x0038)
    enum class ESnapshotSourceMode                Mode;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x003F]                                               // 0x0051(0x003F)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0078
struct FAnimNode : public FAnimNode
{
    TArray<FRandomPlayerSequenceEntry>            Entries;                                                      // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
    bool                                          bShuffleMode;                                                 // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  AnimGraphRuntime.RandomPlayerSequenceEntry
// Struct Size::0x0050
struct FRandomPlayerSequenceEntry
{
    UAnimSequence*                                Sequence;                                                     // 0x0000(0x0008)
    float                                         ChanceToPlay;                                                 // 0x0008(0x0004)
    int32_t                                       MinLoopCount;                                                 // 0x000C(0x0004)
    int32_t                                       MaxLoopCount;                                                 // 0x0010(0x0004)
    float                                         MinPlayRate;                                                  // 0x0014(0x0004)
    float                                         MaxPlayRate;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FAlphaBlend                                   BlendIn;                                                      // 0x0020(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0010
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0018
struct FAnimNode : public FAnimNode
{
    enum class ERefPoseType                       RefPoseType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00E0
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0010]                                               // 0x00D0(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x07A0
struct FAnimNode : public FAnimNode
{
    bool                                          bUseSelfPhysicsAssetIfExist;                                  // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
    UPhysicsAsset*                                OverridePhysicsAsset;                                         // 0x00D8(0x0008)
    char                                          pa_00E0[0x0098]                                               // 0x00E0(0x0098)
    FVector                                       OverrideWorldGravity;                                         // 0x0178(0x000C)
    FVector                                       ExternalForce;                                                // 0x0184(0x000C)
    FVector                                       ComponentLinearAccScale;                                      // 0x0190(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x019C(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x01A8(0x000C)
    FSimSpaceSettings                             SimSpaceSettings;                                             // 0x01B4(0x0040)
    float                                         CachedBoundsScale;                                            // 0x01F4(0x0004)
    FBoneReference                                BaseBoneRef;                                                  // 0x01F8(0x0010)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0208(0x0001)
    enum class ESimulationSpace                   SimulationSpace;                                              // 0x0209(0x0001)
    bool                                          bForceDisableCollisionBetweenConstraintBodies;                // 0x020A(0x0001)
    char                                          pa_020B[0x0001]                                               // 0x020B(0x0001)
    char                                          bEnableWorldGeometry;                                         // 0x020C(0x0001)
    char                                          bOverrideWorldGravity;                                        // 0x020C(0x0001)
    char                                          bTransferBoneVelocities;                                      // 0x020C(0x0001)
    char                                          bFreezeIncomingPoseOnStart;                                   // 0x020C(0x0001)
    char                                          bClampLinearTranslationLimitToRefPose;                        // 0x020C(0x0001)
    char                                          pa_020D[0x0003]                                               // 0x020D(0x0003)
    float                                         WorldSpaceMinimumScale;                                       // 0x0210(0x0004)
    float                                         EvaluationResetTime;                                          // 0x0214(0x0004)
    char                                          bEnableExternalCollision;                                     // 0x0218(0x0001)
    char                                          pa_0219[0x0003]                                               // 0x0219(0x0003)
    FBoneReference                                ExternalCollisionBone;                                        // 0x021C(0x0010)
    char                                          pa_022C[0x0004]                                               // 0x022C(0x0004)
    USkeletalMeshComponent*                       ExternalCollisionTarget;                                      // 0x0230(0x0008)
    USkeletalMeshComponent*                       ExternalCollisionTargetCached;                                // 0x0238(0x0008)
    char                                          pa_0240[0x0058]                                               // 0x0240(0x0058)
    TArray<FRefPoseLimit>                         RefPoseLimits;                                                // 0x0298(0x0010)
    char                                          EffectBodyIndex;                                              // 0x02A8(0x0001)
    char                                          pa_02A9[0x0003]                                               // 0x02A9(0x0003)
    FPostPhysicsClampSettings                     WorldSpaceCorrection;                                         // 0x02AC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x02BC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x02CC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x02DC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x02EC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x02FC(0x0010)
    FPostPhysicsClampSettings                     LocalSpaceCorrection;                                         // 0x030C(0x0010)
    bool                                          bLimitLinearVelocity;                                         // 0x031C(0x0001)
    char                                          pa_031D[0x0003]                                               // 0x031D(0x0003)
    FVector                                       MaxLinearVelocity;                                            // 0x0320(0x000C)
    bool                                          bLimitAngularVelocity;                                        // 0x032C(0x0001)
    char                                          pa_032D[0x0003]                                               // 0x032D(0x0003)
    FVector                                       MaxAngularVelocity;                                           // 0x0330(0x000C)
    bool                                          bPrintTransformAfterPhysics;                                  // 0x033C(0x0001)
    char                                          PrintBodyIndex;                                               // 0x033D(0x0001)
    bool                                          bEnableDebug;                                                 // 0x033E(0x0001)
    char                                          pa_033F[0x0461]                                               // 0x033F(0x0461)
};


// ScriptStruct  AnimGraphRuntime.PostPhysicsClampSettings
// Struct Size::0x0010
struct FPostPhysicsClampSettings
{
    char                                          bEnableCorrection;                                            // 0x0000(0x0001)
    char                                          bEnableCorrection;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinValue;                                                     // 0x0004(0x0004)
    float                                         MaxValue;                                                     // 0x0008(0x0004)
    float                                         RangeValue;                                                   // 0x000C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.RefPoseLimit
// Struct Size::0x0050
struct FRefPoseLimit
{
    FBoneReference                                TargetBone;                                                   // 0x0000(0x0010)
    bool                                          bConstraintTranslation;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       TranslationLimitMin;                                          // 0x0014(0x000C)
    FVector                                       TranslationLimitMax;                                          // 0x0020(0x000C)
    bool                                          bConstraintRotation;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FVector                                       RotationLimitMin;                                             // 0x0030(0x000C)
    FVector                                       RotationLimitMax;                                             // 0x003C(0x000C)
    bool                                          bEnableSoftConstraint;                                        // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         Stiffness;                                                    // 0x004C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.SimSpaceSettings
// Struct Size::0x0040
struct FSimSpaceSettings
{
    float                                         MasterAlpha;                                                  // 0x0000(0x0004)
    float                                         VelocityScaleZ;                                               // 0x0004(0x0004)
    float                                         MaxLinearVelocity;                                            // 0x0008(0x0004)
    float                                         MaxAngularVelocity;                                           // 0x000C(0x0004)
    float                                         MaxLinearAcceleration;                                        // 0x0010(0x0004)
    float                                         MaxAngularAcceleration;                                       // 0x0014(0x0004)
    float                                         ExternalLinearDrag;                                           // 0x0018(0x0004)
    FVector                                       ExternalLinearDragV;                                          // 0x001C(0x000C)
    FVector                                       ExternalLinearVelocity;                                       // 0x0028(0x000C)
    FVector                                       ExternalAngularVelocity;                                      // 0x0034(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    float                                         Pitch;                                                        // 0x0020(0x0004)
    float                                         Yaw;                                                          // 0x0024(0x0004)
    FInputScaleBiasClamp                          PitchScaleBiasClamp;                                          // 0x0028(0x0030)
    FInputScaleBiasClamp                          YawScaleBiasClamp;                                            // 0x0058(0x0030)
    FRotator                                      MeshToComponent;                                              // 0x0088(0x000C)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    FBoneReference                                TargetBone;                                                   // 0x00D0(0x0010)
    FBoneReference                                SourceBone;                                                   // 0x00E0(0x0010)
    float                                         Multiplier;                                                   // 0x00F0(0x0004)
    enum class EBoneAxis                          RotationAxisToRefer;                                          // 0x00F4(0x0001)
    bool                                          bIsAdditive;                                                  // 0x00F5(0x0001)
    char                                          pa_00F6[0x0002]                                               // 0x00F6(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x02B0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     BasePose;                                                     // 0x0208(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0218(0x0004)
    float                                         Alpha;                                                        // 0x021C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0220(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0228(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0270(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0278(0x0030)
    char                                          pa_02A8[0x0004]                                               // 0x02A8(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x02AC(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x02AD(0x0001)
    char                                          pa_02AE[0x0002]                                               // 0x02AE(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0078
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    float                                         DefaultChainLength;                                           // 0x0020(0x0004)
    FBoneReference                                ChainStartBone;                                               // 0x0024(0x0010)
    FBoneReference                                ChainEndBone;                                                 // 0x0034(0x0010)
    FVector                                       TargetLocation;                                               // 0x0044(0x000C)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EScaleChainInitialLength           ChainInitialLength;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0017]                                               // 0x0061(0x0017)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0140
struct FAnimNode : public FAnimNode
{
    UAnimSequenceBase*                            Sequence;                                                     // 0x0120(0x0008)
    float                                         ExplicitTime;                                                 // 0x0128(0x0004)
    bool                                          bShouldLoop;                                                  // 0x012C(0x0001)
    bool                                          bTeleportToExplicitTime;                                      // 0x012D(0x0001)
    enum class ESequenceEvalReinit                ReinitializationBehavior;                                     // 0x012E(0x0001)
    char                                          pa_012F[0x0001]                                               // 0x012F(0x0001)
    float                                         StartPosition;                                                // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    UAnimSequenceBase*                            LastPlayAnimSeq;                                              // 0x0138(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0048
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    FName                                         SlotName;                                                     // 0x0020(0x0008)
    bool                                          bAlwaysUpdateSourcePose;                                      // 0x0028(0x0001)
    char                                          pa_0029[0x001F]                                               // 0x0029(0x001F)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0278
struct FAnimNode : public FAnimNode
{
    FBoneReference                                StartBone;                                                    // 0x00D0(0x0010)
    FBoneReference                                EndBone;                                                      // 0x00E0(0x0010)
    enum class ESplineBoneAxis                    BoneAxis;                                                     // 0x00F0(0x0001)
    bool                                          bAutoCalculateSpline;                                         // 0x00F1(0x0001)
    char                                          pa_00F2[0x0002]                                               // 0x00F2(0x0002)
    int32_t                                       PointCount;                                                   // 0x00F4(0x0004)
    TArray<FTransform>                            ControlPoints;                                                // 0x00F8(0x0010)
    float                                         Roll;                                                         // 0x0108(0x0004)
    float                                         TwistStart;                                                   // 0x010C(0x0004)
    float                                         TwistEnd;                                                     // 0x0110(0x0004)
    char                                          pa_0114[0x0004]                                               // 0x0114(0x0004)
    FAlphaBlend                                   TwistBlend;                                                   // 0x0118(0x0030)
    float                                         Stretch;                                                      // 0x0148(0x0004)
    float                                         Offset;                                                       // 0x014C(0x0004)
    char                                          pa_0150[0x0128]                                               // 0x0150(0x0128)
};


// ScriptStruct  AnimGraphRuntime.SplineIKCachedBoneData
// Struct Size::0x0014
struct FSplineIKCachedBoneData
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0010)
    int32_t                                       RefSkeletonIndex;                                             // 0x0010(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0130
struct FAnimNode : public FAnimNode
{
    FBoneReference                                SpringBone;                                                   // 0x00D0(0x0010)
    float                                         MaxDisplacement;                                              // 0x00E0(0x0004)
    float                                         SpringStiffness;                                              // 0x00E4(0x0004)
    float                                         SpringDamping;                                                // 0x00E8(0x0004)
    float                                         ErrorResetThresh;                                             // 0x00EC(0x0004)
    char                                          pa_00F0[0x003C]                                               // 0x00F0(0x003C)
    char                                          bLimitDisplacement;                                           // 0x012C(0x0001)
    char                                          bTranslateX;                                                  // 0x012C(0x0001)
    char                                          bTranslateY;                                                  // 0x012C(0x0001)
    char                                          bTranslateZ;                                                  // 0x012C(0x0001)
    char                                          bRotateX;                                                     // 0x012C(0x0001)
    char                                          bRotateY;                                                     // 0x012C(0x0001)
    char                                          bRotateZ;                                                     // 0x012C(0x0001)
    char                                          pa_012D[0x0003]                                               // 0x012D(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Result;                                                       // 0x0010(0x0010)
    FName                                         Name;                                                         // 0x0020(0x0008)
    FName                                         Group;                                                        // 0x0028(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0260
struct FAnimNode : public FAnimNode
{
    char                                          pa_00D0[0x0030]                                               // 0x00D0(0x0030)
    FBoneReference                                TrailBone;                                                    // 0x0100(0x0010)
    int32_t                                       ChainLength;                                                  // 0x0110(0x0004)
    enum class EAxis                              ChainBoneAxis;                                                // 0x0114(0x0001)
    char                                          bInvertChainBoneAxis;                                         // 0x0115(0x0001)
    char                                          bLimitStretch;                                                // 0x0115(0x0001)
    char                                          bLimitRotation;                                               // 0x0115(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0115(0x0001)
    char                                          bActorSpaceFakeVel;                                           // 0x0115(0x0001)
    char                                          bReorientParentToChild;                                       // 0x0115(0x0001)
    char                                          pa_0116[0x0002]                                               // 0x0116(0x0002)
    float                                         MaxDeltaTime;                                                 // 0x0118(0x0004)
    float                                         RelaxationSpeedScale;                                         // 0x011C(0x0004)
    FRuntimeFloatCurve                            TrailRelaxationSpeed;                                         // 0x0120(0x0088)
    FInputScaleBiasClamp                          RelaxationSpeedScaleInputProcessor;                           // 0x01A8(0x0030)
    TArray<FRotationLimit>                        RotationLimits;                                               // 0x01D8(0x0010)
    TArray<FVector>                               RotationOffsets;                                              // 0x01E8(0x0010)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x01F8(0x0010)
    float                                         StretchLimit;                                                 // 0x0208(0x0004)
    FVector                                       FakeVelocity;                                                 // 0x020C(0x000C)
    FBoneReference                                BaseJoint;                                                    // 0x0218(0x0010)
    float                                         LastBoneRotationAnimAlphaBlend;                               // 0x0228(0x0004)
    char                                          pa_022C[0x0034]                                               // 0x022C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.RotationLimit
// Struct Size::0x0018
struct FRotationLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x0140
struct FAnimNode : public FAnimNode
{
    FReferenceBoneFrame                           BaseFrame;                                                    // 0x00D0(0x0020)
    FReferenceBoneFrame                           TwistFrame;                                                   // 0x00F0(0x0020)
    FAxis                                         TwistPlaneNormalAxis;                                         // 0x0110(0x0010)
    float                                         RangeMax;                                                     // 0x0120(0x0004)
    float                                         RemappedMin;                                                  // 0x0124(0x0004)
    float                                         RemappedMax;                                                  // 0x0128(0x0004)
    FAnimCurveParam                               Curve;                                                        // 0x012C(0x000C)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  Engine.AnimCurveParam
// Struct Size::0x000C
struct FAnimCurveParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  AnimGraphRuntime.ReferenceBoneFrame
// Struct Size::0x0020
struct FReferenceBoneFrame
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0010)
    FAxis                                         Axis;                                                         // 0x0010(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x01F0
struct FAnimNode : public FAnimNode
{
    FBoneReference                                IKBone;                                                       // 0x00D0(0x0010)
    float                                         StartStretchRatio;                                            // 0x00E0(0x0004)
    float                                         MaxStretchScale;                                              // 0x00E4(0x0004)
    FVector                                       EffectorLocation;                                             // 0x00E8(0x000C)
    char                                          pa_00F4[0x000C]                                               // 0x00F4(0x000C)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0060)
    FVector                                       JointTargetLocation;                                          // 0x0160(0x000C)
    char                                          pa_016C[0x0004]                                               // 0x016C(0x0004)
    FBoneSocketTarget                             JointTarget;                                                  // 0x0170(0x0060)
    FAxis                                         TwistAxis;                                                    // 0x01D0(0x0010)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x01E0(0x0001)
    enum class EBoneControlSpace                  JointTargetLocationSpace;                                     // 0x01E1(0x0001)
    char                                          bAllowStretching;                                             // 0x01E2(0x0001)
    char                                          bTakeRotationFromEffectorSpace;                               // 0x01E2(0x0001)
    char                                          bMaintainEffectorRelRot;                                      // 0x01E2(0x0001)
    char                                          bAllowTwist;                                                  // 0x01E2(0x0001)
    char                                          pa_01E3[0x000D]                                               // 0x01E3(0x000D)
};


// ScriptStruct  AnimGraphRuntime.AnimNode
// Struct Size::0x00C8
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0031(0x0001)
    char                                          bResetChildOnActivation;                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0038(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0004]                                               // 0x00C0(0x0004)
    int32_t                                       LODThreshold;                                                 // 0x00C4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PositionHistory
// Struct Size::0x0030
struct FPositionHistory
{
    TArray<FVector>                               Positions;                                                    // 0x0000(0x0010)
    float                                         Range;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x001C]                                               // 0x0014(0x001C)
};


// ScriptStruct  AnimGraphRuntime.RBFEntry
// Struct Size::0x0010
struct FRBFEntry
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.RBFTarget
// Struct Size::0x00A0
struct FRBFTarget : public FRBFEntry
{
    float                                         ScaleFactor;                                                  // 0x0010(0x0004)
    bool                                          bApplyCustomCurve;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRichCurve                                    CustomCurve;                                                  // 0x0018(0x0080)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0098(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DPathSectionTemplate
// Struct Size::0x00E0
struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    PathBindingID;                                                // 0x0020(0x0018)
    FMovieSceneFloatChannel                       TimingCurve;                                                  // 0x0038(0x00A0)
    enum class MovieScene3DPathSection            FrontAxisEnum;                                                // 0x00D8(0x0001)
    enum class MovieScene3DPathSection            UpAxisEnum;                                                   // 0x00D9(0x0001)
    char                                          pa_00DA[0x0002]                                               // 0x00DA(0x0002)
    char                                          bFollow;                                                      // 0x00DC(0x0001)
    char                                          bReverse;                                                     // 0x00DC(0x0001)
    char                                          bForceUpright;                                                // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneTransformMask
// Struct Size::0x0004
struct FMovieSceneTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformKeyStruct
// Struct Size::0x0048
struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FRotator                                      Rotation;                                                     // 0x0014(0x000C)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    FFrameNumber                                  Time;                                                         // 0x002C(0x0004)
    char                                          pa_0030[0x0018]                                               // 0x0030(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DScaleKeyStruct
// Struct Size::0x0030
struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Scale;                                                        // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DRotationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
{
    FRotator                                      Rotation;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DLocationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformTemplateData
// Struct Size::0x0650
struct FMovieScene3DTransformTemplateData
{
    FMovieSceneFloatChannel                       TranslationCurve;                                             // 0x0000(0x00A0)
    char                                          pa_00A0[0x0140]                                               // 0x00A0(0x0140)
    FMovieSceneFloatChannel                       RotationCurve;                                                // 0x01E0(0x00A0)
    char                                          pa_0280[0x0140]                                               // 0x0280(0x0140)
    FMovieSceneFloatChannel                       ScaleCurve;                                                   // 0x03C0(0x00A0)
    char                                          pa_0460[0x0140]                                               // 0x0460(0x0140)
    FMovieSceneFloatChannel                       ManualWeight;                                                 // 0x05A0(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0640(0x0001)
    char                                          pa_0641[0x0003]                                               // 0x0641(0x0003)
    FMovieSceneTransformMask                      Mask;                                                         // 0x0644(0x0004)
    bool                                          bUseQuaternionInterpolation;                                  // 0x0648(0x0001)
    char                                          pa_0649[0x0007]                                               // 0x0649(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceData
// Struct Size::0x00B0
struct FMovieSceneActorReferenceData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    char                                          pa_0018[0x0028]                                               // 0x0018(0x0028)
    TArray<FMovieSceneActorReferenceKey>          KeyValues;                                                    // 0x0040(0x0010)
    char                                          pa_0050[0x0060]                                               // 0x0050(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceKey
// Struct Size::0x0028
struct FMovieSceneActorReferenceKey
{
    FMovieSceneObjectBindingID                    Object;                                                       // 0x0000(0x0018)
    FName                                         ComponentName;                                                // 0x0018(0x0008)
    FName                                         SocketName;                                                   // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
// Struct Size::0x00E8
struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0018)
    FMovieSceneActorReferenceData                 ActorReferenceData;                                           // 0x0038(0x00B0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAudioSectionTemplate
// Struct Size::0x0028
struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAudioSection*                      AudioSection;                                                 // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionData
// Struct Size::0x0020
struct FMovieSceneCameraAnimSectionData
{
    UCameraAnim*                                  CameraAnim;                                                   // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         PlayScale;                                                    // 0x000C(0x0004)
    float                                         BlendInTime;                                                  // 0x0010(0x0004)
    float                                         BlendOutTime;                                                 // 0x0014(0x0004)
    bool                                          bLooping;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
// Struct Size::0x0020
struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionData
// Struct Size::0x0020
struct FMovieSceneCameraShakeSectionData
{
    UMatineeCameraShake*                          ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{
    FMovieSceneCameraAnimSectionData              SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
// Struct Size::0x0088
struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
// Struct Size::0x0020
struct FMovieSceneCameraShakeSourceTrigger
{
    UCameraShakeBase*                             ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraShakePlaySpace              PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
// Struct Size::0x0040
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FFrameNumber>                          triggertimes;                                                 // 0x0020(0x0010)
    TArray<FMovieSceneCameraShakeSourceTrigger>   TriggerValues;                                                // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorKeyStruct
// Struct Size::0x0038
struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    FFrameNumber                                  Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x001C]                                               // 0x001C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorSectionTemplate
// Struct Size::0x02C0
struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       Curves;                                                       // 0x0038(0x00A0)
    char                                          pa_00D8[0x01E0]                                               // 0x00D8(0x01E0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02B8(0x0001)
    char                                          pa_02B9[0x0007]                                               // 0x02B9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEvent
// Struct Size::0x0028
struct FMovieSceneEvent
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPtrs
// Struct Size::0x0028
struct FMovieSceneEventPtrs
{
    UFunction*                                    Function;                                                     // 0x0000(0x0008)
    BoundObjectProperty                           BoundObjectProperty;                                          // 0x0008(0x0020)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPayloadVariable
// Struct Size::0x0010
struct FMovieSceneEventPayloadVariable
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventChannel
// Struct Size::0x0088
struct FMovieSceneEventChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneEvent>                      KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionData
// Struct Size::0x0088
struct FMovieSceneEventSectionData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FEventPayload>                         KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.EventPayload
// Struct Size::0x0030
struct FEventPayload
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
    FMovieSceneEventParameters                    Parameters;                                                   // 0x0008(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventParameters
// Struct Size::0x0028
struct FMovieSceneEventParameters
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventTriggerData
// Struct Size::0x0048
struct FMovieSceneEventTriggerData
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
    FGuid                                         ObjectBindingID;                                              // 0x0028(0x0010)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionTemplate
// Struct Size::0x00B0
struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneEventSectionData                   EventData;                                                    // 0x0020(0x0088)
    char                                          bFireEventsWhenForwards;                                      // 0x00A8(0x0001)
    char                                          bFireEventsWhenBackwards;                                     // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFadeSectionTemplate
// Struct Size::0x00D8
struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       FadeCurve;                                                    // 0x0020(0x00A0)
    FLinearColor                                  FadeColor;                                                    // 0x00C0(0x0010)
    char                                          bFadeAudio;                                                   // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
// Struct Size::0x0088
struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
{
    UMaterialParameterCollection*                 MPC;                                                          // 0x0080(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneObjectPropertyTemplate
// Struct Size::0x00F8
struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneObjectPathChannel                  ObjectChannel;                                                // 0x0038(0x00C0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
// Struct Size::0x0088
struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleChannel
// Struct Size::0x0098
struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleSectionTemplate
// Struct Size::0x00B8
struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneParticleChannel                    ParticleKeys;                                                 // 0x0020(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
// Struct Size::0x00E8
struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMovieSceneObjectPathChannel                  MaterialChannel;                                              // 0x0028(0x00C0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
// Struct Size::0x02C0
struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       ComponentCurves;                                              // 0x0038(0x00A0)
    char                                          pa_00D8[0x01E0]                                               // 0x00D8(0x01E0)
    int32_t                                       NumChannelsUsed;                                              // 0x02B8(0x0004)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02BC(0x0001)
    char                                          pa_02BD[0x0003]                                               // 0x02BD(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringPropertySectionTemplate
// Struct Size::0x00D8
struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneStringChannel                      StringCurve;                                                  // 0x0038(0x00A0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringChannel
// Struct Size::0x00A0
struct FMovieSceneStringChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FString>                               Values;                                                       // 0x0018(0x0010)
    FString                                       DefaultValue;                                                 // 0x0028(0x0010)
    bool                                          bHasDefaultValue;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0067]                                               // 0x0039(0x0067)
};


// ScriptStruct  MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
// Struct Size::0x00D0
struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneIntegerChannel                     IntegerCurve;                                                 // 0x0038(0x0090)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x00C8(0x0001)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
// Struct Size::0x00D0
struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneByteChannel                        EnumCurve;                                                    // 0x0038(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBytePropertySectionTemplate
// Struct Size::0x00D0
struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneByteChannel                        ByteCurve;                                                    // 0x0038(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
// Struct Size::0x00C8
struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneBoolChannel                        BoolCurve;                                                    // 0x0038(0x0090)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationParams
// Struct Size::0x00D8
struct FMovieSceneSkeletalAnimationParams
{
    UAnimSequenceBase*                            Animation;                                                    // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         SlotName;                                                     // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0028(0x00A0)
    bool                                          bSkipAnimNotifiers;                                           // 0x00C8(0x0001)
    bool                                          bForceCustomMode;                                             // 0x00C9(0x0001)
    char                                          pa_00CA[0x0002]                                               // 0x00CA(0x0002)
    float                                         StartOffset;                                                  // 0x00CC(0x0004)
    float                                         EndOffset;                                                    // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
// Struct Size::0x0100
struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneSkeletalAnimationSectionTemplateParametersParams;                                                // 0x0020(0x00E0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
// Struct Size::0x00E0
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x00D8(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x00DC(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
// Struct Size::0x0030
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSlomoSectionTemplate
// Struct Size::0x00C0
struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       SlomoCurve;                                                   // 0x0020(0x00A0)
};


// ScriptStruct  MovieSceneTracks.LevelVisibilityComponentData
// Struct Size::0x0008
struct FLevelVisibilityComponentData
{
    UMovieSceneLevelVisibilitySection*            Section;                                                      // 0x0000(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStructBase
// Struct Size::0x0028
struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector4KeyStruct
// Struct Size::0x0040
struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4                                      Vector;                                                       // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStruct
// Struct Size::0x0038
struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector                                       Vector;                                                       // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector2DKeyStruct
// Struct Size::0x0030
struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector2D                                     Vector;                                                       // 0x0028(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVisibilitySectionTemplate
// Struct Size::0x00C8
struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
{
};


// ScriptStruct  PropertyPath.CachedPropertyPath
// Struct Size::0x0028
struct FCachedPropertyPath
{
    TArray<FPropertyPathSegment>                  Segments;                                                     // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    UFunction*                                    CachedFunction;                                               // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  PropertyPath.PropertyPathSegment
// Struct Size::0x0028
struct FPropertyPathSegment
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      Struct;                                                       // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  UMG.AnchorData
// Struct Size::0x0028
struct FAnchorData
{
    FMargin                                       Offsets;                                                      // 0x0000(0x0010)
    FAnchors                                      Anchors;                                                      // 0x0010(0x0010)
    FVector2D                                     Alignment;                                                    // 0x0020(0x0008)
};


// ScriptStruct  UMG.DynamicPropertyPath
// Struct Size::0x0028
struct FDynamicPropertyPath : public FCachedPropertyPath
{
};


// ScriptStruct  UMG.MovieScene2DTransformMask
// Struct Size::0x0004
struct FMovieScene2DTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UMG.MovieSceneMarginSectionTemplate
// Struct Size::0x02C0
struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       TopCurve;                                                     // 0x0038(0x00A0)
    FMovieSceneFloatChannel                       LeftCurve;                                                    // 0x00D8(0x00A0)
    FMovieSceneFloatChannel                       RightCurve;                                                   // 0x0178(0x00A0)
    FMovieSceneFloatChannel                       BottomCurve;                                                  // 0x0218(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02B8(0x0001)
    char                                          pa_02B9[0x0007]                                               // 0x02B9(0x0007)
};


// ScriptStruct  UMG.MovieSceneWidgetMaterialSectionTemplate
// Struct Size::0x0090
struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FName>                                 BrushPropertyNamePath;                                        // 0x0080(0x0010)
};


// ScriptStruct  UMG.RadialBoxSettings
// Struct Size::0x000C
struct FRadialBoxSettings
{
    bool                                          bDistributeItemsEvenly;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AngleBetweenItems;                                            // 0x0004(0x0004)
    float                                         StartingAngle;                                                // 0x0008(0x0004)
};


// ScriptStruct  UMG.RichTextStyleRow
// Struct Size::0x0298
struct FRichTextStyleRow : public FTableRowBase
{
    FTextBlockStyle                               TextStyle;                                                    // 0x0008(0x0290)
};


// ScriptStruct  UMG.RichImageRow
// Struct Size::0x0098
struct FRichImageRow : public FTableRowBase
{
    FSlateBrush                                   Brush;                                                        // 0x0008(0x0090)
};


// ScriptStruct  UMG.SlateMeshVertex
// Struct Size::0x003C
struct FSlateMeshVertex
{
    FVector2D                                     position;                                                     // 0x0000(0x0008)
    FColor                                        Color;                                                        // 0x0008(0x0004)
    FVector2D                                     UV0;                                                          // 0x000C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0014(0x0008)
    FVector2D                                     UV2;                                                          // 0x001C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0024(0x0008)
    FVector2D                                     UV4;                                                          // 0x002C(0x0008)
    FVector2D                                     UV5;                                                          // 0x0034(0x0008)
};


// ScriptStruct  UMG.SlateChildSize
// Struct Size::0x0008
struct FSlateChildSize
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ESlateSizeRule                     SizeRule;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UMG.UserWidgetPool
// Struct Size::0x0080
struct FUserWidgetPool
{
    TArray<UUserWidget*>                          ActiveWidgets;                                                // 0x0000(0x0010)
    TArray<UUserWidget*>                          InactiveWidgets;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0060]                                               // 0x0020(0x0060)
};


// ScriptStruct  UMG.WidgetAnimationBinding
// Struct Size::0x0024
struct FWidgetAnimationBinding
{
    FName                                         WidgetName;                                                   // 0x0000(0x0008)
    FName                                         SlotWidgetName;                                               // 0x0008(0x0008)
    FGuid                                         AnimationGuid;                                                // 0x0010(0x0010)
    bool                                          bIsRootWidget;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  UMG.BlueprintWidgetAnimationDelegateBinding
// Struct Size::0x001C
struct FBlueprintWidgetAnimationDelegateBinding
{
    enum class EWidgetAnimationEvent              Action;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         AnimationToBind;                                              // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
    FName                                         UserTag;                                                      // 0x0014(0x0008)
};


// ScriptStruct  UMG.DelegateRuntimeBinding
// Struct Size::0x0050
struct FDelegateRuntimeBinding
{
    FString                                       ObjectName;                                                   // 0x0000(0x0010)
    FName                                         PropertyName;                                                 // 0x0010(0x0008)
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    FDynamicPropertyPath                          SourcePath;                                                   // 0x0020(0x0028)
    enum class EBindingKind                       Kind;                                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.ActorComponentInstanceData
// Struct Size::0x0068
struct FActorComponentInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      SourceComponentTemplate;                                      // 0x0008(0x0008)
    enum class EComponentCreationMethod           SourceComponentCreationMethod;                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       SourceComponentTypeSerializedIndex;                           // 0x0014(0x0004)
    TArray<char>                                  SavedProperties;                                              // 0x0018(0x0010)
    FActorComponentDuplicatedObjectData           UniqueTransientPackage;                                       // 0x0028(0x0010)
    TArray<FActorComponentDuplicatedObjectData>   DuplicatedObjects;                                            // 0x0038(0x0010)
    TArray<UObject*>                              ReferencedObjects;                                            // 0x0048(0x0010)
    TArray<FName>                                 ReferencedNames;                                              // 0x0058(0x0010)
};


// ScriptStruct  Engine.ActorComponentDuplicatedObjectData
// Struct Size::0x0010
struct FActorComponentDuplicatedObjectData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.SceneComponentInstanceData
// Struct Size::0x00B8
struct FSceneComponentInstanceData : public FActorComponentInstanceData
{
    TMap<USceneComponent*,FTransform>             AttachedInstanceComponents;                                   // 0x0068(0x0050)
};


// ScriptStruct  UMG.WidgetComponentInstanceData
// Struct Size::0x00C8
struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0010]                                               // 0x00B8(0x0010)
};


// ScriptStruct  UMG.WidgetNavigationData
// Struct Size::0x0024
struct FWidgetNavigationData
{
    enum class EUINavigationRule                  Rule;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         WidgetToFocus;                                                // 0x0004(0x0008)
    TWeakObjectPtr<UWidget>                       Widget;                                                       // 0x000C(0x0008)
    FDelegate                                     CustomDelegate;                                               // 0x0014(0x0010)
};


// ScriptStruct  UMG.LazyLoadBinding
// Struct Size::0x0020
struct FLazyLoadBinding
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    TWeakObjectPtr<UPanelSlot>                    PanelSlot;                                                    // 0x0010(0x0008)
    enum class ESlateVisibility                   Visibility;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  CinematicCamera.CameraLookatTrackingSettings
// Struct Size::0x0050
struct FCameraLookatTrackingSettings
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bDrawDebugLookAtTrackingPosition;                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LookAtTrackingInterpSpeed;                                    // 0x0004(0x0004)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0018(0x0028)
    FVector                                       RelativeOffset;                                               // 0x0040(0x000C)
    char                                          bAllowRoll;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  CinematicCamera.CameraFocusSettings
// Struct Size::0x0058
struct FCameraFocusSettings
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
    FCameraTrackingFocusSettings                  TrackingFocusSettings;                                        // 0x0008(0x0038)
    char                                          bDrawDebugFocusPlane;                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FColor                                        DebugFocusPlaneColor;                                         // 0x0044(0x0004)
    char                                          bSmoothFocusChanges;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         FocusSmoothingInterpSpeed;                                    // 0x004C(0x0004)
    float                                         FocusOffset;                                                  // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  CinematicCamera.CameraTrackingFocusSettings
// Struct Size::0x0038
struct FCameraTrackingFocusSettings
{
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0000(0x0028)
    FVector                                       RelativeOffset;                                               // 0x0028(0x000C)
    char                                          bDrawDebugTrackingFocusPoint;                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CinematicCamera.NamedLensPreset
// Struct Size::0x0028
struct FNamedLensPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraLensSettings                           LensSettings;                                                 // 0x0010(0x0018)
};


// ScriptStruct  CinematicCamera.CameraLensSettings
// Struct Size::0x0018
struct FCameraLensSettings
{
    float                                         MinFocalLength;                                               // 0x0000(0x0004)
    float                                         MaxFocalLength;                                               // 0x0004(0x0004)
    float                                         MinFStop;                                                     // 0x0008(0x0004)
    float                                         MaxFStop;                                                     // 0x000C(0x0004)
    float                                         MinimumFocusDistance;                                         // 0x0010(0x0004)
    int32_t                                       DiaphragmBladeCount;                                          // 0x0014(0x0004)
};


// ScriptStruct  CinematicCamera.NamedFilmbackPreset
// Struct Size::0x0020
struct FNamedFilmbackPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraFilmbackSettings                       FilmbackSettings;                                             // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CinematicCamera.CameraFilmbackSettings
// Struct Size::0x000C
struct FCameraFilmbackSettings
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
    float                                         SensorAspectRatio;                                            // 0x0008(0x0004)
};


// ScriptStruct  AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
// Struct Size::0x0010
struct FPlatformRuntimeAudioCompressionOverrides
{
    bool                                          bOverrideCompressionTimes;                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DurationThreshold;                                            // 0x0004(0x0004)
    int32_t                                       MaxNumRandomBranches;                                         // 0x0008(0x0004)
    int32_t                                       SoundCueQualityIndex;                                         // 0x000C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicsProcessorSettings
// Struct Size::0x0050
struct FSubmixEffectDynamicsProcessorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    enum class ESubmixEffectDynamicsChannelLinkModeLinkMode;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         InputGainDb;                                                  // 0x0004(0x0004)
    float                                         ThresholdDb;                                                  // 0x0008(0x0004)
    float                                         Ratio;                                                        // 0x000C(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0010(0x0004)
    float                                         LookAheadMsec;                                                // 0x0014(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0018(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x001C(0x0004)
    USoundSubmix*                                 ExternalSubmix;                                               // 0x0020(0x0008)
    char                                          bChannelLinked;                                               // 0x0028(0x0001)
    char                                          bAnalogMode;                                                  // 0x0028(0x0001)
    char                                          bKeyAudition;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         KeyGainDb;                                                    // 0x002C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0030(0x0004)
    FSubmixEffectDynamicProcessorFilterSettings   KeyHighshelf;                                                 // 0x0034(0x000C)
    FSubmixEffectDynamicProcessorFilterSettings   KeyLowshelf;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicProcessorFilterSettings
// Struct Size::0x000C
struct FSubmixEffectDynamicProcessorFilterSettings
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Cutoff;                                                       // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectSubmixEQSettings
// Struct Size::0x0010
struct FSubmixEffectSubmixEQSettings
{
    TArray<FSubmixEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  AudioMixer.SubmixEffectEQBand
// Struct Size::0x0010
struct FSubmixEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AudioMixer.SubmixEffectReverbSettings
// Struct Size::0x0040
struct FSubmixEffectReverbSettings
{
    bool                                          bBypassEarlyReflections;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ReflectionsDelay;                                             // 0x0004(0x0004)
    float                                         GainHF;                                                       // 0x0008(0x0004)
    float                                         ReflectionsGain;                                              // 0x000C(0x0004)
    bool                                          bBypassLateReflections;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LateDelay;                                                    // 0x0014(0x0004)
    float                                         DecayTime;                                                    // 0x0018(0x0004)
    float                                         Density;                                                      // 0x001C(0x0004)
    float                                         Diffusion;                                                    // 0x0020(0x0004)
    float                                         AirAbsorptionGainHF;                                          // 0x0024(0x0004)
    float                                         DecayHFRatio;                                                 // 0x0028(0x0004)
    float                                         LateGain;                                                     // 0x002C(0x0004)
    float                                         Gain;                                                         // 0x0030(0x0004)
    float                                         WetLevel;                                                     // 0x0034(0x0004)
    float                                         DryLevel;                                                     // 0x0038(0x0004)
    bool                                          bBypass;                                                      // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  NetCore.NetAnalyticsDataConfig
// Struct Size::0x000C
struct FNetAnalyticsDataConfig
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    bool                                          bEnabled;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  AssetRegistry.TagAndValue
// Struct Size::0x0018
struct FTagAndValue
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  AssetRegistry.AssetRegistryDependencyOptions
// Struct Size::0x0005
struct FAssetRegistryDependencyOptions
{
    bool                                          bIncludeSoftPackageReferences;                                // 0x0000(0x0001)
    bool                                          bIncludeHardPackageReferences;                                // 0x0001(0x0001)
    bool                                          bIncludeSearchableNames;                                      // 0x0002(0x0001)
    bool                                          bIncludeSoftManagementReferences;                             // 0x0003(0x0001)
    bool                                          bIncludeHardManagementReferences;                             // 0x0004(0x0001)
};


// ScriptStruct  EngineMessages.EngineServiceNotification
// Struct Size::0x0018
struct FEngineServiceNotification
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    double                                        TimeSeconds;                                                  // 0x0010(0x0008)
};


// ScriptStruct  EngineMessages.EngineServiceTerminate
// Struct Size::0x0010
struct FEngineServiceTerminate
{
    FString                                       userName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceExecuteCommand
// Struct Size::0x0020
struct FEngineServiceExecuteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       userName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthGrant
// Struct Size::0x0020
struct FEngineServiceAuthGrant
{
    FString                                       userName;                                                     // 0x0000(0x0010)
    FString                                       UserToGrant;                                                  // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthDeny
// Struct Size::0x0020
struct FEngineServiceAuthDeny
{
    FString                                       userName;                                                     // 0x0000(0x0010)
    FString                                       UserToDeny;                                                   // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServicePong
// Struct Size::0x0050
struct FEngineServicePong
{
    FString                                       CurrentLevel;                                                 // 0x0000(0x0010)
    int32_t                                       EngineVersion;                                                // 0x0010(0x0004)
    bool                                          HasBegunPlay;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FGuid                                         InstanceId;                                                   // 0x0018(0x0010)
    FString                                       InstanceType;                                                 // 0x0028(0x0010)
    FGuid                                         SessionId;                                                    // 0x0038(0x0010)
    float                                         WorldTimeSeconds;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  EngineMessages.EngineServicePing
// Struct Size::0x0001
struct FEngineServicePing
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagCreationWidgetHelper
// Struct Size::0x0001
struct FGameplayTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagReferenceHelper
// Struct Size::0x0010
struct FGameplayTagReferenceHelper
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagNode
// Struct Size::0x0050
struct FGameplayTagNode
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  GameplayTags.GameplayTagSource
// Struct Size::0x0020
struct FGameplayTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x0008)
    enum class EGameplayTagSourceType             SourceType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UGameplayTagsList*                            SourceTagList;                                                // 0x0010(0x0008)
    URestrictedGameplayTagsList*                  SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  GameplayTags.GameplayTagTableRow
// Struct Size::0x0020
struct FGameplayTagTableRow : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    FString                                       DevComment;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.RestrictedGameplayTagTableRow
// Struct Size::0x0028
struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayTags.RestrictedConfigInfo
// Struct Size::0x0020
struct FRestrictedConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagCategoryRemap
// Struct Size::0x0020
struct FGameplayTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagRedirect
// Struct Size::0x0010
struct FGameplayTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x0008)
    FName                                         NewTagName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  StaticMeshDescription.UVMapSettings
// Struct Size::0x0038
struct FUVMapSettings
{
    FVector                                       Size;                                                         // 0x0000(0x000C)
    FVector2D                                     UVTile;                                                       // 0x000C(0x0008)
    FVector                                       position;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    FVector                                       Scale;                                                        // 0x002C(0x000C)
};


// ScriptStruct  PropertyAccess.PropertyAccessLibrary
// Struct Size::0x00C8
struct FPropertyAccessLibrary
{
    TArray<FPropertyAccessSegment>                PathSegments;                                                 // 0x0000(0x0010)
    TArray<FPropertyAccessPath>                   SrcPaths;                                                     // 0x0010(0x0010)
    TArray<FPropertyAccessPath>                   DestPaths;                                                    // 0x0020(0x0010)
    FPropertyAccessCopyBatch                      CopyBatches;                                                  // 0x0030(0x0010)
    char                                          pa_0040[0x0030]                                               // 0x0040(0x0030)
    TArray<FPropertyAccessIndirectionChain>       SrcAccesses;                                                  // 0x0070(0x0010)
    TArray<FPropertyAccessIndirectionChain>       DestAccesses;                                                 // 0x0080(0x0010)
    TArray<FPropertyAccessIndirection>            Indirections;                                                 // 0x0090(0x0010)
    TArray<int32_t>                               EventAccessIndices;                                           // 0x00A0(0x0010)
    char                                          pa_00B0[0x0018]                                               // 0x00B0(0x0018)
};


// ScriptStruct  PropertyAccess.PropertyAccessIndirection
// Struct Size::0x0040
struct FPropertyAccessIndirection
{
    ArrayProperty                                 ArrayProperty;                                                // 0x0000(0x0020)
    UFunction*                                    Function;                                                     // 0x0020(0x0008)
    int32_t                                       ReturnBufferSize;                                             // 0x0028(0x0004)
    int32_t                                       ReturnBufferAlignment;                                        // 0x002C(0x0004)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint32_t                                      Offset;                                                       // 0x0034(0x0004)
    enum class EPropertyAccessObjectType          ObjectType;                                                   // 0x0038(0x0001)
    enum class EPropertyAccessIndirectionType     Type;                                                         // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  PropertyAccess.PropertyAccessIndirectionChain
// Struct Size::0x0030
struct FPropertyAccessIndirectionChain
{
    Property                                      Property;                                                     // 0x0000(0x0020)
    int32_t                                       IndirectionStartIndex;                                        // 0x0020(0x0004)
    int32_t                                       IndirectionEndIndex;                                          // 0x0024(0x0004)
    int32_t                                       eventId;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  PropertyAccess.PropertyAccessCopyBatch
// Struct Size::0x0010
struct FPropertyAccessCopyBatch
{
    TArray<FPropertyAccessCopy>                   Copies;                                                       // 0x0000(0x0010)
};


// ScriptStruct  PropertyAccess.PropertyAccessCopy
// Struct Size::0x0010
struct FPropertyAccessCopy
{
    int32_t                                       AccessIndex;                                                  // 0x0000(0x0004)
    int32_t                                       DestAccessStartIndex;                                         // 0x0004(0x0004)
    int32_t                                       DestAccessEndIndex;                                           // 0x0008(0x0004)
    enum class EPropertyAccessCopyType            Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  PropertyAccess.PropertyAccessPath
// Struct Size::0x000C
struct FPropertyAccessPath
{
    int32_t                                       PathSegmentStartIndex;                                        // 0x0000(0x0004)
    int32_t                                       PathSegmentCount;                                             // 0x0004(0x0004)
    char                                          bHasEvents;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  PropertyAccess.PropertyAccessSegment
// Struct Size::0x0040
struct FPropertyAccessSegment
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UStruct*                                      Struct;                                                       // 0x0008(0x0008)
    Property                                      Property;                                                     // 0x0010(0x0020)
    UFunction*                                    Function;                                                     // 0x0030(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0038(0x0004)
    uint16_t                                      Flags;                                                        // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  MessagingRpc.MessageRpcUnhandled
// Struct Size::0x0010
struct FMessageRpcUnhandled
{
    FGuid                                         CallId;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MessagingRpc.MessageRpcProgress
// Struct Size::0x0028
struct FMessageRpcProgress
{
    float                                         Completion;                                                   // 0x0000(0x0004)
    FGuid                                         CallId;                                                       // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StatusText;                                                   // 0x0018(0x0010)
};


// ScriptStruct  MessagingRpc.MessageRpcCancel
// Struct Size::0x0010
struct FMessageRpcCancel
{
    FGuid                                         CallId;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MessagingRpc.RpcMessage
// Struct Size::0x0010
struct FRpcMessage
{
    FGuid                                         CallId;                                                       // 0x0000(0x0010)
};


// ScriptStruct  PortalRpc.PortalRpcServer
// Struct Size::0x0010
struct FPortalRpcServer
{
    FString                                       ServerAddress;                                                // 0x0000(0x0010)
};


// ScriptStruct  PortalRpc.PortalRpcLocateServer
// Struct Size::0x0040
struct FPortalRpcLocateServer
{
    FGuid                                         ProductId;                                                    // 0x0000(0x0010)
    FString                                       ProductVersion;                                               // 0x0010(0x0010)
    FString                                       HostMacAddress;                                               // 0x0020(0x0010)
    FString                                       HostUserId;                                                   // 0x0030(0x0010)
};


// ScriptStruct  PortalServices.PortalUserIsEntitledToItemResult
// Struct Size::0x0018
struct FPortalUserIsEntitledToItemResult
{
    FString                                       ItemId;                                                       // 0x0000(0x0010)
    bool                                          IsEntitled;                                                   // 0x0010(0x0001)
    enum class EEntitlementCacheLevelRetrieved    RetrievedFromCacheLevel;                                      // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  PortalServices.PortalUserDetails
// Struct Size::0x0050
struct FPortalUserDetails
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FText                                         Email;                                                        // 0x0018(0x0018)
    FText                                         RealName;                                                     // 0x0030(0x0018)
    bool                                          IsSignedIn;                                                   // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionData
// Struct Size::0x0040
struct FClothCollisionData
{
    TArray<FClothCollisionPrim>                   Spheres;                                                      // 0x0000(0x0010)
    TArray<FClothCollisionPrim>                   SphereConnections;                                            // 0x0010(0x0010)
    TArray<FClothCollisionPrim>                   Convexes;                                                     // 0x0020(0x0010)
    TArray<FClothCollisionPrim>                   Boxes;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0030
struct FClothCollisionPrim
{
    FVector                                       LocalPosition;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         LocalRotation;                                                // 0x0010(0x0010)
    FVector                                       HalfExtents;                                                  // 0x0020(0x000C)
    int32_t                                       BoneIndex;                                                    // 0x002C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0028
struct FClothCollisionPrim
{
    TArray<FPlane>                                Planes;                                                       // 0x0000(0x0010)
    TArray<FVector>                               SurfacePoints;                                                // 0x0010(0x0010)
    int32_t                                       BoneIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0008
struct FClothCollisionPrim
{
    int32_t                                       SphereIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim
// Struct Size::0x0014
struct FClothCollisionPrim
{
    int32_t                                       BoneIndex;                                                    // 0x0000(0x0004)
    float                                         Radius;                                                       // 0x0004(0x0004)
    FVector                                       LocalPosition;                                                // 0x0008(0x000C)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothVertBoneData
// Struct Size::0x004C
struct FClothVertBoneData
{
    int32_t                                       NumInfluences;                                                // 0x0000(0x0004)
    uint16_t                                      BoneIndices;                                                  // 0x0004(0x0002)
    char                                          pa_0006[0x0016]                                               // 0x0006(0x0016)
    float                                         BoneWeights;                                                  // 0x001C(0x0004)
    char                                          pa_0020[0x002C]                                               // 0x0020(0x002C)
};


// ScriptStruct  EyeTracker.EyeTrackerStereoGazeData
// Struct Size::0x0040
struct FEyeTrackerStereoGazeData
{
    FVector                                       LeftEyeOrigin;                                                // 0x0000(0x000C)
    FVector                                       LeftEyeDirection;                                             // 0x000C(0x000C)
    FVector                                       RightEyeOrigin;                                               // 0x0018(0x000C)
    FVector                                       RightEyeDirection;                                            // 0x0024(0x000C)
    FVector                                       FixationPoint;                                                // 0x0030(0x000C)
    float                                         ConfidenceValue;                                              // 0x003C(0x0004)
};


// ScriptStruct  EyeTracker.EyeTrackerGazeData
// Struct Size::0x0028
struct FEyeTrackerGazeData
{
    FVector                                       GazeOrigin;                                                   // 0x0000(0x000C)
    FVector                                       GazeDirection;                                                // 0x000C(0x000C)
    FVector                                       FixationPoint;                                                // 0x0018(0x000C)
    float                                         ConfidenceValue;                                              // 0x0024(0x0004)
};


// ScriptStruct  JsonUtilities.JsonObjectWrapper
// Struct Size::0x0020
struct FJsonObjectWrapper
{
    FString                                       JsonString;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  MediaUtils.MediaPlayerOptions
// Struct Size::0x0030
struct FMediaPlayerOptions
{
    FMediaPlayerTrackOptions                      Tracks;                                                       // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTimespan                                     SeekTime;                                                     // 0x0020(0x0008)
    enum class EMediaPlayerOptionBooleanOverride  PlayOnOpen;                                                   // 0x0028(0x0001)
    enum class EMediaPlayerOptionBooleanOverride  Loop;                                                         // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  MediaUtils.MediaPlayerTrackOptions
// Struct Size::0x001C
struct FMediaPlayerTrackOptions
{
    int32_t                                       Audio;                                                        // 0x0000(0x0004)
    int32_t                                       Caption;                                                      // 0x0004(0x0004)
    int32_t                                       MetaData;                                                     // 0x0008(0x0004)
    int32_t                                       Script;                                                       // 0x000C(0x0004)
    int32_t                                       Subtitle;                                                     // 0x0010(0x0004)
    int32_t                                       Text;                                                         // 0x0014(0x0004)
    int32_t                                       Video;                                                        // 0x0018(0x0004)
};


// ScriptStruct  MediaAssets.MediaCaptureDevice
// Struct Size::0x0028
struct FMediaCaptureDevice
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       URL;                                                          // 0x0018(0x0010)
};


// ScriptStruct  MediaAssets.MediaSoundComponentSpectralData
// Struct Size::0x0008
struct FMediaSoundComponentSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
};


// ScriptStruct  LevelSequence.LevelSequenceCameraSettings
// Struct Size::0x0002
struct FLevelSequenceCameraSettings
{
    bool                                          bOverrideAspectRatioAxisConstraint;                           // 0x0000(0x0001)
    enum class EAspectRatioAxisConstraint         AspectRatioAxisConstraint;                                    // 0x0001(0x0001)
};


// ScriptStruct  LevelSequence.BoundActorProxy
// Struct Size::0x0001
struct FBoundActorProxy
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceAnimSequenceLinkItem
// Struct Size::0x0030
struct FLevelSequenceAnimSequenceLinkItem
{
    FGuid                                         SkelTrackGuid;                                                // 0x0000(0x0010)
    FSoftObjectPath                               PathToAnimSequence;                                           // 0x0010(0x0018)
    bool                                          bExportTransforms;                                            // 0x0028(0x0001)
    bool                                          bExportCurves;                                                // 0x0029(0x0001)
    bool                                          bRecordInWorldSpace;                                          // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferences
// Struct Size::0x00A0
struct FLevelSequenceBindingReferences
{
    TMap<FGuid,FLevelSequenceBindingReferenceArray>BindingIdToReferences;                                       // 0x0000(0x0050)
    TSet<FGuid>                                   AnimSequenceInstances;                                        // 0x0050(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferenceArray
// Struct Size::0x0010
struct FLevelSequenceBindingReferenceArray
{
    TArray<FLevelSequenceBindingReference>        References;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReference
// Struct Size::0x0038
struct FLevelSequenceBindingReference
{
    FString                                       PackageName;                                                  // 0x0000(0x0010)
    FSoftObjectPath                               ExternalObjectPath;                                           // 0x0010(0x0018)
    FString                                       ObjectPath;                                                   // 0x0028(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceObjectReferenceMap
// Struct Size::0x0050
struct FLevelSequenceObjectReferenceMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceLegacyObjectReference
// Struct Size::0x0020
struct FLevelSequenceLegacyObjectReference
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  LevelSequence.LevelSequenceObject
// Struct Size::0x0038
struct FLevelSequenceObject
{
    UObject*                                      ObjectOrOwner;                                                // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ComponentName;                                                // 0x0020(0x0010)
    TWeakObjectPtr<UObject>                       CachedComponent;                                              // 0x0030(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequencePlayerSnapshot
// Struct Size::0x00B8
struct FLevelSequencePlayerSnapshot
{
    FString                                       MasterName;                                                   // 0x0000(0x0010)
    FQualifiedFrameTime                           MasterTime;                                                   // 0x0010(0x0010)
    FQualifiedFrameTime                           SourceTime;                                                   // 0x0020(0x0010)
    FString                                       CurrentShotName;                                              // 0x0030(0x0010)
    FQualifiedFrameTime                           CurrentShotLocalTime;                                         // 0x0040(0x0010)
    FQualifiedFrameTime                           CurrentShotSourceTime;                                        // 0x0050(0x0010)
    FString                                       SourceTimecode;                                               // 0x0060(0x0010)
    TSoftObjectPtr<UCameraComponent>              CameraComponent;                                              // 0x0070(0x0028)
    FLevelSequenceSnapshotSettings                Settings;                                                     // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    ULevelSequence*                               ActiveShot;                                                   // 0x00A8(0x0008)
    FMovieSceneSequenceID                         ShotID;                                                       // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  LevelSequence.LevelSequenceSnapshotSettings
// Struct Size::0x000C
struct FLevelSequenceSnapshotSettings
{
    char                                          ZeroPadAmount;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0004(0x0008)
};


// ScriptStruct  MovieSceneCapture.CompositionGraphCapturePasses
// Struct Size::0x0010
struct FCompositionGraphCapturePasses
{
    TArray<FString>                               Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.FrameMetrics
// Struct Size::0x0010
struct FFrameMetrics
{
    float                                         TotalElapsedTime;                                             // 0x0000(0x0004)
    float                                         FrameDelta;                                                   // 0x0004(0x0004)
    int32_t                                       FrameNumber;                                                  // 0x0008(0x0004)
    int32_t                                       NumDroppedFrames;                                             // 0x000C(0x0004)
};


// ScriptStruct  MovieSceneCapture.MovieSceneCaptureSettings
// Struct Size::0x0070
struct FMovieSceneCaptureSettings
{
    FDirectoryPath                                OutputDirectory;                                              // 0x0000(0x0010)
    AGameModeBase*                                GameModeOverride;                                             // 0x0010(0x0008)
    FString                                       OutputFormat;                                                 // 0x0018(0x0010)
    bool                                          bOverwriteExisting;                                           // 0x0028(0x0001)
    bool                                          bUseRelativeFrameNumbers;                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       HandleFrames;                                                 // 0x002C(0x0004)
    FString                                       MovieExtension;                                               // 0x0030(0x0010)
    char                                          ZeroPadFrameNumbers;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0044(0x0008)
    bool                                          bUseCustomFrameRate;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FFrameRate                                    CustomFrameRate;                                              // 0x0050(0x0008)
    FCaptureResolution                            Resolution;                                                   // 0x0058(0x0008)
    bool                                          bEnableTextureStreaming;                                      // 0x0060(0x0001)
    bool                                          bCinematicEngineScalability;                                  // 0x0061(0x0001)
    bool                                          bCinematicMode;                                               // 0x0062(0x0001)
    bool                                          bAllowMovement;                                               // 0x0063(0x0001)
    bool                                          bAllowTurning;                                                // 0x0064(0x0001)
    bool                                          bShowPlayer;                                                  // 0x0065(0x0001)
    bool                                          bShowHUD;                                                     // 0x0066(0x0001)
    bool                                          bUsePathTracer;                                               // 0x0067(0x0001)
    int32_t                                       PathTracerSamplePerPixel;                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  MovieSceneCapture.CaptureResolution
// Struct Size::0x0008
struct FCaptureResolution
{
    int32_t                                       ResX;                                                         // 0x0000(0x0004)
    int32_t                                       ResY;                                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.DirectoryPath
// Struct Size::0x0010
struct FDirectoryPath
{
    FString                                       Path;                                                         // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CapturedPixels
// Struct Size::0x0010
struct FCapturedPixels
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CapturedPixelsID
// Struct Size::0x0050
struct FCapturedPixelsID
{
    TMap<FName,FName>                             Identifiers;                                                  // 0x0000(0x0050)
};


// ScriptStruct  Engine.TickFinishSpawningInfo
// Struct Size::0x0240
struct FTickFinishSpawningInfo
{
    char                                          pa_0000[0x0240]                                               // 0x0000(0x0240)
};


// ScriptStruct  Engine.KAggregateGeom
// Struct Size::0x0058
struct FKAggregateGeom
{
    TArray<FKSphereElem>                          SphereElems;                                                  // 0x0000(0x0010)
    TArray<FKBoxElem>                             BoxElems;                                                     // 0x0010(0x0010)
    TArray<FKSphylElem>                           SphylElems;                                                   // 0x0020(0x0010)
    TArray<FKConvexElem>                          ConvexElems;                                                  // 0x0030(0x0010)
    TArray<FKTaperedCapsuleElem>                  TaperedCapsuleElems;                                          // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.KTaperedCapsuleElem
// Struct Size::0x0058
struct FKTaperedCapsuleElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius0;                                                      // 0x0048(0x0004)
    float                                         Radius1;                                                      // 0x004C(0x0004)
    float                                         Length;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KConvexElem
// Struct Size::0x00B0
struct FKConvexElem : public FKShapeElem
{
    TArray<FVector>                               VertexData;                                                   // 0x0030(0x0010)
    TArray<int32_t>                               IndexData;                                                    // 0x0040(0x0010)
    FBox                                          ElemBox;                                                      // 0x0050(0x001C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  Engine.KSphylElem
// Struct Size::0x0050
struct FKSphylElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius;                                                       // 0x0048(0x0004)
    float                                         Length;                                                       // 0x004C(0x0004)
};


// ScriptStruct  Engine.KBoxElem
// Struct Size::0x0058
struct FKBoxElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         X;                                                            // 0x0048(0x0004)
    float                                         Y;                                                            // 0x004C(0x0004)
    float                                         Z;                                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KSphereElem
// Struct Size::0x0040
struct FKSphereElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    float                                         Radius;                                                       // 0x003C(0x0004)
};


// ScriptStruct  Engine.AnimationGroupReference
// Struct Size::0x000C
struct FAnimationGroupReference
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0008(0x0001)
    enum class EAnimSyncGroupScope                GroupScope;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.RootMotionMovementParams
// Struct Size::0x0040
struct FRootMotionMovementParams
{
    bool                                          bHasRootMotion;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    RootMotionTransform;                                          // 0x0010(0x0030)
};


// ScriptStruct  Engine.AnimGroupInstance
// Struct Size::0x0070
struct FAnimGroupInstance
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.AnimTickRecord
// Struct Size::0x0048
struct FAnimTickRecord
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.MarkerSyncAnimPosition
// Struct Size::0x0014
struct FMarkerSyncAnimPosition
{
    FName                                         PreviousMarkerName;                                           // 0x0000(0x0008)
    FName                                         NextMarkerName;                                               // 0x0008(0x0008)
    float                                         PositionBetweenMarkers;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.BlendFilter
// Struct Size::0x0078
struct FBlendFilter
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.BlendSampleData
// Struct Size::0x0040
struct FBlendSampleData
{
    int32_t                                       SampleDataIndex;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimSequence*                                Animation;                                                    // 0x0008(0x0008)
    float                                         TotalWeight;                                                  // 0x0010(0x0004)
    float                                         Time;                                                         // 0x0014(0x0004)
    float                                         PreviousTime;                                                 // 0x0018(0x0004)
    float                                         SamplePlayRate;                                               // 0x001C(0x0004)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
};


// ScriptStruct  Engine.AnimationRecordingSettings
// Struct Size::0x0014
struct FAnimationRecordingSettings
{
    bool                                          bRecordInWorldSpace;                                          // 0x0000(0x0001)
    bool                                          bRemoveRootAnimation;                                         // 0x0001(0x0001)
    bool                                          bAutoSaveAsset;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         SampleRate;                                                   // 0x0004(0x0004)
    float                                         Length;                                                       // 0x0008(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x000C(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0001]                                               // 0x000E(0x0001)
    bool                                          bRecordTransforms;                                            // 0x000F(0x0001)
    bool                                          bRecordCurves;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.ComponentSpacePose
// Struct Size::0x0020
struct FComponentSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.LocalSpacePose
// Struct Size::0x0020
struct FLocalSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.NamedTransform
// Struct Size::0x0040
struct FNamedTransform
{
    FTransform                                    Value;                                                        // 0x0000(0x0030)
    FName                                         Name;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.NamedColor
// Struct Size::0x000C
struct FNamedColor
{
    FColor                                        Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.NamedVector
// Struct Size::0x0014
struct FNamedVector
{
    FVector                                       Value;                                                        // 0x0000(0x000C)
    FName                                         Name;                                                         // 0x000C(0x0008)
};


// ScriptStruct  Engine.NamedFloat
// Struct Size::0x000C
struct FNamedFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.AnimParentNodeAssetOverride
// Struct Size::0x0018
struct FAnimParentNodeAssetOverride
{
    UAnimationAsset*                              NewAsset;                                                     // 0x0000(0x0008)
    FGuid                                         ParentNodeGuid;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimGroupInfo
// Struct Size::0x0018
struct FAnimGroupInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintDebugData
// Struct Size::0x0001
struct FAnimBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimationFrameSnapshot
// Struct Size::0x0001
struct FAnimationFrameSnapshot
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.StateMachineDebugData
// Struct Size::0x00B0
struct FStateMachineDebugData
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  Engine.StateMachineStateDebugData
// Struct Size::0x0010
struct FStateMachineStateDebugData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunctionData
// Struct Size::0x0040
struct FAnimBlueprintFunctionData
{
    OutputPoseNodeProperty                        OutputPoseNodeProperty;                                       // 0x0000(0x0020)
    TArray<InputPoseNodeProperties>               InputPoseNodeProperties;                                      // 0x0020(0x0010)
    TArray<InputProperties>                       InputProperties;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.AnimGraphBlendOptions
// Struct Size::0x0008
struct FAnimGraphBlendOptions
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.GraphAssetPlayerInformation
// Struct Size::0x0010
struct FGraphAssetPlayerInformation
{
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.CachedPoseIndices
// Struct Size::0x0010
struct FCachedPoseIndices
{
    TArray<int32_t>                               OrderedSavedPoseNodeIndices;                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunction
// Struct Size::0x0068
struct FAnimBlueprintFunction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         Group;                                                        // 0x0008(0x0008)
    int32_t                                       OutputPoseNodeIndex;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FName>                                 InputPoseNames;                                               // 0x0018(0x0010)
    TArray<int32_t>                               InputPoseNodeIndices;                                         // 0x0028(0x0010)
    char                                          pa_0038[0x0028]                                               // 0x0038(0x0028)
    bool                                          bImplemented;                                                 // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Engine.AnimTrack
// Struct Size::0x0010
struct FAnimTrack
{
    TArray<FAnimSegment>                          AnimSegments;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSegment
// Struct Size::0x0020
struct FAnimSegment
{
    UAnimSequenceBase*                            AnimReference;                                                // 0x0000(0x0008)
    float                                         StartPos;                                                     // 0x0008(0x0004)
    float                                         AnimStartTime;                                                // 0x000C(0x0004)
    float                                         AnimEndTime;                                                  // 0x0010(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0014(0x0004)
    int32_t                                       LoopingCount;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.RootMotionExtractionStep
// Struct Size::0x0010
struct FRootMotionExtractionStep
{
    UAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    float                                         StartPosition;                                                // 0x0008(0x0004)
    float                                         EndPosition;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimationErrorStats
// Struct Size::0x0010
struct FAnimationErrorStats
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.RawCurveTracks
// Struct Size::0x0010
struct FRawCurveTracks
{
    TArray<FFloatCurve>                           FloatCurves;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimCurveBase
// Struct Size::0x0018
struct FAnimCurveBase
{
    FName                                         LastObservedName;                                             // 0x0000(0x0008)
    FSmartName                                    Name;                                                         // 0x0008(0x000C)
    int32_t                                       CurveTypeFlags;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SmartName
// Struct Size::0x000C
struct FSmartName
{
    FName                                         DisplayName;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.FloatCurve
// Struct Size::0x0098
struct FFloatCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurve;                                                   // 0x0018(0x0080)
};


// ScriptStruct  Engine.TransformCurve
// Struct Size::0x04E0
struct FTransformCurve : public FAnimCurveBase
{
    FVectorCurve                                  TranslationCurve;                                             // 0x0018(0x0198)
    FVectorCurve                                  RotationCurve;                                                // 0x01B0(0x0198)
    FVectorCurve                                  ScaleCurve;                                                   // 0x0348(0x0198)
};


// ScriptStruct  Engine.VectorCurve
// Struct Size::0x0198
struct FVectorCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurves;                                                  // 0x0018(0x0080)
    char                                          pa_0098[0x0100]                                               // 0x0098(0x0100)
};


// ScriptStruct  Engine.SlotEvaluationPose
// Struct Size::0x00E0
struct FSlotEvaluationPose
{
    enum class EAdditiveAnimationType             AdditiveType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x00D8]                                               // 0x0008(0x00D8)
};


// ScriptStruct  Engine.A2Pose
// Struct Size::0x0010
struct FA2Pose
{
    TArray<FTransform>                            Bones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.A2CSPose
// Struct Size::0x0028
struct FA2CSPose : public FA2Pose
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    TArray<char>                                  ComponentSpaceFlags;                                          // 0x0018(0x0010)
};


// ScriptStruct  Engine.QueuedDrawDebugItem
// Struct Size::0x0068
struct FQueuedDrawDebugItem
{
    enum class EDrawDebugItemType                 ItemType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       StartLoc;                                                     // 0x0004(0x000C)
    FVector                                       EndLoc;                                                       // 0x0010(0x000C)
    FVector                                       Center;                                                       // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    float                                         Radius;                                                       // 0x0034(0x0004)
    float                                         Size;                                                         // 0x0038(0x0004)
    int32_t                                       Segments;                                                     // 0x003C(0x0004)
    FColor                                        Color;                                                        // 0x0040(0x0004)
    bool                                          bPersistentLines;                                             // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         LifeTime;                                                     // 0x0048(0x0004)
    float                                         Thickness;                                                    // 0x004C(0x0004)
    FString                                       Message;                                                      // 0x0050(0x0010)
    FVector2D                                     TextScale;                                                    // 0x0060(0x0008)
};


// ScriptStruct  Engine.AnimInstanceSubsystemData
// Struct Size::0x0001
struct FAnimInstanceSubsystemData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimLinkableElement
// Struct Size::0x0030
struct FAnimLinkableElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UAnimMontage*                                 LinkedMontage;                                                // 0x0008(0x0008)
    int32_t                                       SlotIndex;                                                    // 0x0010(0x0004)
    int32_t                                       SegmentIndex;                                                 // 0x0014(0x0004)
    enum class EAnimLinkMethod                    LinkMethod;                                                   // 0x0018(0x0001)
    enum class EAnimLinkMethod                    CachedLinkMethod;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         SegmentBeginTime;                                             // 0x001C(0x0004)
    float                                         SegmentLength;                                                // 0x0020(0x0004)
    float                                         LinkValue;                                                    // 0x0024(0x0004)
    UAnimSequenceBase*                            LinkedSequence;                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.AnimMontageInstance
// Struct Size::0x0200
struct FAnimMontageInstance
{
    UAnimMontage*                                 Montage;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
    bool                                          bPlaying;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         DefaultBlendTimeMultiplier;                                   // 0x002C(0x0004)
    char                                          pa_0030[0x00B8]                                               // 0x0030(0x00B8)
    TArray<int32_t>                               NextSections;                                                 // 0x00E8(0x0010)
    TArray<int32_t>                               PrevSections;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x0010]                                               // 0x0108(0x0010)
    TArray<FAnimNotifyEvent>                      ActiveStateBranchingPoints;                                   // 0x0118(0x0010)
    float                                         position;                                                     // 0x0128(0x0004)
    float                                         PlayRate;                                                     // 0x012C(0x0004)
    FAlphaBlend                                   Blend;                                                        // 0x0130(0x0030)
    char                                          pa_0160[0x002C]                                               // 0x0160(0x002C)
    int32_t                                       DisableRootMotionCount;                                       // 0x018C(0x0004)
    char                                          pa_0190[0x0070]                                               // 0x0190(0x0070)
};


// ScriptStruct  Engine.AnimNotifyEvent
// Struct Size::0x00B8
struct FAnimNotifyEvent : public FAnimLinkableElement
{
    float                                         DisplayTime;                                                  // 0x0030(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x0034(0x0004)
    float                                         EndTriggerTimeOffset;                                         // 0x0038(0x0004)
    float                                         TriggerWeightThreshold;                                       // 0x003C(0x0004)
    FName                                         NotifyName;                                                   // 0x0040(0x0008)
    UAnimNotify*                                  Notify;                                                       // 0x0048(0x0008)
    UAnimNotifyState*                             NotifyStateClass;                                             // 0x0050(0x0008)
    float                                         Duration;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FAnimLinkableElement                          EndLink;                                                      // 0x0060(0x0030)
    bool                                          bConvertedFromBranchingPoint;                                 // 0x0090(0x0001)
    enum class EMontageNotifyTickType             MontageTickType;                                              // 0x0091(0x0001)
    char                                          pa_0092[0x0002]                                               // 0x0092(0x0002)
    float                                         NotifyTriggerChance;                                          // 0x0094(0x0004)
    enum class ENotifyFilterType                  NotifyFilterType;                                             // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       NotifyFilterLOD;                                              // 0x009C(0x0004)
    bool                                          bTriggerOnDedicatedServer;                                    // 0x00A0(0x0001)
    bool                                          bTriggerOnFollower;                                           // 0x00A1(0x0001)
    char                                          pa_00A2[0x0002]                                               // 0x00A2(0x0002)
    int32_t                                       TrackIndex;                                                   // 0x00A4(0x0004)
    char                                          pa_00A8[0x0010]                                               // 0x00A8(0x0010)
};


// ScriptStruct  Engine.BranchingPointMarker
// Struct Size::0x000C
struct FBranchingPointMarker
{
    int32_t                                       NotifyIndex;                                                  // 0x0000(0x0004)
    float                                         TriggerTime;                                                  // 0x0004(0x0004)
    enum class EAnimNotifyEventType               NotifyEventType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.BranchingPoint
// Struct Size::0x0040
struct FBranchingPoint : public FAnimLinkableElement
{
    FName                                         EventName;                                                    // 0x0030(0x0008)
    float                                         DisplayTime;                                                  // 0x0038(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x003C(0x0004)
};


// ScriptStruct  Engine.SlotAnimationTrack
// Struct Size::0x0018
struct FSlotAnimationTrack
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    FAnimTrack                                    AnimTrack;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.CompositeSection
// Struct Size::0x0058
struct FCompositeSection : public FAnimLinkableElement
{
    FName                                         SectionName;                                                  // 0x0030(0x0008)
    float                                         StartTime;                                                    // 0x0038(0x0004)
    FName                                         NextSectionName;                                              // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<UAnimMetaData*>                        MetaData;                                                     // 0x0048(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00D0
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    char                                          bAlphaBoolEnabled;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0090(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0098(0x0030)
    int32_t                                       LODThreshold;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0070
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
};


// ScriptStruct  Engine.InertializationPoseDiff
// Struct Size::0x0028
struct FInertializationPoseDiff
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.InertializationCurveDiff
// Struct Size::0x0008
struct FInertializationCurveDiff
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.InertializationBoneDiff
// Struct Size::0x003C
struct FInertializationBoneDiff
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Engine.InertializationPose
// Struct Size::0x00A0
struct FInertializationPose
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00A0
struct FAnimNode : public FAnimNode
{
    TArray<FPoseLink>                             InputPoses;                                                   // 0x0058(0x0010)
    TArray<FName>                                 InputPoseNames;                                               // 0x0068(0x0010)
    UAnimInstance*                                InstanceClass;                                                // 0x0078(0x0008)
    FName                                         Tag;                                                          // 0x0080(0x0008)
    char                                          pa_0088[0x0014]                                               // 0x0088(0x0014)
    char                                          bReceiveNotifiesFromLinkedInstances;                          // 0x009C(0x0001)
    char                                          bPropagateNotifiesToLinkedInstances;                          // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    UAnimLayerInterface*                          Interface;                                                    // 0x00A0(0x0008)
    FName                                         Layer;                                                        // 0x00A8(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0118
struct FAnimNode : public FAnimNode
{
    FName                                         Name;                                                         // 0x0010(0x0008)
    FName                                         Graph;                                                        // 0x0018(0x0008)
    FPoseLink                                     InputPose;                                                    // 0x0020(0x0010)
    char                                          pa_0030[0x00E8]                                               // 0x0030(0x00E8)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0158
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     Pose;                                                         // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
    char                                          pa_0028[0x0004]                                               // 0x0028(0x0004)
    bool                                          bCachePoseInAnimInstanceProxy;                                // 0x002C(0x0001)
    char                                          pa_002D[0x012B]                                               // 0x002D(0x012B)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0178
struct FAnimNode : public FAnimNode
{
    UAnimSequenceBase*                            Sequence;                                                     // 0x0120(0x0008)
    float                                         PlayRateBasis;                                                // 0x0128(0x0004)
    float                                         PlayRate;                                                     // 0x012C(0x0004)
    FInputScaleBiasClamp                          PlayRateScaleBiasClamp;                                       // 0x0130(0x0030)
    float                                         StartPosition;                                                // 0x0160(0x0004)
    bool                                          bLoopAnimation;                                               // 0x0164(0x0001)
    bool                                          bResetAccumulateTimeWhenActive;                               // 0x0165(0x0001)
    char                                          pa_0166[0x0006]                                               // 0x0166(0x0006)
    bool                                          bSyncPlayTimeRatio;                                           // 0x016C(0x0001)
    char                                          pa_016D[0x0003]                                               // 0x016D(0x0003)
    UAnimSequenceBase*                            LastPlayAnimSeq;                                              // 0x0170(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00B0
struct FAnimNode : public FAnimNode
{
    int32_t                                       StateMachineIndexInClass;                                     // 0x0010(0x0004)
    int32_t                                       MaxTransitionsPerFrame;                                       // 0x0014(0x0004)
    bool                                          bSkipFirstUpdateTransition;                                   // 0x0018(0x0001)
    bool                                          bReinitializeOnBecomingRelevant;                              // 0x0019(0x0001)
    char                                          pa_001A[0x0096]                                               // 0x001A(0x0096)
};


// ScriptStruct  Engine.AnimationPotentialTransition
// Struct Size::0x0030
struct FAnimationPotentialTransition
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.AnimationActiveTransitionEntry
// Struct Size::0x00C8
struct FAnimationActiveTransitionEntry
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
    UBlendProfile*                                BlendProfile;                                                 // 0x00B8(0x0008)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x00F8
struct FAnimNode : public FAnimNode
{
    char                                          pa_0010[0x00D8]                                               // 0x0010(0x00D8)
    int32_t                                       FramesToCachePose;                                            // 0x00E8(0x0004)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    enum class EEvaluatorDataSource               DataSource;                                                   // 0x00F0(0x0001)
    enum class EEvaluatorMode                     EvaluatorMode;                                                // 0x00F1(0x0001)
    char                                          pa_00F2[0x0006]                                               // 0x00F2(0x0006)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0028
struct FAnimNode : public FAnimNode
{
    bool                                          bCanEnterTransition;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0028
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LinkToCachingNode;                                            // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.ExposedValueHandler
// Struct Size::0x0050
struct FExposedValueHandler
{
    FName                                         BoundFunction;                                                // 0x0000(0x0008)
    TArray<FExposedValueCopyRecord>               CopyRecords;                                                  // 0x0008(0x0010)
    UFunction*                                    Function;                                                     // 0x0018(0x0008)
    ValueHandlerNodeProperty                      ValueHandlerNodeProperty;                                     // 0x0020(0x0020)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
};


// ScriptStruct  Engine.ExposedValueCopyRecord
// Struct Size::0x0008
struct FExposedValueCopyRecord
{
    int32_t                                       CopyIndex;                                                    // 0x0000(0x0004)
    enum class EPostCopyOperation                 PostCopyOperation;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     LocalPose;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0020
struct FAnimNode : public FAnimNode
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNotifyQueue
// Struct Size::0x0070
struct FAnimNotifyQueue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FAnimNotifyEventReference>             AnimNotifies;                                                 // 0x0010(0x0010)
    TMap<FName,FAnimNotifyArray>                  UnfilteredMontageAnimNotifies;                                // 0x0020(0x0050)
};


// ScriptStruct  Engine.AnimNotifyArray
// Struct Size::0x0010
struct FAnimNotifyArray
{
    TArray<FAnimNotifyEventReference>             Notifies;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNotifyEventReference
// Struct Size::0x0010
struct FAnimNotifyEventReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      NotifySource;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Engine.CompressedTrack
// Struct Size::0x0038
struct FCompressedTrack
{
    TArray<char>                                  ByteStream;                                                   // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    float                                         Mins;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    float                                         Ranges;                                                       // 0x002C(0x0004)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Engine.CurveTrack
// Struct Size::0x0018
struct FCurveTrack
{
    FName                                         CurveName;                                                    // 0x0000(0x0008)
    TArray<float>                                 CurveWeights;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Engine.ScaleTrack
// Struct Size::0x0020
struct FScaleTrack
{
    TArray<FVector>                               ScaleKeys;                                                    // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.RotationTrack
// Struct Size::0x0020
struct FRotationTrack
{
    TArray<FQuat>                                 RotKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.TranslationTrack
// Struct Size::0x0020
struct FTranslationTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSequenceTrackContainer
// Struct Size::0x0020
struct FAnimSequenceTrackContainer
{
    TArray<FRawAnimSequenceTrack>                 AnimationTracks;                                              // 0x0000(0x0010)
    TArray<FName>                                 TrackNames;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.RawAnimSequenceTrack
// Struct Size::0x0030
struct FRawAnimSequenceTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<FQuat>                                 RotKeys;                                                      // 0x0010(0x0010)
    TArray<FVector>                               ScaleKeys;                                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimSetMeshLinkup
// Struct Size::0x0010
struct FAnimSetMeshLinkup
{
    TArray<int32_t>                               BoneToTrackTable;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSingleNodeInstanceProxy
// Struct Size::0x09B0
struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_0860[0x0150]                                               // 0x0860(0x0150)
};


// ScriptStruct  Engine.AnimNode
// Struct Size::0x0030
struct FAnimNode : public FAnimNode
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.BakedAnimationStateMachine
// Struct Size::0x0030
struct FBakedAnimationStateMachine
{
    FName                                         MachineName;                                                  // 0x0000(0x0008)
    int32_t                                       InitialState;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBakedAnimationState>                  States;                                                       // 0x0010(0x0010)
    TArray<FAnimationTransitionBetweenStates>     Transitions;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimationStateBase
// Struct Size::0x0008
struct FAnimationStateBase
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimationTransitionBetweenStates
// Struct Size::0x0040
struct FAnimationTransitionBetweenStates : public FAnimationStateBase
{
    int32_t                                       PreviousState;                                                // 0x0008(0x0004)
    int32_t                                       NextState;                                                    // 0x000C(0x0004)
    float                                         CrossfadeDuration;                                            // 0x0010(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0014(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0018(0x0004)
    int32_t                                       InterruptNotify;                                              // 0x001C(0x0004)
    enum class EAlphaBlendOption                  BlendMode;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0028(0x0008)
    UBlendProfile*                                BlendProfile;                                                 // 0x0030(0x0008)
    enum class ETransitionLogicType               LogicType;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.BakedAnimationState
// Struct Size::0x0058
struct FBakedAnimationState
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
    TArray<FBakedStateExitTransition>             Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
    bool                                          bIsAConduit;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       EntryRuleNodeIndex;                                           // 0x002C(0x0004)
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0030(0x0010)
    TArray<int32_t>                               LayerNodeIndices;                                             // 0x0040(0x0010)
    bool                                          bAlwaysResetOnEntry;                                          // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  Engine.BakedStateExitTransition
// Struct Size::0x0020
struct FBakedStateExitTransition
{
    int32_t                                       CanTakeDelegateIndex;                                         // 0x0000(0x0004)
    int32_t                                       CustomResultNodeIndex;                                        // 0x0004(0x0004)
    int32_t                                       TransitionIndex;                                              // 0x0008(0x0004)
    bool                                          bDesiredTransitionReturnValue;                                // 0x000C(0x0001)
    bool                                          bAutomaticRemainingTimeRule;                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<int32_t>                               PoseEvaluatorLinks;                                           // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimationState
// Struct Size::0x0028
struct FAnimationState : public FAnimationStateBase
{
    TArray<FAnimationTransitionRule>              Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
};


// ScriptStruct  Engine.AnimationTransitionRule
// Struct Size::0x0010
struct FAnimationTransitionRule
{
    FName                                         RuleToExecute;                                                // 0x0000(0x0008)
    bool                                          TransitionReturnVal;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TransitionIndex;                                              // 0x000C(0x0004)
};


// ScriptStruct  Engine.TrackToSkeletonMap
// Struct Size::0x0004
struct FTrackToSkeletonMap
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  Engine.MarkerSyncData
// Struct Size::0x0020
struct FMarkerSyncData
{
    TArray<FAnimSyncMarker>                       AuthoredSyncMarkers;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSyncMarker
// Struct Size::0x000C
struct FAnimSyncMarker
{
    FName                                         MarkerName;                                                   // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimNotifyTrack
// Struct Size::0x0038
struct FAnimNotifyTrack
{
    FName                                         TrackName;                                                    // 0x0000(0x0008)
    FLinearColor                                  TrackColor;                                                   // 0x0008(0x0010)
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
};


// ScriptStruct  Engine.PerBoneBlendWeights
// Struct Size::0x0010
struct FPerBoneBlendWeights
{
    TArray<FPerBoneBlendWeight>                   BoneBlendWeights;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AssetImportInfo
// Struct Size::0x0001
struct FAssetImportInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PrimaryAssetRulesCustomOverride
// Struct Size::0x0038
struct FPrimaryAssetRulesCustomOverride
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FDirectoryPath                                FilterDirectory;                                              // 0x0008(0x0010)
    FString                                       FilterString;                                                 // 0x0018(0x0010)
    FPrimaryAssetRules                            rules;                                                        // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.PrimaryAssetRules
// Struct Size::0x000C
struct FPrimaryAssetRules
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    int32_t                                       ChunkId;                                                      // 0x0004(0x0004)
    bool                                          bApplyRecursively;                                            // 0x0008(0x0001)
    enum class EPrimaryAssetCookRule              CookRule;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.PrimaryAssetRulesOverride
// Struct Size::0x001C
struct FPrimaryAssetRulesOverride
{
    FPrimaryAssetId                               PrimaryAssetId;                                               // 0x0000(0x0010)
    FPrimaryAssetRules                            rules;                                                        // 0x0010(0x000C)
};


// ScriptStruct  Engine.AssetManagerRedirect
// Struct Size::0x0020
struct FAssetManagerRedirect
{
    FString                                       Old;                                                          // 0x0000(0x0010)
    FString                                       New;                                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.PrimaryAssetTypeInfo
// Struct Size::0x0088
struct FPrimaryAssetTypeInfo
{
    FName                                         PrimaryAssetType;                                             // 0x0000(0x0008)
    TSoftClassPtr<UObject>                        AssetBaseClass;                                               // 0x0008(0x0028)
    UObject*                                      AssetBaseClassLoaded;                                         // 0x0030(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0038(0x0001)
    bool                                          bIsEditorOnly;                                                // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    TArray<FDirectoryPath>                        Directories;                                                  // 0x0040(0x0010)
    TArray<FSoftObjectPath>                       SpecificAssets;                                               // 0x0050(0x0010)
    FPrimaryAssetRules                            rules;                                                        // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FString>                               AssetScanPaths;                                               // 0x0070(0x0010)
    bool                                          bIsDynamicAsset;                                              // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    int32_t                                       NumberOfAssets;                                               // 0x0084(0x0004)
};


// ScriptStruct  Engine.AssetMapping
// Struct Size::0x0010
struct FAssetMapping
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    UAnimationAsset*                              TargetAsset;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.AtmospherePrecomputeInstanceData
// Struct Size::0x0160
struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x00A8]                                               // 0x00B8(0x00A8)
};


// ScriptStruct  Engine.AtmospherePrecomputeParameters
// Struct Size::0x002C
struct FAtmospherePrecomputeParameters
{
    float                                         DensityHeight;                                                // 0x0000(0x0004)
    float                                         DecayHeight;                                                  // 0x0004(0x0004)
    int32_t                                       MaxScatteringOrder;                                           // 0x0008(0x0004)
    int32_t                                       TransmittanceTexWidth;                                        // 0x000C(0x0004)
    int32_t                                       TransmittanceTexHeight;                                       // 0x0010(0x0004)
    int32_t                                       IrradianceTexWidth;                                           // 0x0014(0x0004)
    int32_t                                       IrradianceTexHeight;                                          // 0x0018(0x0004)
    int32_t                                       InscatterAltitudeSampleNum;                                   // 0x001C(0x0004)
    int32_t                                       InscatterMuNum;                                               // 0x0020(0x0004)
    int32_t                                       InscatterMuSNum;                                              // 0x0024(0x0004)
    int32_t                                       InscatterNuNum;                                               // 0x0028(0x0004)
};


// ScriptStruct  Engine.BaseAttenuationSettings
// Struct Size::0x00B0
struct FBaseAttenuationSettings
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EAttenuationDistanceModel          DistanceAlgorithm;                                            // 0x0008(0x0001)
    enum class EAttenuationShape                  AttenuationShape;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         dBAttenuationAtMax;                                           // 0x000C(0x0004)
    enum class ENaturalSoundFalloffMode           FalloffMode;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       AttenuationShapeExtents;                                      // 0x0014(0x000C)
    float                                         ConeOffset;                                                   // 0x0020(0x0004)
    float                                         FalloffDistance;                                              // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomAttenuationCurve;                                       // 0x0028(0x0088)
};


// ScriptStruct  Engine.AudioComponentParam
// Struct Size::0x0020
struct FAudioComponentParam
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    float                                         FloatParam;                                                   // 0x0008(0x0004)
    bool                                          BoolParam;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       IntParam;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWave*                                   SoundWaveParam;                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.AudioEffectParameters
// Struct Size::0x0008
struct FAudioEffectParameters
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AudioReverbEffect
// Struct Size::0x0048
struct FAudioReverbEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.AudioQualitySettings
// Struct Size::0x0020
struct FAudioQualitySettings
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    int32_t                                       MaxChannels;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InteriorSettings
// Struct Size::0x0024
struct FInteriorSettings
{
    bool                                          bIsWorldSettings;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ExteriorVolume;                                               // 0x0004(0x0004)
    float                                         ExteriorTime;                                                 // 0x0008(0x0004)
    float                                         ExteriorLPF;                                                  // 0x000C(0x0004)
    float                                         ExteriorLPFTime;                                              // 0x0010(0x0004)
    float                                         InteriorVolume;                                               // 0x0014(0x0004)
    float                                         InteriorTime;                                                 // 0x0018(0x0004)
    float                                         InteriorLPF;                                                  // 0x001C(0x0004)
    float                                         InteriorLPFTime;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.AudioVolumeSubmixOverrideSettings
// Struct Size::0x0020
struct FAudioVolumeSubmixOverrideSettings
{
    USoundSubmix*                                 Submix;                                                       // 0x0000(0x0008)
    TArray<USoundEffectSubmixPreset*>             SubmixEffectChain;                                            // 0x0008(0x0010)
    float                                         CrossfadeTime;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AudioVolumeSubmixSendSettings
// Struct Size::0x0018
struct FAudioVolumeSubmixSendSettings
{
    enum class EAudioVolumeLocationState          ListenerLocationState;                                        // 0x0000(0x0001)
    enum class EAudioVolumeLocationState          SourceLocationState;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FSoundSubmixSendInfo>                  SubmixSends;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Engine.SoundSubmixSendInfo
// Struct Size::0x00B0
struct FSoundSubmixSendInfo
{
    enum class ESendLevelControlMethod            SendLevelControlMethod;                                       // 0x0000(0x0001)
    enum class ESubmixSendStage                   SendStage;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    USoundSubmixBase*                             SoundSubmix;                                                  // 0x0008(0x0008)
    float                                         SendLevel;                                                    // 0x0010(0x0004)
    float                                         MinSendLevel;                                                 // 0x0014(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0018(0x0004)
    float                                         MinSendDistance;                                              // 0x001C(0x0004)
    float                                         MaxSendDistance;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0028(0x0088)
};


// ScriptStruct  Engine.AutoColorGradingIdxAndWeight
// Struct Size::0x0018
struct FAutoColorGradingIdxAndWeight
{
    int32_t                                       Idx;                                                          // 0x0000(0x0004)
    float                                         Weight;                                                       // 0x0004(0x0004)
    TArray<float>                                 Extra;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.AutoColorGradingLayer
// Struct Size::0x0040
struct FAutoColorGradingLayer
{
    FString                                       LayerName;                                                    // 0x0000(0x0010)
    TArray<float>                                 LayerSpec;                                                    // 0x0010(0x0010)
    TArray<FAutoColorGradingData>                 Parameters;                                                   // 0x0020(0x0010)
    float                                         MinHistogramIdx;                                              // 0x0030(0x0004)
    float                                         MaxHistogramIdx;                                              // 0x0034(0x0004)
    float                                         MinHistogramDiff;                                             // 0x0038(0x0004)
    float                                         MaxHistogramDiff;                                             // 0x003C(0x0004)
};


// ScriptStruct  Engine.AutoColorGradingData
// Struct Size::0x0030
struct FAutoColorGradingData
{
    FVector4                                      Parameter;                                                    // 0x0000(0x0010)
    FVector4                                      ExtraData;                                                    // 0x0010(0x0010)
    bool                                          Enabled;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x000F]                                               // 0x0021(0x000F)
};


// ScriptStruct  Engine.LaunchOnTestSettings
// Struct Size::0x0020
struct FLaunchOnTestSettings
{
    FFilePath                                     LaunchOnTestmap;                                              // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.FilePath
// Struct Size::0x0010
struct FFilePath
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.EditorMapPerformanceTestDefinition
// Struct Size::0x0020
struct FEditorMapPerformanceTestDefinition
{
    FSoftObjectPath                               PerformanceTestmap;                                           // 0x0000(0x0018)
    int32_t                                       TestTimer;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.BuildPromotionTestSettings
// Struct Size::0x01F0
struct FBuildPromotionTestSettings
{
    FFilePath                                     DefaultStaticMeshAsset;                                       // 0x0000(0x0010)
    FBuildPromotionImportWorkflowSettings         ImportWorkflow;                                               // 0x0010(0x0150)
    FBuildPromotionOpenAssetSettings              OpenAssets;                                                   // 0x0160(0x0060)
    FBuildPromotionNewProjectSettings             NewProjectSettings;                                           // 0x01C0(0x0020)
    FFilePath                                     SourceControlMaterial;                                        // 0x01E0(0x0010)
};


// ScriptStruct  Engine.BuildPromotionNewProjectSettings
// Struct Size::0x0020
struct FBuildPromotionNewProjectSettings
{
    FDirectoryPath                                NewProjectFolderOverride;                                     // 0x0000(0x0010)
    FString                                       NewProjectNameOverride;                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.BuildPromotionOpenAssetSettings
// Struct Size::0x0060
struct FBuildPromotionOpenAssetSettings
{
    FFilePath                                     BlueprintAsset;                                               // 0x0000(0x0010)
    FFilePath                                     MaterialAsset;                                                // 0x0010(0x0010)
    FFilePath                                     ParticleSystemAsset;                                          // 0x0020(0x0010)
    FFilePath                                     SkeletalMeshAsset;                                            // 0x0030(0x0010)
    FFilePath                                     StaticMeshAsset;                                              // 0x0040(0x0010)
    FFilePath                                     TextureAsset;                                                 // 0x0050(0x0010)
};


// ScriptStruct  Engine.BuildPromotionImportWorkflowSettings
// Struct Size::0x0150
struct FBuildPromotionImportWorkflowSettings
{
    FEditorImportWorkflowDefinition               Diffuse;                                                      // 0x0000(0x0020)
    FEditorImportWorkflowDefinition               Normal;                                                       // 0x0020(0x0020)
    FEditorImportWorkflowDefinition               StaticMesh;                                                   // 0x0040(0x0020)
    FEditorImportWorkflowDefinition               ReimportStaticMesh;                                           // 0x0060(0x0020)
    FEditorImportWorkflowDefinition               BlendShapeMesh;                                               // 0x0080(0x0020)
    FEditorImportWorkflowDefinition               MorphMesh;                                                    // 0x00A0(0x0020)
    FEditorImportWorkflowDefinition               SkeletalMesh;                                                 // 0x00C0(0x0020)
    FEditorImportWorkflowDefinition               Animation;                                                    // 0x00E0(0x0020)
    FEditorImportWorkflowDefinition               Sound;                                                        // 0x0100(0x0020)
    FEditorImportWorkflowDefinition               SurroundSound;                                                // 0x0120(0x0020)
    TArray<FEditorImportWorkflowDefinition>       OtherAssetsToImport;                                          // 0x0140(0x0010)
};


// ScriptStruct  Engine.EditorImportWorkflowDefinition
// Struct Size::0x0020
struct FEditorImportWorkflowDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.ImportFactorySettingValues
// Struct Size::0x0020
struct FImportFactorySettingValues
{
    FString                                       SettingName;                                                  // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.BlueprintEditorPromotionSettings
// Struct Size::0x0030
struct FBlueprintEditorPromotionSettings
{
    FFilePath                                     FirstMeshPath;                                                // 0x0000(0x0010)
    FFilePath                                     SecondMeshPath;                                               // 0x0010(0x0010)
    FFilePath                                     DefaultParticleAsset;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.ParticleEditorPromotionSettings
// Struct Size::0x0010
struct FParticleEditorPromotionSettings
{
    FFilePath                                     DefaultParticleAsset;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.MaterialEditorPromotionSettings
// Struct Size::0x0030
struct FMaterialEditorPromotionSettings
{
    FFilePath                                     DefaultMaterialAsset;                                         // 0x0000(0x0010)
    FFilePath                                     DefaultDiffuseTexture;                                        // 0x0010(0x0010)
    FFilePath                                     DefaultNormalTexture;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.EditorImportExportTestDefinition
// Struct Size::0x0038
struct FEditorImportExportTestDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    FString                                       ExportFileExtension;                                          // 0x0010(0x0010)
    bool                                          bSkipExport;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.ExternalToolDefinition
// Struct Size::0x0060
struct FExternalToolDefinition
{
    FString                                       ToolName;                                                     // 0x0000(0x0010)
    FFilePath                                     ExecutablePath;                                               // 0x0010(0x0010)
    FString                                       CommandLineOptions;                                           // 0x0020(0x0010)
    FDirectoryPath                                WorkingDirectory;                                             // 0x0030(0x0010)
    FString                                       ScriptExtension;                                              // 0x0040(0x0010)
    FDirectoryPath                                ScriptDirectory;                                              // 0x0050(0x0010)
};


// ScriptStruct  Engine.NavAvoidanceData
// Struct Size::0x0040
struct FNavAvoidanceData
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  Engine.BandwidthTestGenerator
// Struct Size::0x0020
struct FBandwidthTestGenerator
{
    TArray<FBandwidthTestItem>                    ReplicatedBuffers;                                            // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.BandwidthTestItem
// Struct Size::0x0010
struct FBandwidthTestItem
{
    TArray<char>                                  Kilobyte;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.BlendProfileBoneEntry
// Struct Size::0x0014
struct FBlendProfileBoneEntry
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         BlendScale;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.PerBoneInterpolation
// Struct Size::0x0014
struct FPerBoneInterpolation
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         InterpolationSpeedPerSec;                                     // 0x0010(0x0004)
};


// ScriptStruct  Engine.GridBlendSample
// Struct Size::0x001C
struct FGridBlendSample
{
    FEditorElement                                GridElement;                                                  // 0x0000(0x0018)
    float                                         BlendWeight;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Engine.EditorElement
// Struct Size::0x0018
struct FEditorElement
{
    int32_t                                       Indices;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Weights;                                                      // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlendSample
// Struct Size::0x0018
struct FBlendSample
{
    UAnimSequence*                                Animation;                                                    // 0x0000(0x0008)
    FVector                                       SampleValue;                                                  // 0x0008(0x000C)
    float                                         RateScale;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Engine.BlendParameter
// Struct Size::0x0020
struct FBlendParameter
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    float                                         Min;                                                          // 0x0010(0x0004)
    float                                         Max;                                                          // 0x0014(0x0004)
    int32_t                                       GridNum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.BPEditorBookmarkNode
// Struct Size::0x0038
struct FBPEditorBookmarkNode
{
    FGuid                                         NodeGuid;                                                     // 0x0000(0x0010)
    FGuid                                         ParentGuid;                                                   // 0x0010(0x0010)
    FText                                         DisplayName;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.EditedDocumentInfo
// Struct Size::0x0030
struct FEditedDocumentInfo
{
    FSoftObjectPath                               EditedObjectPath;                                             // 0x0000(0x0018)
    FVector2D                                     SavedViewOffset;                                              // 0x0018(0x0008)
    float                                         SavedZoomAmount;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UObject*                                      EditedObject;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.BPInterfaceDescription
// Struct Size::0x0018
struct FBPInterfaceDescription
{
    UInterface*                                   Interface;                                                    // 0x0000(0x0008)
    TArray<UEdGraph*>                             Graphs;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.BPVariableDescription
// Struct Size::0x00D0
struct FBPVariableDescription
{
    FName                                         VarName;                                                      // 0x0000(0x0008)
    FGuid                                         VarGuid;                                                      // 0x0008(0x0010)
    FEdGraphPinType                               VarType;                                                      // 0x0018(0x0058)
    FString                                       FriendlyName;                                                 // 0x0070(0x0010)
    FText                                         Category;                                                     // 0x0080(0x0018)
    uint64_t                                      PropertyFlags;                                                // 0x0098(0x0008)
    FName                                         RepNotifyFunc;                                                // 0x00A0(0x0008)
    enum class ELifetimeCondition                 ReplicationCondition;                                         // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FBPVariableMetaDataEntry>              MetaDataArray;                                                // 0x00B0(0x0010)
    FString                                       DefaultValue;                                                 // 0x00C0(0x0010)
};


// ScriptStruct  Engine.BPVariableMetaDataEntry
// Struct Size::0x0018
struct FBPVariableMetaDataEntry
{
    FName                                         DataKey;                                                      // 0x0000(0x0008)
    FString                                       DataValue;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphPinType
// Struct Size::0x0058
struct FEdGraphPinType
{
    FName                                         PinCategory;                                                  // 0x0000(0x0008)
    FName                                         PinSubCategory;                                               // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       PinSubCategoryObject;                                         // 0x0010(0x0008)
    FSimpleMemberReference                        PinSubCategoryMemberReference;                                // 0x0018(0x0020)
    FEdGraphTerminalType                          PinValueType;                                                 // 0x0038(0x001C)
    enum class EPinContainerType                  ContainerType;                                                // 0x0054(0x0001)
    char                                          bIsArray;                                                     // 0x0055(0x0001)
    char                                          bIsReference;                                                 // 0x0055(0x0001)
    char                                          bIsConst;                                                     // 0x0055(0x0001)
    char                                          bIsWeakPointer;                                               // 0x0055(0x0001)
    char                                          bIsUObjectWrapper;                                            // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
};


// ScriptStruct  Engine.EdGraphTerminalType
// Struct Size::0x001C
struct FEdGraphTerminalType
{
    FName                                         TerminalCategory;                                             // 0x0000(0x0008)
    FName                                         TerminalSubCategory;                                          // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       TerminalSubCategoryObject;                                    // 0x0010(0x0008)
    bool                                          bTerminalIsConst;                                             // 0x0018(0x0001)
    bool                                          bTerminalIsWeakPointer;                                       // 0x0019(0x0001)
    bool                                          bTerminalIsUObjectWrapper;                                    // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.BlueprintMacroCosmeticInfo
// Struct Size::0x0001
struct FBlueprintMacroCosmeticInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.CompilerNativizationOptions
// Struct Size::0x0080
struct FCompilerNativizationOptions
{
    FName                                         PlatformName;                                                 // 0x0000(0x0008)
    bool                                          ServerOnlyPlatform;                                           // 0x0008(0x0001)
    bool                                          ClientOnlyPlatform;                                           // 0x0009(0x0001)
    bool                                          bExcludeMonolithicHeaders;                                    // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    TArray<FName>                                 ExcludedModules;                                              // 0x0010(0x0010)
    TSet<FSoftObjectPath>                         ExcludedAssets;                                               // 0x0020(0x0050)
    TArray<FString>                               ExcludedFolderPaths;                                          // 0x0070(0x0010)
};


// ScriptStruct  Engine.BPComponentClassOverride
// Struct Size::0x0010
struct FBPComponentClassOverride
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    UObject*                                      ComponentClass;                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BlueprintCookedComponentInstancingData
// Struct Size::0x0048
struct FBlueprintCookedComponentInstancingData
{
    TArray<FBlueprintComponentChangedPropertyInfo>ChangedPropertyList;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0011]                                               // 0x0010(0x0011)
    bool                                          bHasValidCookedData;                                          // 0x0021(0x0001)
    char                                          pa_0022[0x0026]                                               // 0x0022(0x0026)
};


// ScriptStruct  Engine.BlueprintComponentChangedPropertyInfo
// Struct Size::0x0018
struct FBlueprintComponentChangedPropertyInfo
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      PropertyScope;                                                // 0x0010(0x0008)
};


// ScriptStruct  Engine.EventGraphFastCallPair
// Struct Size::0x0010
struct FEventGraphFastCallPair
{
    UFunction*                                    FunctionToPatch;                                              // 0x0000(0x0008)
    int32_t                                       EventGraphCallOffset;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.BlueprintDebugData
// Struct Size::0x0001
struct FBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PointerToUberGraphFrame
// Struct Size::0x0008
struct FPointerToUberGraphFrame
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DebuggingInfoForSingleFunction
// Struct Size::0x0190
struct FDebuggingInfoForSingleFunction
{
    char                                          pa_0000[0x0190]                                               // 0x0000(0x0190)
};


// ScriptStruct  Engine.NodeToCodeAssociation
// Struct Size::0x0014
struct FNodeToCodeAssociation
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  Engine.AnimCurveType
// Struct Size::0x0002
struct FAnimCurveType
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Engine.BookmarkBaseJumpToSettings
// Struct Size::0x0001
struct FBookmarkBaseJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BookmarkJumpToSettings
// Struct Size::0x0001
struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{
};


// ScriptStruct  Engine.Bookmark2DJumpToSettings
// Struct Size::0x0001
struct FBookmark2DJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.GeomSelection
// Struct Size::0x000C
struct FGeomSelection
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    int32_t                                       Index;                                                        // 0x0004(0x0004)
    int32_t                                       SelectionIndex;                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.BuilderPoly
// Struct Size::0x0020
struct FBuilderPoly
{
    TArray<int32_t>                               VertexIndices;                                                // 0x0000(0x0010)
    int32_t                                       Direction;                                                    // 0x0010(0x0004)
    FName                                         ItemName;                                                     // 0x0014(0x0008)
    int32_t                                       PolyFlags;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Engine.CachedAnimTransitionData
// Struct Size::0x0024
struct FCachedAnimTransitionData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         FromStateName;                                                // 0x0008(0x0008)
    FName                                         ToStateName;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
};


// ScriptStruct  Engine.CachedAnimRelevancyData
// Struct Size::0x001C
struct FCachedAnimRelevancyData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.CachedAnimAssetPlayerData
// Struct Size::0x0018
struct FCachedAnimAssetPlayerData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateArray
// Struct Size::0x0018
struct FCachedAnimStateArray
{
    TArray<FCachedAnimStateData>                  States;                                                       // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateData
// Struct Size::0x001C
struct FCachedAnimStateData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.ActiveCameraShakeInfo
// Struct Size::0x0010
struct FActiveCameraShakeInfo
{
    UCameraShakeBase*                             ShakeInstance;                                                // 0x0000(0x0008)
    TWeakObjectPtr<UCameraShakeSourceComponent>   ShakeSource;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.PooledCameraShakes
// Struct Size::0x0010
struct FPooledCameraShakes
{
    TArray<UCameraShakeBase*>                     PooledShakes;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.VOscillator
// Struct Size::0x0024
struct FVOscillator
{
    FFOscillator                                  X;                                                            // 0x0000(0x000C)
    FFOscillator                                  Y;                                                            // 0x000C(0x000C)
    FFOscillator                                  Z;                                                            // 0x0018(0x000C)
};


// ScriptStruct  Engine.FOscillator
// Struct Size::0x000C
struct FFOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialOscillatorOffset           InitialOffset;                                                // 0x0008(0x0001)
    enum class EOscillatorWaveform                Waveform;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.ROscillator
// Struct Size::0x0024
struct FROscillator
{
    FFOscillator                                  Pitch;                                                        // 0x0000(0x000C)
    FFOscillator                                  Yaw;                                                          // 0x000C(0x000C)
    FFOscillator                                  Roll;                                                         // 0x0018(0x000C)
};


// ScriptStruct  Engine.CameraShakeInfo
// Struct Size::0x0010
struct FCameraShakeInfo
{
    FCameraShakeDuration                          Duration;                                                     // 0x0000(0x0008)
    float                                         BlendIn;                                                      // 0x0008(0x0004)
    float                                         BlendOut;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.CameraShakeDuration
// Struct Size::0x0008
struct FCameraShakeDuration
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    enum class ECameraShakeDurationType           Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.CameraShakeUpdateResult
// Struct Size::0x0020
struct FCameraShakeUpdateResult
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.CameraShakeUpdateParams
// Struct Size::0x06B0
struct FCameraShakeUpdateParams
{
    char                                          pa_0000[0x06B0]                                               // 0x0000(0x06B0)
};


// ScriptStruct  Engine.DummySpacerCameraTypes
// Struct Size::0x0001
struct FDummySpacerCameraTypes
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.MinimalViewInfo
// Struct Size::0x06A0
struct FMinimalViewInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
    float                                         ShadowFOV;                                                    // 0x001C(0x0004)
    float                                         DesiredFOV;                                                   // 0x0020(0x0004)
    float                                         OrthoWidth;                                                   // 0x0024(0x0004)
    float                                         OrthoNearClipPlane;                                           // 0x0028(0x0004)
    float                                         OrthoFarClipPlane;                                            // 0x002C(0x0004)
    float                                         AspectRatio;                                                  // 0x0030(0x0004)
    char                                          bConstrainAspectRatio;                                        // 0x0034(0x0001)
    char                                          bUseFieldOfViewForLOD;                                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    enum class ECameraProjectionMode              ProjectionMode;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         PostProcessBlendWeight;                                       // 0x003C(0x0004)
    FPostProcessSettings                          PostProcessSettings;                                          // 0x0040(0x0610)
    FVector2D                                     OffCenterProjectionOffset;                                    // 0x0650(0x0008)
    enum class ECameraFOVMode                     FOVMode;                                                      // 0x0658(0x0001)
    char                                          pa_0659[0x0047]                                               // 0x0659(0x0047)
};


// ScriptStruct  Engine.PostProcessSettings
// Struct Size::0x0610
struct FPostProcessSettings
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0002(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0003(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0004(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0005(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0006(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0007(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0008(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x0009(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000A(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000B(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000C(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000D(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000E(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x000F(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          bOverride;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0018(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x0019(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001A(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001B(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001C(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001D(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001E(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x001F(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0020(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          bOverride;                                                    // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    char                                          bOverride;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          bOverride;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    char                                          bMobileHQGaussian;                                            // 0x002C(0x0001)
    enum class EBloomMethod                       BloomMethod;                                                  // 0x002D(0x0001)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x002E(0x0001)
    char                                          pa_002F[0x0001]                                               // 0x002F(0x0001)
    float                                         WhiteTemp;                                                    // 0x0030(0x0004)
    float                                         WhiteTint;                                                    // 0x0034(0x0004)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FVector4                                      ColorSaturation;                                              // 0x0040(0x0010)
    FVector4                                      ColorContrast;                                                // 0x0050(0x0010)
    FVector4                                      ColorGamma;                                                   // 0x0060(0x0010)
    FVector4                                      ColorGain;                                                    // 0x0070(0x0010)
    FVector4                                      ColorOffset;                                                  // 0x0080(0x0010)
    float                                         ColorVibrance;                                                // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
    FVector4                                      MobileLDRColorSaturation;                                     // 0x00A0(0x0010)
    FVector4                                      MobileLDRColorGain;                                           // 0x00B0(0x0010)
    FVector4                                      MobileLDRColorOffset;                                         // 0x00C0(0x0010)
    FVector4                                      ColorSaturationShadows;                                       // 0x00D0(0x0010)
    FVector4                                      ColorContrastShadows;                                         // 0x00E0(0x0010)
    FVector4                                      ColorGammaShadows;                                            // 0x00F0(0x0010)
    FVector4                                      ColorGainShadows;                                             // 0x0100(0x0010)
    FVector4                                      ColorOffsetShadows;                                           // 0x0110(0x0010)
    FVector4                                      ColorSaturationMidtones;                                      // 0x0120(0x0010)
    FVector4                                      ColorContrastMidtones;                                        // 0x0130(0x0010)
    FVector4                                      ColorGammaMidtones;                                           // 0x0140(0x0010)
    FVector4                                      ColorGainMidtones;                                            // 0x0150(0x0010)
    FVector4                                      ColorOffsetMidtones;                                          // 0x0160(0x0010)
    FVector4                                      ColorSaturationHighlights;                                    // 0x0170(0x0010)
    FVector4                                      ColorContrastHighlights;                                      // 0x0180(0x0010)
    FVector4                                      ColorGammaHighlights;                                         // 0x0190(0x0010)
    FVector4                                      ColorGainHighlights;                                          // 0x01A0(0x0010)
    FVector4                                      ColorOffsetHighlights;                                        // 0x01B0(0x0010)
    float                                         ColorCorrectionHighlightsMin;                                 // 0x01C0(0x0004)
    float                                         ColorCorrectionShadowsMax;                                    // 0x01C4(0x0004)
    float                                         BlueCorrection;                                               // 0x01C8(0x0004)
    float                                         ExpandGamut;                                                  // 0x01CC(0x0004)
    float                                         ToneCurveAmount;                                              // 0x01D0(0x0004)
    float                                         FilmSlope;                                                    // 0x01D4(0x0004)
    float                                         FilmToe;                                                      // 0x01D8(0x0004)
    float                                         FilmShoulder;                                                 // 0x01DC(0x0004)
    float                                         FilmBlackClip;                                                // 0x01E0(0x0004)
    float                                         FilmWhiteClip;                                                // 0x01E4(0x0004)
    FLinearColor                                  FilmWhitePoint;                                               // 0x01E8(0x0010)
    FLinearColor                                  FilmShadowTint;                                               // 0x01F8(0x0010)
    float                                         FilmShadowTintBlend;                                          // 0x0208(0x0004)
    float                                         FilmShadowTintAmount;                                         // 0x020C(0x0004)
    float                                         FilmSaturation;                                               // 0x0210(0x0004)
    FLinearColor                                  FilmChannelMixerRed;                                          // 0x0214(0x0010)
    FLinearColor                                  FilmChannelMixerGreen;                                        // 0x0224(0x0010)
    FLinearColor                                  FilmChannelMixerBlue;                                         // 0x0234(0x0010)
    float                                         FilmContrast;                                                 // 0x0244(0x0004)
    float                                         FilmToeAmount;                                                // 0x0248(0x0004)
    float                                         FilmHealAmount;                                               // 0x024C(0x0004)
    float                                         FilmDynamicRange;                                             // 0x0250(0x0004)
    FLinearColor                                  SceneColorTint;                                               // 0x0254(0x0010)
    float                                         SceneFringeIntensity;                                         // 0x0264(0x0004)
    float                                         ChromaticAberrationStartOffset;                               // 0x0268(0x0004)
    float                                         BloomIntensity;                                               // 0x026C(0x0004)
    float                                         BloomThreshold;                                               // 0x0270(0x0004)
    float                                         BloomSizeScale;                                               // 0x0274(0x0004)
    float                                         Bloom1Size;                                                   // 0x0278(0x0004)
    float                                         Bloom2Size;                                                   // 0x027C(0x0004)
    float                                         Bloom3Size;                                                   // 0x0280(0x0004)
    float                                         Bloom4Size;                                                   // 0x0284(0x0004)
    float                                         Bloom5Size;                                                   // 0x0288(0x0004)
    float                                         Bloom6Size;                                                   // 0x028C(0x0004)
    FLinearColor                                  Bloom1Tint;                                                   // 0x0290(0x0010)
    FLinearColor                                  Bloom2Tint;                                                   // 0x02A0(0x0010)
    FLinearColor                                  Bloom3Tint;                                                   // 0x02B0(0x0010)
    FLinearColor                                  Bloom4Tint;                                                   // 0x02C0(0x0010)
    FLinearColor                                  Bloom5Tint;                                                   // 0x02D0(0x0010)
    FLinearColor                                  Bloom6Tint;                                                   // 0x02E0(0x0010)
    float                                         BloomConvolutionSize;                                         // 0x02F0(0x0004)
    char                                          pa_02F4[0x0004]                                               // 0x02F4(0x0004)
    UTexture2D*                                   BloomConvolutionTexture;                                      // 0x02F8(0x0008)
    FVector2D                                     BloomConvolutionCenterUV;                                     // 0x0300(0x0008)
    float                                         BloomConvolutionPreFilterMin;                                 // 0x0308(0x0004)
    float                                         BloomConvolutionPreFilterMax;                                 // 0x030C(0x0004)
    float                                         BloomConvolutionPreFilterMult;                                // 0x0310(0x0004)
    float                                         BloomConvolutionBufferScale;                                  // 0x0314(0x0004)
    UTexture*                                     BloomDirtMask;                                                // 0x0318(0x0008)
    float                                         BloomDirtMaskIntensity;                                       // 0x0320(0x0004)
    FLinearColor                                  BloomDirtMaskTint;                                            // 0x0324(0x0010)
    FLinearColor                                  AmbientCubemapTint;                                           // 0x0334(0x0010)
    float                                         AmbientCubemapIntensity;                                      // 0x0344(0x0004)
    UTextureCube*                                 AmbientCubemap;                                               // 0x0348(0x0008)
    float                                         CameraShutterSpeed;                                           // 0x0350(0x0004)
    float                                         CameraISO;                                                    // 0x0354(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x0358(0x0004)
    float                                         DepthOfFieldMinFstop;                                         // 0x035C(0x0004)
    int32_t                                       DepthOfFieldBladeCount;                                       // 0x0360(0x0004)
    float                                         AutoExposureBias;                                             // 0x0364(0x0004)
    float                                         AutoExposureBiasBackup;                                       // 0x0368(0x0004)
    char                                          bOverride;                                                    // 0x036C(0x0001)
    char                                          pa_036D[0x0003]                                               // 0x036D(0x0003)
    char                                          AutoExposureApplyPhysicalCameraExposure;                      // 0x0370(0x0001)
    char                                          pa_0371[0x0007]                                               // 0x0371(0x0007)
    UCurveFloat*                                  AutoExposureBiasCurve;                                        // 0x0378(0x0008)
    float                                         CompensateCurveBaseEV;                                        // 0x0380(0x0004)
    char                                          pa_0384[0x0004]                                               // 0x0384(0x0004)
    UTexture*                                     AutoExposureMeterMask;                                        // 0x0388(0x0008)
    float                                         AutoExposureMeterMaskWeightAdjustmentMin;                     // 0x0390(0x0004)
    float                                         AutoExposureMeterMaskWeightAdjustmentMax;                     // 0x0394(0x0004)
    float                                         AutoExposureMeterMaskWeightAdjustmentPower;                   // 0x0398(0x0004)
    float                                         AutoExposureMeterMaskWeight;                                  // 0x039C(0x0004)
    float                                         AutoExposureLowPercent;                                       // 0x03A0(0x0004)
    float                                         AutoExposureHighPercent;                                      // 0x03A4(0x0004)
    float                                         AutoExposureMinBrightness;                                    // 0x03A8(0x0004)
    float                                         AutoExposureMaxBrightness;                                    // 0x03AC(0x0004)
    float                                         AutoExposureSpeedUp;                                          // 0x03B0(0x0004)
    float                                         AutoExposureSpeedDown;                                        // 0x03B4(0x0004)
    float                                         FXExposureCompensationOffset;                                 // 0x03B8(0x0004)
    float                                         FXExposureCompensationSlope;                                  // 0x03BC(0x0004)
    float                                         FXExposureCompensationSecondSlope;                            // 0x03C0(0x0004)
    float                                         HistogramLogMin;                                              // 0x03C4(0x0004)
    float                                         HistogramLogMax;                                              // 0x03C8(0x0004)
    float                                         AutoExposureCalibrationConstant;                              // 0x03CC(0x0004)
    float                                         LocalExposureContrastScale;                                   // 0x03D0(0x0004)
    float                                         LocalExposureHighlightContrastScale;                          // 0x03D4(0x0004)
    float                                         LocalExposureShadowContrastScale;                             // 0x03D8(0x0004)
    float                                         LocalExposureDetailStrength;                                  // 0x03DC(0x0004)
    float                                         LocalExposureBlurredLuminanceBlend;                           // 0x03E0(0x0004)
    float                                         LocalExposureBlurredLuminanceKernelSizePercent;               // 0x03E4(0x0004)
    float                                         LocalExposureMiddleGreyBias;                                  // 0x03E8(0x0004)
    float                                         LensFlareIntensity;                                           // 0x03EC(0x0004)
    FLinearColor                                  LensFlareTint;                                                // 0x03F0(0x0010)
    float                                         LensFlareBokehSize;                                           // 0x0400(0x0004)
    float                                         LensFlareThreshold;                                           // 0x0404(0x0004)
    UTexture*                                     LensFlareBokehShape;                                          // 0x0408(0x0008)
    TArray<FLinearColor>                          LensFlareTints;                                               // 0x0410(0x0010)
    float                                         VignetteIntensity;                                            // 0x0420(0x0004)
    float                                         GrainJitter;                                                  // 0x0424(0x0004)
    float                                         GrainIntensity;                                               // 0x0428(0x0004)
    float                                         AmbientOcclusionIntensity;                                    // 0x042C(0x0004)
    float                                         AmbientOcclusionIntensityFoliage;                             // 0x0430(0x0004)
    float                                         AmbientOcclusionFarIntensity;                                 // 0x0434(0x0004)
    float                                         AmbientOcclusionFadeOutRadius;                                // 0x0438(0x0004)
    float                                         AmbientOcclusionFadeOutDistance;                              // 0x043C(0x0004)
    float                                         AmbientOcclusionStaticFraction;                               // 0x0440(0x0004)
    float                                         AmbientOcclusionRadius;                                       // 0x0444(0x0004)
    float                                         AmbientOcclusionFarRadius;                                    // 0x0448(0x0004)
    char                                          AmbientOcclusionRadiusInWS;                                   // 0x044C(0x0001)
    char                                          pa_044D[0x0003]                                               // 0x044D(0x0003)
    float                                         AmbientOcclusionFadeDistance;                                 // 0x0450(0x0004)
    float                                         AmbientOcclusionFadeRadius;                                   // 0x0454(0x0004)
    float                                         AmbientOcclusionDistance;                                     // 0x0458(0x0004)
    float                                         AmbientOcclusionPower;                                        // 0x045C(0x0004)
    float                                         AmbientOcclusionBias;                                         // 0x0460(0x0004)
    float                                         AmbientOcclusionQuality;                                      // 0x0464(0x0004)
    float                                         AmbientOcclusionMipBlend;                                     // 0x0468(0x0004)
    float                                         AmbientOcclusionMipScale;                                     // 0x046C(0x0004)
    float                                         AmbientOcclusionMipThreshold;                                 // 0x0470(0x0004)
    float                                         AmbientOcclusionTemporalBlendWeight;                          // 0x0474(0x0004)
    char                                          RayTracingAO;                                                 // 0x0478(0x0001)
    char                                          pa_0479[0x0003]                                               // 0x0479(0x0003)
    int32_t                                       RayTracingAOSamplesPerPixel;                                  // 0x047C(0x0004)
    float                                         RayTracingAOIntensity;                                        // 0x0480(0x0004)
    float                                         RayTracingAORadius;                                           // 0x0484(0x0004)
    FLinearColor                                  IndirectLightingColor;                                        // 0x0488(0x0010)
    float                                         IndirectLightingIntensity;                                    // 0x0498(0x0004)
    float                                         LumenSceneDetail;                                             // 0x049C(0x0004)
    float                                         LumenSceneLightingUpdateSpeed;                                // 0x04A0(0x0004)
    float                                         LumenFinalGatherQuality;                                      // 0x04A4(0x0004)
    float                                         LumenSkylightLeaking;                                         // 0x04A8(0x0004)
    char                                          LumenTraceMeshSDFs;                                           // 0x04AC(0x0001)
    char                                          pa_04AD[0x0003]                                               // 0x04AD(0x0003)
    float                                         SkyVisibilityScale;                                           // 0x04B0(0x0004)
    float                                         TODGIAndSkyVisibilityScaleChangeSpeed;                        // 0x04B4(0x0004)
    float                                         ShadowReduceSpecularAOIntensity;                              // 0x04B8(0x0004)
    float                                         MinimalIndirectLightingLuminance;                             // 0x04BC(0x0004)
    float                                         LocalTonemappingBrighterAreaIntensity;                        // 0x04C0(0x0004)
    float                                         LocalTonemappingBrighterAreaEVDiffThreshold;                  // 0x04C4(0x0004)
    float                                         LocalTonemappingDarkerAreaIntensity;                          // 0x04C8(0x0004)
    float                                         LocalTonemappingDarkerAreaEVDiffThreshold;                    // 0x04CC(0x0004)
    float                                         LocalTonemappingSceneEVOffset;                                // 0x04D0(0x0004)
    float                                         LocalTonemappingMinSkyVisibility;                             // 0x04D4(0x0004)
    float                                         ColorGainMultiplier;                                          // 0x04D8(0x0004)
    float                                         ColorSaturationMultiplier;                                    // 0x04DC(0x0004)
    float                                         ColorContrastMultiplier;                                      // 0x04E0(0x0004)
    FVector                                       ColorGammaMultiplier;                                         // 0x04E4(0x000C)
    enum class ERayTracingGlobalIlluminationType  RayTracingGIType;                                             // 0x04F0(0x0001)
    char                                          pa_04F1[0x0003]                                               // 0x04F1(0x0003)
    int32_t                                       RayTracingGIMaxBounces;                                       // 0x04F4(0x0004)
    int32_t                                       RayTracingGISamplesPerPixel;                                  // 0x04F8(0x0004)
    float                                         ColorGradingIntensity;                                        // 0x04FC(0x0004)
    UTexture*                                     ColorGradingLUT;                                              // 0x0500(0x0008)
    float                                         DepthOfFieldSensorWidth;                                      // 0x0508(0x0004)
    float                                         DepthOfFieldFocalDistance;                                    // 0x050C(0x0004)
    char                                          EnableForegroundOnlyDOF;                                      // 0x0510(0x0001)
    char                                          pa_0511[0x0003]                                               // 0x0511(0x0003)
    float                                         DepthOfFieldCustomFOVForegroundOnly;                          // 0x0514(0x0004)
    float                                         DepthOfFieldMaxBackgroundRadius;                              // 0x0518(0x0004)
    float                                         DepthOfFieldDepthBlurAmount;                                  // 0x051C(0x0004)
    float                                         DepthOfFieldDepthBlurRadius;                                  // 0x0520(0x0004)
    float                                         DepthOfFieldFocalRegion;                                      // 0x0524(0x0004)
    float                                         DepthOfFieldNearTransitionRegion;                             // 0x0528(0x0004)
    float                                         DepthOfFieldFarTransitionRegion;                              // 0x052C(0x0004)
    float                                         DepthOfFieldScale;                                            // 0x0530(0x0004)
    float                                         DepthOfFieldNearBlurSize;                                     // 0x0534(0x0004)
    float                                         DepthOfFieldFarBlurSize;                                      // 0x0538(0x0004)
    float                                         DepthOfFieldOcclusion;                                        // 0x053C(0x0004)
    float                                         DepthOfFieldSkyFocusDistance;                                 // 0x0540(0x0004)
    float                                         DepthOfFieldVignetteSize;                                     // 0x0544(0x0004)
    float                                         UABlurScopeRadius;                                            // 0x0548(0x0004)
    float                                         UABlurScopeThreshold;                                         // 0x054C(0x0004)
    char                                          bUABlurCircle;                                                // 0x0550(0x0001)
    char                                          bUABlurOptimal;                                               // 0x0550(0x0001)
    char                                          pa_0551[0x0003]                                               // 0x0551(0x0003)
    float                                         MotionBlurAmount;                                             // 0x0554(0x0004)
    float                                         MotionBlurMax;                                                // 0x0558(0x0004)
    int32_t                                       MotionBlurTargetFPS;                                          // 0x055C(0x0004)
    float                                         MotionBlurPerObjectSize;                                      // 0x0560(0x0004)
    float                                         LPVIntensity;                                                 // 0x0564(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0568(0x0004)
    float                                         LPVSize;                                                      // 0x056C(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x0570(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0574(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0578(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x057C(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0580(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0584(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0588(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x058C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0590(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0594(0x0004)
    enum class EReflectionsType                   ReflectionsType;                                              // 0x0598(0x0001)
    char                                          pa_0599[0x0003]                                               // 0x0599(0x0003)
    float                                         ScreenSpaceReflectionIntensity;                               // 0x059C(0x0004)
    float                                         ScreenSpaceReflectionQuality;                                 // 0x05A0(0x0004)
    float                                         ScreenSpaceReflectionMaxRoughness;                            // 0x05A4(0x0004)
    float                                         RayTracingReflectionsMaxRoughness;                            // 0x05A8(0x0004)
    int32_t                                       RayTracingReflectionsMaxBounces;                              // 0x05AC(0x0004)
    int32_t                                       RayTracingReflectionsSamplesPerPixel;                         // 0x05B0(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingReflectionsShadows;                              // 0x05B4(0x0001)
    char                                          RayTracingReflectionsTranslucency;                            // 0x05B5(0x0001)
    enum class ETranslucencyType                  TranslucencyType;                                             // 0x05B6(0x0001)
    char                                          pa_05B7[0x0001]                                               // 0x05B7(0x0001)
    float                                         RayTracingTranslucencyMaxRoughness;                           // 0x05B8(0x0004)
    int32_t                                       RayTracingTranslucencyRefractionRays;                         // 0x05BC(0x0004)
    int32_t                                       RayTracingTranslucencySamplesPerPixel;                        // 0x05C0(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingTranslucencyShadows;                             // 0x05C4(0x0001)
    char                                          RayTracingTranslucencyRefraction;                             // 0x05C5(0x0001)
    char                                          pa_05C6[0x0002]                                               // 0x05C6(0x0002)
    int32_t                                       PathTracingMaxBounces;                                        // 0x05C8(0x0004)
    int32_t                                       PathTracingSamplesPerPixel;                                   // 0x05CC(0x0004)
    float                                         LPVFadeRange;                                                 // 0x05D0(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x05D4(0x0004)
    float                                         ScreenPercentage;                                             // 0x05D8(0x0004)
    char                                          bOverride;                                                    // 0x05DC(0x0001)
    char                                          bOverride;                                                    // 0x05DC(0x0001)
    char                                          bOverride;                                                    // 0x05DC(0x0001)
    char                                          bOverride;                                                    // 0x05DC(0x0001)
    char                                          bOverride;                                                    // 0x05DC(0x0001)
    char                                          pa_05DD[0x0003]                                               // 0x05DD(0x0003)
    float                                         HeightFogReductionIndoorDepth;                                // 0x05E0(0x0004)
    float                                         HeightFogReductionBegin;                                      // 0x05E4(0x0004)
    float                                         HeightFogReductionEnd;                                        // 0x05E8(0x0004)
    float                                         HeightFogReductionSkyIrradianceFactor;                        // 0x05EC(0x0004)
    float                                         VolumetricFogReduction;                                       // 0x05F0(0x0004)
    char                                          bOverride;                                                    // 0x05F4(0x0001)
    char                                          pa_05F5[0x0003]                                               // 0x05F5(0x0003)
    float                                         IndoorMaskTraceDistance;                                      // 0x05F8(0x0004)
    char                                          pa_05FC[0x0004]                                               // 0x05FC(0x0004)
    FWeightedBlendables                           WeightedBlendables;                                           // 0x0600(0x0010)
};


// ScriptStruct  Engine.WeightedBlendables
// Struct Size::0x0010
struct FWeightedBlendables
{
    TArray<FWeightedBlendable>                    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.WeightedBlendable
// Struct Size::0x0010
struct FWeightedBlendable
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UObject*                                      Object;                                                       // 0x0008(0x0008)
};


// ScriptStruct  Engine.CanvasIcon
// Struct Size::0x0018
struct FCanvasIcon
{
    UTexture*                                     Texture;                                                      // 0x0000(0x0008)
    float                                         U;                                                            // 0x0008(0x0004)
    float                                         V;                                                            // 0x000C(0x0004)
    float                                         UL;                                                           // 0x0010(0x0004)
    float                                         VL;                                                           // 0x0014(0x0004)
};


// ScriptStruct  Engine.WrappedStringElement
// Struct Size::0x0018
struct FWrappedStringElement
{
    FString                                       Value;                                                        // 0x0000(0x0010)
    FVector2D                                     LineExtent;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Engine.TextSizingParameters
// Struct Size::0x0028
struct FTextSizingParameters
{
    float                                         DrawX;                                                        // 0x0000(0x0004)
    float                                         DrawY;                                                        // 0x0004(0x0004)
    float                                         DrawXL;                                                       // 0x0008(0x0004)
    float                                         DrawYL;                                                       // 0x000C(0x0004)
    FVector2D                                     Scaling;                                                      // 0x0010(0x0008)
    UFont*                                        DrawFont;                                                     // 0x0018(0x0008)
    FVector2D                                     SpacingAdjust;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.BasedMovementInfo
// Struct Size::0x0038
struct FBasedMovementInfo
{
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    bool                                          bServerHasBaseComponent;                                      // 0x0028(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0029(0x0001)
    bool                                          bServerHasVelocity;                                           // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
    UPhysicalMaterial*                            PhysMaterial;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Engine.SimulatedRootMotionReplicatedMove
// Struct Size::0x00A0
struct FSimulatedRootMotionReplicatedMove
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRepRootMotionMontage                         RootMotion;                                                   // 0x0008(0x0098)
};


// ScriptStruct  Engine.RepRootMotionMontage
// Struct Size::0x0098
struct FRepRootMotionMontage
{
    bool                                          bIsActive;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimMontage*                                 AnimMontage;                                                  // 0x0008(0x0008)
    float                                         position;                                                     // 0x0010(0x0004)
    FVector                                       Location;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0030(0x0008)
    FName                                         MovementBaseBoneName;                                         // 0x0038(0x0008)
    bool                                          bRelativePosition;                                            // 0x0040(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
    FRootMotionSourceGroup                        AuthoritativeRootMotion;                                      // 0x0048(0x0038)
    FVector                                       Acceleration;                                                 // 0x0080(0x000C)
    FVector                                       LinearVelocity;                                               // 0x008C(0x000C)
};


// ScriptStruct  Engine.RootMotionSourceGroup
// Struct Size::0x0038
struct FRootMotionSourceGroup
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    char                                          bHasAdditiveSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSourcesWithIgnoreZAccumulate;                     // 0x0028(0x0001)
    char                                          bIsAdditiveVelocityApplied;                                   // 0x0028(0x0001)
    FRootMotionSourceSettings                     LastAccumulatedSettings;                                      // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FVector                                       LastPreAdditiveVelocity;                                      // 0x002C(0x000C)
};


// ScriptStruct  Engine.RootMotionSourceSettings
// Struct Size::0x0001
struct FRootMotionSourceSettings
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.CharacterMovementComponentPostPhysicsTickFunction
// Struct Size::0x0040
struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.FindFloorResult
// Struct Size::0x00A8
struct FFindFloorResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bWalkableFloor;                                               // 0x0000(0x0001)
    char                                          bLineTrace;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FloorDist;                                                    // 0x0004(0x0004)
    float                                         LineDist;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FHitResult                                    HitResult;                                                    // 0x0010(0x0098)
};


// ScriptStruct  Engine.CharacterNetworkSerializationPackedBits
// Struct Size::0x0098
struct FCharacterNetworkSerializationPackedBits
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
};


// ScriptStruct  Engine.CharacterMoveResponsePackedBits
// Struct Size::0x0098
struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
{
};


// ScriptStruct  Engine.CharacterServerMovePackedBits
// Struct Size::0x0098
struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
{
};


// ScriptStruct  Engine.MovementCompressedFlags
// Struct Size::0x0002
struct FMovementCompressedFlags
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Engine.ChildActorComponentInstanceData
// Struct Size::0x00E8
struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
{
    AActor*                                       ChildActorClass;                                              // 0x00B8(0x0008)
    FName                                         ChildActorName;                                               // 0x00C0(0x0008)
    TArray<FChildActorAttachedActorInfo>          AttachedActors;                                               // 0x00C8(0x0010)
    char                                          pa_00D8[0x0010]                                               // 0x00D8(0x0010)
};


// ScriptStruct  Engine.ChildActorAttachedActorInfo
// Struct Size::0x0040
struct FChildActorAttachedActorInfo
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0010(0x0030)
};


// ScriptStruct  Engine.CustomProfile
// Struct Size::0x0018
struct FCustomProfile
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomChannelSetup
// Struct Size::0x000C
struct FCustomChannelSetup
{
    enum class ECollisionChannel                  Channel;                                                      // 0x0000(0x0001)
    enum class ECollisionResponse                 DefaultResponse;                                              // 0x0001(0x0001)
    bool                                          bTraceType;                                                   // 0x0002(0x0001)
    bool                                          bStaticObject;                                                // 0x0003(0x0001)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.CollisionResponseTemplate
// Struct Size::0x0048
struct FCollisionResponseTemplate
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0001]                                               // 0x0009(0x0001)
    bool                                          bCanModify;                                                   // 0x000A(0x0001)
    char                                          pa_000B[0x0021]                                               // 0x000B(0x0021)
    FName                                         ObjectTypeName;                                               // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0038(0x0010)
};


// ScriptStruct  Engine.BlueprintComponentDelegateBinding
// Struct Size::0x0018
struct FBlueprintComponentDelegateBinding
{
    FName                                         ComponentPropertyName;                                        // 0x0000(0x0008)
    FName                                         DelegatePropertyName;                                         // 0x0008(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.MeshUVChannelInfo
// Struct Size::0x0014
struct FMeshUVChannelInfo
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    bool                                          bOverrideDensities;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LocalUVDensities;                                             // 0x0004(0x0004)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
};


// ScriptStruct  Engine.AutoCompleteNode
// Struct Size::0x0028
struct FAutoCompleteNode
{
    int32_t                                       IndexChar;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               AutoCompleteListIndices;                                      // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.AngularDriveConstraint
// Struct Size::0x004C
struct FAngularDriveConstraint
{
    FConstraintDrive                              TwistDrive;                                                   // 0x0000(0x0010)
    FConstraintDrive                              SwingDrive;                                                   // 0x0010(0x0010)
    FConstraintDrive                              SlerpDrive;                                                   // 0x0020(0x0010)
    FRotator                                      OrientationTarget;                                            // 0x0030(0x000C)
    FVector                                       AngularVelocityTarget;                                        // 0x003C(0x000C)
    enum class EAngularDriveMode                  AngularDriveMode;                                             // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintDrive
// Struct Size::0x0010
struct FConstraintDrive
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         MaxForce;                                                     // 0x0008(0x0004)
    char                                          bEnablePositionDrive;                                         // 0x000C(0x0001)
    char                                          bEnableVelocityDrive;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.LinearDriveConstraint
// Struct Size::0x004C
struct FLinearDriveConstraint
{
    FVector                                       PositionTarget;                                               // 0x0000(0x000C)
    FVector                                       VelocityTarget;                                               // 0x000C(0x000C)
    FConstraintDrive                              XDrive;                                                       // 0x0018(0x0010)
    FConstraintDrive                              YDrive;                                                       // 0x0028(0x0010)
    FConstraintDrive                              ZDrive;                                                       // 0x0038(0x0010)
    char                                          bEnablePositionDrive;                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintInstanceBase
// Struct Size::0x0018
struct FConstraintInstanceBase
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.ConstraintInstance
// Struct Size::0x01C0
struct FConstraintInstance : public FConstraintInstanceBase
{
    FName                                         JointName;                                                    // 0x0018(0x0008)
    FName                                         ConstraintBone1;                                              // 0x0020(0x0008)
    FName                                         ConstraintBone2;                                              // 0x0028(0x0008)
    FVector                                       Pos1;                                                         // 0x0030(0x000C)
    FVector                                       PriAxis1;                                                     // 0x003C(0x000C)
    FVector                                       SecAxis1;                                                     // 0x0048(0x000C)
    FVector                                       Pos2;                                                         // 0x0054(0x000C)
    FVector                                       PriAxis2;                                                     // 0x0060(0x000C)
    FVector                                       SecAxis2;                                                     // 0x006C(0x000C)
    FRotator                                      AngularRotationOffset;                                        // 0x0078(0x000C)
    char                                          bScaleLinearLimits;                                           // 0x0084(0x0001)
    char                                          pa_0085[0x0007]                                               // 0x0085(0x0007)
    FConstraintProfileProperties                  ProfileInstance;                                              // 0x008C(0x010C)
    char                                          pa_0198[0x0028]                                               // 0x0198(0x0028)
};


// ScriptStruct  Engine.ConstraintProfileProperties
// Struct Size::0x010C
struct FConstraintProfileProperties
{
    float                                         ProjectionLinearTolerance;                                    // 0x0000(0x0004)
    float                                         ProjectionAngularTolerance;                                   // 0x0004(0x0004)
    float                                         ProjectionLinearAlpha;                                        // 0x0008(0x0004)
    float                                         ProjectionAngularAlpha;                                       // 0x000C(0x0004)
    float                                         LinearBreakThreshold;                                         // 0x0010(0x0004)
    float                                         AngularBreakThreshold;                                        // 0x0014(0x0004)
    FLinearConstraint                             LinearLimit;                                                  // 0x0018(0x001C)
    FConeConstraint                               ConeLimit;                                                    // 0x0034(0x0020)
    FTwistConstraint                              TwistLimit;                                                   // 0x0054(0x001C)
    FLinearDriveConstraint                        LinearDrive;                                                  // 0x0070(0x004C)
    FAngularDriveConstraint                       AngularDrive;                                                 // 0x00BC(0x004C)
    char                                          bDisableCollision;                                            // 0x0108(0x0001)
    char                                          bParentDominates;                                             // 0x0108(0x0001)
    char                                          bEnableProjection;                                            // 0x0108(0x0001)
    char                                          bEnableSoftProjection;                                        // 0x0108(0x0001)
    char                                          bAngularBreakable;                                            // 0x0108(0x0001)
    char                                          bLinearBreakable;                                             // 0x0108(0x0001)
    char                                          pa_0109[0x0003]                                               // 0x0109(0x0003)
};


// ScriptStruct  Engine.ConstraintBaseParams
// Struct Size::0x0014
struct FConstraintBaseParams
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         Restitution;                                                  // 0x0008(0x0004)
    float                                         ContactDistance;                                              // 0x000C(0x0004)
    char                                          bSoftConstraint;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.TwistConstraint
// Struct Size::0x001C
struct FTwistConstraint : public FConstraintBaseParams
{
    float                                         TwistLimitDegrees;                                            // 0x0014(0x0004)
    enum class EAngularConstraintMotion           TwistMotion;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.ConeConstraint
// Struct Size::0x0020
struct FConeConstraint : public FConstraintBaseParams
{
    float                                         Swing1LimitDegrees;                                           // 0x0014(0x0004)
    float                                         Swing2LimitDegrees;                                           // 0x0018(0x0004)
    enum class EAngularConstraintMotion           Swing1Motion;                                                 // 0x001C(0x0001)
    enum class EAngularConstraintMotion           Swing2Motion;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Engine.LinearConstraint
// Struct Size::0x001C
struct FLinearConstraint : public FConstraintBaseParams
{
    float                                         Limit;                                                        // 0x0014(0x0004)
    enum class ELinearConstraintMotion            XMotion;                                                      // 0x0018(0x0001)
    enum class ELinearConstraintMotion            YMotion;                                                      // 0x0019(0x0001)
    enum class ELinearConstraintMotion            ZMotion;                                                      // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.CullDistanceSizePair
// Struct Size::0x0008
struct FCullDistanceSizePair
{
    float                                         Size;                                                         // 0x0000(0x0004)
    float                                         CullDistance;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.RuntimeCurveLinearColor
// Struct Size::0x0208
struct FRuntimeCurveLinearColor
{
    FRichCurve                                    ColorCurves;                                                  // 0x0000(0x0080)
    char                                          pa_0080[0x0180]                                               // 0x0080(0x0180)
    UCurveLinearColor*                            ExternalCurve;                                                // 0x0200(0x0008)
};


// ScriptStruct  Engine.NamedCurveValue
// Struct Size::0x000C
struct FNamedCurveValue
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.BakedCustomAttributePerBoneData
// Struct Size::0x0038
struct FBakedCustomAttributePerBoneData
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FBakedStringCustomAttribute>           StringAttributes;                                             // 0x0008(0x0010)
    TArray<FBakedIntegerCustomAttribute>          IntAttributes;                                                // 0x0018(0x0010)
    TArray<FBakedFloatCustomAttribute>            FloatAttributes;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.BakedFloatCustomAttribute
// Struct Size::0x0090
struct FBakedFloatCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x0008)
    FSimpleCurve                                  FloatCurve;                                                   // 0x0008(0x0088)
};


// ScriptStruct  Engine.SimpleCurve
// Struct Size::0x0088
struct FSimpleCurve : public FRealCurve
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    TArray<FSimpleCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.SimpleCurveKey
// Struct Size::0x0008
struct FSimpleCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.BakedIntegerCustomAttribute
// Struct Size::0x0088
struct FBakedIntegerCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x0008)
    FIntegralCurve                                IntCurve;                                                     // 0x0008(0x0080)
};


// ScriptStruct  Engine.IntegralCurve
// Struct Size::0x0080
struct FIntegralCurve : public FIndexedCurve
{
    TArray<FIntegralKey>                          Keys;                                                         // 0x0068(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0078(0x0004)
    bool                                          bUseDefaultValueBeforeFirstKey;                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.IntegralKey
// Struct Size::0x0008
struct FIntegralKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.BakedStringCustomAttribute
// Struct Size::0x0090
struct FBakedStringCustomAttribute
{
    FName                                         AttributeName;                                                // 0x0000(0x0008)
    FStringCurve                                  StringCurve;                                                  // 0x0008(0x0088)
};


// ScriptStruct  Engine.StringCurve
// Struct Size::0x0088
struct FStringCurve : public FIndexedCurve
{
    FString                                       DefaultValue;                                                 // 0x0068(0x0010)
    TArray<FStringCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StringCurveKey
// Struct Size::0x0018
struct FStringCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomAttributePerBoneData
// Struct Size::0x0018
struct FCustomAttributePerBoneData
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCustomAttribute>                      Attributes;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomAttribute
// Struct Size::0x0030
struct FCustomAttribute
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       VariantType;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.CustomAttributeSetting
// Struct Size::0x0020
struct FCustomAttributeSetting
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Meaning;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.DataTableCategoryHandle
// Struct Size::0x0018
struct FDataTableCategoryHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         ColumnName;                                                   // 0x0008(0x0008)
    FName                                         RowContents;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.DataTableRowHandle
// Struct Size::0x0010
struct FDataTableRowHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.DebugCameraControllerSettingsViewModeIndex
// Struct Size::0x0010
struct FDebugCameraControllerSettingsViewModeIndex
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EViewModeIndex                     ViewModeIndex;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.DebugDisplayProperty
// Struct Size::0x0020
struct FDebugDisplayProperty
{
    UObject*                                      Obj;                                                          // 0x0000(0x0008)
    UObject*                                      WithinClass;                                                  // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.DebugTextInfo
// Struct Size::0x0060
struct FDebugTextInfo
{
    AActor*                                       SrcActor;                                                     // 0x0000(0x0008)
    FVector                                       SrcActorOffset;                                               // 0x0008(0x000C)
    FVector                                       SrcActorDesiredOffset;                                        // 0x0014(0x000C)
    FString                                       DebugText;                                                    // 0x0020(0x0010)
    float                                         TimeRemaining;                                                // 0x0030(0x0004)
    float                                         Duration;                                                     // 0x0034(0x0004)
    FColor                                        TextColor;                                                    // 0x0038(0x0004)
    char                                          bAbsoluteLocation;                                            // 0x003C(0x0001)
    char                                          bKeepAttachedToActor;                                         // 0x003C(0x0001)
    char                                          bDrawShadow;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FVector                                       OrigActorLocation;                                            // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    UFont*                                        Font;                                                         // 0x0050(0x0008)
    float                                         FontScale;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Engine.MulticastRecordOptions
// Struct Size::0x0018
struct FMulticastRecordOptions
{
    FString                                       FuncPathName;                                                 // 0x0000(0x0010)
    bool                                          bServerSkip;                                                  // 0x0010(0x0001)
    bool                                          bClientSkip;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Engine.RollbackNetStartupActorInfo
// Struct Size::0x00B0
struct FRollbackNetStartupActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Archetype;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0028]                                               // 0x0010(0x0028)
    ULevel*                                       Level;                                                        // 0x0038(0x0008)
    char                                          pa_0040[0x0060]                                               // 0x0040(0x0060)
    TArray<UObject*>                              ObjReferences;                                                // 0x00A0(0x0010)
};


// ScriptStruct  Engine.DialogueWaveParameter
// Struct Size::0x0020
struct FDialogueWaveParameter
{
    UDialogueWave*                                DialogueWave;                                                 // 0x0000(0x0008)
    FDialogueContext                              Context;                                                      // 0x0008(0x0018)
};


// ScriptStruct  Engine.DialogueContext
// Struct Size::0x0018
struct FDialogueContext
{
    UDialogueVoice*                               Speaker;                                                      // 0x0000(0x0008)
    TArray<UDialogueVoice*>                       Targets;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Engine.DialogueContextMapping
// Struct Size::0x0038
struct FDialogueContextMapping
{
    FDialogueContext                              Context;                                                      // 0x0000(0x0018)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
    FString                                       LocalizationKeyFormat;                                        // 0x0020(0x0010)
    UDialogueSoundWaveProxy*                      Proxy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  Engine.RawDistributionFloat
// Struct Size::0x0030
struct FRawDistributionFloat : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    UDistributionFloat*                           Distribution;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.RawDistributionVector
// Struct Size::0x0048
struct FRawDistributionVector : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    FVector                                       MinValueVec;                                                  // 0x0028(0x000C)
    FVector                                       MaxValueVec;                                                  // 0x0034(0x000C)
    UDistributionVector*                          Distribution;                                                 // 0x0040(0x0008)
};


// ScriptStruct  Engine.GraphReference
// Struct Size::0x0020
struct FGraphReference
{
    UEdGraph*                                     MacroGraph;                                                   // 0x0000(0x0008)
    UBlueprint*                                   GraphBlueprint;                                               // 0x0008(0x0008)
    FGuid                                         GraphGuid;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.EdGraphPinReference
// Struct Size::0x0018
struct FEdGraphPinReference
{
    TWeakObjectPtr<UEdGraphNode>                  OwningNode;                                                   // 0x0000(0x0008)
    FGuid                                         PinId;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0100
struct FEdGraphSchemaAction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FText                                         MenuDescription;                                              // 0x0008(0x0018)
    FText                                         TooltipDescription;                                           // 0x0020(0x0018)
    FText                                         Category;                                                     // 0x0038(0x0018)
    FText                                         Keywords;                                                     // 0x0050(0x0018)
    int32_t                                       Grouping;                                                     // 0x0068(0x0004)
    int32_t                                       SectionID;                                                    // 0x006C(0x0004)
    TArray<FString>                               MenuDescriptionArray;                                         // 0x0070(0x0010)
    TArray<FString>                               FullSearchTitlesArray;                                        // 0x0080(0x0010)
    TArray<FString>                               FullSearchKeywordsArray;                                      // 0x0090(0x0010)
    TArray<FString>                               FullSearchCategoryArray;                                      // 0x00A0(0x0010)
    TArray<FString>                               LocalizedMenuDescriptionArray;                                // 0x00B0(0x0010)
    TArray<FString>                               LocalizedFullSearchTitlesArray;                               // 0x00C0(0x0010)
    TArray<FString>                               LocalizedFullSearchKeywordsArray;                             // 0x00D0(0x0010)
    TArray<FString>                               LocalizedFullSearchCategoryArray;                             // 0x00E0(0x0010)
    FString                                       SearchText;                                                   // 0x00F0(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0108
struct FEdGraphSchemaAction : public FEdGraphSchemaAction
{
    UEdGraphNode*                                 NodeTemplate;                                                 // 0x0100(0x0008)
};


// ScriptStruct  Engine.PluginRedirect
// Struct Size::0x0020
struct FPluginRedirect
{
    FString                                       OldPluginName;                                                // 0x0000(0x0010)
    FString                                       NewPluginName;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.StructRedirect
// Struct Size::0x0010
struct FStructRedirect
{
    FName                                         OldStructName;                                                // 0x0000(0x0008)
    FName                                         NewStructName;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.ClassRedirect
// Struct Size::0x003C
struct FClassRedirect
{
    FName                                         ObjectName;                                                   // 0x0000(0x0008)
    FName                                         OldClassName;                                                 // 0x0008(0x0008)
    FName                                         NewClassName;                                                 // 0x0010(0x0008)
    FName                                         OldSubobjName;                                                // 0x0018(0x0008)
    FName                                         NewSubobjName;                                                // 0x0020(0x0008)
    FName                                         NewClassClass;                                                // 0x0028(0x0008)
    FName                                         NewClassPackage;                                              // 0x0030(0x0008)
    bool                                          InstanceOnly;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  Engine.GameNameRedirect
// Struct Size::0x0010
struct FGameNameRedirect
{
    FName                                         OldGameName;                                                  // 0x0000(0x0008)
    FName                                         NewGameName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.ScreenMessageString
// Struct Size::0x0030
struct FScreenMessageString
{
    uint64_t                                      Key;                                                          // 0x0000(0x0008)
    FString                                       ScreenMessage;                                                // 0x0008(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0018(0x0004)
    float                                         TimeToDisplay;                                                // 0x001C(0x0004)
    float                                         CurrentTimeDisplayed;                                         // 0x0020(0x0004)
    FVector2D                                     TextScale;                                                    // 0x0024(0x0008)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.DropNoteInfo
// Struct Size::0x0028
struct FDropNoteInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FString                                       Comment;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Engine.StatColorMapping
// Struct Size::0x0028
struct FStatColorMapping
{
    FString                                       StatName;                                                     // 0x0000(0x0010)
    TArray<FStatColorMapEntry>                    ColorMap;                                                     // 0x0010(0x0010)
    char                                          DisableBlend;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.StatColorMapEntry
// Struct Size::0x0008
struct FStatColorMapEntry
{
    float                                         In;                                                           // 0x0000(0x0004)
    FColor                                        Out;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.WorldContext
// Struct Size::0x0288
struct FWorldContext
{
    char                                          pa_0000[0x00D0]                                               // 0x0000(0x00D0)
    FURL                                          LastURL;                                                      // 0x00D0(0x0068)
    FURL                                          LastRemoteURL;                                                // 0x0138(0x0068)
    UPendingNetGame*                              PendingNetGame;                                               // 0x01A0(0x0008)
    TArray<FFullyLoadedPackagesInfo>              PackagesToFullyLoad;                                          // 0x01A8(0x0010)
    char                                          pa_01B8[0x0010]                                               // 0x01B8(0x0010)
    TArray<ULevel*>                               LoadedLevelsForPendingMapChange;                              // 0x01C8(0x0010)
    char                                          pa_01D8[0x0018]                                               // 0x01D8(0x0018)
    TArray<UObjectReferencer*>                    ObjectReferencers;                                            // 0x01F0(0x0010)
    TArray<FLevelStreamingStatus>                 PendingLevelStreamingStatusUpdates;                           // 0x0200(0x0010)
    UGameViewportClient*                          GameViewport;                                                 // 0x0210(0x0008)
    UGameInstance*                                OwningGameInstance;                                           // 0x0218(0x0008)
    TArray<FNamedNetDriver>                       ActiveNetDrivers;                                             // 0x0220(0x0010)
    char                                          pa_0230[0x0058]                                               // 0x0230(0x0058)
};


// ScriptStruct  Engine.NamedNetDriver
// Struct Size::0x0010
struct FNamedNetDriver
{
    UNetDriver*                                   NetDriver;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LevelStreamingStatus
// Struct Size::0x0010
struct FLevelStreamingStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    char                                          bShouldBeLoaded;                                              // 0x0008(0x0001)
    char                                          bShouldBeVisible;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    uint32_t                                      LODIndex;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.FullyLoadedPackagesInfo
// Struct Size::0x0038
struct FFullyLoadedPackagesInfo
{
    enum class EFullyLoadPackageType              FullyLoadType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Tag;                                                          // 0x0008(0x0010)
    TArray<FName>                                 PackagesToLoad;                                               // 0x0018(0x0010)
    TArray<UObject*>                              LoadedObjects;                                                // 0x0028(0x0010)
};


// ScriptStruct  Engine.NetDriverDefinition
// Struct Size::0x0018
struct FNetDriverDefinition
{
    FName                                         DefName;                                                      // 0x0000(0x0008)
    FName                                         DriverClassName;                                              // 0x0008(0x0008)
    FName                                         DriverClassNameFallback;                                      // 0x0010(0x0008)
};


// ScriptStruct  Engine.ExposureSettings
// Struct Size::0x0008
struct FExposureSettings
{
    float                                         FixedEV100;                                                   // 0x0000(0x0004)
    bool                                          bFixed;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.TickPrerequisite
// Struct Size::0x0010
struct FTickPrerequisite
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.CanvasUVTri
// Struct Size::0x0060
struct FCanvasUVTri
{
    FVector2D                                     V0;                                                           // 0x0000(0x0008)
    FVector2D                                     V0;                                                           // 0x0008(0x0008)
    FLinearColor                                  V0;                                                           // 0x0010(0x0010)
    FVector2D                                     V1;                                                           // 0x0020(0x0008)
    FVector2D                                     V1;                                                           // 0x0028(0x0008)
    FLinearColor                                  V1;                                                           // 0x0030(0x0010)
    FVector2D                                     V2;                                                           // 0x0040(0x0008)
    FVector2D                                     V2;                                                           // 0x0048(0x0008)
    FLinearColor                                  V2;                                                           // 0x0050(0x0010)
};


// ScriptStruct  Engine.FontRenderInfo
// Struct Size::0x0028
struct FFontRenderInfo
{
    char                                          bClipText;                                                    // 0x0000(0x0001)
    char                                          bEnableShadow;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDepthFieldGlowInfo                           GlowInfo;                                                     // 0x0004(0x0024)
};


// ScriptStruct  Engine.DepthFieldGlowInfo
// Struct Size::0x0024
struct FDepthFieldGlowInfo
{
    char                                          bEnableGlow;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  GlowColor;                                                    // 0x0004(0x0010)
    FVector2D                                     GlowOuterRadius;                                              // 0x0014(0x0008)
    FVector2D                                     GlowInnerRadius;                                              // 0x001C(0x0008)
};


// ScriptStruct  Engine.Redirector
// Struct Size::0x0010
struct FRedirector
{
    FName                                         OldName;                                                      // 0x0000(0x0008)
    FName                                         NewName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.CollectionReference
// Struct Size::0x0008
struct FCollectionReference
{
    FName                                         CollectionName;                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.ConstrainComponentPropName
// Struct Size::0x0008
struct FConstrainComponentPropName
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshBuildSettings
// Struct Size::0x0014
struct FSkeletalMeshBuildSettings
{
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ThresholdPosition;                                            // 0x0004(0x0004)
    float                                         ThresholdTangentNormal;                                       // 0x0008(0x0004)
    float                                         ThresholdUV;                                                  // 0x000C(0x0004)
    float                                         MorphThresholdPosition;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.MeshBuildSettings
// Struct Size::0x0048
struct FMeshBuildSettings
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          bBuildReversedIndexBuffer;                                    // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateDistanceFieldAsIfTwoSided;                           // 0x0001(0x0001)
    char                                          bSupportFaceRemap;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
    float                                         BuildScale;                                                   // 0x0010(0x0004)
    FVector                                       BuildScale3D;                                                 // 0x0014(0x000C)
    float                                         DistanceFieldResolutionScale;                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UStaticMesh*                                  DistanceFieldReplacementMesh;                                 // 0x0028(0x0008)
    float                                         RandomPosPickRate;                                            // 0x0030(0x0004)
    float                                         HitBackRatioThreshold;                                        // 0x0034(0x0004)
    float                                         MinDistanceClamp;                                             // 0x0038(0x0004)
    char                                          bUseOriginalAlgorithm;                                        // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         BackfaceClampDistance;                                        // 0x0040(0x0004)
    int32_t                                       DistanceFieldOpacityMaskFactor;                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.POV
// Struct Size::0x001C
struct FPOV
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
};


// ScriptStruct  Engine.AnimUpdateRateParameters
// Struct Size::0x00B8
struct FAnimUpdateRateParameters
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
    enum class EUpdateRateShiftBucket             ShiftBucket;                                                  // 0x0001(0x0001)
    char                                          bInterpolateSkippedFrames;                                    // 0x0002(0x0001)
    char                                          bShouldUseLodMap;                                             // 0x0002(0x0001)
    char                                          bShouldUseMinLod;                                             // 0x0002(0x0001)
    char                                          bSkipUpdate;                                                  // 0x0002(0x0001)
    char                                          bSkipEvaluation;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       UpdateRate;                                                   // 0x0004(0x0004)
    int32_t                                       EvaluationRate;                                               // 0x0008(0x0004)
    float                                         TickedPoseOffestTime;                                         // 0x000C(0x0004)
    float                                         AdditionalTime;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int32_t                                       BaseNonRenderedUpdateRate;                                    // 0x0018(0x0004)
    int32_t                                       MaxEvalRateForInterpolation;                                  // 0x001C(0x0004)
    TArray<float>                                 BaseVisibleDistanceFactorThesholds;                           // 0x0020(0x0010)
    TMap<int32_t,int32_t>                         LODToFrameSkipMap;                                            // 0x0030(0x0050)
    int32_t                                       SkippedUpdateFrames;                                          // 0x0080(0x0004)
    int32_t                                       SkippedEvalFrames;                                            // 0x0084(0x0004)
    bool                                          bEnableLoadBalance;                                           // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    int32_t                                       LogicUpdateRate;                                              // 0x008C(0x0004)
    FName                                         LoadBalanceTag;                                               // 0x0090(0x0008)
    int32_t                                       LoadBalanceTrackerNum;                                        // 0x0098(0x0004)
    int32_t                                       MaxEvalRateForInterpolationAfterLoadBalance;                  // 0x009C(0x0004)
    float                                         LoadBalanceBudget;                                            // 0x00A0(0x0004)
    float                                         LoadBalanceBudgetUsed;                                        // 0x00A4(0x0004)
    float                                         LoadBalanceBudgetUsedOptimized;                               // 0x00A8(0x0004)
    int32_t                                       UpdateRateBeforeLoadBalance;                                  // 0x00AC(0x0004)
    bool                                          bUseParentURO;                                                // 0x00B0(0x0001)
    bool                                          bOnlyUseFirstRegisteredComponentDistFactor;                   // 0x00B1(0x0001)
    bool                                          bNeedsEveryFrameWhenPlayingMontage;                           // 0x00B2(0x0001)
    bool                                          bNeedsEveryFrame;                                             // 0x00B3(0x0001)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Engine.AnimSlotDesc
// Struct Size::0x000C
struct FAnimSlotDesc
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    int32_t                                       NumChannels;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimSlotInfo
// Struct Size::0x0018
struct FAnimSlotInfo
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    TArray<float>                                 ChannelWeights;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.MTDResult
// Struct Size::0x0010
struct FMTDResult
{
    FVector                                       Direction;                                                    // 0x0000(0x000C)
    float                                         Distance;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.OverlapResult
// Struct Size::0x0030
struct FOverlapResult
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    char                                          bBlockingHit;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x001B]                                               // 0x0015(0x001B)
};


// ScriptStruct  Engine.PrimitiveMaterialRef
// Struct Size::0x0018
struct FPrimitiveMaterialRef
{
    UPrimitiveComponent*                          Primitive;                                                    // 0x0000(0x0008)
    UDecalComponent*                              Decal;                                                        // 0x0008(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SwarmDebugOptions
// Struct Size::0x0004
struct FSwarmDebugOptions
{
    char                                          bDistributionEnabled;                                         // 0x0000(0x0001)
    char                                          bForceContentExport;                                          // 0x0000(0x0001)
    char                                          bInitialized;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.LightmassDebugOptions
// Struct Size::0x0010
struct FLightmassDebugOptions
{
    char                                          bDebugMode;                                                   // 0x0000(0x0001)
    char                                          bStatsEnabled;                                                // 0x0000(0x0001)
    char                                          bGatherBSPSurfacesAcrossComponents;                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CoplanarTolerance;                                            // 0x0004(0x0004)
    char                                          bUseImmediateImport;                                          // 0x0008(0x0001)
    char                                          bImmediateProcessMappings;                                    // 0x0008(0x0001)
    char                                          bSortMappings;                                                // 0x0008(0x0001)
    char                                          bDumpBinaryFiles;                                             // 0x0008(0x0001)
    char                                          bDebugMaterials;                                              // 0x0008(0x0001)
    char                                          bPadMappings;                                                 // 0x0008(0x0001)
    char                                          bDebugPaddings;                                               // 0x0008(0x0001)
    char                                          bOnlyCalcDebugTexelMappings;                                  // 0x0008(0x0001)
    char                                          bUseRandomColors;                                             // 0x0009(0x0001)
    char                                          bColorBordersGreen;                                           // 0x0009(0x0001)
    char                                          bColorByExecutionTime;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         ExecutionTimeDivisor;                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPrimitiveSettings
// Struct Size::0x0018
struct FLightmassPrimitiveSettings
{
    char                                          bUseTwoSidedLighting;                                         // 0x0000(0x0001)
    char                                          bShadowIndirectOnly;                                          // 0x0000(0x0001)
    char                                          bUseEmissiveForStaticLighting;                                // 0x0000(0x0001)
    char                                          bUseVertexNormalForHemisphereGather;                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         EmissiveLightFalloffExponent;                                 // 0x0004(0x0004)
    float                                         EmissiveLightExplicitInfluenceRadius;                         // 0x0008(0x0004)
    float                                         EmissiveBoost;                                                // 0x000C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0010(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0014(0x0004)
};


// ScriptStruct  Engine.LightmassLightSettings
// Struct Size::0x000C
struct FLightmassLightSettings
{
    float                                         IndirectLightingSaturation;                                   // 0x0000(0x0004)
    float                                         ShadowExponent;                                               // 0x0004(0x0004)
    bool                                          bUseAreaShadowsForStationaryLight;                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.LightmassDirectionalLightSettings
// Struct Size::0x0010
struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
{
    float                                         LightSourceAngle;                                             // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPointLightSettings
// Struct Size::0x000C
struct FLightmassPointLightSettings : public FLightmassLightSettings
{
};


// ScriptStruct  Engine.BasedPosition
// Struct Size::0x0038
struct FBasedPosition
{
    AActor*                                       Base;                                                         // 0x0000(0x0008)
    FVector                                       position;                                                     // 0x0008(0x000C)
    FVector                                       CachedBaseLocation;                                           // 0x0014(0x000C)
    FRotator                                      CachedBaseRotation;                                           // 0x0020(0x000C)
    FVector                                       CachedTransPosition;                                          // 0x002C(0x000C)
};


// ScriptStruct  Engine.FractureEffect
// Struct Size::0x0010
struct FFractureEffect
{
    UParticleSystem*                              ParticleSystem;                                               // 0x0000(0x0008)
    USoundBase*                                   Sound;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Engine.CollisionImpactData
// Struct Size::0x0030
struct FCollisionImpactData
{
    TArray<FRigidBodyContactInfo>                 ContactInfos;                                                 // 0x0000(0x0010)
    FVector                                       TotalNormalImpulse;                                           // 0x0010(0x000C)
    FVector                                       TotalFrictionImpulse;                                         // 0x001C(0x000C)
    bool                                          bIsVelocityDeltaUnderThreshold;                               // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Engine.RigidBodyContactInfo
// Struct Size::0x0030
struct FRigidBodyContactInfo
{
    FVector                                       ContactPosition;                                              // 0x0000(0x000C)
    FVector                                       ContactNormal;                                                // 0x000C(0x000C)
    float                                         ContactPenetration;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UPhysicalMaterial*                            PhysMaterial;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.RigidBodyErrorCorrection
// Struct Size::0x0034
struct FRigidBodyErrorCorrection
{
    float                                         PingExtrapolation;                                            // 0x0000(0x0004)
    float                                         PingLimit;                                                    // 0x0004(0x0004)
    float                                         ErrorPerLinearDifference;                                     // 0x0008(0x0004)
    float                                         ErrorPerAngularDifference;                                    // 0x000C(0x0004)
    float                                         MaxRestoredStateError;                                        // 0x0010(0x0004)
    float                                         MaxLinearHardSnapDistance;                                    // 0x0014(0x0004)
    float                                         PositionLerp;                                                 // 0x0018(0x0004)
    float                                         AngleLerp;                                                    // 0x001C(0x0004)
    float                                         LinearVelocityCoefficient;                                    // 0x0020(0x0004)
    float                                         AngularVelocityCoefficient;                                   // 0x0024(0x0004)
    float                                         ErrorAccumulationSeconds;                                     // 0x0028(0x0004)
    float                                         ErrorAccumulationDistanceSq;                                  // 0x002C(0x0004)
    float                                         ErrorAccumulationSimilarity;                                  // 0x0030(0x0004)
};


// ScriptStruct  Engine.RigidBodyState
// Struct Size::0x0040
struct FRigidBodyState
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector                                       LinVel;                                                       // 0x0020(0x000C)
    FVector                                       AngVel;                                                       // 0x002C(0x000C)
    char                                          Flags;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Timestamp;                                                    // 0x003C(0x0004)
};


// ScriptStruct  Engine.MaterialShadingModelField
// Struct Size::0x0002
struct FMaterialShadingModelField
{
    uint16_t                                      ShadingModelField;                                            // 0x0000(0x0002)
};


// ScriptStruct  Engine.ExponentialHeightFogData
// Struct Size::0x000C
struct FExponentialHeightFogData
{
    float                                         FogDensity;                                                   // 0x0000(0x0004)
    float                                         FogHeightFalloff;                                             // 0x0004(0x0004)
    float                                         FogHeightOffset;                                              // 0x0008(0x0004)
};


// ScriptStruct  Engine.FontCharacter
// Struct Size::0x0018
struct FFontCharacter
{
    int32_t                                       StartU;                                                       // 0x0000(0x0004)
    int32_t                                       StartV;                                                       // 0x0004(0x0004)
    int32_t                                       USize;                                                        // 0x0008(0x0004)
    int32_t                                       VSize;                                                        // 0x000C(0x0004)
    char                                          TextureIndex;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       VerticalOffset;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.FontImportOptionsData
// Struct Size::0x00B0
struct FFontImportOptionsData
{
    FString                                       FontName;                                                     // 0x0000(0x0010)
    float                                         Height;                                                       // 0x0010(0x0004)
    char                                          bEnableAntialiasing;                                          // 0x0014(0x0001)
    char                                          bEnableBold;                                                  // 0x0014(0x0001)
    char                                          bEnableItalic;                                                // 0x0014(0x0001)
    char                                          bEnableUnderline;                                             // 0x0014(0x0001)
    char                                          bAlphaOnly;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    enum class EFontImportCharacterSet            CharacterSet;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       Chars;                                                        // 0x0020(0x0010)
    FString                                       UnicodeRange;                                                 // 0x0030(0x0010)
    FString                                       CharsFilePath;                                                // 0x0040(0x0010)
    FString                                       CharsFileWildcard;                                            // 0x0050(0x0010)
    char                                          bCreatePrintableOnly;                                         // 0x0060(0x0001)
    char                                          bIncludeASCIIRange;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLinearColor                                  ForegroundColor;                                              // 0x0064(0x0010)
    char                                          bEnableDropShadow;                                            // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    int32_t                                       TexturePageWidth;                                             // 0x0078(0x0004)
    int32_t                                       TexturePageMaxHeight;                                         // 0x007C(0x0004)
    int32_t                                       XPadding;                                                     // 0x0080(0x0004)
    int32_t                                       YPadding;                                                     // 0x0084(0x0004)
    int32_t                                       ExtendBoxTop;                                                 // 0x0088(0x0004)
    int32_t                                       ExtendBoxBottom;                                              // 0x008C(0x0004)
    int32_t                                       ExtendBoxRight;                                               // 0x0090(0x0004)
    int32_t                                       ExtendBoxLeft;                                                // 0x0094(0x0004)
    char                                          bEnableLegacyMode;                                            // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       Kerning;                                                      // 0x009C(0x0004)
    char                                          bUseDistanceFieldAlpha;                                       // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    int32_t                                       DistanceFieldScaleFactor;                                     // 0x00A4(0x0004)
    float                                         DistanceFieldScanRadiusScale;                                 // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.ForceFeedbackAttenuationSettings
// Struct Size::0x00B0
struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{
};


// ScriptStruct  Engine.ForceFeedbackChannelDetails
// Struct Size::0x0090
struct FForceFeedbackChannelDetails
{
    char                                          bAffectsLeftLarge;                                            // 0x0000(0x0001)
    char                                          bAffectsLeftSmall;                                            // 0x0000(0x0001)
    char                                          bAffectsRightLarge;                                           // 0x0000(0x0001)
    char                                          bAffectsRightSmall;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  Engine.PredictProjectilePathResult
// Struct Size::0x00C8
struct FPredictProjectilePathResult
{
    TArray<FPredictProjectilePathPointData>       PathData;                                                     // 0x0000(0x0010)
    FPredictProjectilePathPointData               LastTraceDestination;                                         // 0x0010(0x001C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FHitResult                                    HitResult;                                                    // 0x0030(0x0098)
};


// ScriptStruct  Engine.PredictProjectilePathPointData
// Struct Size::0x001C
struct FPredictProjectilePathPointData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Time;                                                         // 0x0018(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathParams
// Struct Size::0x0060
struct FPredictProjectilePathParams
{
    FVector                                       StartLocation;                                                // 0x0000(0x000C)
    FVector                                       LaunchVelocity;                                               // 0x000C(0x000C)
    bool                                          bTraceWithCollision;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         ProjectileRadius;                                             // 0x001C(0x0004)
    float                                         MaxSimTime;                                                   // 0x0020(0x0004)
    bool                                          bTraceWithChannel;                                            // 0x0024(0x0001)
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    TArray<enum class EObjectTypeQuery>           ObjectTypes;                                                  // 0x0028(0x0010)
    TArray<AActor*>                               ActorsToIgnore;                                               // 0x0038(0x0010)
    float                                         SimFrequency;                                                 // 0x0048(0x0004)
    float                                         OverrideGravityZ;                                             // 0x004C(0x0004)
    enum class EDrawDebugTrace                    DrawDebugType;                                                // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         DrawDebugTime;                                                // 0x0054(0x0004)
    bool                                          bTraceComplex;                                                // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  Engine.GlobalDFShadowSettings
// Struct Size::0x000C
struct FGlobalDFShadowSettings
{
    float                                         TraceStart;                                                   // 0x0000(0x0004)
    float                                         HitDistance;                                                  // 0x0004(0x0004)
    float                                         SmoothDistance;                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.ActiveHapticFeedbackEffect
// Struct Size::0x0018
struct FActiveHapticFeedbackEffect
{
    UHapticFeedbackEffect*                        HapticEffect;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.HapticFeedbackDetails
// Struct Size::0x0110
struct FHapticFeedbackDetails
{
    FRuntimeFloatCurve                            Frequency;                                                    // 0x0000(0x0088)
    FRuntimeFloatCurve                            Amplitude;                                                    // 0x0088(0x0088)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0040
struct FClusterNode
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
    FVector                                       MinInstanceScale;                                             // 0x0028(0x000C)
    FVector                                       MaxInstanceScale;                                             // 0x0034(0x000C)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0028
struct FClusterNode
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Engine.HLODISMComponentDesc
// Struct Size::0x0020
struct FHLODISMComponentDesc
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
    TArray<FTransform>                            Instances;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.HLODProxyMesh
// Struct Size::0x0030
struct FHLODProxyMesh
{
    ALODActor*                                    LODActor;                                                     // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UStaticMesh*                                  StaticMesh;                                                   // 0x0020(0x0008)
    FName                                         Key;                                                          // 0x0028(0x0008)
};


// ScriptStruct  Engine.ImportanceTexture
// Struct Size::0x0050
struct FImportanceTexture
{
    FIntPoint                                     Size;                                                         // 0x0000(0x0008)
    int32_t                                       NumMips;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 MarginalCDF;                                                  // 0x0010(0x0010)
    TArray<float>                                 ConditionalCDF;                                               // 0x0020(0x0010)
    TArray<FColor>                                TextureData;                                                  // 0x0030(0x0010)
    TWeakObjectPtr<UTexture2D>                    Texture;                                                      // 0x0040(0x0008)
    enum class EImportanceWeight                  Weighting;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.ComponentOverrideRecord
// Struct Size::0x0078
struct FComponentOverrideRecord
{
    UObject*                                      ComponentClass;                                               // 0x0000(0x0008)
    UActorComponent*                              ComponentTemplate;                                            // 0x0008(0x0008)
    FComponentKey                                 ComponentKey;                                                 // 0x0010(0x0020)
    FBlueprintCookedComponentInstancingData       CookedComponentInstancingData;                                // 0x0030(0x0048)
};


// ScriptStruct  Engine.ComponentKey
// Struct Size::0x0020
struct FComponentKey
{
    UObject*                                      OwnerClass;                                                   // 0x0000(0x0008)
    FName                                         SCSVariableName;                                              // 0x0008(0x0008)
    FGuid                                         AssociatedGuid;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.BlueprintInputDelegateBinding
// Struct Size::0x0004
struct FBlueprintInputDelegateBinding
{
    char                                          bConsumeInput;                                                // 0x0000(0x0001)
    char                                          bExecuteWhenPaused;                                           // 0x0000(0x0001)
    char                                          bOverrideParentBinding;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.BlueprintInputActionDelegateBinding
// Struct Size::0x0018
struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputActionName;                                              // 0x0004(0x0008)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisDelegateBinding
// Struct Size::0x0014
struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputAxisName;                                                // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisKeyDelegateBinding
// Struct Size::0x0028
struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FKey                                          AxisKey;                                                      // 0x0008(0x0018)
    FName                                         FunctionNameToBind;                                           // 0x0020(0x0008)
};


// ScriptStruct  Engine.CachedKeyToActionInfo
// Struct Size::0x0070
struct FCachedKeyToActionInfo
{
    UPlayerInput*                                 PlayerInput;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0068]                                               // 0x0008(0x0068)
};


// ScriptStruct  Engine.BlueprintInputKeyDelegateBinding
// Struct Size::0x0038
struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FInputChord                                   InputChord;                                                   // 0x0008(0x0020)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.BlueprintInputTouchDelegateBinding
// Struct Size::0x0010
struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0008(0x0008)
};


// ScriptStruct  Engine.InstancedStaticMeshComponentInstanceData
// Struct Size::0x0150
struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x00B8(0x0008)
    FInstancedStaticMeshLightMapInstanceData      CachedStaticLighting;                                         // 0x00C0(0x0040)
    TArray<FInstancedStaticMeshInstanceData>      PerInstanceSMData;                                            // 0x0100(0x0010)
    TArray<float>                                 PerInstanceSMCustomData;                                      // 0x0110(0x0010)
    char                                          pa_0120[0x0020]                                               // 0x0120(0x0020)
    int32_t                                       InstancingRandomSeed;                                         // 0x0140(0x0004)
    char                                          pa_0144[0x000C]                                               // 0x0144(0x000C)
};


// ScriptStruct  Engine.InstancedStaticMeshInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
};


// ScriptStruct  Engine.InstancedStaticMeshLightMapInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshLightMapInstanceData
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    TArray<FGuid>                                 MapBuildDataIds;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.InstancedStaticMeshMappingInfo
// Struct Size::0x0008
struct FInstancedStaticMeshMappingInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.CurveEdTab
// Struct Size::0x0030
struct FCurveEdTab
{
    FString                                       TabName;                                                      // 0x0000(0x0010)
    TArray<FCurveEdEntry>                         Curves;                                                       // 0x0010(0x0010)
    float                                         ViewStartInput;                                               // 0x0020(0x0004)
    float                                         ViewEndInput;                                                 // 0x0024(0x0004)
    float                                         ViewStartOutput;                                              // 0x0028(0x0004)
    float                                         ViewEndOutput;                                                // 0x002C(0x0004)
};


// ScriptStruct  Engine.CurveEdEntry
// Struct Size::0x0038
struct FCurveEdEntry
{
    UObject*                                      CurveObject;                                                  // 0x0000(0x0008)
    FColor                                        CurveColor;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CurveName;                                                    // 0x0010(0x0010)
    int32_t                                       bHideCurve;                                                   // 0x0020(0x0004)
    int32_t                                       bColorCurve;                                                  // 0x0024(0x0004)
    int32_t                                       bFloatingPointColorCurve;                                     // 0x0028(0x0004)
    int32_t                                       bClamp;                                                       // 0x002C(0x0004)
    float                                         ClampLow;                                                     // 0x0030(0x0004)
    float                                         ClampHigh;                                                    // 0x0034(0x0004)
};


// ScriptStruct  Engine.InterpEdSelKey
// Struct Size::0x0018
struct FInterpEdSelKey
{
    UInterpGroup*                                 Group;                                                        // 0x0000(0x0008)
    UInterpTrack*                                 Track;                                                        // 0x0008(0x0008)
    int32_t                                       KeyIndex;                                                     // 0x0010(0x0004)
    float                                         UnsnappedPosition;                                            // 0x0014(0x0004)
};


// ScriptStruct  Engine.CameraPreviewInfo
// Struct Size::0x0030
struct FCameraPreviewInfo
{
    APawn*                                        PawnClass;                                                    // 0x0000(0x0008)
    UAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    APawn*                                        PawnInst;                                                     // 0x0028(0x0008)
};


// ScriptStruct  Engine.SubTrackGroup
// Struct Size::0x0028
struct FSubTrackGroup
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               TrackIndices;                                                 // 0x0010(0x0010)
    char                                          bIsCollapsed;                                                 // 0x0020(0x0001)
    char                                          bIsSelected;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.SupportedSubTrackInfo
// Struct Size::0x0020
struct FSupportedSubTrackInfo
{
    UInterpTrack*                                 SupportedClass;                                               // 0x0000(0x0008)
    FString                                       SubTrackName;                                                 // 0x0008(0x0010)
    int32_t                                       GroupIndex;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AnimControlTrackKey
// Struct Size::0x0020
struct FAnimControlTrackKey
{
    float                                         StartTime;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    float                                         AnimStartOffset;                                              // 0x0010(0x0004)
    float                                         AnimEndOffset;                                                // 0x0014(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0018(0x0004)
    char                                          bLooping;                                                     // 0x001C(0x0001)
    char                                          bReverse;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.BoolTrackKey
// Struct Size::0x0008
struct FBoolTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          Value;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.DirectorTrackCut
// Struct Size::0x0014
struct FDirectorTrackCut
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         TransitionTime;                                               // 0x0004(0x0004)
    FName                                         TargetCamGroup;                                               // 0x0008(0x0008)
    int32_t                                       ShotNumber;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.EventTrackKey
// Struct Size::0x000C
struct FEventTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         EventName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  Engine.InterpLookupTrack
// Struct Size::0x0010
struct FInterpLookupTrack
{
    TArray<FInterpLookupPoint>                    Points;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Engine.InterpLookupPoint
// Struct Size::0x000C
struct FInterpLookupPoint
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleReplayTrackKey
// Struct Size::0x000C
struct FParticleReplayTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
    int32_t                                       ClipIDNumber;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Engine.SoundTrackKey
// Struct Size::0x0018
struct FSoundTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Volume;                                                       // 0x0004(0x0004)
    float                                         Pitch;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    USoundBase*                                   Sound;                                                        // 0x0010(0x0008)
};


// ScriptStruct  Engine.ToggleTrackKey
// Struct Size::0x0008
struct FToggleTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class ETrackToggleAction                 ToggleAction;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.VisibilityTrackKey
// Struct Size::0x0008
struct FVisibilityTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class EVisibilityTrackAction             Action;                                                       // 0x0004(0x0001)
    enum class EVisibilityTrackCondition          ActiveCondition;                                              // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  Engine.VectorSpringState
// Struct Size::0x0018
struct FVectorSpringState
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.FloatSpringState
// Struct Size::0x0008
struct FFloatSpringState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DrawToRenderTargetContext
// Struct Size::0x0010
struct FDrawToRenderTargetContext
{
    UTextureRenderTarget2D*                       RenderTarget;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LatentActionManager
// Struct Size::0x0060
struct FLatentActionManager
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.LayerActorStats
// Struct Size::0x0010
struct FLayerActorStats
{
    UObject*                                      Type;                                                         // 0x0000(0x0008)
    int32_t                                       Total;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.ReplicatedStaticActorDestructionInfo
// Struct Size::0x0038
struct FReplicatedStaticActorDestructionInfo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    UObject*                                      ObjClass;                                                     // 0x0030(0x0008)
};


// ScriptStruct  Engine.LevelSimplificationDetails
// Struct Size::0x013C
struct FLevelSimplificationDetails
{
    bool                                          bCreatePackagePerAsset;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DetailsPercentage;                                            // 0x0004(0x0004)
    FMaterialProxySettings                        StaticMeshMaterialSettings;                                   // 0x0008(0x0090)
    bool                                          bOverrideLandscapeExportLOD;                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       LandscapeExportLOD;                                           // 0x009C(0x0004)
    FMaterialProxySettings                        LandscapeMaterialSettings;                                    // 0x00A0(0x0090)
    bool                                          bBakeFoliageToLandscape;                                      // 0x0130(0x0001)
    bool                                          bBakeGrassToLandscape;                                        // 0x0131(0x0001)
    bool                                          bGenerateMeshNormalMap;                                       // 0x0132(0x0001)
    bool                                          bGenerateMeshMetallicMap;                                     // 0x0133(0x0001)
    bool                                          bGenerateMeshRoughnessMap;                                    // 0x0134(0x0001)
    bool                                          bGenerateMeshSpecularMap;                                     // 0x0135(0x0001)
    bool                                          bGenerateLandscapeNormalMap;                                  // 0x0136(0x0001)
    bool                                          bGenerateLandscapeMetallicMap;                                // 0x0137(0x0001)
    bool                                          bGenerateLandscapeRoughnessMap;                               // 0x0138(0x0001)
    bool                                          bGenerateLandscapeSpecularMap;                                // 0x0139(0x0001)
    char                                          pa_013A[0x0002]                                               // 0x013A(0x0002)
};


// ScriptStruct  Engine.MaterialProxySettings
// Struct Size::0x0090
struct FMaterialProxySettings
{
    FIntPoint                                     TextureSize;                                                  // 0x0000(0x0008)
    char                                          bDetermineTextureSizeByMaterials;                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         DetermineTextureSizeScale;                                    // 0x000C(0x0004)
    float                                         GutterSpace;                                                  // 0x0010(0x0004)
    float                                         MetallicConstant;                                             // 0x0014(0x0004)
    float                                         RoughnessConstant;                                            // 0x0018(0x0004)
    float                                         AnisotropyConstant;                                           // 0x001C(0x0004)
    float                                         SpecularConstant;                                             // 0x0020(0x0004)
    float                                         OpacityConstant;                                              // 0x0024(0x0004)
    float                                         OpacityMaskConstant;                                          // 0x0028(0x0004)
    float                                         AmbientOcclusionConstant;                                     // 0x002C(0x0004)
    enum class ETextureSizingType                 TextureSizingType;                                            // 0x0030(0x0001)
    enum class EMaterialMergeType                 MaterialMergeType;                                            // 0x0031(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0032(0x0001)
    char                                          bAllowTwoSidedMaterial;                                       // 0x0033(0x0001)
    char                                          bNormalMap;                                                   // 0x0033(0x0001)
    char                                          bTangentMap;                                                  // 0x0033(0x0001)
    char                                          bMetallicMap;                                                 // 0x0033(0x0001)
    char                                          bRoughnessMap;                                                // 0x0033(0x0001)
    char                                          bAnisotropyMap;                                               // 0x0033(0x0001)
    char                                          bSpecularMap;                                                 // 0x0033(0x0001)
    char                                          bEmissiveMap;                                                 // 0x0033(0x0001)
    char                                          bOpacityMap;                                                  // 0x0034(0x0001)
    char                                          bOpacityMaskMap;                                              // 0x0034(0x0001)
    char                                          bAmbientOcclusionMap;                                         // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FIntPoint                                     DiffuseTextureSize;                                           // 0x0038(0x0008)
    FIntPoint                                     NormalTextureSize;                                            // 0x0040(0x0008)
    FIntPoint                                     TangentTextureSize;                                           // 0x0048(0x0008)
    FIntPoint                                     MetallicTextureSize;                                          // 0x0050(0x0008)
    FIntPoint                                     RoughnessTextureSize;                                         // 0x0058(0x0008)
    FIntPoint                                     AnisotropyTextureSize;                                        // 0x0060(0x0008)
    FIntPoint                                     SpecularTextureSize;                                          // 0x0068(0x0008)
    FIntPoint                                     EmissiveTextureSize;                                          // 0x0070(0x0008)
    FIntPoint                                     OpacityTextureSize;                                           // 0x0078(0x0008)
    FIntPoint                                     OpacityMaskTextureSize;                                       // 0x0080(0x0008)
    FIntPoint                                     AmbientOcclusionTextureSize;                                  // 0x0088(0x0008)
};


// ScriptStruct  Engine.StreamableTextureInstance
// Struct Size::0x0028
struct FStreamableTextureInstance
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.DynamicTextureInstance
// Struct Size::0x0038
struct FDynamicTextureInstance : public FStreamableTextureInstance
{
    UTexture2D*                                   Texture;                                                      // 0x0028(0x0008)
    bool                                          bAttached;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         OriginalRadius;                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.PrecomputedLightInstanceData
// Struct Size::0x0110
struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    Transform;                                                    // 0x00C0(0x0030)
    FGuid                                         LightGuid;                                                    // 0x00F0(0x0010)
    int32_t                                       PreviewShadowMapChannel;                                      // 0x0100(0x0004)
    char                                          pa_0104[0x000C]                                               // 0x0104(0x000C)
};


// ScriptStruct  Engine.BatchedPoint
// Struct Size::0x0028
struct FBatchedPoint
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FLinearColor                                  Color;                                                        // 0x000C(0x0010)
    float                                         PointSize;                                                    // 0x001C(0x0004)
    float                                         RemainingLifeTime;                                            // 0x0020(0x0004)
    char                                          DepthPriority;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.BatchedLine
// Struct Size::0x0034
struct FBatchedLine
{
    FVector                                       Start;                                                        // 0x0000(0x000C)
    FVector                                       End;                                                          // 0x000C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         RemainingLifeTime;                                            // 0x002C(0x0004)
    char                                          DepthPriority;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  Engine.LocalLightOcclusionData
// Struct Size::0x0028
struct FLocalLightOcclusionData
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               VertexArray;                                                  // 0x0008(0x0010)
    TArray<uint16_t>                              IndexArray;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Engine.ClientReceiveData
// Struct Size::0x0040
struct FClientReceiveData
{
    APlayerController*                            LocalPC;                                                      // 0x0000(0x0008)
    FName                                         MessageType;                                                  // 0x0008(0x0008)
    int32_t                                       MessageIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MessageString;                                                // 0x0018(0x0010)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0028(0x0008)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0030(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.HLODGridInfo
// Struct Size::0x0080
struct FHLODGridInfo
{
    TArray<FString>                               RelatedLevels;                                                // 0x0000(0x0010)
    TArray<FString>                               RelatedActorNames;                                            // 0x0010(0x0010)
    TArray<FHLODGridComponentInfo>                RelatedComponents;                                            // 0x0020(0x0010)
    char                                          pa_0030[0x0050]                                               // 0x0030(0x0050)
};


// ScriptStruct  Engine.HLODGridComponentInfo
// Struct Size::0x0030
struct FHLODGridComponentInfo
{
    TArray<FTransform>                            RelatedTransforms;                                            // 0x0000(0x0010)
    TArray<FString>                               ComponentNames;                                               // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.ComponentSync
// Struct Size::0x000C
struct FComponentSync
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ESyncOption                        SyncOption;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.LODMappingData
// Struct Size::0x0020
struct FLODMappingData
{
    TArray<int32_t>                               Mapping;                                                      // 0x0000(0x0010)
    TArray<int32_t>                               InverseMapping;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.ParameterGroupData
// Struct Size::0x0018
struct FParameterGroupData
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    int32_t                                       GroupSortPriority;                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.MaterialSpriteElement
// Struct Size::0x0028
struct FMaterialSpriteElement
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    UCurveFloat*                                  DistanceToOpacityCurve;                                       // 0x0008(0x0008)
    char                                          bSizeIsInScreenSpace;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BaseSizeX;                                                    // 0x0014(0x0004)
    float                                         BaseSizeY;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  DistanceToSizeCurve;                                          // 0x0020(0x0008)
};


// ScriptStruct  Engine.MaterialCachedExpressionData
// Struct Size::0x0228
struct FMaterialCachedExpressionData
{
    FMaterialCachedParameters                     Parameters;                                                   // 0x0000(0x01A0)
    TArray<UObject*>                              ReferencedTextures;                                           // 0x01A0(0x0010)
    TArray<FMaterialFunctionInfo>                 FunctionInfos;                                                // 0x01B0(0x0010)
    TArray<FMaterialParameterCollectionInfo>      ParameterCollectionInfos;                                     // 0x01C0(0x0010)
    TArray<UMaterialFunctionInterface*>           DefaultLayers;                                                // 0x01D0(0x0010)
    TArray<UMaterialFunctionInterface*>           DefaultLayerBlends;                                           // 0x01E0(0x0010)
    TArray<ULandscapeGrassType*>                  GrassTypes;                                                   // 0x01F0(0x0010)
    TArray<FName>                                 DynamicParameterNames;                                        // 0x0200(0x0010)
    TArray<bool>                                  QualityLevelsUsed;                                            // 0x0210(0x0010)
    char                                          bHasRuntimeVirtualTextureOutput;                              // 0x0220(0x0001)
    char                                          bHasSceneColor;                                               // 0x0220(0x0001)
    char                                          pa_0221[0x0007]                                               // 0x0221(0x0007)
};


// ScriptStruct  Engine.MaterialParameterCollectionInfo
// Struct Size::0x0018
struct FMaterialParameterCollectionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialParameterCollection*                 ParameterCollection;                                          // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialFunctionInfo
// Struct Size::0x0018
struct FMaterialFunctionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialFunctionInterface*                   Function;                                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialCachedParameters
// Struct Size::0x01A0
struct FMaterialCachedParameters
{
    FMaterialCachedParameterEntry                 RuntimeEntries;                                               // 0x0000(0x0040)
    char                                          pa_0040[0x0100]                                               // 0x0040(0x0100)
    TArray<float>                                 ScalarValues;                                                 // 0x0140(0x0010)
    TArray<FLinearColor>                          VectorValues;                                                 // 0x0150(0x0010)
    TArray<UTexture*>                             TextureValues;                                                // 0x0160(0x0010)
    TArray<UFont*>                                FontValues;                                                   // 0x0170(0x0010)
    TArray<int32_t>                               FontPageValues;                                               // 0x0180(0x0010)
    TArray<URuntimeVirtualTexture*>               RuntimeVirtualTextureValues;                                  // 0x0190(0x0010)
};


// ScriptStruct  Engine.MaterialCachedParameterEntry
// Struct Size::0x0040
struct FMaterialCachedParameterEntry
{
    TArray<uint64_t>                              NameHashes;                                                   // 0x0000(0x0010)
    TArray<FMaterialParameterInfo>                ParameterInfos;                                               // 0x0010(0x0010)
    TArray<FGuid>                                 ExpressionGuids;                                              // 0x0020(0x0010)
    TArray<bool>                                  Overrides;                                                    // 0x0030(0x0010)
};


// ScriptStruct  Engine.MaterialParameterInfo
// Struct Size::0x0010
struct FMaterialParameterInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EMaterialParameterAssociation      Association;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Index;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.StaticComponentMaskValue
// Struct Size::0x0004
struct FStaticComponentMaskValue
{
    bool                                          R;                                                            // 0x0000(0x0001)
    bool                                          G;                                                            // 0x0001(0x0001)
    bool                                          B;                                                            // 0x0002(0x0001)
    bool                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  Engine.ParameterChannelNames
// Struct Size::0x0060
struct FParameterChannelNames
{
    FText                                         R;                                                            // 0x0000(0x0018)
    FText                                         G;                                                            // 0x0018(0x0018)
    FText                                         B;                                                            // 0x0030(0x0018)
    FText                                         A;                                                            // 0x0048(0x0018)
};


// ScriptStruct  Engine.CustomDefine
// Struct Size::0x0020
struct FCustomDefine
{
    FString                                       DefineName;                                                   // 0x0000(0x0010)
    FString                                       DefineValue;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.CustomOutput
// Struct Size::0x000C
struct FCustomOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
    enum class ECustomMaterialOutputType          OutputType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.CustomInput
// Struct Size::0x001C
struct FCustomInput
{
    FName                                         InputName;                                                    // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0008]                                               // 0x0014(0x0008)
};


// ScriptStruct  Engine.FunctionExpressionOutput
// Struct Size::0x0020
struct FFunctionExpressionOutput
{
    UMaterialExpressionFunctionOutput*            ExpressionOutput;                                             // 0x0000(0x0008)
    FGuid                                         ExpressionOutputId;                                           // 0x0008(0x0010)
    FExpressionOutput                             Output;                                                       // 0x0018(0x0008)
};


// ScriptStruct  Engine.FunctionExpressionInput
// Struct Size::0x0030
struct FFunctionExpressionInput
{
    UMaterialExpressionFunctionInput*             ExpressionInput;                                              // 0x0000(0x0008)
    FGuid                                         ExpressionInputId;                                            // 0x0008(0x0010)
    FExpressionInput                              Input;                                                        // 0x0018(0x000C)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  Engine.FontParameterValue
// Struct Size::0x0030
struct FFontParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UFont*                                        FontValue;                                                    // 0x0010(0x0008)
    int32_t                                       FontPage;                                                     // 0x0018(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.RuntimeVirtualTextureParameterValue
// Struct Size::0x0028
struct FRuntimeVirtualTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    URuntimeVirtualTexture*                       ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.TextureParameterValue
// Struct Size::0x0028
struct FTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UTexture*                                     ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.VectorParameterValue
// Struct Size::0x0030
struct FVectorParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    FLinearColor                                  ParameterValue;                                               // 0x0010(0x0010)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.ScalarParameterValue
// Struct Size::0x0024
struct FScalarParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    float                                         ParameterValue;                                               // 0x0010(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.ScalarParameterAtlasInstanceData
// Struct Size::0x0058
struct FScalarParameterAtlasInstanceData
{
    bool                                          bIsUsedAsAtlasPosition;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<UCurveLinearColor>             Curve;                                                        // 0x0008(0x0028)
    TSoftObjectPtr<UCurveLinearColorAtlas>        Atlas;                                                        // 0x0030(0x0028)
};


// ScriptStruct  Engine.MaterialInstanceBasePropertyOverrides
// Struct Size::0x0020
struct FMaterialInstanceBasePropertyOverrides
{
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0000(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          TwoSided;                                                     // 0x0001(0x0001)
    char                                          DitheredLODTransition;                                        // 0x0002(0x0001)
    char                                          bCastDynamicShadowAsMasked;                                   // 0x0002(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0003(0x0001)
    enum class EMaterialShadingModel              ShadingModel;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         OpacityMaskClipValue;                                         // 0x0008(0x0004)
    float                                         ScreenSpaceVariance;                                          // 0x000C(0x0004)
    float                                         threshold;                                                    // 0x0010(0x0004)
    int16_t                                       TranslucencySortPriorityOffset;                               // 0x0014(0x0002)
    int16_t                                       MaterialStencilTypeForMpe;                                    // 0x0016(0x0002)
    bool                                          bRenderInEarlyDepthPass;                                      // 0x0018(0x0001)
    enum class EMaterialFloatPrecisionMode        FloatPrecisionMode;                                           // 0x0019(0x0001)
    enum class EMaterialFloatPrecisionModeVulkanOverrideFloatPrecisionModeVulkanOverride;                       // 0x001A(0x0001)
    bool                                          bForceDisableDynamicLightShadow;                              // 0x001B(0x0001)
    bool                                          bForceEnableTwoSidedFoliageDBufferInput;                      // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.MaterialTextureInfo
// Struct Size::0x0010
struct FMaterialTextureInfo
{
    float                                         SamplingScale;                                                // 0x0000(0x0004)
    int32_t                                       UVChannelIndex;                                               // 0x0004(0x0004)
    FName                                         TextureName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.LightmassMaterialInterfaceSettings
// Struct Size::0x0010
struct FLightmassMaterialInterfaceSettings
{
    float                                         EmissiveBoost;                                                // 0x0000(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0004(0x0004)
    float                                         ExportResolutionScale;                                        // 0x0008(0x0004)
    char                                          bCastShadowAsMasked;                                          // 0x000C(0x0001)
    char                                          bOverrideCastShadowAsMasked;                                  // 0x000C(0x0001)
    char                                          bOverrideEmissiveBoost;                                       // 0x000C(0x0001)
    char                                          bOverrideDiffuseBoost;                                        // 0x000C(0x0001)
    char                                          bOverrideExportResolutionScale;                               // 0x000C(0x0001)
    enum class EDawnSpecialMaterial               SpecialMode;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Engine.MaterialLayersFunctions
// Struct Size::0x0040
struct FMaterialLayersFunctions
{
    TArray<UMaterialFunctionInterface*>           Layers;                                                       // 0x0000(0x0010)
    TArray<UMaterialFunctionInterface*>           Blends;                                                       // 0x0010(0x0010)
    TArray<bool>                                  LayerStates;                                                  // 0x0020(0x0010)
    FString                                       KeyString;                                                    // 0x0030(0x0010)
};


// ScriptStruct  Engine.CollectionParameterBase
// Struct Size::0x0018
struct FCollectionParameterBase
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FGuid                                         ID;                                                           // 0x0008(0x0010)
};


// ScriptStruct  Engine.CollectionVectorParameter
// Struct Size::0x0028
struct FCollectionVectorParameter : public FCollectionParameterBase
{
    FLinearColor                                  DefaultValue;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Engine.CollectionScalarParameter
// Struct Size::0x001C
struct FCollectionScalarParameter : public FCollectionParameterBase
{
    float                                         DefaultValue;                                                 // 0x0018(0x0004)
};


// ScriptStruct  Engine.InterpGroupActorInfo
// Struct Size::0x0018
struct FInterpGroupActorInfo
{
    FName                                         ObjectName;                                                   // 0x0000(0x0008)
    TArray<AActor*>                               Actors;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.CameraCutInfo
// Struct Size::0x0010
struct FCameraCutInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         Timestamp;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Engine.MemberReference
// Struct Size::0x0038
struct FMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FString                                       MemberScope;                                                  // 0x0008(0x0010)
    FName                                         MemberName;                                                   // 0x0018(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0020(0x0010)
    bool                                          bSelfContext;                                                 // 0x0030(0x0001)
    bool                                          bWasDeprecated;                                               // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Engine.MeshInstancingSettings
// Struct Size::0x0018
struct FMeshInstancingSettings
{
    AActor*                                       ActorClassToUse;                                              // 0x0000(0x0008)
    int32_t                                       InstanceReplacementThreshold;                                 // 0x0008(0x0004)
    enum class EMeshInstancingReplacementMethod   MeshReplacementMethod;                                        // 0x000C(0x0001)
    bool                                          bSkipMeshesWithVertexColors;                                  // 0x000D(0x0001)
    bool                                          bUseHLODVolumes;                                              // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    UInstancedStaticMeshComponent*                ISMComponentToUse;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.MeshMergingSettings
// Struct Size::0x00A8
struct FMeshMergingSettings
{
    int32_t                                       TargetLightMapResolution;                                     // 0x0000(0x0004)
    enum class EUVOutput                          OutputUVs;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0007]                                               // 0x0005(0x0007)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x000C(0x0090)
    int32_t                                       GutterSize;                                                   // 0x009C(0x0004)
    int32_t                                       SpecificLOD;                                                  // 0x00A0(0x0004)
    enum class EMeshLODSelectionType              LODSelectionType;                                             // 0x00A4(0x0001)
    char                                          bGenerateLightMapUV;                                          // 0x00A5(0x0001)
    char                                          bComputedLightMapResolution;                                  // 0x00A5(0x0001)
    char                                          bPivotPointAtZero;                                            // 0x00A5(0x0001)
    char                                          bMergePhysicsData;                                            // 0x00A5(0x0001)
    char                                          bMergeMaterials;                                              // 0x00A5(0x0001)
    char                                          bCreateMergedMaterial;                                        // 0x00A5(0x0001)
    char                                          bBakeVertexDataToMesh;                                        // 0x00A5(0x0001)
    char                                          bUseVertexDataForBakingMaterial;                              // 0x00A5(0x0001)
    char                                          bUseTextureBinning;                                           // 0x00A6(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00A6(0x0001)
    char                                          bMergeEquivalentMaterials;                                    // 0x00A6(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00A6(0x0001)
    char                                          bIncludeImposters;                                            // 0x00A6(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00A6(0x0001)
    char                                          pa_00A7[0x0001]                                               // 0x00A7(0x0001)
};


// ScriptStruct  Engine.MeshProxySettings
// Struct Size::0x00B0
struct FMeshProxySettings
{
    int32_t                                       ScreenSize;                                                   // 0x0000(0x0004)
    float                                         VoxelSize;                                                    // 0x0004(0x0004)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x0008(0x0090)
    float                                         MergeDistance;                                                // 0x0098(0x0004)
    FColor                                        UnresolvedGeometryColor;                                      // 0x009C(0x0004)
    float                                         MaxRayCastDist;                                               // 0x00A0(0x0004)
    float                                         HardAngleThreshold;                                           // 0x00A4(0x0004)
    int32_t                                       LightMapResolution;                                           // 0x00A8(0x0004)
    enum class EProxyNormalComputationMethod      NormalCalculationMethod;                                      // 0x00AC(0x0001)
    enum class ELandscapeCullingPrecision         LandscapeCullingPrecision;                                    // 0x00AD(0x0001)
    char                                          bCalculateCorrectLODModel;                                    // 0x00AE(0x0001)
    char                                          bOverrideVoxelSize;                                           // 0x00AE(0x0001)
    char                                          bOverrideTransferDistance;                                    // 0x00AE(0x0001)
    char                                          bUseHardAngleThreshold;                                       // 0x00AE(0x0001)
    char                                          bComputeLightMapResolution;                                   // 0x00AE(0x0001)
    char                                          bRecalculateNormals;                                          // 0x00AE(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00AE(0x0001)
    char                                          bAllowAdjacency;                                              // 0x00AE(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00AF(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00AF(0x0001)
    char                                          bCreateCollision;                                             // 0x00AF(0x0001)
    char                                          bAllowVertexColors;                                           // 0x00AF(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x00AF(0x0001)
};


// ScriptStruct  Engine.MeshReductionSettings
// Struct Size::0x0028
struct FMeshReductionSettings
{
    float                                         PercentTriangles;                                             // 0x0000(0x0004)
    float                                         PercentVertices;                                              // 0x0004(0x0004)
    float                                         MaxDeviation;                                                 // 0x0008(0x0004)
    float                                         PixelError;                                                   // 0x000C(0x0004)
    float                                         WeldingThreshold;                                             // 0x0010(0x0004)
    float                                         HardAngleThreshold;                                           // 0x0014(0x0004)
    int32_t                                       BaseLODModel;                                                 // 0x0018(0x0004)
    enum class EMeshFeatureImportance             SilhouetteImportance;                                         // 0x001C(0x0001)
    enum class EMeshFeatureImportance             TextureImportance;                                            // 0x001D(0x0001)
    enum class EMeshFeatureImportance             ShadingImportance;                                            // 0x001E(0x0001)
    char                                          bRecalculateNormals;                                          // 0x001F(0x0001)
    char                                          bGenerateUniqueLightmapUVs;                                   // 0x001F(0x0001)
    char                                          bKeepSymmetry;                                                // 0x001F(0x0001)
    char                                          bVisibilityAided;                                             // 0x001F(0x0001)
    char                                          bCullOccluded;                                                // 0x001F(0x0001)
    enum class EStaticMeshReductionTerimationCriterionTerminationCriterion;                                     // 0x0020(0x0001)
    enum class EMeshFeatureImportance             VisibilityAggressiveness;                                     // 0x0021(0x0001)
    enum class EMeshFeatureImportance             VertexColorImportance;                                        // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    int32_t                                       MaxLOD0Triangles;                                             // 0x0024(0x0004)
};


// ScriptStruct  Engine.PurchaseInfo
// Struct Size::0x0040
struct FPurchaseInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       DisplayName;                                                  // 0x0010(0x0010)
    FString                                       DisplayDescription;                                           // 0x0020(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.NameCurve
// Struct Size::0x0078
struct FNameCurve : public FIndexedCurve
{
    TArray<FNameCurveKey>                         Keys;                                                         // 0x0068(0x0010)
};


// ScriptStruct  Engine.NameCurveKey
// Struct Size::0x000C
struct FNameCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         Value;                                                        // 0x0004(0x0008)
};


// ScriptStruct  Engine.NavAvoidanceMask
// Struct Size::0x0004
struct FNavAvoidanceMask
{
    char                                          bGroup0;                                                      // 0x0000(0x0001)
    char                                          bGroup1;                                                      // 0x0000(0x0001)
    char                                          bGroup2;                                                      // 0x0000(0x0001)
    char                                          bGroup3;                                                      // 0x0000(0x0001)
    char                                          bGroup4;                                                      // 0x0000(0x0001)
    char                                          bGroup5;                                                      // 0x0000(0x0001)
    char                                          bGroup6;                                                      // 0x0000(0x0001)
    char                                          bGroup7;                                                      // 0x0000(0x0001)
    char                                          bGroup8;                                                      // 0x0001(0x0001)
    char                                          bGroup9;                                                      // 0x0001(0x0001)
    char                                          bGroup10;                                                     // 0x0001(0x0001)
    char                                          bGroup11;                                                     // 0x0001(0x0001)
    char                                          bGroup12;                                                     // 0x0001(0x0001)
    char                                          bGroup13;                                                     // 0x0001(0x0001)
    char                                          bGroup14;                                                     // 0x0001(0x0001)
    char                                          bGroup15;                                                     // 0x0001(0x0001)
    char                                          bGroup16;                                                     // 0x0002(0x0001)
    char                                          bGroup17;                                                     // 0x0002(0x0001)
    char                                          bGroup18;                                                     // 0x0002(0x0001)
    char                                          bGroup19;                                                     // 0x0002(0x0001)
    char                                          bGroup20;                                                     // 0x0002(0x0001)
    char                                          bGroup21;                                                     // 0x0002(0x0001)
    char                                          bGroup22;                                                     // 0x0002(0x0001)
    char                                          bGroup23;                                                     // 0x0002(0x0001)
    char                                          bGroup24;                                                     // 0x0003(0x0001)
    char                                          bGroup25;                                                     // 0x0003(0x0001)
    char                                          bGroup26;                                                     // 0x0003(0x0001)
    char                                          bGroup27;                                                     // 0x0003(0x0001)
    char                                          bGroup28;                                                     // 0x0003(0x0001)
    char                                          bGroup29;                                                     // 0x0003(0x0001)
    char                                          bGroup30;                                                     // 0x0003(0x0001)
    char                                          bGroup31;                                                     // 0x0003(0x0001)
};


// ScriptStruct  Engine.MovementProperties
// Struct Size::0x0001
struct FMovementProperties
{
    char                                          bCanCrouch;                                                   // 0x0000(0x0001)
    char                                          bCanJump;                                                     // 0x0000(0x0001)
    char                                          bCanWalk;                                                     // 0x0000(0x0001)
    char                                          bCanSwim;                                                     // 0x0000(0x0001)
    char                                          bCanFly;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.NavAgentProperties
// Struct Size::0x0030
struct FNavAgentProperties : public FMovementProperties
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AgentRadius;                                                  // 0x0004(0x0004)
    float                                         AgentHeight;                                                  // 0x0008(0x0004)
    float                                         AgentStepHeight;                                              // 0x000C(0x0004)
    float                                         NavWalkingSearchHeightScale;                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSoftClassPath                                PreferredNavData;                                             // 0x0018(0x0018)
};


// ScriptStruct  Engine.NavDataConfig
// Struct Size::0x0078
struct FNavDataConfig : public FNavAgentProperties
{
    FName                                         Name;                                                         // 0x0030(0x0008)
    FColor                                        Color;                                                        // 0x0038(0x0004)
    FVector                                       DefaultQueryExtent;                                           // 0x003C(0x000C)
    AActor*                                       NavigationDataClass;                                          // 0x0048(0x0008)
    TSoftClassPtr<UObject>                        NavDataClass;                                                 // 0x0050(0x0028)
};


// ScriptStruct  Engine.NavAgentSelector
// Struct Size::0x0004
struct FNavAgentSelector
{
    char                                          bSupportsAgent0;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  Engine.NavigationLinkBase
// Struct Size::0x0030
struct FNavigationLinkBase
{
    float                                         LeftProjectHeight;                                            // 0x0000(0x0004)
    float                                         MaxFallDownLength;                                            // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
    float                                         SnapRadius;                                                   // 0x000C(0x0004)
    float                                         SnapHeight;                                                   // 0x0010(0x0004)
    FNavAgentSelector                             SupportedAgents;                                              // 0x0014(0x0004)
    char                                          bSupportsAgent0;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    enum class ENavLinkDirection                  Direction;                                                    // 0x001C(0x0001)
    char                                          bUseSnapHeight;                                               // 0x001D(0x0001)
    char                                          bSnapToCheapestArea;                                          // 0x001D(0x0001)
    char                                          bCustomFlag0;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag1;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag2;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag3;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag4;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag5;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag6;                                                 // 0x001E(0x0001)
    char                                          bCustomFlag7;                                                 // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    UNavAreaBase*                                 AreaClass;                                                    // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.NavigationSegmentLink
// Struct Size::0x0060
struct FNavigationSegmentLink : public FNavigationLinkBase
{
    FVector                                       LeftStart;                                                    // 0x0030(0x000C)
    FVector                                       LeftEnd;                                                      // 0x003C(0x000C)
    FVector                                       RightStart;                                                   // 0x0048(0x000C)
    FVector                                       RightEnd;                                                     // 0x0054(0x000C)
};


// ScriptStruct  Engine.NavigationLink
// Struct Size::0x0048
struct FNavigationLink : public FNavigationLinkBase
{
    FVector                                       Left;                                                         // 0x0030(0x000C)
    FVector                                       Right;                                                        // 0x003C(0x000C)
};


// ScriptStruct  Engine.RPCMonitorStruct
// Struct Size::0x0070
struct FRPCMonitorStruct
{
    double                                        BeginTime;                                                    // 0x0000(0x0008)
    TArray<UObject*>                              Objs;                                                         // 0x0008(0x0010)
    int32_t                                       RPCNum;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<FName,int32_t>                           RPCMap;                                                       // 0x0020(0x0050)
};


// ScriptStruct  Engine.ChannelDefinition
// Struct Size::0x0028
struct FChannelDefinition
{
    FName                                         ChannelName;                                                  // 0x0000(0x0008)
    FName                                         ClassName;                                                    // 0x0008(0x0008)
    UObject*                                      ChannelClass;                                                 // 0x0010(0x0008)
    int32_t                                       StaticChannelIndex;                                           // 0x0018(0x0004)
    bool                                          bTickOnCreate;                                                // 0x001C(0x0001)
    bool                                          bServerOpen;                                                  // 0x001D(0x0001)
    bool                                          bClientOpen;                                                  // 0x001E(0x0001)
    bool                                          bInitialServer;                                               // 0x001F(0x0001)
    bool                                          bInitialClient;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.PacketSimulationSettings
// Struct Size::0x0034
struct FPacketSimulationSettings
{
    int32_t                                       PktLoss;                                                      // 0x0000(0x0004)
    int32_t                                       PktLossMaxSize;                                               // 0x0004(0x0004)
    int32_t                                       PktLossMinSize;                                               // 0x0008(0x0004)
    int32_t                                       PktOrder;                                                     // 0x000C(0x0004)
    int32_t                                       PktDup;                                                       // 0x0010(0x0004)
    int32_t                                       PktLag;                                                       // 0x0014(0x0004)
    int32_t                                       PktLagVariance;                                               // 0x0018(0x0004)
    int32_t                                       PktLagMin;                                                    // 0x001C(0x0004)
    int32_t                                       PktLagMax;                                                    // 0x0020(0x0004)
    int32_t                                       PktIncomingLagMin;                                            // 0x0024(0x0004)
    int32_t                                       PktIncomingLagMax;                                            // 0x0028(0x0004)
    int32_t                                       PktIncomingLoss;                                              // 0x002C(0x0004)
    int32_t                                       PktJitter;                                                    // 0x0030(0x0004)
};


// ScriptStruct  Engine.NetTickFinishSpawningInfo
// Struct Size::0x0250
struct FNetTickFinishSpawningInfo
{
    char                                          pa_0000[0x0250]                                               // 0x0000(0x0250)
};


// ScriptStruct  Engine.NetworkObjPoolJIT
// Struct Size::0x0010
struct FNetworkObjPoolJIT
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.NetworkObjPool
// Struct Size::0x0028
struct FNetworkObjPool
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.NetworkObjPoolManagerTickFunction
// Struct Size::0x0040
struct FNetworkObjPoolManagerTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.NetworkEmulationProfileDescription
// Struct Size::0x0020
struct FNetworkEmulationProfileDescription
{
    FString                                       ProfileName;                                                  // 0x0000(0x0010)
    FString                                       ToolTip;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.NodeItem
// Struct Size::0x0040
struct FNodeItem
{
    FName                                         ParentName;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  Engine.ParticleBurst
// Struct Size::0x000C
struct FParticleBurst
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    int32_t                                       CountLow;                                                     // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleRandomSeedInfo
// Struct Size::0x0020
struct FParticleRandomSeedInfo
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    char                                          bGetSeedFromInstance;                                         // 0x0008(0x0001)
    char                                          bInstanceSeedIsIndex;                                         // 0x0008(0x0001)
    char                                          bResetSeedOnEmitterLooping;                                   // 0x0008(0x0001)
    char                                          bRandomlySelectSeedArray;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<int32_t>                               RandomSeeds;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.ParticleCurvePair
// Struct Size::0x0018
struct FParticleCurvePair
{
    FString                                       CurveName;                                                    // 0x0000(0x0010)
    UObject*                                      CurveObject;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.BeamModifierOptions
// Struct Size::0x0004
struct FBeamModifierOptions
{
    char                                          bModify;                                                      // 0x0000(0x0001)
    char                                          bScale;                                                       // 0x0000(0x0001)
    char                                          bLock;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.ParticleEvent
// Struct Size::0x0028
struct FParticleEvent
{
    enum class EParticleEventType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Frequency;                                                    // 0x0004(0x0004)
    int32_t                                       ParticleFrequency;                                            // 0x0008(0x0004)
    char                                          FirstTimeOnly;                                                // 0x000C(0x0001)
    char                                          LastTimeOnly;                                                 // 0x000C(0x0001)
    char                                          UseReflectedImpactVector;                                     // 0x000C(0x0001)
    char                                          bUseOrbitOffset;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         CustomName;                                                   // 0x0010(0x0008)
    TArray<UParticleModuleEventSendToGame*>       ParticleModuleEventsToSendToGame;                             // 0x0018(0x0010)
};


// ScriptStruct  Engine.LocationBoneSocketInfo
// Struct Size::0x0014
struct FLocationBoneSocketInfo
{
    FName                                         BoneSocketName;                                               // 0x0000(0x0008)
    FVector                                       Offset;                                                       // 0x0008(0x000C)
};


// ScriptStruct  Engine.OrbitOptions
// Struct Size::0x0004
struct FOrbitOptions
{
    char                                          bProcessDuringSpawn;                                          // 0x0000(0x0001)
    char                                          bProcessDuringUpdate;                                         // 0x0000(0x0001)
    char                                          bUseEmitterTime;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.EmitterDynamicParameter
// Struct Size::0x0048
struct FEmitterDynamicParameter
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    char                                          bUseEmitterTime;                                              // 0x0008(0x0001)
    char                                          bSpawnTimeOnly;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class EEmitterDynamicParameterValue      ValueMethod;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    char                                          bScaleVelocityByParamValue;                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRawDistributionFloat                         ParamValue;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.BeamTargetData
// Struct Size::0x000C
struct FBeamTargetData
{
    FName                                         TargetName;                                                   // 0x0000(0x0008)
    float                                         TargetPercentage;                                             // 0x0008(0x0004)
};


// ScriptStruct  Engine.GPUSpriteResourceData
// Struct Size::0x0160
struct FGPUSpriteResourceData
{
    TArray<FColor>                                QuantizedColorSamples;                                        // 0x0000(0x0010)
    TArray<FColor>                                QuantizedMiscSamples;                                         // 0x0010(0x0010)
    TArray<FColor>                                QuantizedSimulationAttrSamples;                               // 0x0020(0x0010)
    FVector4                                      ColorScale;                                                   // 0x0030(0x0010)
    FVector4                                      ColorBias;                                                    // 0x0040(0x0010)
    FVector4                                      MiscScale;                                                    // 0x0050(0x0010)
    FVector4                                      MiscBias;                                                     // 0x0060(0x0010)
    FVector4                                      SimulationAttrCurveScale;                                     // 0x0070(0x0010)
    FVector4                                      SimulationAttrCurveBias;                                      // 0x0080(0x0010)
    FVector4                                      SubImageSize;                                                 // 0x0090(0x0010)
    FVector4                                      SizeBySpeed;                                                  // 0x00A0(0x0010)
    FVector                                       ConstantAcceleration;                                         // 0x00B0(0x000C)
    FVector                                       OrbitOffsetBase;                                              // 0x00BC(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x00C8(0x000C)
    FVector                                       OrbitFrequencyBase;                                           // 0x00D4(0x000C)
    FVector                                       OrbitFrequencyRange;                                          // 0x00E0(0x000C)
    FVector                                       OrbitPhaseBase;                                               // 0x00EC(0x000C)
    FVector                                       OrbitPhaseRange;                                              // 0x00F8(0x000C)
    float                                         GlobalVectorFieldScale;                                       // 0x0104(0x0004)
    float                                         GlobalVectorFieldTightness;                                   // 0x0108(0x0004)
    float                                         PerParticleVectorFieldScale;                                  // 0x010C(0x0004)
    float                                         PerParticleVectorFieldBias;                                   // 0x0110(0x0004)
    float                                         DragCoefficientScale;                                         // 0x0114(0x0004)
    float                                         DragCoefficientBias;                                          // 0x0118(0x0004)
    float                                         ResilienceScale;                                              // 0x011C(0x0004)
    float                                         ResilienceBias;                                               // 0x0120(0x0004)
    float                                         CollisionRadiusScale;                                         // 0x0124(0x0004)
    float                                         CollisionRadiusBias;                                          // 0x0128(0x0004)
    float                                         CollisionTimeBias;                                            // 0x012C(0x0004)
    float                                         CollisionRandomSpread;                                        // 0x0130(0x0004)
    float                                         CollisionRandomDistribution;                                  // 0x0134(0x0004)
    float                                         OneMinusFriction;                                             // 0x0138(0x0004)
    float                                         RotationRateScale;                                            // 0x013C(0x0004)
    float                                         CameraMotionBlurAmount;                                       // 0x0140(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0144(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0145(0x0001)
    char                                          pa_0146[0x0002]                                               // 0x0146(0x0002)
    FVector2D                                     PivotOffset;                                                  // 0x0148(0x0008)
    char                                          bRemoveHMDRoll;                                               // 0x0150(0x0001)
    char                                          pa_0151[0x0003]                                               // 0x0151(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0154(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
};


// ScriptStruct  Engine.GPUSpriteEmitterInfo
// Struct Size::0x0280
struct FGPUSpriteEmitterInfo
{
    UParticleModuleRequired*                      RequiredModule;                                               // 0x0000(0x0008)
    UParticleModuleSpawn*                         SpawnModule;                                                  // 0x0008(0x0008)
    UParticleModuleSpawnPerUnit*                  SpawnPerUnitModule;                                           // 0x0010(0x0008)
    TArray<UParticleModule*>                      SpawnModules;                                                 // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FGPUSpriteLocalVectorFieldInfo                LocalVectorField;                                             // 0x0030(0x0070)
    FFloatDistribution                            VectorFieldScale;                                             // 0x00A0(0x0020)
    FFloatDistribution                            DragCoefficient;                                              // 0x00C0(0x0020)
    FFloatDistribution                            PointAttractorStrength;                                       // 0x00E0(0x0020)
    FFloatDistribution                            Resilience;                                                   // 0x0100(0x0020)
    FVector                                       ConstantAcceleration;                                         // 0x0120(0x000C)
    FVector                                       PointAttractorPosition;                                       // 0x012C(0x000C)
    float                                         PointAttractorRadiusSq;                                       // 0x0138(0x0004)
    FVector                                       OrbitOffsetBase;                                              // 0x013C(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x0148(0x000C)
    FVector2D                                     InvMaxSize;                                                   // 0x0154(0x0008)
    float                                         InvRotationRateScale;                                         // 0x015C(0x0004)
    float                                         MaxLifetime;                                                  // 0x0160(0x0004)
    int32_t                                       MaxParticleCount;                                             // 0x0164(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0168(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0169(0x0001)
    char                                          pa_016A[0x0002]                                               // 0x016A(0x0002)
    char                                          bEnableCollision;                                             // 0x016C(0x0001)
    char                                          pa_016D[0x0003]                                               // 0x016D(0x0003)
    enum class EParticleCollisionMode             CollisionMode;                                                // 0x0170(0x0001)
    char                                          pa_0171[0x0003]                                               // 0x0171(0x0003)
    char                                          bRemoveHMDRoll;                                               // 0x0174(0x0001)
    char                                          pa_0175[0x0003]                                               // 0x0175(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0178(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x017C(0x0004)
    FRawDistributionVector                        DynamicColor;                                                 // 0x0180(0x0048)
    FRawDistributionFloat                         DynamicAlpha;                                                 // 0x01C8(0x0030)
    FRawDistributionVector                        DynamicColorScale;                                            // 0x01F8(0x0048)
    FRawDistributionFloat                         DynamicAlphaScale;                                            // 0x0240(0x0030)
    char                                          pa_0270[0x0010]                                               // 0x0270(0x0010)
};


// ScriptStruct  Engine.GPUSpriteLocalVectorFieldInfo
// Struct Size::0x0070
struct FGPUSpriteLocalVectorFieldInfo
{
    UVectorField*                                 Field;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FRotator                                      MinInitialRotation;                                           // 0x0040(0x000C)
    FRotator                                      MaxInitialRotation;                                           // 0x004C(0x000C)
    FRotator                                      RotationRate;                                                 // 0x0058(0x000C)
    float                                         Intensity;                                                    // 0x0064(0x0004)
    float                                         Tightness;                                                    // 0x0068(0x0004)
    char                                          bIgnoreComponentTransform;                                    // 0x006C(0x0001)
    char                                          bTileX;                                                       // 0x006C(0x0001)
    char                                          bTileY;                                                       // 0x006C(0x0001)
    char                                          bTileZ;                                                       // 0x006C(0x0001)
    char                                          bUseFixDT;                                                    // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  Engine.NamedEmitterMaterial
// Struct Size::0x0010
struct FNamedEmitterMaterial
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.LODSoloTrack
// Struct Size::0x0010
struct FLODSoloTrack
{
    TArray<char>                                  SoloEnableSetting;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleSystemLOD
// Struct Size::0x0001
struct FParticleSystemLOD
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.ParticleSystemWorldManagerTickFunction
// Struct Size::0x0040
struct FParticleSystemWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.ParticleSystemReplayFrame
// Struct Size::0x0010
struct FParticleSystemReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleEmitterReplayFrame
// Struct Size::0x0010
struct FParticleEmitterReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.PerPlatformBool
// Struct Size::0x0001
struct FPerPlatformBool
{
    bool                                          Default;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.FreezablePerPlatformInt
// Struct Size::0x0004
struct FFreezablePerPlatformInt
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationData
// Struct Size::0x0024
struct FPhysicalAnimationData
{
    FName                                         BodyName;                                                     // 0x0000(0x0008)
    char                                          bIsLocalSimulation;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OrientationStrength;                                          // 0x000C(0x0004)
    float                                         AngularVelocityStrength;                                      // 0x0010(0x0004)
    float                                         PositionStrength;                                             // 0x0014(0x0004)
    float                                         VelocityStrength;                                             // 0x0018(0x0004)
    float                                         MaxLinearForce;                                               // 0x001C(0x0004)
    float                                         MaxAngularForce;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationProfile
// Struct Size::0x002C
struct FPhysicalAnimationProfile
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    FPhysicalAnimationData                        PhysicalAnimationData;                                        // 0x0008(0x0024)
};


// ScriptStruct  Engine.SolverIterations
// Struct Size::0x001C
struct FSolverIterations
{
    float                                         FixedTimeStep;                                                // 0x0000(0x0004)
    int32_t                                       SolverIterations;                                             // 0x0004(0x0004)
    int32_t                                       JointIterations;                                              // 0x0008(0x0004)
    int32_t                                       CollisionIterations;                                          // 0x000C(0x0004)
    int32_t                                       SolverPushOutIterations;                                      // 0x0010(0x0004)
    int32_t                                       JointPushOutIterations;                                       // 0x0014(0x0004)
    int32_t                                       CollisionPushOutIterations;                                   // 0x0018(0x0004)
};


// ScriptStruct  Engine.PhysicsConstraintProfileHandle
// Struct Size::0x0114
struct FPhysicsConstraintProfileHandle
{
    FConstraintProfileProperties                  ProfileProperties;                                            // 0x0000(0x010C)
    FName                                         ProfileName;                                                  // 0x010C(0x0008)
};


// ScriptStruct  Engine.ChaosPhysicsSettings
// Struct Size::0x0003
struct FChaosPhysicsSettings
{
    enum class EChaosThreadingMode                DefaultThreadingModel;                                        // 0x0000(0x0001)
    enum class EChaosSolverTickMode               DedicatedThreadTickMode;                                      // 0x0001(0x0001)
    enum class EChaosBufferMode                   DedicatedThreadBufferMode;                                    // 0x0002(0x0001)
};


// ScriptStruct  Engine.PhysicalSurfaceName
// Struct Size::0x000C
struct FPhysicalSurfaceName
{
    enum class EPhysicalSurface                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.DelegateArray
// Struct Size::0x0010
struct FDelegateArray
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.TViewTarget
// Struct Size::0x06C0
struct FTViewTarget
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
    APlayerState*                                 PlayerState;                                                  // 0x06B0(0x0008)
    char                                          pa_06B8[0x0008]                                               // 0x06B8(0x0008)
};


// ScriptStruct  Engine.CameraCacheEntry
// Struct Size::0x06B0
struct FCameraCacheEntry
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x06A0)
};


// ScriptStruct  Engine.InputActionSpeechMapping
// Struct Size::0x0010
struct FInputActionSpeechMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    FName                                         SpeechKeyword;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.InputAxisKeyMapping
// Struct Size::0x0028
struct FInputAxisKeyMapping
{
    FName                                         AxisName;                                                     // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputActionKeyMapping
// Struct Size::0x0028
struct FInputActionKeyMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    char                                          bShift;                                                       // 0x0008(0x0001)
    char                                          bCtrl;                                                        // 0x0008(0x0001)
    char                                          bAlt;                                                         // 0x0008(0x0001)
    char                                          bCmd;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputAxisConfigEntry
// Struct Size::0x0018
struct FInputAxisConfigEntry
{
    FName                                         AxisKeyName;                                                  // 0x0000(0x0008)
    FInputAxisProperties                          AxisProperties;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.InputAxisProperties
// Struct Size::0x0010
struct FInputAxisProperties
{
    float                                         DeadZone;                                                     // 0x0000(0x0004)
    float                                         Sensitivity;                                                  // 0x0004(0x0004)
    float                                         Exponent;                                                     // 0x0008(0x0004)
    char                                          bInvert;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.KeyBind
// Struct Size::0x0030
struct FKeyBind
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    FString                                       Command;                                                      // 0x0018(0x0010)
    char                                          Control;                                                      // 0x0028(0x0001)
    char                                          Shift;                                                        // 0x0028(0x0001)
    char                                          Alt;                                                          // 0x0028(0x0001)
    char                                          Cmd;                                                          // 0x0028(0x0001)
    char                                          bIgnoreCtrl;                                                  // 0x0028(0x0001)
    char                                          bIgnoreShift;                                                 // 0x0028(0x0001)
    char                                          bIgnoreAlt;                                                   // 0x0028(0x0001)
    char                                          bIgnoreCmd;                                                   // 0x0028(0x0001)
    char                                          bDisabled;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  Engine.PlayerMuteList
// Struct Size::0x0038
struct FPlayerMuteList
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    bool                                          bHasVoiceHandshakeCompleted;                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       VoiceChannelIdx;                                              // 0x0034(0x0004)
};


// ScriptStruct  Engine.PoseDataContainer
// Struct Size::0x0090
struct FPoseDataContainer
{
    TArray<FSmartName>                            PoseNames;                                                    // 0x0000(0x0010)
    TArray<FName>                                 Tracks;                                                       // 0x0010(0x0010)
    TMap<FName,int32_t>                           TrackMap;                                                     // 0x0020(0x0050)
    TArray<FPoseData>                             Poses;                                                        // 0x0070(0x0010)
    TArray<FAnimCurveBase>                        Curves;                                                       // 0x0080(0x0010)
};


// ScriptStruct  Engine.PoseData
// Struct Size::0x0070
struct FPoseData
{
    TArray<FTransform>                            LocalSpacePose;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         TrackToBufferIndex;                                           // 0x0010(0x0050)
    TArray<float>                                 CurveData;                                                    // 0x0060(0x0010)
};


// ScriptStruct  Engine.PreviewAssetAttachContainer
// Struct Size::0x0010
struct FPreviewAssetAttachContainer
{
    TArray<FPreviewAttachedObjectPair>            AttachedObjects;                                              // 0x0000(0x0010)
};


// ScriptStruct  Engine.PreviewAttachedObjectPair
// Struct Size::0x0038
struct FPreviewAttachedObjectPair
{
    TSoftObjectPtr<UObject>                       AttachedObject;                                               // 0x0000(0x0028)
    UObject*                                      Object;                                                       // 0x0028(0x0008)
    FName                                         AttachedTo;                                                   // 0x0030(0x0008)
};


// ScriptStruct  Engine.PreviewMeshCollectionEntry
// Struct Size::0x0028
struct FPreviewMeshCollectionEntry
{
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh;                                                 // 0x0000(0x0028)
};


// ScriptStruct  Engine.PrimitiveComponentInstanceData
// Struct Size::0x0100
struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FTransform                                    ComponentTransform;                                           // 0x00C0(0x0030)
    int32_t                                       VisibilityId;                                                 // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
    UPrimitiveComponent*                          LODParent;                                                    // 0x00F8(0x0008)
};


// ScriptStruct  Engine.SpriteCategoryInfo
// Struct Size::0x0038
struct FSpriteCategoryInfo
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         Description;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.QuartzClockSettings
// Struct Size::0x0020
struct FQuartzClockSettings
{
    FQuartzTimeSignature                          TimeSignature;                                                // 0x0000(0x0018)
    bool                                          bIgnoreLevelChange;                                           // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Engine.QuartzTimeSignature
// Struct Size::0x0018
struct FQuartzTimeSignature
{
    int32_t                                       NumBeats;                                                     // 0x0000(0x0004)
    enum class EQuartzTimeSignatureQuantization   BeatType;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FQuartzPulseOverrideStep>              OptionalPulseOverride;                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.QuartzPulseOverrideStep
// Struct Size::0x0008
struct FQuartzPulseOverrideStep
{
    int32_t                                       NumberOfPulses;                                               // 0x0000(0x0004)
    enum class EQuartzCommandQuantization         PulseDuration;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.QuartzQuantizationBoundary
// Struct Size::0x000C
struct FQuartzQuantizationBoundary
{
    enum class EQuartzCommandQuantization         Quantization;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Multiplier;                                                   // 0x0004(0x0004)
    enum class EQuarztQuantizationReference       CountingReferencePoint;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.QuartzTransportTimeStamp
// Struct Size::0x000C
struct FQuartzTransportTimeStamp
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Engine.LevelNameAndTime
// Struct Size::0x0018
struct FLevelNameAndTime
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    uint32_t                                      LevelChangeTimeInMS;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ReverbSettings
// Struct Size::0x0020
struct FReverbSettings
{
    bool                                          bApplyReverb;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UReverbEffect*                                ReverbEffect;                                                 // 0x0008(0x0008)
    USoundEffectSubmixPreset*                     ReverbPluginEffect;                                           // 0x0010(0x0008)
    float                                         Volume;                                                       // 0x0018(0x0004)
    float                                         FadeTime;                                                     // 0x001C(0x0004)
};


// ScriptStruct  Engine.CompressedRichCurve
// Struct Size::0x0018
struct FCompressedRichCurve
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.TransformBase
// Struct Size::0x0028
struct FTransformBase
{
    FName                                         Node;                                                         // 0x0000(0x0008)
    FTransformBaseConstraint                      Constraints;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.TransformBaseConstraint
// Struct Size::0x0010
struct FTransformBaseConstraint
{
    TArray<FRigTransformConstraint>               TransformConstraints;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.RigTransformConstraint
// Struct Size::0x0010
struct FRigTransformConstraint
{
    enum class EConstraintTransform               TranformType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParentSpace;                                                  // 0x0004(0x0008)
    float                                         Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Engine.Node
// Struct Size::0x0060
struct FNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FString                                       DisplayName;                                                  // 0x0040(0x0010)
    bool                                          bAdvanced;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00A0
struct FRootMotionSource
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    uint16_t                                      Priority;                                                     // 0x0010(0x0002)
    uint16_t                                      LocalID;                                                      // 0x0012(0x0002)
    enum class ERootMotionAccumulateMode          AccumulateMode;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         InstanceName;                                                 // 0x0018(0x0008)
    float                                         StartTime;                                                    // 0x0020(0x0004)
    float                                         CurrentTime;                                                  // 0x0024(0x0004)
    float                                         PreviousTime;                                                 // 0x0028(0x0004)
    float                                         Duration;                                                     // 0x002C(0x0004)
    FRootMotionSourceStatus                       status;                                                       // 0x0030(0x0001)
    FRootMotionSourceSettings                     Settings;                                                     // 0x0031(0x0001)
    bool                                          bInLocalSpace;                                                // 0x0032(0x0001)
    char                                          pa_0033[0x000D]                                               // 0x0033(0x000D)
    FRootMotionMovementParams                     RootMotionParams;                                             // 0x0040(0x0040)
    FRootMotionFinishVelocitySettings             FinishVelocityParams;                                         // 0x0080(0x0014)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  Engine.RootMotionFinishVelocitySettings
// Struct Size::0x0014
struct FRootMotionFinishVelocitySettings
{
    enum class ERootMotionFinishVelocityMode      Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       SetVelocity;                                                  // 0x0004(0x000C)
    float                                         ClampVelocity;                                                // 0x0010(0x0004)
};


// ScriptStruct  Engine.RootMotionSourceStatus
// Struct Size::0x0001
struct FRootMotionSourceStatus
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00D0
struct FRootMotionSource : public FRootMotionSource
{
    FRotator                                      Rotation;                                                     // 0x0098(0x000C)
    float                                         Distance;                                                     // 0x00A4(0x0004)
    float                                         Height;                                                       // 0x00A8(0x0004)
    bool                                          bDisableTimeout;                                              // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00B0(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x00B8(0x0008)
    char                                          pa_00C0[0x0010]                                               // 0x00C0(0x0010)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00D0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       InitialTargetLocation;                                        // 0x00A4(0x000C)
    FVector                                       TargetLocation;                                               // 0x00B0(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00C0(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x00C8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00C0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       TargetLocation;                                               // 0x00A4(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00B8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00E0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Location;                                                     // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    AActor*                                       LocationActor;                                                // 0x00A8(0x0008)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         Strength;                                                     // 0x00B4(0x0004)
    bool                                          bIsPush;                                                      // 0x00B8(0x0001)
    bool                                          bNoZForce;                                                    // 0x00B9(0x0001)
    char                                          pa_00BA[0x0006]                                               // 0x00BA(0x0006)
    UCurveFloat*                                  StrengthDistanceFalloff;                                      // 0x00C0(0x0008)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x00C8(0x0008)
    bool                                          bUseFixedWorldDirection;                                      // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    FRotator                                      FixedWorldDirection;                                          // 0x00D4(0x000C)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00B0
struct FRootMotionSource : public FRootMotionSource
{
    FVector                                       Force;                                                        // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x00A8(0x0008)
};


// ScriptStruct  Engine.SceneSOCSettings
// Struct Size::0x0002
struct FSceneSOCSettings
{
    bool                                          bUseLandscapeAsOccluder;                                      // 0x0000(0x0001)
    bool                                          bUseMeshAsOccluder;                                           // 0x0001(0x0001)
};


// ScriptStruct  Engine.CameraExposureSettings
// Struct Size::0x0040
struct FCameraExposureSettings
{
    enum class EAutoExposureMethod                Method;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowPercent;                                                   // 0x0004(0x0004)
    float                                         HighPercent;                                                  // 0x0008(0x0004)
    float                                         MinBrightness;                                                // 0x000C(0x0004)
    float                                         MaxBrightness;                                                // 0x0010(0x0004)
    float                                         SpeedUp;                                                      // 0x0014(0x0004)
    float                                         SpeedDown;                                                    // 0x0018(0x0004)
    float                                         Bias;                                                         // 0x001C(0x0004)
    UCurveFloat*                                  BiasCurve;                                                    // 0x0020(0x0008)
    UTexture*                                     MeterMask;                                                    // 0x0028(0x0008)
    float                                         HistogramLogMin;                                              // 0x0030(0x0004)
    float                                         HistogramLogMax;                                              // 0x0034(0x0004)
    float                                         CalibrationConstant;                                          // 0x0038(0x0004)
    char                                          ApplyPhysicalCameraExposure;                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Engine.LensSettings
// Struct Size::0x00E0
struct FLensSettings
{
    FLensBloomSettings                            Bloom;                                                        // 0x0000(0x00B8)
    FLensImperfectionSettings                     Imperfections;                                                // 0x00B8(0x0020)
    float                                         ChromaticAberration;                                          // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  Engine.LensImperfectionSettings
// Struct Size::0x0020
struct FLensImperfectionSettings
{
    UTexture*                                     DirtMask;                                                     // 0x0000(0x0008)
    float                                         DirtMaskIntensity;                                            // 0x0008(0x0004)
    FLinearColor                                  DirtMaskTint;                                                 // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.LensBloomSettings
// Struct Size::0x00B8
struct FLensBloomSettings
{
    FGaussianSumBloomSettings                     GaussianSum;                                                  // 0x0000(0x0084)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FConvolutionBloomSettings                     Convolution;                                                  // 0x0088(0x0028)
    enum class EBloomMethod                       Method;                                                       // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Engine.ConvolutionBloomSettings
// Struct Size::0x0028
struct FConvolutionBloomSettings
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
    float                                         Size;                                                         // 0x0008(0x0004)
    FVector2D                                     CenterUV;                                                     // 0x000C(0x0008)
    float                                         PreFilterMin;                                                 // 0x0014(0x0004)
    float                                         PreFilterMax;                                                 // 0x0018(0x0004)
    float                                         PreFilterMult;                                                // 0x001C(0x0004)
    float                                         BufferScale;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.GaussianSumBloomSettings
// Struct Size::0x0084
struct FGaussianSumBloomSettings
{
    float                                         Intensity;                                                    // 0x0000(0x0004)
    float                                         threshold;                                                    // 0x0004(0x0004)
    float                                         SizeScale;                                                    // 0x0008(0x0004)
    float                                         Filter1Size;                                                  // 0x000C(0x0004)
    float                                         Filter2Size;                                                  // 0x0010(0x0004)
    float                                         Filter3Size;                                                  // 0x0014(0x0004)
    float                                         Filter4Size;                                                  // 0x0018(0x0004)
    float                                         Filter5Size;                                                  // 0x001C(0x0004)
    float                                         Filter6Size;                                                  // 0x0020(0x0004)
    FLinearColor                                  Filter1Tint;                                                  // 0x0024(0x0010)
    FLinearColor                                  Filter2Tint;                                                  // 0x0034(0x0010)
    FLinearColor                                  Filter3Tint;                                                  // 0x0044(0x0010)
    FLinearColor                                  Filter4Tint;                                                  // 0x0054(0x0010)
    FLinearColor                                  Filter5Tint;                                                  // 0x0064(0x0010)
    FLinearColor                                  Filter6Tint;                                                  // 0x0074(0x0010)
};


// ScriptStruct  Engine.FilmStockSettings
// Struct Size::0x0014
struct FFilmStockSettings
{
    float                                         Slope;                                                        // 0x0000(0x0004)
    float                                         Toe;                                                          // 0x0004(0x0004)
    float                                         Shoulder;                                                     // 0x0008(0x0004)
    float                                         BlackClip;                                                    // 0x000C(0x0004)
    float                                         WhiteClip;                                                    // 0x0010(0x0004)
};


// ScriptStruct  Engine.ColorGradingSettings
// Struct Size::0x0190
struct FColorGradingSettings
{
    FColorGradePerRangeSettings                   Global;                                                       // 0x0000(0x0060)
    FColorGradePerRangeSettings                   Shadows;                                                      // 0x0060(0x0060)
    FColorGradePerRangeSettings                   Midtones;                                                     // 0x00C0(0x0060)
    FColorGradePerRangeSettings                   Highlights;                                                   // 0x0120(0x0060)
    float                                         ShadowsMax;                                                   // 0x0180(0x0004)
    float                                         HighlightsMin;                                                // 0x0184(0x0004)
    char                                          pa_0188[0x0008]                                               // 0x0188(0x0008)
};


// ScriptStruct  Engine.ColorGradePerRangeSettings
// Struct Size::0x0060
struct FColorGradePerRangeSettings
{
    FVector4                                      Saturation;                                                   // 0x0000(0x0010)
    FVector4                                      Contrast;                                                     // 0x0010(0x0010)
    FVector4                                      Gamma;                                                        // 0x0020(0x0010)
    FVector4                                      Gain;                                                         // 0x0030(0x0010)
    FVector4                                      Offset;                                                       // 0x0040(0x0010)
    float                                         Vibrance;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  Engine.EngineShowFlagsSetting
// Struct Size::0x0018
struct FEngineShowFlagsSetting
{
    FString                                       ShowFlagName;                                                 // 0x0000(0x0010)
    bool                                          Enabled;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.SceneViewExtensionIsActiveFunctor
// Struct Size::0x0050
struct FSceneViewExtensionIsActiveFunctor
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SingleAnimationPlayData
// Struct Size::0x0018
struct FSingleAnimationPlayData
{
    UAnimationAsset*                              AnimToPlay;                                                   // 0x0000(0x0008)
    char                                          bSavedLooping;                                                // 0x0008(0x0001)
    char                                          bSavedPlaying;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SavedPosition;                                                // 0x000C(0x0004)
    float                                         SavedPlayRate;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SkeletalMaterial
// Struct Size::0x0028
struct FSkeletalMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.ClothingAssetData
// Struct Size::0x0078
struct FClothingAssetData
{
    FName                                         AssetName;                                                    // 0x0000(0x0008)
    FString                                       ApexFileName;                                                 // 0x0008(0x0010)
    bool                                          bClothPropertiesChanged;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FClothPhysicsProperties                       PhysicsProperties;                                            // 0x001C(0x0050)
    char                                          pa_006C[0x000C]                                               // 0x006C(0x000C)
};


// ScriptStruct  Engine.ClothPhysicsProperties
// Struct Size::0x0050
struct FClothPhysicsProperties
{
    float                                         VerticalResistance;                                           // 0x0000(0x0004)
    float                                         HorizontalResistance;                                         // 0x0004(0x0004)
    float                                         BendResistance;                                               // 0x0008(0x0004)
    float                                         ShearResistance;                                              // 0x000C(0x0004)
    float                                         Friction;                                                     // 0x0010(0x0004)
    float                                         Damping;                                                      // 0x0014(0x0004)
    float                                         TetherStiffness;                                              // 0x0018(0x0004)
    float                                         TetherLimit;                                                  // 0x001C(0x0004)
    float                                         Drag;                                                         // 0x0020(0x0004)
    float                                         StiffnessFrequency;                                           // 0x0024(0x0004)
    float                                         GravityScale;                                                 // 0x0028(0x0004)
    float                                         MassScale;                                                    // 0x002C(0x0004)
    float                                         InertiaBlend;                                                 // 0x0030(0x0004)
    float                                         SelfCollisionThickness;                                       // 0x0034(0x0004)
    float                                         SelfCollisionSquashScale;                                     // 0x0038(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x003C(0x0004)
    float                                         SolverFrequency;                                              // 0x0040(0x0004)
    float                                         FiberCompression;                                             // 0x0044(0x0004)
    float                                         FiberExpansion;                                               // 0x0048(0x0004)
    float                                         FiberResistance;                                              // 0x004C(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshLODInfo
// Struct Size::0x00B8
struct FSkeletalMeshLODInfo
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    TArray<int32_t>                               LODMaterialMap;                                               // 0x0008(0x0010)
    FSkeletalMeshBuildSettings                    BuildSettings;                                                // 0x0018(0x0014)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x002C(0x003C)
    TArray<FBoneReference>                        BonesToRemove;                                                // 0x0068(0x0010)
    TArray<FBoneReference>                        BonesToPrioritize;                                            // 0x0078(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x0090(0x0008)
    UAnimSequence*                                BakePoseOverride;                                             // 0x0098(0x0008)
    FString                                       SourceImportFilename;                                         // 0x00A0(0x0010)
    enum class ESkinCacheUsage                    SkinCacheUsage;                                               // 0x00B0(0x0001)
    char                                          bHasBeenSimplified;                                           // 0x00B1(0x0001)
    char                                          bHasPerLODVertexColors;                                       // 0x00B1(0x0001)
    char                                          bAllowCPUAccess;                                              // 0x00B1(0x0001)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
};


// ScriptStruct  Engine.SkeletalMeshOptimizationSettings
// Struct Size::0x003C
struct FSkeletalMeshOptimizationSettings
{
    enum class SkeletalMeshTerminationCriterion   TerminationCriterion;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         NumOfVertPercentage;                                          // 0x0008(0x0004)
    uint32_t                                      MaxNumOfTriangles;                                            // 0x000C(0x0004)
    uint32_t                                      MaxNumOfVerts;                                                // 0x0010(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0014(0x0004)
    enum class SkeletalMeshOptimizationType       ReductionMethod;                                              // 0x0018(0x0001)
    enum class SkeletalMeshOptimizationImportance SilhouetteImportance;                                         // 0x0019(0x0001)
    enum class SkeletalMeshOptimizationImportance TextureImportance;                                            // 0x001A(0x0001)
    enum class SkeletalMeshOptimizationImportance ShadingImportance;                                            // 0x001B(0x0001)
    enum class SkeletalMeshOptimizationImportance SkinningImportance;                                           // 0x001C(0x0001)
    char                                          bRemapMorphTargets;                                           // 0x001D(0x0001)
    char                                          bRecalcNormals;                                               // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         WeldingThreshold;                                             // 0x0020(0x0004)
    float                                         NormalsThreshold;                                             // 0x0024(0x0004)
    int32_t                                       MaxBonesPerVertex;                                            // 0x0028(0x0004)
    char                                          bEnforceBoneBoundaries;                                       // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         VolumeImportance;                                             // 0x0030(0x0004)
    char                                          bLockEdges;                                                   // 0x0034(0x0001)
    char                                          bLockColorBounaries;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       BaseLOD;                                                      // 0x0038(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshClothBuildParams
// Struct Size::0x0058
struct FSkeletalMeshClothBuildParams
{
    TWeakObjectPtr<UClothingAssetBase>            TargetAsset;                                                  // 0x0000(0x0008)
    int32_t                                       TargetLod;                                                    // 0x0008(0x0004)
    bool                                          bRemapParameters;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       AssetName;                                                    // 0x0010(0x0010)
    int32_t                                       LODIndex;                                                     // 0x0020(0x0004)
    int32_t                                       SourceSection;                                                // 0x0024(0x0004)
    bool                                          bRemoveFromMesh;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TSoftObjectPtr<UPhysicsAsset>                 PhysicsAsset;                                                 // 0x0030(0x0028)
};


// ScriptStruct  Engine.BoneMirrorExport
// Struct Size::0x0014
struct FBoneMirrorExport
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    FName                                         SourceBoneName;                                               // 0x0008(0x0008)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.BoneMirrorInfo
// Struct Size::0x0008
struct FBoneMirrorInfo
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshComponentClothTickFunction
// Struct Size::0x0040
struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshComponentEndPhysicsTickFunction
// Struct Size::0x0040
struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshLODGroupSettings
// Struct Size::0x0080
struct FSkeletalMeshLODGroupSettings
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    enum class EBoneFilterActionOption            BoneFilterActionOption;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FBoneFilter>                           BoneList;                                                     // 0x0010(0x0010)
    TArray<FName>                                 BonesToPrioritize;                                            // 0x0020(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x0038(0x0008)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x0040(0x003C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Engine.BoneFilter
// Struct Size::0x000C
struct FBoneFilter
{
    bool                                          bExcludeSelf;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         BoneName;                                                     // 0x0004(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshSamplingInfo
// Struct Size::0x0030
struct FSkeletalMeshSamplingInfo
{
    TArray<FSkeletalMeshSamplingRegion>           Regions;                                                      // 0x0000(0x0010)
    FSkeletalMeshSamplingBuiltData                BuiltData;                                                    // 0x0010(0x0020)
};


// ScriptStruct  Engine.SkeletalMeshSamplingBuiltData
// Struct Size::0x0020
struct FSkeletalMeshSamplingBuiltData
{
    TArray<FSkeletalMeshSamplingLODBuiltData>     WholeMeshBuiltData;                                           // 0x0000(0x0010)
    TArray<FSkeletalMeshSamplingRegionBuiltData>  RegionBuiltData;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBuiltData
// Struct Size::0x0078
struct FSkeletalMeshSamplingRegionBuiltData
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.SkeletalMeshSamplingLODBuiltData
// Struct Size::0x0048
struct FSkeletalMeshSamplingLODBuiltData
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegion
// Struct Size::0x0030
struct FSkeletalMeshSamplingRegion
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FSkeletalMeshSamplingRegionMaterialFilter>MaterialFilters;                                           // 0x0010(0x0010)
    TArray<FSkeletalMeshSamplingRegionBoneFilter> BoneFilters;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBoneFilter
// Struct Size::0x000C
struct FSkeletalMeshSamplingRegionBoneFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          bIncludeOrExclude;                                            // 0x0008(0x0001)
    char                                          bApplyToChildren;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionMaterialFilter
// Struct Size::0x0008
struct FSkeletalMeshSamplingRegionMaterialFilter
{
    FName                                         MaterialName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Engine.VirtualBone
// Struct Size::0x0018
struct FVirtualBone
{
    FName                                         SourceBoneName;                                               // 0x0000(0x0008)
    FName                                         TargetBoneName;                                               // 0x0008(0x0008)
    FName                                         VirtualBoneName;                                              // 0x0010(0x0008)
};


// ScriptStruct  Engine.AnimSlotGroup
// Struct Size::0x0018
struct FAnimSlotGroup
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    TArray<FName>                                 SlotNames;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.RigConfiguration
// Struct Size::0x0018
struct FRigConfiguration
{
    URig*                                         Rig;                                                          // 0x0000(0x0008)
    TArray<FNameMapping>                          BoneMappingTable;                                             // 0x0008(0x0010)
};


// ScriptStruct  Engine.NameMapping
// Struct Size::0x0010
struct FNameMapping
{
    FName                                         NodeName;                                                     // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.BoneReductionSetting
// Struct Size::0x0010
struct FBoneReductionSetting
{
    TArray<FName>                                 BonesToRemove;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.ReferencePose
// Struct Size::0x0018
struct FReferencePose
{
    FName                                         PoseName;                                                     // 0x0000(0x0008)
    TArray<FTransform>                            ReferencePose;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.BoneNode
// Struct Size::0x0010
struct FBoneNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0008(0x0004)
    enum class EBoneTranslationRetargetingMode    TranslationRetargetingMode;                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.SkeletonToMeshLinkup
// Struct Size::0x0020
struct FSkeletonToMeshLinkup
{
    TArray<int32_t>                               SkeletonToMeshTable;                                          // 0x0000(0x0010)
    TArray<int32_t>                               MeshToSkeletonTable;                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.VertexOffsetUsage
// Struct Size::0x0004
struct FVertexOffsetUsage
{
    int32_t                                       Usage;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Engine.SkelMeshComponentLODInfo
// Struct Size::0x0048
struct FSkelMeshComponentLODInfo
{
    TArray<bool>                                  HiddenMaterials;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0038]                                               // 0x0010(0x0038)
};


// ScriptStruct  Engine.SkelMeshSkinWeightInfo
// Struct Size::0x003C
struct FSkelMeshSkinWeightInfo
{
    int32_t                                       Bones;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x002C]                                               // 0x0004(0x002C)
    char                                          Weights;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x000B]                                               // 0x0031(0x000B)
};


// ScriptStruct  Engine.SkinWeightProfileInfo
// Struct Size::0x0014
struct FSkinWeightProfileInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FPerPlatformBool                              DefaultProfile;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FPerPlatformInt                               DefaultProfileFromLODIndex;                                   // 0x000C(0x0008)
};


// ScriptStruct  Engine.SkinWeightProfileManagerTickFunction
// Struct Size::0x0040
struct FSkinWeightProfileManagerTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.TentDistribution
// Struct Size::0x000C
struct FTentDistribution
{
    float                                         TipAltitude;                                                  // 0x0000(0x0004)
    float                                         TipValue;                                                     // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.PrecomputedSkyLightInstanceData
// Struct Size::0x0170
struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{
    FGuid                                         LightGuid;                                                    // 0x00B8(0x0010)
    float                                         AverageBrightness;                                            // 0x00C8(0x0004)
    char                                          pa_00CC[0x00A4]                                               // 0x00CC(0x00A4)
};


// ScriptStruct  Engine.SmartNameContainer
// Struct Size::0x0050
struct FSmartNameContainer
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SmartNameMapping
// Struct Size::0x0070
struct FSmartNameMapping
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.CurveMetaData
// Struct Size::0x0018
struct FCurveMetaData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.SoundAttenuationSettings
// Struct Size::0x03A0
struct FSoundAttenuationSettings : public FBaseAttenuationSettings
{
    char                                          bAttenuate;                                                   // 0x00B0(0x0001)
    char                                          bSpatialize;                                                  // 0x00B0(0x0001)
    char                                          bAttenuateWithLPF;                                            // 0x00B0(0x0001)
    char                                          bEnableListenerFocus;                                         // 0x00B0(0x0001)
    char                                          bEnableFocusInterpolation;                                    // 0x00B0(0x0001)
    char                                          bEnableOcclusion;                                             // 0x00B0(0x0001)
    char                                          bUseComplexCollisionForOcclusion;                             // 0x00B0(0x0001)
    char                                          bEnableReverbSend;                                            // 0x00B0(0x0001)
    char                                          bEnablePriorityAttenuation;                                   // 0x00B1(0x0001)
    char                                          bApplyNormalizationToStereoSounds;                            // 0x00B1(0x0001)
    char                                          bEnableLogFrequencyScaling;                                   // 0x00B1(0x0001)
    char                                          bEnableSubmixSends;                                           // 0x00B1(0x0001)
    enum class ESoundSpatializationAlgorithm      SpatializationAlgorithm;                                      // 0x00B2(0x0001)
    char                                          pa_00B3[0x0001]                                               // 0x00B3(0x0001)
    float                                         BinauralRadius;                                               // 0x00B4(0x0004)
    enum class EAirAbsorptionMethod               AbsorptionMethod;                                             // 0x00B8(0x0001)
    enum class ECollisionChannel                  OcclusionTraceChannel;                                        // 0x00B9(0x0001)
    enum class EReverbSendMethod                  ReverbSendMethod;                                             // 0x00BA(0x0001)
    enum class EPriorityAttenuationMethod         PriorityAttenuationMethod;                                    // 0x00BB(0x0001)
    float                                         OmniRadius;                                                   // 0x00BC(0x0004)
    float                                         StereoSpread;                                                 // 0x00C0(0x0004)
    float                                         LPFRadiusMin;                                                 // 0x00C4(0x0004)
    float                                         LPFRadiusMax;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FRuntimeFloatCurve                            CustomLowpassAirAbsorptionCurve;                              // 0x00D0(0x0088)
    FRuntimeFloatCurve                            CustomHighpassAirAbsorptionCurve;                             // 0x0158(0x0088)
    float                                         LPFFrequencyAtMin;                                            // 0x01E0(0x0004)
    float                                         LPFFrequencyAtMax;                                            // 0x01E4(0x0004)
    float                                         HPFFrequencyAtMin;                                            // 0x01E8(0x0004)
    float                                         HPFFrequencyAtMax;                                            // 0x01EC(0x0004)
    float                                         FocusAzimuth;                                                 // 0x01F0(0x0004)
    float                                         NonFocusAzimuth;                                              // 0x01F4(0x0004)
    float                                         FocusDistanceScale;                                           // 0x01F8(0x0004)
    float                                         NonFocusDistanceScale;                                        // 0x01FC(0x0004)
    float                                         FocusPriorityScale;                                           // 0x0200(0x0004)
    float                                         NonFocusPriorityScale;                                        // 0x0204(0x0004)
    float                                         FocusVolumeAttenuation;                                       // 0x0208(0x0004)
    float                                         NonFocusVolumeAttenuation;                                    // 0x020C(0x0004)
    float                                         FocusAttackInterpSpeed;                                       // 0x0210(0x0004)
    float                                         FocusReleaseInterpSpeed;                                      // 0x0214(0x0004)
    float                                         OcclusionLowPassFilterFrequency;                              // 0x0218(0x0004)
    float                                         OcclusionVolumeAttenuation;                                   // 0x021C(0x0004)
    float                                         OcclusionInterpolationTime;                                   // 0x0220(0x0004)
    float                                         ReverbWetLevelMin;                                            // 0x0224(0x0004)
    float                                         ReverbWetLevelMax;                                            // 0x0228(0x0004)
    float                                         ReverbDistanceMin;                                            // 0x022C(0x0004)
    float                                         ReverbDistanceMax;                                            // 0x0230(0x0004)
    float                                         ManualReverbSendLevel;                                        // 0x0234(0x0004)
    FRuntimeFloatCurve                            CustomReverbSendCurve;                                        // 0x0238(0x0088)
    TArray<FAttenuationSubmixSendSettings>        SubmixSendSettings;                                           // 0x02C0(0x0010)
    float                                         PriorityAttenuationMin;                                       // 0x02D0(0x0004)
    float                                         PriorityAttenuationMax;                                       // 0x02D4(0x0004)
    float                                         PriorityAttenuationDistanceMin;                               // 0x02D8(0x0004)
    float                                         PriorityAttenuationDistanceMax;                               // 0x02DC(0x0004)
    float                                         ManualPriorityAttenuation;                                    // 0x02E0(0x0004)
    char                                          pa_02E4[0x0004]                                               // 0x02E4(0x0004)
    FRuntimeFloatCurve                            CustomPriorityAttenuationCurve;                               // 0x02E8(0x0088)
    FSoundAttenuationPluginSettings               PluginSettings;                                               // 0x0370(0x0030)
};


// ScriptStruct  Engine.SoundAttenuationPluginSettings
// Struct Size::0x0030
struct FSoundAttenuationPluginSettings
{
    TArray<USpatializationPluginSourceSettingsBase*>SpatializationPluginSettingsArray;                          // 0x0000(0x0010)
    TArray<UOcclusionPluginSourceSettingsBase*>   OcclusionPluginSettingsArray;                                 // 0x0010(0x0010)
    TArray<UReverbPluginSourceSettingsBase*>      ReverbPluginSettingsArray;                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AttenuationSubmixSendSettings
// Struct Size::0x00A8
struct FAttenuationSubmixSendSettings
{
    USoundSubmixBase*                             Submix;                                                       // 0x0000(0x0008)
    enum class ESubmixSendMethod                  SubmixSendMethod;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SubmixSendLevelMin;                                           // 0x000C(0x0004)
    float                                         SubmixSendLevelMax;                                           // 0x0010(0x0004)
    float                                         SubmixSendDistanceMin;                                        // 0x0014(0x0004)
    float                                         SubmixSendDistanceMax;                                        // 0x0018(0x0004)
    float                                         ManualSubmixSendLevel;                                        // 0x001C(0x0004)
    FRuntimeFloatCurve                            CustomSubmixSendCurve;                                        // 0x0020(0x0088)
};


// ScriptStruct  Engine.PassiveSoundMixModifier
// Struct Size::0x0010
struct FPassiveSoundMixModifier
{
    USoundMix*                                    SoundMix;                                                     // 0x0000(0x0008)
    float                                         MinVolumeThreshold;                                           // 0x0008(0x0004)
    float                                         MaxVolumeThreshold;                                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundClassProperties
// Struct Size::0x0080
struct FSoundClassProperties
{
    float                                         Volume;                                                       // 0x0000(0x0004)
    float                                         Pitch;                                                        // 0x0004(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0008(0x0004)
    float                                         AttenuationDistanceScale;                                     // 0x000C(0x0004)
    float                                         StereoBleed;                                                  // 0x0010(0x0004)
    float                                         LFEBleed;                                                     // 0x0014(0x0004)
    float                                         VoiceCenterChannelVolume;                                     // 0x0018(0x0004)
    float                                         RadioFilterVolume;                                            // 0x001C(0x0004)
    float                                         RadioFilterVolumeThreshold;                                   // 0x0020(0x0004)
    char                                          bApplyEffects;                                                // 0x0024(0x0001)
    char                                          bAlwaysPlay;                                                  // 0x0024(0x0001)
    char                                          bIsUISound;                                                   // 0x0024(0x0001)
    char                                          bIsMusic;                                                     // 0x0024(0x0001)
    char                                          bCenterChannelOnly;                                           // 0x0024(0x0001)
    char                                          bApplyAmbientVolumes;                                         // 0x0024(0x0001)
    char                                          bReverb;                                                      // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Default2DReverbSendAmount;                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FSoundModulationDefaultSettings               ModulationSettings;                                           // 0x0030(0x0040)
    enum class EAudioOutputTarget                 OutputTarget;                                                 // 0x0070(0x0001)
    enum class ESoundWaveLoadingBehavior          LoadingBehavior;                                              // 0x0071(0x0001)
    char                                          pa_0072[0x0006]                                               // 0x0072(0x0006)
    USoundSubmix*                                 DefaultSubmix;                                                // 0x0078(0x0008)
};


// ScriptStruct  Engine.SoundModulationDefaultSettings
// Struct Size::0x0040
struct FSoundModulationDefaultSettings
{
    FSoundModulationDestinationSettings           VolumeModulationDestination;                                  // 0x0000(0x0010)
    FSoundModulationDestinationSettings           PitchModulationDestination;                                   // 0x0010(0x0010)
    FSoundModulationDestinationSettings           HighpassModulationDestination;                                // 0x0020(0x0010)
    FSoundModulationDestinationSettings           LowpassModulationDestination;                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.SoundModulationDestinationSettings
// Struct Size::0x0010
struct FSoundModulationDestinationSettings
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    USoundModulatorBase*                          Modulator;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.SoundClassEditorData
// Struct Size::0x0008
struct FSoundClassEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SoundConcurrencySettings
// Struct Size::0x0028
struct FSoundConcurrencySettings
{
    int32_t                                       MaxCount;                                                     // 0x0000(0x0004)
    char                                          bLimitToOwner;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    enum class EMaxConcurrentResolutionRule       ResolutionRule;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         RetriggerTime;                                                // 0x000C(0x0004)
    float                                         VolumeScale;                                                  // 0x0010(0x0004)
    enum class EConcurrencyVolumeScaleMode        VolumeScaleMode;                                              // 0x0014(0x0004)
    float                                         VolumeScaleAttackTime;                                        // 0x0018(0x0004)
    char                                          bVolumeScaleCanRelease;                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         VolumeScaleReleaseTime;                                       // 0x0020(0x0004)
    float                                         VoiceStealReleaseTime;                                        // 0x0024(0x0004)
};


// ScriptStruct  Engine.SoundNodeEditorData
// Struct Size::0x0008
struct FSoundNodeEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SourceEffectChainEntry
// Struct Size::0x0010
struct FSourceEffectChainEntry
{
    USoundEffectSourcePreset*                     Preset;                                                       // 0x0000(0x0008)
    char                                          bBypass;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.SoundGroup
// Struct Size::0x0020
struct FSoundGroup
{
    enum class ESoundGroup                        SoundGroup;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       DisplayName;                                                  // 0x0008(0x0010)
    char                                          bAlwaysDecompressOnLoad;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DecompressedDuration;                                         // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundClassAdjuster
// Struct Size::0x0020
struct FSoundClassAdjuster
{
    USoundClass*                                  SoundClassObject;                                             // 0x0000(0x0008)
    float                                         VolumeAdjuster;                                               // 0x0008(0x0004)
    float                                         PitchAdjuster;                                                // 0x000C(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0010(0x0004)
    char                                          bApplyToChildren;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         VoiceCenterChannelVolumeAdjuster;                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AudioEQEffect
// Struct Size::0x0040
struct FAudioEQEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    float                                         FrequencyCenter0;                                             // 0x0010(0x0004)
    float                                         Gain0;                                                        // 0x0014(0x0004)
    float                                         Bandwidth0;                                                   // 0x0018(0x0004)
    float                                         FrequencyCenter1;                                             // 0x001C(0x0004)
    float                                         Gain1;                                                        // 0x0020(0x0004)
    float                                         Bandwidth1;                                                   // 0x0024(0x0004)
    float                                         FrequencyCenter2;                                             // 0x0028(0x0004)
    float                                         Gain2;                                                        // 0x002C(0x0004)
    float                                         Bandwidth2;                                                   // 0x0030(0x0004)
    float                                         FrequencyCenter3;                                             // 0x0034(0x0004)
    float                                         Gain3;                                                        // 0x0038(0x0004)
    float                                         Bandwidth3;                                                   // 0x003C(0x0004)
};


// ScriptStruct  Engine.SoundModulationDefaultRoutingSettings
// Struct Size::0x0048
struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
{
    enum class EModulationRouting                 VolumeRouting;                                                // 0x0040(0x0001)
    enum class EModulationRouting                 PitchRouting;                                                 // 0x0041(0x0001)
    enum class EModulationRouting                 HighpassRouting;                                              // 0x0042(0x0001)
    enum class EModulationRouting                 LowpassRouting;                                               // 0x0043(0x0001)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Engine.DistanceDatum
// Struct Size::0x0014
struct FDistanceDatum
{
    float                                         FadeInDistanceStart;                                          // 0x0000(0x0004)
    float                                         FadeInDistanceEnd;                                            // 0x0004(0x0004)
    float                                         FadeOutDistanceStart;                                         // 0x0008(0x0004)
    float                                         FadeOutDistanceEnd;                                           // 0x000C(0x0004)
    float                                         Volume;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.ModulatorContinuousParams
// Struct Size::0x0020
struct FModulatorContinuousParams
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    float                                         Default;                                                      // 0x0008(0x0004)
    float                                         MinInput;                                                     // 0x000C(0x0004)
    float                                         MaxInput;                                                     // 0x0010(0x0004)
    float                                         MinOutput;                                                    // 0x0014(0x0004)
    float                                         MaxOutput;                                                    // 0x0018(0x0004)
    enum class ModulationParamMode                ParamMode;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.SoundSourceBusSendInfo
// Struct Size::0x00B8
struct FSoundSourceBusSendInfo
{
    enum class ESourceBusSendLevelControlMethod   SourceBusSendLevelControlMethod;                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USoundSourceBus*                              SoundSourceBus;                                               // 0x0008(0x0008)
    UAudioBus*                                    AudioBus;                                                     // 0x0010(0x0008)
    float                                         SendLevel;                                                    // 0x0018(0x0004)
    float                                         MinSendLevel;                                                 // 0x001C(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0020(0x0004)
    float                                         MinSendDistance;                                              // 0x0024(0x0004)
    float                                         MaxSendDistance;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0030(0x0088)
};


// ScriptStruct  Engine.SoundSubmixSpectralAnalysisBandSettings
// Struct Size::0x0010
struct FSoundSubmixSpectralAnalysisBandSettings
{
    float                                         BandFrequency;                                                // 0x0000(0x0004)
    int32_t                                       AttackTimeMsec;                                               // 0x0004(0x0004)
    int32_t                                       ReleaseTimeMsec;                                              // 0x0008(0x0004)
    float                                         QFactor;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeTimeData
// Struct Size::0x0008
struct FSoundWaveEnvelopeTimeData
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         TimeSec;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralTimeData
// Struct Size::0x0018
struct FSoundWaveSpectralTimeData
{
    TArray<FSoundWaveSpectralDataEntry>           Data;                                                         // 0x0000(0x0010)
    float                                         TimeSec;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralDataEntry
// Struct Size::0x0008
struct FSoundWaveSpectralDataEntry
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeDataPerSound
// Struct Size::0x0010
struct FSoundWaveEnvelopeDataPerSound
{
    float                                         Envelope;                                                     // 0x0000(0x0004)
    float                                         PlaybackTime;                                                 // 0x0004(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralDataPerSound
// Struct Size::0x0020
struct FSoundWaveSpectralDataPerSound
{
    TArray<FSoundWaveSpectralData>                SpectralData;                                                 // 0x0000(0x0010)
    float                                         PlaybackTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralData
// Struct Size::0x000C
struct FSoundWaveSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0008(0x0004)
};


// ScriptStruct  Engine.StreamedAudioPlatformData
// Struct Size::0x0020
struct FStreamedAudioPlatformData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SplineInstanceData
// Struct Size::0x01A0
struct FSplineInstanceData : public FSceneComponentInstanceData
{
    bool                                          bSplineHasBeenEdited;                                         // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FSplineCurves                                 SplineCurves;                                                 // 0x00C0(0x0070)
    FSplineCurves                                 SplineCurvesPreUCS;                                           // 0x0130(0x0070)
};


// ScriptStruct  Engine.SplineCurves
// Struct Size::0x0070
struct FSplineCurves
{
    FInterpCurveVector                            position;                                                     // 0x0000(0x0018)
    FInterpCurveQuat                              Rotation;                                                     // 0x0018(0x0018)
    FInterpCurveVector                            Scale;                                                        // 0x0030(0x0018)
    FInterpCurveFloat                             ReparamTable;                                                 // 0x0048(0x0018)
    USplineMetadata*                              MetaData;                                                     // 0x0060(0x0008)
    uint32_t                                      Version;                                                      // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.SplinePoint
// Struct Size::0x0044
struct FSplinePoint
{
    float                                         InputKey;                                                     // 0x0000(0x0004)
    FVector                                       position;                                                     // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    FVector                                       Scale;                                                        // 0x0034(0x000C)
    enum class ESplinePointType                   Type;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  Engine.SplineMeshInstanceData
// Struct Size::0x00E8
struct FSplineMeshInstanceData : public FSceneComponentInstanceData
{
    FVector                                       StartPos;                                                     // 0x00B8(0x000C)
    FVector                                       EndPos;                                                       // 0x00C4(0x000C)
    FVector                                       StartTangent;                                                 // 0x00D0(0x000C)
    FVector                                       EndTangent;                                                   // 0x00DC(0x000C)
};


// ScriptStruct  Engine.SplineMeshParams
// Struct Size::0x0058
struct FSplineMeshParams
{
    FVector                                       StartPos;                                                     // 0x0000(0x000C)
    FVector                                       StartTangent;                                                 // 0x000C(0x000C)
    FVector2D                                     StartScale;                                                   // 0x0018(0x0008)
    float                                         StartRoll;                                                    // 0x0020(0x0004)
    FVector2D                                     StartOffset;                                                  // 0x0024(0x0008)
    FVector                                       EndPos;                                                       // 0x002C(0x000C)
    FVector2D                                     EndScale;                                                     // 0x0038(0x0008)
    FVector                                       EndTangent;                                                   // 0x0040(0x000C)
    float                                         EndRoll;                                                      // 0x004C(0x0004)
    FVector2D                                     EndOffset;                                                    // 0x0050(0x0008)
};


// ScriptStruct  Engine.MaterialRemapIndex
// Struct Size::0x0018
struct FMaterialRemapIndex
{
    uint32_t                                      ImportVersionKey;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MaterialRemap;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.StaticMaterial
// Struct Size::0x0030
struct FStaticMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FName                                         ImportedMaterialSlotName;                                     // 0x0010(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.AssetEditorOrbitCameraPosition
// Struct Size::0x0028
struct FAssetEditorOrbitCameraPosition
{
    bool                                          bIsSet;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       CamOrbitPoint;                                                // 0x0004(0x000C)
    FVector                                       CamOrbitZoom;                                                 // 0x0010(0x000C)
    FRotator                                      CamOrbitRotation;                                             // 0x001C(0x000C)
};


// ScriptStruct  Engine.MeshSectionInfoMap
// Struct Size::0x0050
struct FMeshSectionInfoMap
{
    TMap<uint32_t,FMeshSectionInfo>               Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  Engine.MeshSectionInfo
// Struct Size::0x0008
struct FMeshSectionInfo
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    bool                                          bEnableCollision;                                             // 0x0004(0x0001)
    bool                                          bCastShadow;                                                  // 0x0005(0x0001)
    bool                                          bVisibleInRayTracing;                                         // 0x0006(0x0001)
    bool                                          bForceOpaque;                                                 // 0x0007(0x0001)
};


// ScriptStruct  Engine.StaticMeshSourceModel
// Struct Size::0x0088
struct FStaticMeshSourceModel
{
    FMeshBuildSettings                            BuildSettings;                                                // 0x0000(0x0048)
    FMeshReductionSettings                        ReductionSettings;                                            // 0x0048(0x0028)
    float                                         LODDistance;                                                  // 0x0070(0x0004)
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0074(0x0004)
    FString                                       SourceImportFilename;                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StaticMeshOptimizationSettings
// Struct Size::0x001C
struct FStaticMeshOptimizationSettings
{
    enum class EOptimizationType                  ReductionMethod;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0008(0x0004)
    float                                         WeldingThreshold;                                             // 0x000C(0x0004)
    bool                                          bRecalcNormals;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         NormalsThreshold;                                             // 0x0014(0x0004)
    char                                          SilhouetteImportance;                                         // 0x0018(0x0001)
    char                                          TextureImportance;                                            // 0x0019(0x0001)
    char                                          ShadingImportance;                                            // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.MFGpuDrivenMeshSettings
// Struct Size::0x0001
struct FMFGpuDrivenMeshSettings
{
    enum class EMFGpuDrivenMeshType               Type;                                                         // 0x0000(0x0001)
};


// ScriptStruct  Engine.StaticMeshComponentInstanceData
// Struct Size::0x0140
struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x0100(0x0008)
    TArray<FStaticMeshVertexColorLODData>         VertexColorLODs;                                              // 0x0108(0x0010)
    TArray<FGuid>                                 CachedStaticLighting;                                         // 0x0118(0x0010)
    TArray<FStreamingTextureBuildInfo>            StreamingTextureData;                                         // 0x0128(0x0010)
    char                                          pa_0138[0x0008]                                               // 0x0138(0x0008)
};


// ScriptStruct  Engine.StreamingTextureBuildInfo
// Struct Size::0x000C
struct FStreamingTextureBuildInfo
{
    uint32_t                                      PackedRelativeBox;                                            // 0x0000(0x0004)
    int32_t                                       TextureLevelIndex;                                            // 0x0004(0x0004)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.StaticMeshVertexColorLODData
// Struct Size::0x0028
struct FStaticMeshVertexColorLODData
{
    TArray<FPaintedVertex>                        PaintedVertices;                                              // 0x0000(0x0010)
    TArray<FColor>                                VertexBufferColors;                                           // 0x0010(0x0010)
    uint32_t                                      LODIndex;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.PaintedVertex
// Struct Size::0x0020
struct FPaintedVertex
{
    FVector                                       position;                                                     // 0x0000(0x000C)
    FColor                                        Color;                                                        // 0x000C(0x0004)
    FVector4                                      Normal;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.StaticMeshComponentLODInfo
// Struct Size::0x0090
struct FStaticMeshComponentLODInfo
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Engine.StaticParameterSet
// Struct Size::0x0040
struct FStaticParameterSet
{
    TArray<FStaticSwitchParameter>                StaticSwitchParameters;                                       // 0x0000(0x0010)
    TArray<FStaticComponentMaskParameter>         StaticComponentMaskParameters;                                // 0x0010(0x0010)
    TArray<FStaticTerrainLayerWeightParameter>    TerrainLayerWeightParameters;                                 // 0x0020(0x0010)
    TArray<FStaticMaterialLayersParameter>        MaterialLayersParameters;                                     // 0x0030(0x0010)
};


// ScriptStruct  Engine.StaticParameterBase
// Struct Size::0x0024
struct FStaticParameterBase
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    bool                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.StaticMaterialLayersParameter
// Struct Size::0x0068
struct FStaticMaterialLayersParameter : public FStaticParameterBase
{
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMaterialLayersFunctions                      Value;                                                        // 0x0028(0x0040)
};


// ScriptStruct  Engine.StaticTerrainLayerWeightParameter
// Struct Size::0x002C
struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
{
    int32_t                                       WeightmapIndex;                                               // 0x0024(0x0004)
    bool                                          bWeightBasedBlend;                                            // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  Engine.StaticComponentMaskParameter
// Struct Size::0x0028
struct FStaticComponentMaskParameter : public FStaticParameterBase
{
    bool                                          R;                                                            // 0x0024(0x0001)
    bool                                          G;                                                            // 0x0025(0x0001)
    bool                                          B;                                                            // 0x0026(0x0001)
    bool                                          A;                                                            // 0x0027(0x0001)
};


// ScriptStruct  Engine.StaticSwitchParameter
// Struct Size::0x0028
struct FStaticSwitchParameter : public FStaticParameterBase
{
    bool                                          Value;                                                        // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.EquirectProps
// Struct Size::0x0048
struct FEquirectProps
{
    FBox2D                                        LeftUVRect;                                                   // 0x0000(0x0014)
    FBox2D                                        RightUVRect;                                                  // 0x0014(0x0014)
    FVector2D                                     LeftScale;                                                    // 0x0028(0x0008)
    FVector2D                                     RightScale;                                                   // 0x0030(0x0008)
    FVector2D                                     LeftBias;                                                     // 0x0038(0x0008)
    FVector2D                                     RightBias;                                                    // 0x0040(0x0008)
};


// ScriptStruct  Engine.SubsurfaceProfileStruct
// Struct Size::0x008C
struct FSubsurfaceProfileStruct
{
    FLinearColor                                  SurfaceAlbedo;                                                // 0x0000(0x0010)
    FLinearColor                                  MeanFreePathColor;                                            // 0x0010(0x0010)
    float                                         MeanFreePathDistance;                                         // 0x0020(0x0004)
    float                                         WorldUnitScale;                                               // 0x0024(0x0004)
    bool                                          bEnableBurley;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ScatterRadius;                                                // 0x002C(0x0004)
    FLinearColor                                  SubsurfaceColor;                                              // 0x0030(0x0010)
    FLinearColor                                  FalloffColor;                                                 // 0x0040(0x0010)
    FLinearColor                                  BoundaryColorBleed;                                           // 0x0050(0x0010)
    float                                         ExtinctionScale;                                              // 0x0060(0x0004)
    float                                         NormalScale;                                                  // 0x0064(0x0004)
    float                                         ScatteringDistribution;                                       // 0x0068(0x0004)
    float                                         IOR;                                                          // 0x006C(0x0004)
    float                                         Roughness0;                                                   // 0x0070(0x0004)
    float                                         Roughness1;                                                   // 0x0074(0x0004)
    float                                         LobeMix;                                                      // 0x0078(0x0004)
    FLinearColor                                  TransmissionTintColor;                                        // 0x007C(0x0010)
};


// ScriptStruct  Engine.TextureFormatSettings
// Struct Size::0x0002
struct FTextureFormatSettings
{
    enum class TextureCompressionSettings         CompressionSettings;                                          // 0x0000(0x0001)
    char                                          CompressionNoAlpha;                                           // 0x0001(0x0001)
    char                                          CompressionNone;                                              // 0x0001(0x0001)
    char                                          CompressionYCoCg;                                             // 0x0001(0x0001)
    char                                          SRGB;                                                         // 0x0001(0x0001)
};


// ScriptStruct  Engine.TexturePlatformData
// Struct Size::0x0030
struct FTexturePlatformData
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.TextureSource
// Struct Size::0x0038
struct FTextureSource
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  Engine.TextureSourceBlock
// Struct Size::0x0018
struct FTextureSourceBlock
{
    int32_t                                       BlockX;                                                       // 0x0000(0x0004)
    int32_t                                       BlockY;                                                       // 0x0004(0x0004)
    int32_t                                       SizeX;                                                        // 0x0008(0x0004)
    int32_t                                       SizeY;                                                        // 0x000C(0x0004)
    int32_t                                       NumSlices;                                                    // 0x0010(0x0004)
    int32_t                                       NumMips;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Engine.TextureLODGroup
// Struct Size::0x0088
struct FTextureLODGroup
{
    enum class TextureGroup                       Group;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x000B]                                               // 0x0001(0x000B)
    int32_t                                       ASTCSizeExpected;                                             // 0x000C(0x0004)
    int32_t                                       LODBias;                                                      // 0x0010(0x0004)
    int32_t                                       LODBias;                                                      // 0x0014(0x0004)
    int32_t                                       LODBias;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    int32_t                                       NumStreamedMips;                                              // 0x0020(0x0004)
    enum class TextureMipGenSettings              MipGenSettings;                                               // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    int32_t                                       MinLODSize;                                                   // 0x0028(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x002C(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0030(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0034(0x0004)
    int32_t                                       OptionalLODBias;                                              // 0x0038(0x0004)
    int32_t                                       OptionalMaxLODSize;                                           // 0x003C(0x0004)
    char                                          pa_0040[0x0004]                                               // 0x0040(0x0004)
    int32_t                                       NoStreamMipCount;                                             // 0x0044(0x0004)
    FName                                         MinMagFilter;                                                 // 0x0048(0x0008)
    FName                                         MipFilter;                                                    // 0x0050(0x0008)
    enum class ETextureMipLoadOptions             MipLoadOptions;                                               // 0x0058(0x0001)
    bool                                          DuplicateNonOptionalMips;                                     // 0x0059(0x0001)
    char                                          pa_005A[0x0006]                                               // 0x005A(0x0006)
    TArray<FTextureLODGroupUseScene>              ArrayLODBiasValues;                                           // 0x0060(0x0010)
    float                                         ExtraBoost;                                                   // 0x0070(0x0004)
    float                                         Downscale;                                                    // 0x0074(0x0004)
    enum class ETextureDownscaleOptions           DownscaleOptions;                                             // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    int32_t                                       VirtualTextureTileCountBias;                                  // 0x007C(0x0004)
    int32_t                                       VirtualTextureTileSizeBias;                                   // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Engine.TextureLODGroupUseScene
// Struct Size::0x0010
struct FTextureLODGroupUseScene
{
    TArray<char>                                  ArrayBiasValue;                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.StreamingRenderAssetPrimitiveInfo
// Struct Size::0x0030
struct FStreamingRenderAssetPrimitiveInfo
{
    UStreamableRenderAsset*                       RenderAsset;                                                  // 0x0000(0x0008)
    FBoxSphereBounds                              Bounds;                                                       // 0x0008(0x001C)
    float                                         TexelFactor;                                                  // 0x0024(0x0004)
    uint32_t                                      PackedRelativeBox;                                            // 0x0028(0x0004)
    char                                          bAllowInvalidTexelFactorWhenUnregistered;                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Engine.Timeline
// Struct Size::0x0098
struct FTimeline
{
    enum class ETimelineLengthMode                LengthMode;                                                   // 0x0000(0x0001)
    char                                          bLooping;                                                     // 0x0001(0x0001)
    char                                          bReversePlayback;                                             // 0x0001(0x0001)
    char                                          bPlaying;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Length;                                                       // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         position;                                                     // 0x000C(0x0004)
    TArray<FTimelineEventEntry>                   Events;                                                       // 0x0010(0x0010)
    TArray<FTimelineVectorTrack>                  InterpVectors;                                                // 0x0020(0x0010)
    TArray<FTimelineFloatTrack>                   InterpFloats;                                                 // 0x0030(0x0010)
    TArray<FTimelineLinearColorTrack>             InterpLinearColors;                                           // 0x0040(0x0010)
    FDelegate                                     TimelinePostUpdateFunc;                                       // 0x0050(0x0010)
    FDelegate                                     TimelineFinishedFunc;                                         // 0x0060(0x0010)
    TWeakObjectPtr<UObject>                       PropertySetObject;                                            // 0x0070(0x0008)
    FName                                         DirectionPropertyName;                                        // 0x0078(0x0008)
    char                                          pa_0080[0x0018]                                               // 0x0080(0x0018)
};


// ScriptStruct  Engine.TimelineLinearColorTrack
// Struct Size::0x0040
struct FTimelineLinearColorTrack
{
    UCurveLinearColor*                            LinearColorCurve;                                             // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         LinearColorPropertyName;                                      // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineFloatTrack
// Struct Size::0x0040
struct FTimelineFloatTrack
{
    UCurveFloat*                                  FloatCurve;                                                   // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         FloatPropertyName;                                            // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineVectorTrack
// Struct Size::0x0040
struct FTimelineVectorTrack
{
    UCurveVector*                                 VectorCurve;                                                  // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         VectorPropertyName;                                           // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineEventEntry
// Struct Size::0x0014
struct FTimelineEventEntry
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FDelegate                                     EventFunc;                                                    // 0x0004(0x0010)
};


// ScriptStruct  Engine.TTTrackBase
// Struct Size::0x0018
struct FTTTrackBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         TrackName;                                                    // 0x0008(0x0008)
    bool                                          bIsExternalCurve;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.TTPropertyTrack
// Struct Size::0x0020
struct FTTPropertyTrack : public FTTTrackBase
{
    FName                                         PropertyName;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Engine.TTLinearColorTrack
// Struct Size::0x0028
struct FTTLinearColorTrack : public FTTPropertyTrack
{
    UCurveLinearColor*                            CurveLinearColor;                                             // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTVectorTrack
// Struct Size::0x0028
struct FTTVectorTrack : public FTTPropertyTrack
{
    UCurveVector*                                 CurveVector;                                                  // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTFloatTrack
// Struct Size::0x0028
struct FTTFloatTrack : public FTTPropertyTrack
{
    UCurveFloat*                                  CurveFloat;                                                   // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTEventTrack
// Struct Size::0x0028
struct FTTEventTrack : public FTTTrackBase
{
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    UCurveFloat*                                  CurveKeys;                                                    // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTTrackId
// Struct Size::0x0008
struct FTTTrackId
{
    int32_t                                       TrackType;                                                    // 0x0000(0x0004)
    int32_t                                       TrackIndex;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Engine.TimeStretchCurveInstance
// Struct Size::0x0030
struct FTimeStretchCurveInstance
{
    bool                                          bHasValidData;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x002F]                                               // 0x0001(0x002F)
};


// ScriptStruct  Engine.TimeStretchCurve
// Struct Size::0x0028
struct FTimeStretchCurve
{
    float                                         SamplingRate;                                                 // 0x0000(0x0004)
    float                                         CurveValueMinPrecision;                                       // 0x0004(0x0004)
    TArray<FTimeStretchCurveMarker>               Markers;                                                      // 0x0008(0x0010)
    float                                         Sum;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Engine.TimeStretchCurveMarker
// Struct Size::0x0010
struct FTimeStretchCurveMarker
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Alpha;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.TouchInputControl
// Struct Size::0x0068
struct FTouchInputControl
{
    UTexture2D*                                   Image1;                                                       // 0x0000(0x0008)
    UTexture2D*                                   Image2;                                                       // 0x0008(0x0008)
    FVector2D                                     Center;                                                       // 0x0010(0x0008)
    FVector2D                                     VisualSize;                                                   // 0x0018(0x0008)
    FVector2D                                     ThumbSize;                                                    // 0x0020(0x0008)
    FVector2D                                     InteractionSize;                                              // 0x0028(0x0008)
    FVector2D                                     InputScale;                                                   // 0x0030(0x0008)
    FKey                                          MainInputKey;                                                 // 0x0038(0x0018)
    FKey                                          AltInputKey;                                                  // 0x0050(0x0018)
};


// ScriptStruct  Engine.HardwareCursorReference
// Struct Size::0x0010
struct FHardwareCursorReference
{
    FName                                         CursorPath;                                                   // 0x0000(0x0008)
    FVector2D                                     HotSpot;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.VirtualTextureBuildSettings
// Struct Size::0x000C
struct FVirtualTextureBuildSettings
{
    int32_t                                       TileSize;                                                     // 0x0000(0x0004)
    int32_t                                       TileBorderSize;                                               // 0x0004(0x0004)
    bool                                          bEnableCompressCrunch;                                        // 0x0008(0x0001)
    bool                                          bEnableCompressZlib;                                          // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.VirtualTextureSpacePoolConfig
// Struct Size::0x0038
struct FVirtualTextureSpacePoolConfig
{
    int32_t                                       MinTileSize;                                                  // 0x0000(0x0004)
    int32_t                                       MaxTileSize;                                                  // 0x0004(0x0004)
    TArray<enum class EPixelFormat>               Formats;                                                      // 0x0008(0x0010)
    int32_t                                       SizeInMegabyte;                                               // 0x0018(0x0004)
    bool                                          bAllowSizeScale;                                              // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    uint32_t                                      ScalabilityGroup;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 SizeScales;                                                   // 0x0028(0x0010)
};


// ScriptStruct  Engine.VoiceSettings
// Struct Size::0x0018
struct FVoiceSettings
{
    USceneComponent*                              ComponentToAttachTo;                                          // 0x0000(0x0008)
    USoundAttenuation*                            AttenuationSettings;                                          // 0x0008(0x0008)
    USoundEffectSourcePresetChain*                SourceEffectChain;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.StreamingLevelsToConsider
// Struct Size::0x0028
struct FStreamingLevelsToConsider
{
    TArray<ULevelStreaming*>                      StreamingLevels;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.LevelCollection
// Struct Size::0x0078
struct FLevelCollection
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AGameStateBase*                               GameState;                                                    // 0x0008(0x0008)
    UNetDriver*                                   NetDriver;                                                    // 0x0010(0x0008)
    UDemoNetDriver*                               DemoNetDriver;                                                // 0x0018(0x0008)
    ULevel*                                       PersistentLevel;                                              // 0x0020(0x0008)
    TSet<ULevel*>                                 Levels;                                                       // 0x0028(0x0050)
};


// ScriptStruct  Engine.EndPhysicsTickFunction
// Struct Size::0x0040
struct FEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.StartPhysicsTickFunction
// Struct Size::0x0040
struct FStartPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.LevelViewportInfo
// Struct Size::0x0020
struct FLevelViewportInfo
{
    FVector                                       CamPosition;                                                  // 0x0000(0x000C)
    FRotator                                      CamRotation;                                                  // 0x000C(0x000C)
    float                                         CamOrthoZoom;                                                 // 0x0018(0x0004)
    bool                                          CamUpdated;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.SMCCollisionInfoStruct
// Struct Size::0x0040
struct FSMCCollisionInfoStruct
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    TArray<UMaterialInterface*>                   SavedMaterials;                                               // 0x0030(0x0010)
};


// ScriptStruct  Engine.WorldPSCPool
// Struct Size::0x0058
struct FWorldPSCPool
{
    TMap<UParticleSystem*,FPSCPool>               WorldParticleSystemPools;                                     // 0x0000(0x0050)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.PSCPool
// Struct Size::0x0038
struct FPSCPool
{
    TArray<FPSCPoolElem>                          FreeElements;                                                 // 0x0000(0x0010)
    TArray<UParticleSystemComponent*>             InUseComponents;                                              // 0x0010(0x0010)
    TArray<UParticleSystemComponent*>             InUseComponents;                                              // 0x0020(0x0010)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Engine.PSCPoolElem
// Struct Size::0x0010
struct FPSCPoolElem
{
    UParticleSystemComponent*                     PSC;                                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BroadphaseSettings
// Struct Size::0x0040
struct FBroadphaseSettings
{
    bool                                          bUseMBPOnClient;                                              // 0x0000(0x0001)
    bool                                          bUseMBPOnServer;                                              // 0x0001(0x0001)
    bool                                          bUseMBPOuterBounds;                                           // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FBox                                          MBPBounds;                                                    // 0x0004(0x001C)
    FBox                                          MBPOuterBounds;                                               // 0x0020(0x001C)
    uint32_t                                      MBPNumSubdivs;                                                // 0x003C(0x0004)
};


// ScriptStruct  Engine.HierarchicalSimplification
// Struct Size::0x0178
struct FHierarchicalSimplification
{
    float                                         TransitionScreenSize;                                         // 0x0000(0x0004)
    float                                         OverrideDrawDistance;                                         // 0x0004(0x0004)
    char                                          bUseOverrideDrawDistance;                                     // 0x0008(0x0001)
    char                                          bAllowSpecificExclusion;                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MinExtentSizeSquared;                                         // 0x000C(0x0004)
    char                                          bSimplifyMesh;                                                // 0x0010(0x0001)
    char                                          bOnlyGenerateClustersForVolumes;                              // 0x0010(0x0001)
    char                                          bReusePreviousLevelClusters;                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FMeshProxySettings                            ProxySetting;                                                 // 0x0014(0x00B0)
    FMeshMergingSettings                          MergeSetting;                                                 // 0x00C4(0x00A8)
    float                                         DesiredBoundRadius;                                           // 0x016C(0x0004)
    float                                         DesiredFillingPercentage;                                     // 0x0170(0x0004)
    int32_t                                       MinNumberOfActorsToBuild;                                     // 0x0174(0x0004)
};


// ScriptStruct  Engine.NetViewer
// Struct Size::0x0030
struct FNetViewer
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       InViewer;                                                     // 0x0008(0x0008)
    AActor*                                       ViewTarget;                                                   // 0x0010(0x0008)
    FVector                                       ViewLocation;                                                 // 0x0018(0x000C)
    FVector                                       ViewDir;                                                      // 0x0024(0x000C)
};


// ScriptStruct  Engine.LightmassWorldInfoSettings
// Struct Size::0x0058
struct FLightmassWorldInfoSettings
{
    float                                         StaticLightingLevelScale;                                     // 0x0000(0x0004)
    int32_t                                       NumIndirectLightingBounces;                                   // 0x0004(0x0004)
    int32_t                                       NumSkyLightingBounces;                                        // 0x0008(0x0004)
    float                                         IndirectLightingQuality;                                      // 0x000C(0x0004)
    float                                         IndirectLightingSmoothness;                                   // 0x0010(0x0004)
    FColor                                        EnvironmentColor;                                             // 0x0014(0x0004)
    float                                         EnvironmentIntensity;                                         // 0x0018(0x0004)
    float                                         EmissiveBoost;                                                // 0x001C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0020(0x0004)
    enum class EVolumeLightingMethod              VolumeLightingMethod;                                         // 0x0024(0x0001)
    char                                          bUseAmbientOcclusion;                                         // 0x0025(0x0001)
    char                                          bGenerateAmbientOcclusionMaterialMask;                        // 0x0025(0x0001)
    char                                          bVisualizeMaterialDiffuse;                                    // 0x0025(0x0001)
    char                                          bVisualizeAmbientOcclusion;                                   // 0x0025(0x0001)
    char                                          bCompressLightmaps;                                           // 0x0025(0x0001)
    char                                          bPackSkyVisibilityIntoLQLightmap;                             // 0x0025(0x0001)
    char                                          bNoLightmapForLandscape;                                      // 0x0025(0x0001)
    char                                          bNoShadowmap;                                                 // 0x0025(0x0001)
    char                                          bForceLODsShareStaticLighting;                                // 0x0026(0x0001)
    char                                          bBuildStaticShadowMaskForLightmap;                            // 0x0026(0x0001)
    char                                          pa_0027[0x0001]                                               // 0x0027(0x0001)
    float                                         VolumetricLightmapDetailCellSize;                             // 0x0028(0x0004)
    float                                         VolumetricLightmapMaximumBrickMemoryMb;                       // 0x002C(0x0004)
    float                                         VolumetricLightmapSphericalHarmonicSmoothing;                 // 0x0030(0x0004)
    char                                          bVolumetricLightmapFilterForBorder;                           // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         VolumeLightSamplePlacementScale;                              // 0x0038(0x0004)
    float                                         VolumeLightSampleSmoothing;                                   // 0x003C(0x0004)
    char                                          bDiscardExteriorVolumeLightSamples;                           // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         DirectIlluminationOcclusionFraction;                          // 0x0044(0x0004)
    float                                         IndirectIlluminationOcclusionFraction;                        // 0x0048(0x0004)
    float                                         OcclusionExponent;                                            // 0x004C(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0050(0x0004)
    float                                         MaxOcclusionDistance;                                         // 0x0054(0x0004)
};


// ScriptStruct  Serialization.StructSerializerTestStruct
// Struct Size::0x0450
struct FStructSerializerTestStruct
{
    FStructSerializerNumericTestStruct            Numerics;                                                     // 0x0000(0x0030)
    FStructSerializerBooleanTestStruct            Booleans;                                                     // 0x0030(0x0003)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    FStructSerializerObjectTestStruct             Objects;                                                      // 0x0038(0x00A0)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FStructSerializerBuiltinTestStruct            Builtins;                                                     // 0x00E0(0x0090)
    FStructSerializerArrayTestStruct              Arrays;                                                       // 0x0170(0x0060)
    FStructSerializerMapTestStruct                Maps;                                                         // 0x01D0(0x0140)
    FStructSerializerSetTestStruct                Sets;                                                         // 0x0310(0x0140)
};


// ScriptStruct  Serialization.StructSerializerSetTestStruct
// Struct Size::0x0140
struct FStructSerializerSetTestStruct
{
    TSet<FString>                                 StrSet;                                                       // 0x0000(0x0050)
    TSet<int32_t>                                 IntSet;                                                       // 0x0050(0x0050)
    TSet<FName>                                   NameSet;                                                      // 0x00A0(0x0050)
    TSet<FStructSerializerBuiltinTestStruct>      StructSet;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerBuiltinTestStruct
// Struct Size::0x0090
struct FStructSerializerBuiltinTestStruct
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    FString                                       String;                                                       // 0x0018(0x0010)
    FText                                         Text;                                                         // 0x0028(0x0018)
    FVector                                       Vector;                                                       // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FVector4                                      Vector4;                                                      // 0x0050(0x0010)
    FRotator                                      Rotator;                                                      // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FQuat                                         Quat;                                                         // 0x0070(0x0010)
    FColor                                        Color;                                                        // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  Serialization.StructSerializerMapTestStruct
// Struct Size::0x0140
struct FStructSerializerMapTestStruct
{
    TMap<int32_t,FString>                         IntToStr;                                                     // 0x0000(0x0050)
    TMap<FString,FString>                         StrToStr;                                                     // 0x0050(0x0050)
    TMap<FString,FVector>                         StrToVec;                                                     // 0x00A0(0x0050)
    TMap<FString,FStructSerializerBuiltinTestStruct>StrToStruct;                                                // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerArrayTestStruct
// Struct Size::0x0060
struct FStructSerializerArrayTestStruct
{
    TArray<int32_t>                               Int32Array;                                                   // 0x0000(0x0010)
    TArray<char>                                  ByteArray;                                                    // 0x0010(0x0010)
    int32_t                                       StaticSingleElement;                                          // 0x0020(0x0004)
    int32_t                                       StaticInt32Array;                                             // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    float                                         StaticFloatArray;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    TArray<FVector>                               VectorArray;                                                  // 0x0040(0x0010)
    TArray<FStructSerializerBuiltinTestStruct>    StructArray;                                                  // 0x0050(0x0010)
};


// ScriptStruct  Serialization.StructSerializerObjectTestStruct
// Struct Size::0x00A0
struct FStructSerializerObjectTestStruct
{
    UObject*                                      Class;                                                        // 0x0000(0x0008)
    UMetaData*                                    SubClass;                                                     // 0x0008(0x0008)
    TSoftClassPtr<UObject>                        SoftClass;                                                    // 0x0010(0x0028)
    UObject*                                      Object;                                                       // 0x0038(0x0008)
    TWeakObjectPtr<UMetaData>                     WeakObject;                                                   // 0x0040(0x0008)
    TSoftObjectPtr<UMetaData>                     SoftObject;                                                   // 0x0048(0x0028)
    FSoftClassPath                                ClassPath;                                                    // 0x0070(0x0018)
    FSoftObjectPath                               ObjectPath;                                                   // 0x0088(0x0018)
};


// ScriptStruct  Serialization.StructSerializerBooleanTestStruct
// Struct Size::0x0003
struct FStructSerializerBooleanTestStruct
{
    bool                                          BoolFalse;                                                    // 0x0000(0x0001)
    bool                                          BoolTrue;                                                     // 0x0001(0x0001)
    char                                          Bitfield0;                                                    // 0x0002(0x0001)
    char                                          Bitfield1;                                                    // 0x0002(0x0001)
    char                                          Bitfield2Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield3;                                                    // 0x0002(0x0001)
    char                                          Bitfield4Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield5Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield6;                                                    // 0x0002(0x0001)
    char                                          Bitfield7Set;                                                 // 0x0002(0x0001)
};


// ScriptStruct  Serialization.StructSerializerNumericTestStruct
// Struct Size::0x0030
struct FStructSerializerNumericTestStruct
{
    int8_t                                        int8;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    int16_t                                       int16;                                                        // 0x0002(0x0002)
    int32_t                                       int32;                                                        // 0x0004(0x0004)
    int64_t                                       int64;                                                        // 0x0008(0x0008)
    char                                          uint8;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0001]                                               // 0x0011(0x0001)
    uint16_t                                      uint16;                                                       // 0x0012(0x0002)
    uint32_t                                      uint32;                                                       // 0x0014(0x0004)
    uint64_t                                      uint64;                                                       // 0x0018(0x0008)
    float                                         float;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    double                                        Double;                                                       // 0x0028(0x0008)
};


// ScriptStruct  Serialization.StructSerializerByteArray
// Struct Size::0x0038
struct FStructSerializerByteArray
{
    int32_t                                       Dummy1;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  ByteArray;                                                    // 0x0008(0x0010)
    int32_t                                       Dummy2;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int8_t>                                Int8Array;                                                    // 0x0020(0x0010)
    int32_t                                       Dummy3;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Overlay.OverlayItem
// Struct Size::0x0028
struct FOverlayItem
{
    FTimespan                                     StartTime;                                                    // 0x0000(0x0008)
    FTimespan                                     EndTime;                                                      // 0x0008(0x0008)
    FString                                       Text;                                                         // 0x0010(0x0010)
    FVector2D                                     position;                                                     // 0x0020(0x0008)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConfig
// Struct Size::0x00D4
struct FClothConfig
{
    enum class EClothingWindMethod                WindMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FClothConstraintSetup                         VerticalConstraintConfig;                                     // 0x0004(0x0010)
    FClothConstraintSetup                         HorizontalConstraintConfig;                                   // 0x0014(0x0010)
    FClothConstraintSetup                         BendConstraintConfig;                                         // 0x0024(0x0010)
    FClothConstraintSetup                         ShearConstraintConfig;                                        // 0x0034(0x0010)
    float                                         SelfCollisionRadius;                                          // 0x0044(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x0048(0x0004)
    float                                         SelfCollisionCullScale;                                       // 0x004C(0x0004)
    FVector                                       Damping;                                                      // 0x0050(0x000C)
    float                                         Friction;                                                     // 0x005C(0x0004)
    float                                         WindDragCoefficient;                                          // 0x0060(0x0004)
    float                                         WindLiftCoefficient;                                          // 0x0064(0x0004)
    FVector                                       LinearDrag;                                                   // 0x0068(0x000C)
    FVector                                       AngularDrag;                                                  // 0x0074(0x000C)
    FVector                                       LinearInertiaScale;                                           // 0x0080(0x000C)
    FVector                                       AngularInertiaScale;                                          // 0x008C(0x000C)
    FVector                                       CentrifugalInertiaScale;                                      // 0x0098(0x000C)
    float                                         SolverFrequency;                                              // 0x00A4(0x0004)
    float                                         StiffnessFrequency;                                           // 0x00A8(0x0004)
    float                                         GravityScale;                                                 // 0x00AC(0x0004)
    FVector                                       GravityOverride;                                              // 0x00B0(0x000C)
    bool                                          bUseGravityOverride;                                          // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         TetherStiffness;                                              // 0x00C0(0x0004)
    float                                         TetherLimit;                                                  // 0x00C4(0x0004)
    float                                         CollisionThickness;                                           // 0x00C8(0x0004)
    float                                         AnimDriveSpringStiffness;                                     // 0x00CC(0x0004)
    float                                         AnimDriveDamperStiffness;                                     // 0x00D0(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConstraintSetup
// Struct Size::0x0010
struct FClothConstraintSetup
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothLODDataCommon
// Struct Size::0x0160
struct FClothLODDataCommon
{
    FClothPhysicalMeshData                        PhysicalMeshData;                                             // 0x0000(0x00F8)
    FClothCollisionData                           CollisionData;                                                // 0x00F8(0x0040)
    bool                                          bUseMultipleInfluences;                                       // 0x0138(0x0001)
    char                                          pa_0139[0x0003]                                               // 0x0139(0x0003)
    float                                         SkinningKernelRadius;                                         // 0x013C(0x0004)
    char                                          pa_0140[0x0020]                                               // 0x0140(0x0020)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothPhysicalMeshData
// Struct Size::0x00F8
struct FClothPhysicalMeshData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FVector>                               Normals;                                                      // 0x0010(0x0010)
    TArray<uint32_t>                              Indices;                                                      // 0x0020(0x0010)
    TMap<uint32_t,FPointWeightMap>                WeightMaps;                                                   // 0x0030(0x0050)
    TArray<float>                                 InverseMasses;                                                // 0x0080(0x0010)
    TArray<FClothVertBoneData>                    BoneData;                                                     // 0x0090(0x0010)
    int32_t                                       MaxBoneWeights;                                               // 0x00A0(0x0004)
    int32_t                                       NumFixedVerts;                                                // 0x00A4(0x0004)
    TArray<uint32_t>                              SelfCollisionIndices;                                         // 0x00A8(0x0010)
    TArray<float>                                 MaxDistances;                                                 // 0x00B8(0x0010)
    TArray<float>                                 BackstopDistances;                                            // 0x00C8(0x0010)
    TArray<float>                                 BackstopRadiuses;                                             // 0x00D8(0x0010)
    TArray<float>                                 AnimDriveMultipliers;                                         // 0x00E8(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.PointWeightMap
// Struct Size::0x0010
struct FPointWeightMap
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothParameterMask
// Struct Size::0x0030
struct FClothParameterMask
{
    FName                                         MaskName;                                                     // 0x0000(0x0008)
    enum class EWeightMapTargetCommon             CurrentTarget;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MaxValue;                                                     // 0x000C(0x0004)
    float                                         MinValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Values;                                                       // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ClothingSystemRuntimeNv.ClothConstraintSetupNv
// Struct Size::0x0010
struct FClothConstraintSetupNv
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  SessionMessages.SessionServiceLogUnsubscribe
// Struct Size::0x0001
struct FSessionServiceLogUnsubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLogSubscribe
// Struct Size::0x0001
struct FSessionServiceLogSubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLog
// Struct Size::0x0038
struct FSessionServiceLog
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FString                                       Data;                                                         // 0x0008(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0018(0x0010)
    double                                        TimeSeconds;                                                  // 0x0028(0x0008)
    char                                          Verbosity;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePong
// Struct Size::0x0090
struct FSessionServicePong
{
    bool                                          Authorized;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       BuildDate;                                                    // 0x0008(0x0010)
    FString                                       DeviceName;                                                   // 0x0018(0x0010)
    FGuid                                         InstanceId;                                                   // 0x0028(0x0010)
    FString                                       InstanceName;                                                 // 0x0038(0x0010)
    FString                                       PlatformName;                                                 // 0x0048(0x0010)
    FGuid                                         SessionId;                                                    // 0x0058(0x0010)
    FString                                       SessionName;                                                  // 0x0068(0x0010)
    FString                                       SessionOwner;                                                 // 0x0078(0x0010)
    bool                                          Standalone;                                                   // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePing
// Struct Size::0x0010
struct FSessionServicePing
{
    FString                                       userName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  InteractiveToolsFramework.BrushStampData
// Struct Size::0x00C0
struct FBrushStampData
{
    char                                          pa_0000[0x00C0]                                               // 0x0000(0x00C0)
};


// ScriptStruct  InteractiveToolsFramework.BehaviorInfo
// Struct Size::0x0020
struct FBehaviorInfo
{
    UInputBehavior*                               Behavior;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  InteractiveToolsFramework.InputRayHit
// Struct Size::0x0028
struct FInputRayHit
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  InteractiveToolsFramework.ActiveGizmo
// Struct Size::0x0030
struct FActiveGizmo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  InteractiveToolsFramework.GizmoFloatParameterChange
// Struct Size::0x0008
struct FGizmoFloatParameterChange
{
    float                                         InitialValue;                                                 // 0x0000(0x0004)
    float                                         CurrentValue;                                                 // 0x0004(0x0004)
};


// ScriptStruct  InteractiveToolsFramework.GizmoVec2ParameterChange
// Struct Size::0x0010
struct FGizmoVec2ParameterChange
{
    FVector2D                                     InitialValue;                                                 // 0x0000(0x0008)
    FVector2D                                     CurrentValue;                                                 // 0x0008(0x0008)
};


// ScriptStruct  NavigationSystem.NavCollisionBox
// Struct Size::0x0018
struct FNavCollisionBox
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    FVector                                       Extent;                                                       // 0x000C(0x000C)
};


// ScriptStruct  NavigationSystem.NavCollisionCylinder
// Struct Size::0x0014
struct FNavCollisionCylinder
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    float                                         Height;                                                       // 0x0010(0x0004)
};


// ScriptStruct  NavigationSystem.SupportedAreaData
// Struct Size::0x0020
struct FSupportedAreaData
{
    FString                                       AreaClassName;                                                // 0x0000(0x0010)
    int32_t                                       AreaID;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      AreaClass;                                                    // 0x0018(0x0008)
};


// ScriptStruct  NavigationSystem.NavGraphNode
// Struct Size::0x0018
struct FNavGraphNode
{
    UObject*                                      Owner;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  NavigationSystem.NavGraphEdge
// Struct Size::0x0018
struct FNavGraphEdge
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  NavigationSystem.NavigationFilterFlags
// Struct Size::0x0004
struct FNavigationFilterFlags
{
    char                                          bNavFlag0;                                                    // 0x0000(0x0001)
    char                                          bNavFlag1;                                                    // 0x0000(0x0001)
    char                                          bNavFlag2;                                                    // 0x0000(0x0001)
    char                                          bNavFlag3;                                                    // 0x0000(0x0001)
    char                                          bNavFlag4;                                                    // 0x0000(0x0001)
    char                                          bNavFlag5;                                                    // 0x0000(0x0001)
    char                                          bNavFlag6;                                                    // 0x0000(0x0001)
    char                                          bNavFlag7;                                                    // 0x0000(0x0001)
    char                                          bNavFlag8;                                                    // 0x0001(0x0001)
    char                                          bNavFlag9;                                                    // 0x0001(0x0001)
    char                                          bNavFlag10;                                                   // 0x0001(0x0001)
    char                                          bNavFlag11;                                                   // 0x0001(0x0001)
    char                                          bNavFlag12;                                                   // 0x0001(0x0001)
    char                                          bNavFlag13;                                                   // 0x0001(0x0001)
    char                                          bNavFlag14;                                                   // 0x0001(0x0001)
    char                                          bNavFlag15;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  NavigationSystem.NavigationFilterArea
// Struct Size::0x0018
struct FNavigationFilterArea
{
    UNavArea*                                     AreaClass;                                                    // 0x0000(0x0008)
    float                                         TravelCostOverride;                                           // 0x0008(0x0004)
    float                                         EnteringCostOverride;                                         // 0x000C(0x0004)
    char                                          bIsExcluded;                                                  // 0x0010(0x0001)
    char                                          bOverrideTravelCost;                                          // 0x0010(0x0001)
    char                                          bOverrideEnteringCost;                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  NavigationSystem.NavLinkCustomInstanceData
// Struct Size::0x0070
struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
{
    uint32_t                                      NavLinkUserId;                                                // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  NavigationSystem.NavMeshTileData
// Struct Size::0x0038
struct FNavMeshTileData
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  NavigationSystem.RecastNavMeshGenerationProperties
// Struct Size::0x0040
struct FRecastNavMeshGenerationProperties
{
    int32_t                                       TilePoolSize;                                                 // 0x0000(0x0004)
    float                                         TileSizeUU;                                                   // 0x0004(0x0004)
    float                                         CellSize;                                                     // 0x0008(0x0004)
    float                                         CellHeight;                                                   // 0x000C(0x0004)
    float                                         AgentRadius;                                                  // 0x0010(0x0004)
    float                                         AgentHeight;                                                  // 0x0014(0x0004)
    float                                         AgentMaxSlope;                                                // 0x0018(0x0004)
    float                                         AgentMaxStepHeight;                                           // 0x001C(0x0004)
    float                                         MinRegionArea;                                                // 0x0020(0x0004)
    float                                         MergeRegionSize;                                              // 0x0024(0x0004)
    float                                         MaxSimplificationError;                                       // 0x0028(0x0004)
    int32_t                                       TileNumberHardLimit;                                          // 0x002C(0x0004)
    enum class ERecastPartitioning                RegionPartitioning;                                           // 0x0030(0x0001)
    enum class ERecastPartitioning                LayerPartitioning;                                            // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       RegionChunkSplits;                                            // 0x0034(0x0004)
    int32_t                                       LayerChunkSplits;                                             // 0x0038(0x0004)
    char                                          bSortNavigationAreasByCost;                                   // 0x003C(0x0001)
    char                                          bPerformVoxelFiltering;                                       // 0x003C(0x0001)
    char                                          bMarkLowHeightAreas;                                          // 0x003C(0x0001)
    char                                          bUseExtraTopCellWhenMarkingAreas;                             // 0x003C(0x0001)
    char                                          bFilterLowSpanSequences;                                      // 0x003C(0x0001)
    char                                          bFilterLowSpanFromTileCache;                                  // 0x003C(0x0001)
    char                                          bFixedTilePoolSize;                                           // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  LISlua425.INTLLuaBPVar
// Struct Size::0x0020
struct FINTLLuaBPVar
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  ChaosSolverEngine.ChaosHandlerSet
// Struct Size::0x0058
struct FChaosHandlerSet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TSet<UObject*>                                ChaosHandlers;                                                // 0x0008(0x0050)
};


// ScriptStruct  ChaosSolverEngine.BreakEventCallbackWrapper
// Struct Size::0x0040
struct FBreakEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.ChaosDebugSubstepControl
// Struct Size::0x0003
struct FChaosDebugSubstepControl
{
    bool                                          bPause;                                                       // 0x0000(0x0001)
    bool                                          bSubstep;                                                     // 0x0001(0x0001)
    bool                                          bStep;                                                        // 0x0002(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventRequestSettings
// Struct Size::0x0018
struct FChaosBreakingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinRadius;                                                    // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinMass;                                                      // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosBreakingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventRequestSettings
// Struct Size::0x0018
struct FChaosCollisionEventRequestSettings
{
    int32_t                                       MaxNumberResults;                                             // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosCollisionSortMethod          SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventRequestSettings
// Struct Size::0x0018
struct FChaosTrailingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinAngularSpeed;                                              // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosTrailingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
// Struct Size::0x0018
struct FGeometryCollectionDebugDrawActorSelectedRigidBody
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    AChaosSolverActor*                            Solver;                                                       // 0x0008(0x0008)
    AGeometryCollectionActor*                     GeometryCollection;                                           // 0x0010(0x0008)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
// Struct Size::0x0001
struct FGeometryCollectionDebugDrawWarningMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSizeSpecificData
// Struct Size::0x0024
struct FGeometryCollectionSizeSpecificData
{
    float                                         MaxSize;                                                      // 0x0000(0x0004)
    enum class ECollisionTypeEnum                 CollisionType;                                                // 0x0004(0x0001)
    enum class EImplicitTypeEnum                  ImplicitType;                                                 // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    int32_t                                       MinLevelSetResolution;                                        // 0x0008(0x0004)
    int32_t                                       MaxLevelSetResolution;                                        // 0x000C(0x0004)
    int32_t                                       MinClusterLevelSetResolution;                                 // 0x0010(0x0004)
    int32_t                                       MaxClusterLevelSetResolution;                                 // 0x0014(0x0004)
    int32_t                                       CollisionObjectReductionPercentage;                           // 0x0018(0x0004)
    float                                         CollisionParticlesFraction;                                   // 0x001C(0x0004)
    int32_t                                       MaximumCollisionParticles;                                    // 0x0020(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSource
// Struct Size::0x0060
struct FGeometryCollectionSource
{
    FSoftObjectPath                               SourceGeometryObject;                                         // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    LocalTransform;                                               // 0x0020(0x0030)
    TArray<UMaterialInterface*>                   SourceMaterial;                                               // 0x0050(0x0010)
};


// ScriptStruct  RigVM.RigVMParameter
// Struct Size::0x0030
struct FRigVMParameter
{
    enum class ERigVMParameterType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
    int32_t                                       RegisterIndex;                                                // 0x000C(0x0004)
    FString                                       CPPType;                                                      // 0x0010(0x0010)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    FName                                         ScriptStructPath;                                             // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCode
// Struct Size::0x0030
struct FRigVMByteCode
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
    int32_t                                       NumInstructions;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FRigVMByteCodeEntry>                   Entries;                                                      // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCodeEntry
// Struct Size::0x000C
struct FRigVMByteCodeEntry
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       InstructionIndex;                                             // 0x0008(0x0004)
};


// ScriptStruct  RigVM.RigVMInstructionArray
// Struct Size::0x0010
struct FRigVMInstructionArray
{
    TArray<FRigVMInstruction>                     Instructions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMInstruction
// Struct Size::0x0010
struct FRigVMInstruction
{
    uint64_t                                      ByteCodeIndex;                                                // 0x0000(0x0008)
    enum class ERigVMOpCode                       OpCode;                                                       // 0x0008(0x0001)
    char                                          OperandAlignment;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  RigVM.RigVMBaseOp
// Struct Size::0x0001
struct FRigVMBaseOp
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  RigVM.RigVMUnaryOp
// Struct Size::0x0008
struct FRigVMUnaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMChangeTypeOp
// Struct Size::0x0010
struct FRigVMChangeTypeOp : public FRigVMUnaryOp
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMJumpIfOp
// Struct Size::0x0010
struct FRigVMJumpIfOp : public FRigVMUnaryOp
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMJumpOp
// Struct Size::0x0008
struct FRigVMJumpOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
};


// ScriptStruct  RigVM.RigVMComparisonOp
// Struct Size::0x0014
struct FRigVMComparisonOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  RigVM.RigVMCopyOp
// Struct Size::0x000E
struct FRigVMCopyOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000D]                                               // 0x0001(0x000D)
};


// ScriptStruct  RigVM.RigVMBinaryOp
// Struct Size::0x000E
struct FRigVMBinaryOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x000D]                                               // 0x0001(0x000D)
};


// ScriptStruct  RigVM.RigVMExecuteOp
// Struct Size::0x0004
struct FRigVMExecuteOp : public FRigVMBaseOp
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  RigVM.RigVMSlice
// Struct Size::0x000C
struct FRigVMSlice
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  RigVM.RigVMMemoryContainer
// Struct Size::0x00A0
struct FRigVMMemoryContainer
{
    bool                                          bUseNameMap;                                                  // 0x0000(0x0001)
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FRigVMRegister>                        Registers;                                                    // 0x0008(0x0010)
    TArray<FRigVMRegisterOffset>                  RegisterOffsets;                                              // 0x0018(0x0010)
    TArray<char>                                  Data;                                                         // 0x0028(0x0010)
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0038(0x0010)
    TMap<FName,int32_t>                           NameMap;                                                      // 0x0048(0x0050)
    bool                                          bEncounteredErrorDuringLoad;                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  RigVM.RigVMRegisterOffset
// Struct Size::0x0048
struct FRigVMRegisterOffset
{
    TArray<int32_t>                               Segments;                                                     // 0x0000(0x0010)
    enum class ERigVMRegisterType                 Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         CPPType;                                                      // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    UScriptStruct*                                ParentScriptStruct;                                           // 0x0028(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0030(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0034(0x0002)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    FString                                       CachedSegmentPath;                                            // 0x0038(0x0010)
};


// ScriptStruct  RigVM.RigVMRegister
// Struct Size::0x0024
struct FRigVMRegister
{
    enum class ERigVMRegisterType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ByteIndex;                                                    // 0x0004(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0008(0x0002)
    uint16_t                                      ElementCount;                                                 // 0x000A(0x0002)
    uint16_t                                      SliceCount;                                                   // 0x000C(0x0002)
    char                                          AlignmentBytes;                                               // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    uint16_t                                      TrailingBytes;                                                // 0x0010(0x0002)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    FName                                         Name;                                                         // 0x0014(0x0008)
    int32_t                                       ScriptStructIndex;                                            // 0x001C(0x0004)
    bool                                          bIsArray;                                                     // 0x0020(0x0001)
    bool                                          bIsDynamic;                                                   // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  RigVM.RigVMOperand
// Struct Size::0x0006
struct FRigVMOperand
{
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      RegisterIndex;                                                // 0x0002(0x0002)
    uint16_t                                      RegisterOffset;                                               // 0x0004(0x0002)
};


// ScriptStruct  RigVM.RigVMStatistics
// Struct Size::0x002C
struct FRigVMStatistics
{
    uint32_t                                      BytesForCDO;                                                  // 0x0000(0x0004)
    uint32_t                                      BytesPerInstance;                                             // 0x0004(0x0004)
    FRigVMMemoryStatistics                        LiteralMemory;                                                // 0x0008(0x000C)
    FRigVMMemoryStatistics                        WorkMemory;                                                   // 0x0014(0x000C)
    uint32_t                                      BytesForCaching;                                              // 0x0020(0x0004)
    FRigVMByteCodeStatistics                      ByteCode;                                                     // 0x0024(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCodeStatistics
// Struct Size::0x0008
struct FRigVMByteCodeStatistics
{
    uint32_t                                      InstructionCount;                                             // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
};


// ScriptStruct  RigVM.RigVMMemoryStatistics
// Struct Size::0x000C
struct FRigVMMemoryStatistics
{
    uint32_t                                      RegisterCount;                                                // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
    uint32_t                                      TotalBytes;                                                   // 0x0008(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderBoolValue
// Struct Size::0x0038
struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
{
    bool                                          DefaultValue;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AIModule.AIDataProviderFloatValue
// Struct Size::0x0038
struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
{
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderIntValue
// Struct Size::0x0038
struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
{
    int32_t                                       DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderStructValue
// Struct Size::0x0030
struct FAIDataProviderStructValue : public FAIDataProviderValue
{
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  AIModule.ActorPerceptionBlueprintInfo
// Struct Size::0x0020
struct FActorPerceptionBlueprintInfo
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    TArray<FAIStimulus>                           LastSensedStimuli;                                            // 0x0008(0x0010)
    char                                          bIsHostile;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.AISenseAffiliationFilter
// Struct Size::0x0004
struct FAISenseAffiliationFilter
{
    char                                          bDetectEnemies;                                               // 0x0000(0x0001)
    char                                          bDetectNeutrals;                                              // 0x0000(0x0001)
    char                                          bDetectFriendlies;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  AIModule.AIPredictionEvent
// Struct Size::0x0018
struct FAIPredictionEvent
{
    AActor*                                       Requestor;                                                    // 0x0000(0x0008)
    AActor*                                       PredictedActor;                                               // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AISightEvent
// Struct Size::0x0018
struct FAISightEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SeenActor;                                                    // 0x0008(0x0008)
    AActor*                                       Observer;                                                     // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AITeamStimulusEvent
// Struct Size::0x0038
struct FAITeamStimulusEvent
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    AActor*                                       Broadcaster;                                                  // 0x0028(0x0008)
    AActor*                                       Enemy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  AIModule.AITouchEvent
// Struct Size::0x0020
struct FAITouchEvent
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    AActor*                                       TouchReceiver;                                                // 0x0010(0x0008)
    AActor*                                       OtherActor;                                                   // 0x0018(0x0008)
};


// ScriptStruct  AIModule.IntervalCountdown
// Struct Size::0x0008
struct FIntervalCountdown
{
    float                                         Interval;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  AIModule.BehaviorTreeTemplateInfo
// Struct Size::0x0018
struct FBehaviorTreeTemplateInfo
{
    UBehaviorTree*                                Asset;                                                        // 0x0000(0x0008)
    UBTCompositeNode*                             Template;                                                     // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.BlackboardKeySelector
// Struct Size::0x0028
struct FBlackboardKeySelector
{
    TArray<UBlackboardKeyType*>                   AllowedTypes;                                                 // 0x0000(0x0010)
    FName                                         SelectedKeyName;                                              // 0x0010(0x0008)
    UBlackboardKeyType*                           SelectedKeyType;                                              // 0x0018(0x0008)
    char                                          SelectedKeyID;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bNoneIsAllowedValue;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AIModule.BlackboardEntry
// Struct Size::0x0020
struct FBlackboardEntry
{
    FName                                         EntryName;                                                    // 0x0000(0x0008)
    UBlackboardKeyType*                           KeyType;                                                      // 0x0008(0x0008)
    char                                          bInstanceSynced;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         Category;                                                     // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  AIModule.BTCompositeChild
// Struct Size::0x0030
struct FBTCompositeChild
{
    UBTCompositeNode*                             ChildComposite;                                               // 0x0000(0x0008)
    UBTTaskNode*                                  ChildTask;                                                    // 0x0008(0x0008)
    TArray<UBTDecorator*>                         Decorators;                                                   // 0x0010(0x0010)
    TArray<FBTDecoratorLogic>                     DecoratorOps;                                                 // 0x0020(0x0010)
};


// ScriptStruct  AIModule.BTDecoratorLogic
// Struct Size::0x0004
struct FBTDecoratorLogic
{
    enum class EBTDecoratorLogic                  Operation;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      Number;                                                       // 0x0002(0x0002)
};


// ScriptStruct  AIModule.CrowdAvoidanceSamplingPattern
// Struct Size::0x0020
struct FCrowdAvoidanceSamplingPattern
{
    TArray<float>                                 Angles;                                                       // 0x0000(0x0010)
    TArray<float>                                 Radii;                                                        // 0x0010(0x0010)
};


// ScriptStruct  AIModule.CrowdAvoidanceConfig
// Struct Size::0x001C
struct FCrowdAvoidanceConfig
{
    float                                         VelocityBias;                                                 // 0x0000(0x0004)
    float                                         DesiredVelocityWeight;                                        // 0x0004(0x0004)
    float                                         CurrentVelocityWeight;                                        // 0x0008(0x0004)
    float                                         SideBiasWeight;                                               // 0x000C(0x0004)
    float                                         ImpactTimeWeight;                                             // 0x0010(0x0004)
    float                                         ImpactTimeRange;                                              // 0x0014(0x0004)
    char                                          CustomPatternIdx;                                             // 0x0018(0x0001)
    char                                          AdaptiveDivisions;                                            // 0x0019(0x0001)
    char                                          AdaptiveRings;                                                // 0x001A(0x0001)
    char                                          AdaptiveDepth;                                                // 0x001B(0x0001)
};


// ScriptStruct  AIModule.EnvQueryInstanceCache
// Struct Size::0x0178
struct FEnvQueryInstanceCache
{
    UEnvQuery*                                    Template;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0170]                                               // 0x0008(0x0170)
};


// ScriptStruct  AIModule.EnvQueryRequest
// Struct Size::0x0068
struct FEnvQueryRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    UWorld*                                       World;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0050]                                               // 0x0018(0x0050)
};


// ScriptStruct  AIModule.EQSParametrizedQueryExecutionRequest
// Struct Size::0x0048
struct FEQSParametrizedQueryExecutionRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    TArray<FAIDynamicParam>                       QueryConfig;                                                  // 0x0008(0x0010)
    FBlackboardKeySelector                        EQSQueryBlackboardKey;                                        // 0x0018(0x0028)
    enum class EEnvQueryRunMode                   RunMode;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    char                                          bUseBBKeyForQueryTemplate;                                    // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  AIModule.AIDynamicParam
// Struct Size::0x0038
struct FAIDynamicParam
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
    FBlackboardKeySelector                        BBKey;                                                        // 0x0010(0x0028)
};


// ScriptStruct  AIModule.EnvQueryResult
// Struct Size::0x0040
struct FEnvQueryResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UEnvQueryItemType*                            ItemType;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0014]                                               // 0x0018(0x0014)
    int32_t                                       OptionIndex;                                                  // 0x002C(0x0004)
    int32_t                                       QueryID;                                                      // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  AIModule.EnvOverlapData
// Struct Size::0x0020
struct FEnvOverlapData
{
    float                                         ExtentX;                                                      // 0x0000(0x0004)
    float                                         ExtentY;                                                      // 0x0004(0x0004)
    float                                         ExtentZ;                                                      // 0x0008(0x0004)
    FVector                                       ShapeOffset;                                                  // 0x000C(0x000C)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0018(0x0001)
    enum class EEnvOverlapShape                   OverlapShape;                                                 // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOnlyBlockingHits;                                            // 0x001C(0x0001)
    char                                          bOverlapComplex;                                              // 0x001C(0x0001)
    char                                          bSkipOverlapQuerier;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AIModule.EnvTraceData
// Struct Size::0x0030
struct FEnvTraceData
{
    int32_t                                       VersionNum;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UNavigationQueryFilter*                       NavigationFilter;                                             // 0x0008(0x0008)
    float                                         ProjectDown;                                                  // 0x0010(0x0004)
    float                                         ProjectUp;                                                    // 0x0014(0x0004)
    float                                         ExtentX;                                                      // 0x0018(0x0004)
    float                                         ExtentY;                                                      // 0x001C(0x0004)
    float                                         ExtentZ;                                                      // 0x0020(0x0004)
    float                                         PostProjectionVerticalOffset;                                 // 0x0024(0x0004)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0028(0x0001)
    enum class ECollisionChannel                  SerializedChannel;                                            // 0x0029(0x0001)
    enum class EEnvTraceShape                     TraceShape;                                                   // 0x002A(0x0001)
    enum class EEnvQueryTrace                     TraceMode;                                                    // 0x002B(0x0001)
    char                                          bTraceComplex;                                                // 0x002C(0x0001)
    char                                          bOnlyBlockingHits;                                            // 0x002C(0x0001)
    char                                          bCanTraceOnNavMesh;                                           // 0x002C(0x0001)
    char                                          bCanTraceOnGeometry;                                          // 0x002C(0x0001)
    char                                          bCanDisableTrace;                                             // 0x002C(0x0001)
    char                                          bCanProjectDown;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AIModule.EnvDirection
// Struct Size::0x0020
struct FEnvDirection
{
    UEnvQueryContext*                             LineFrom;                                                     // 0x0000(0x0008)
    UEnvQueryContext*                             LineTo;                                                       // 0x0008(0x0008)
    UEnvQueryContext*                             Rotation;                                                     // 0x0010(0x0008)
    enum class EEnvDirection                      DirMode;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.EnvNamedValue
// Struct Size::0x0010
struct FEnvNamedValue
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  AIModule.GenericTeamId
// Struct Size::0x0001
struct FGenericTeamId
{
    char                                          TeamID;                                                       // 0x0000(0x0001)
};


// ScriptStruct  AIModule.PawnActionStack
// Struct Size::0x0008
struct FPawnActionStack
{
    UPawnAction*                                  TopAction;                                                    // 0x0000(0x0008)
};


// ScriptStruct  AIModule.PawnActionEvent
// Struct Size::0x0018
struct FPawnActionEvent
{
    UPawnAction*                                  Action;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  UnLua.PropertyCollector
// Struct Size::0x0001
struct FPropertyCollector
{
    FVector2D                                     None;                                                         // 0x0000(0x0008)
    FNewTraceableActorInfo                        None;                                                         // 0x0000(0x0060)
    FSGGridOccupyInfo                             None;                                                         // 0x0000(0x0018)
    AActor*                                       None;                                                         // 0x0000(0x0008)
    FSlateColor                                   None;                                                         // 0x0000(0x0028)
    FQuestReplicateData                           None;                                                         // 0x0000(0x0028)
    FMFMissionFlowReplicateData                   None;                                                         // 0x0000(0x0020)
    ASGInventory*                                 None;                                                         // 0x0000(0x0008)
    FTeamPlayerOrderInfo                          None;                                                         // 0x0000(0x0020)
    FTraceableActorInfo                           None;                                                         // 0x0000(0x0058)
    int32_t                                       None;                                                         // 0x0000(0x0004)
    FSGAvatarData                                 None;                                                         // 0x0000(0x0020)
    FInputAxisKeyMapping                          None;                                                         // 0x0000(0x0028)
    FInputActionKeyMapping                        None;                                                         // 0x0000(0x0028)
    USGPlayerItemInfoBase*                        None;                                                         // 0x0000(0x0008)
    FString                                       None;                                                         // 0x0000(0x0010)
};


// UserDefinedStruct  Engine.Default
// Struct Size::0x0000
struct FDefault
{
};


// AISenseBlueprintListener  AIModule.Default
// Struct Size::0x0000
struct FDefault
{
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0049
struct FStruct
{
    FString                                       ThrowableWeaponName;                                          // 0x0000(0x0010)
    float                                         ShowUIDistance;                                               // 0x0010(0x0004)
    float                                         WarningDistance;                                              // 0x0014(0x0004)
    UPaperSprite*                                 IconNormal;                                                   // 0x0018(0x0008)
    UPaperSprite*                                 IconWarning;                                                  // 0x0020(0x0008)
    bool                                          NeedShowUI;                                                   // 0x0028(0x0001)
    bool                                          NeedWarning;                                                  // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FLinearColor                                  ArrowWaringColor;                                             // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    UCurveFloat*                                  ShinningCurve;                                                // 0x0040(0x0008)
    bool                                          NeedShinning;                                                 // 0x0048(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0018
struct FStruct
{
    float                                         MinValue;                                                     // 0x0000(0x0004)
    float                                         MaxValue;                                                     // 0x0004(0x0004)
    FLinearColor                                  CustomColor;                                                  // 0x0008(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0050
struct FStruct
{
    TMap<int64_t,int32_t>                         Equipment;                                                    // 0x0000(0x0050)
};


// UserDefinedStruct  AreaRecInfo.AreaRecInfo
// Struct Size::0x0040
struct FAreaRecInfo
{
    int32_t                                       UID;                                                          // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FVector4                                      RecPos;                                                       // 0x0010(0x0010)
    enum class AreaRecType                        AreaRecType;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       MaxPlayer;                                                    // 0x0024(0x0004)
    int32_t                                       CurrentPlayer;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<TSoftObjectPtr<AActor>>                SpawnPoint;                                                   // 0x0030(0x0010)
};


// UserDefinedStruct  BPC.Struct
// Struct Size::0x0008
struct FStruct
{
    UAkAudioEvent*                                AkEvent;                                                      // 0x0000(0x0008)
};


// UserDefinedStruct  SpawnAreaVolume.PathNodeGroupInfo
// Struct Size::0x0028
struct FPathNodeGroupInfo
{
    TArray<ASGAIPathNode*>                        PathNodes;                                                    // 0x0000(0x0010)
    TArray<ASGAISpawnPoint*>                      ScavSpawnPoints;                                              // 0x0010(0x0010)
    AVolume*                                      BattleVolumes;                                                // 0x0020(0x0008)
};


// UserDefinedStruct  SpawnAreaVolume.WANDInfoForPathNodeGroup
// Struct Size::0x0020
struct FWANDInfoForPathNodeGroup
{
    ASGAICharacter*                               ScavPawn;                                                     // 0x0000(0x0008)
    FString                                       AreaName;                                                     // 0x0008(0x0010)
    ASGAIPathNode*                                CurrentPathNode;                                              // 0x0018(0x0008)
};


// UserDefinedStruct  SpawnAreaVolume.Struc
// Struct Size::0x0010
struct FStruc
{
    TArray<ASGAIPathNode*>                        FreePathPoints;                                               // 0x0000(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0050
struct FStruct
{
    TSet<AActor*>                                 Actors;                                                       // 0x0000(0x0050)
};


// UserDefinedStruct  BPC.Struct
// Struct Size::0x001C
struct FStruct
{
    float                                         HeadEndurance;                                                // 0x0000(0x0004)
    float                                         ChestEndurance;                                               // 0x0004(0x0004)
    float                                         StomachEndurance;                                             // 0x0008(0x0004)
    float                                         LeftArmEndurance;                                             // 0x000C(0x0004)
    float                                         RightArmEndurance;                                            // 0x0010(0x0004)
    float                                         LeftLegEndurance;                                             // 0x0014(0x0004)
    float                                         RightLegEndurance;                                            // 0x0018(0x0004)
};


// UserDefinedStruct  BPC.Struct
// Struct Size::0x002C
struct FStruct
{
    TSoftObjectPtr<UAkAudioEvent>                 AkEvent;                                                      // 0x0000(0x0028)
    int32_t                                       EventCounter;                                                 // 0x0028(0x0004)
};


// UserDefinedStruct  F.F
// Struct Size::0x0010
struct FF
{
    float                                         TimeCode;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UNPCAIGroupBaseRequest*                       Item;                                                         // 0x0008(0x0008)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    FName                                         AIID;                                                         // 0x0000(0x0008)
    int32_t                                       EquipID;                                                      // 0x0008(0x0004)
    int32_t                                       Count;                                                        // 0x000C(0x0004)
};


// UserDefinedStruct  SpawnAreaVolume.Struct
// Struct Size::0x0014
struct FStruct
{
    float                                         Probability;                                                  // 0x0000(0x0004)
    int32_t                                       MinCount;                                                     // 0x0004(0x0004)
    int32_t                                       MaxCount;                                                     // 0x0008(0x0004)
    float                                         MinInterval;                                                  // 0x000C(0x0004)
    float                                         MaxInterval;                                                  // 0x0010(0x0004)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0064
struct FStruct
{
    ACharacter*                                   DefaultTarget;                                                // 0x0000(0x0008)
    TSet<int32_t>                                 Warzone;                                                      // 0x0008(0x0050)
    ASGInventory*                                 DeathBox;                                                     // 0x0058(0x0008)
    float                                         DeathTime;                                                    // 0x0060(0x0004)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x006D
struct FStruct
{
    float                                         Offset;                                                       // 0x0000(0x0004)
    float                                         Offset;                                                       // 0x0004(0x0004)
    float                                         Lock;                                                         // 0x0008(0x0004)
    float                                         Lock;                                                         // 0x000C(0x0004)
    TSet<enum class ENPCAIDecision>               HighValue;                                                    // 0x0010(0x0050)
    enum class ENPCAIDecision                     MustDo;                                                       // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         AllyDead;                                                     // 0x0064(0x0004)
    float                                         AllyDead;                                                     // 0x0068(0x0004)
    enum class ENPCAIDecision                     AllyDead;                                                     // 0x006C(0x0001)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    TArray<bool>                                  Member;                                                       // 0x0000(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    TArray<ASGCharacter*>                         Member;                                                       // 0x0000(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    TArray<FStruct>                               Member;                                                       // 0x0000(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0008
struct FStruct
{
    int32_t                                       Count;                                                        // 0x0000(0x0004)
    float                                         Weight;                                                       // 0x0004(0x0004)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0010
struct FStruct
{
    TArray<FStruct>                               SquadRnfNRtrtInfos;                                           // 0x0000(0x0010)
};


// UserDefinedStruct  H.SelfSoundVisualItem
// Struct Size::0x0008
struct FSelfSoundVisualItem
{
    float                                         SoundLevel;                                                   // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
};


// UserDefinedStruct  F.F
// Struct Size::0x0030
struct FF
{
    int32_t                                       GroupIndex;                                                   // 0x0000(0x0004)
    enum class E                                  PointType;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<ASGPlayerStart*>                       StartPoints;                                                  // 0x0008(0x0010)
    int32_t                                       TeamIndex;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<ASGPlayerStart*>                       UsedStartPoints;                                              // 0x0020(0x0010)
};


// UserDefinedStruct  Struct.Struct
// Struct Size::0x0030
struct FStruct
{
    AActor*                                       Initiator;                                                    // 0x0000(0x0008)
    AActor*                                       Subordinate;                                                  // 0x0008(0x0008)
    AActor*                                       Victim;                                                       // 0x0010(0x0008)
    enum class ENPCAIDecision                     QuestDecision;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         StaringTime;                                                  // 0x001C(0x0004)
    float                                         EffectiveTime;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UWildCardArgs*                                Args;                                                         // 0x0028(0x0008)
};


